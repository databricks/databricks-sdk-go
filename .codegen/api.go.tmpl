// Code generated from OpenAPI specs by Databricks SDK Generator. DO NOT EDIT.

// {{if .Description}}{{.Description}}{{else}}These APIs allow you to manage {{range .Services}}{{.TitleName}}, {{end}}etc.{{end}}
package {{.Name}}

import (
	"context"
	"fmt"
	"time"
	"github.com/databricks/databricks-sdk-go/retries"
	"github.com/databricks/databricks-sdk-go/client"
	"github.com/databricks/databricks-sdk-go/useragent"
)
{{range .Services}}
func New{{.PascalName}}(client *client.DatabricksClient) *{{.PascalName}}API {
	return &{{.PascalName}}API{
		impl: &{{.CamelName}}Impl{
			client: client,
		},
	}
}

{{.Comment "// " 80}}
type {{.PascalName}}API struct {
	// impl contains low-level REST API interface, that could be overridden 
	// through WithImpl({{.PascalName}}Service)
	impl {{.PascalName}}Service
}

// WithImpl could be used to override low-level API implementations for unit 
// testing purposes with [github.com/golang/mock] or other mocking frameworks.
func (a *{{.PascalName}}API) WithImpl(impl {{.PascalName}}Service) *{{.PascalName}}API {
	a.impl = impl
	return a
}

// Impl returns low-level {{.PascalName}} API implementation
func (a *{{.PascalName}}API) Impl() {{.PascalName}}Service {
	return a.impl
}

{{range .Waits}}
// {{.PascalName}} repeatedly calls [{{.Method.Service.Name}}API.{{.Poll.PascalName}}] and waits to reach {{range $i, $e := .Success}}{{if $i}} or {{end}}{{.Content}}{{end}} state
func (a *{{.Method.Service.PascalName}}API) {{.PascalName}}(ctx context.Context{{range .Binding}}, {{.PollField.CamelName}} {{template "type" .PollField.Entity}}{{end}},
	timeout time.Duration, callback func(*{{.Poll.Response.PascalName}})) (*{{.Poll.Response.PascalName}}, error) {
	ctx = useragent.InContext(ctx, "sdk-feature", "long-running")
	return retries.Poll[{{.Poll.Response.PascalName}}](ctx, timeout, func() (*{{.Poll.Response.PascalName}}, *retries.Err) {
		{{.Poll.Response.CamelName}}, err := a.{{.Poll.PascalName}}(ctx, {{.Poll.Request.PascalName}}{ {{range .Binding}}
			{{.PollField.PascalName}}: {{.PollField.CamelName}},{{end}}
		})
		if err != nil {
			return nil, retries.Halt(err)
		}
		if callback != nil {
			callback({{.Poll.Response.CamelName}})
		}
		status := {{.Poll.Response.CamelName}}{{range .StatusPath}}.{{.PascalName}}{{end}}
		{{if .MessagePath -}}
		{{if .ComplexMessagePath -}}
		statusMessage := fmt.Sprintf("current status: %s", status)
		if ({{.Poll.Response.CamelName}}.{{.MessagePathHead.PascalName}} != nil) {
			statusMessage = {{.Poll.Response.CamelName}}{{range .MessagePath}}.{{.PascalName}}{{end}}
		}
		{{- else -}}
		statusMessage := {{.Poll.Response.CamelName}}{{range .MessagePath}}.{{.PascalName}}{{end}}
		{{- end}}
		{{- else -}}
		statusMessage := fmt.Sprintf("current status: %s", status)
		{{- end}}
		switch status {
		case {{range $i, $e := .Success}}{{if $i}}, {{end}}{{$e.Entity.PascalName}}{{$e.PascalName}}{{end}}: // target state
			return {{.Poll.Response.CamelName}}, nil
		{{if .Failure}}case {{range $i, $e := .Failure}}{{if $i}}, {{end}}{{$e.Entity.PascalName}}{{$e.PascalName}}{{end}}:
			err := fmt.Errorf("failed to reach {{range $i, $e := .Success}}{{if $i}} or {{end}}%s{{end}}, got %s: %s",
				{{range $i, $e := .Success}}{{if $i}}, {{end}}{{$e.Entity.PascalName}}{{$e.PascalName}}{{end}}, status, statusMessage)
			return nil, retries.Halt(err)
		{{end}}default:
			return nil, retries.Continues(statusMessage)
		}
	})
}

// {{.PascalName}} is a wrapper that calls [{{.Method.Service.Name}}API.{{.PascalName}}] and waits to reach {{range $i, $e := .Success}}{{if $i}} or {{end}}{{.Content}}{{end}} state.
type {{.PascalName}}[R any] struct {
	Response *R{{range .Binding}}
	{{.PollField.PascalName}} {{template "type" .PollField.Entity}} `json:"{{.PollField.Name}}"`{{end}}
	poll     func(time.Duration, func(*{{.Poll.Response.PascalName}})) (*{{.Poll.Response.PascalName}}, error)
	callback func(*{{.Poll.Response.PascalName}})
	timeout  time.Duration
}

// OnProgress invokes a callback every time it polls for the status update.
func (w *{{.PascalName}}[R]) OnProgress(callback func(*{{.Poll.Response.PascalName}})) *{{.PascalName}}[R] {
	w.callback = callback
	return w
}

// Get the {{.Poll.Response.PascalName}} with the default timeout of {{.Timeout}} minutes.
func (w *{{.PascalName}}[R]) Get() (*{{.Poll.Response.PascalName}}, error) {
	return w.poll(w.timeout, w.callback)
}

// Get the {{.Poll.Response.PascalName}} with custom timeout.
func (w *{{.PascalName}}[R]) GetWithTimeout(timeout time.Duration) (*{{.Poll.Response.PascalName}}, error) {
	return w.poll(timeout, w.callback)
}
{{end}}

{{range .Methods}}
{{- $hasWaiter := and .Wait (and (not .IsCrudRead) (not (eq .SnakeName "get_run"))) -}}
{{if not .Pagination}}{{.Comment "// " 80}}
func (a *{{.Service.PascalName}}API) {{.PascalName}}(ctx context.Context{{if .Request}}, {{if $hasWaiter}}{{.Request.CamelName}}{{else}}request{{end}} {{.Request.PascalName}}{{end}}) {{if $hasWaiter}}(*{{.Wait.PascalName}}{{with .Response}}[{{.PascalName}}]{{else}}[any]{{end}}, error){{else}}{{if .Response}}({{if .Response.ArrayValue}}[]{{.Response.ArrayValue.PascalName}}{{else}}*{{template "type" .Response}}{{end}}, error){{else}}error{{end}}{{end}} {
	{{if $hasWaiter -}}
	{{if .Response}}{{.Response.CamelName}}, {{end}}err := a.impl.{{.PascalName}}(ctx{{if .Request}}, {{.Request.CamelName}}{{end}})
	if err != nil {
		return nil, err
	}
	return &{{.Wait.PascalName}}{{with .Response}}[{{.PascalName}}]{{else}}[any]{{end}}{
		{{with .Response}}Response: {{.CamelName}},
		{{- end}}{{range .Wait.Binding}}
		{{.PollField.PascalName}}: {{.Bind.Of.CamelName}}.{{.Bind.PascalName}},{{end}}
		poll: func(timeout time.Duration, callback func(*{{.Wait.Poll.Response.PascalName}})) (*{{.Wait.Poll.Response.PascalName}}, error) {
			return a.{{.Wait.PascalName}}(ctx{{range .Wait.Binding}}, {{.Bind.Of.CamelName}}.{{.Bind.PascalName}}{{end}}, timeout, callback)
		},
		timeout: {{.Wait.Timeout}}*time.Minute,
		callback: nil,
	}, nil
	{{- else -}}
	return a.impl.{{.PascalName}}(ctx{{if .Request}}, request{{end}})
	{{- end}}
}
{{end}}

{{if $hasWaiter}}
// Calls [{{.Service.Name}}API.{{.PascalName}}] and waits to reach {{range $i, $e := .Wait.Success}}{{if $i}} or {{end}}{{.Content}}{{end}} state
// 
// You can override the default timeout of {{.Wait.Timeout}} minutes by calling adding 
// retries.Timeout[{{.Wait.Poll.Response.PascalName}}](60*time.Minute) functional option.
//
// Deprecated: use [{{.Service.Name}}API.{{.PascalName}}].Get() or [{{.Service.Name}}API.{{.Wait.PascalName}}]
func (a *{{.Service.Name}}API) {{.PascalName}}AndWait(ctx context.Context{{if .Request}}, {{.Request.CamelName}} {{.Request.PascalName}}{{end}}, options ...retries.Option[{{.Wait.Poll.Response.PascalName}}]) (*{{.Wait.Poll.Response.PascalName}}, error) {
	wait, err := a.{{.PascalName}}(ctx{{if .Request}}, {{.Request.CamelName}}{{end}})
	if err != nil {
		return nil, err
	}
	tmp := &retries.Info[{{.Wait.Poll.Response.PascalName}}]{Timeout: {{.Wait.Timeout}}*time.Minute}
	for _, o := range options {
		o(tmp)
	}
	wait.timeout = tmp.Timeout
	wait.callback = func(info *{{.Wait.Poll.Response.PascalName}}) {
		for _, o := range options {
			o(&retries.Info[{{.Wait.Poll.Response.PascalName}}]{
				Info: info,
				Timeout: wait.timeout,
			})
		}
	}
	return wait.Get()
}
{{end}}{{if .Pagination}}
{{.Comment "// " 80}}
// 
// This method is generated by Databricks SDK Code Generator.
func (a *{{.Service.Name}}API) {{.PascalName}}All(ctx context.Context{{if .Request}}, request {{.Request.PascalName}}{{end}}) ([]{{.Pagination.Entity.PascalName}}, error) {
	{{if .Pagination.MultiRequest}}var results []{{.Pagination.Entity.PascalName}}
	{{ if .Pagination.Limit -}}
	var totalCount {{template "type" .Pagination.Limit.Entity}} = 0
	{{ end -}}
	ctx = useragent.InContext(ctx, "sdk-feature", "pagination")
	{{if .NeedsOffsetDedupe -}}
	// deduplicate items that may have been added during iteration
	seen := map[{{template "type" .IdentifierField.Entity}}]bool{}
	{{end}}{{if eq .Pagination.Increment 1 -}}
	request.{{.Pagination.Offset.PascalName}} = 1 // start iterating from the first page
	{{end}}for {
		response, err := a.impl.{{.PascalName}}(ctx{{if .Request}}, request{{end}})
		if err != nil {
			return nil, err
		}
		if len(response.{{.Pagination.Results.PascalName}}) == 0 {
			break
		}
		for _, v := range response.{{.Pagination.Results.PascalName}} {
			{{- if .NeedsOffsetDedupe -}}
			id := v{{ template "field-path" .IdFieldPath }}
			if seen[id] {
				// item was added during iteration
				continue
			}
			seen[id] = true
			{{- end}}
			results = append(results, v)
		}
		{{ if and .Pagination.Token .Pagination.Limit -}}
			count := {{template "type" .Pagination.Limit.Entity}}(len(response.{{.Pagination.Results.PascalName}}))
			totalCount += count
		{{ else if .Pagination.Offset -}}
			count := {{template "type" .Pagination.Offset.Entity}}(len(response.{{.Pagination.Results.PascalName}}))
			totalCount += count
		{{ end -}}
		{{if eq .Path "/api/2.0/clusters/events" -}}
		if response.NextPage == nil {
			break
		}
		request = *response.NextPage
		{{- else if .Pagination.Token -}}
		request.{{.Pagination.Token.PollField.PascalName}} = response.{{.Pagination.Token.Bind.PascalName}}
		if response.{{.Pagination.Token.Bind.PascalName}} == "" {
			break
		}
		{{- else if eq .Pagination.Increment 1 -}}
		request.{{.Pagination.Offset.PascalName}}++
		{{- else -}}
		request.{{.Pagination.Offset.PascalName}} += {{template "type" .Pagination.Offset.Entity}}(len(response.{{.Pagination.Results.PascalName}}))
		{{- end}}
		{{ if .Pagination.Limit -}}
		limit := request.{{.Pagination.Limit.PascalName}}
		if limit > 0 && totalCount >= limit {
			break
		}
		{{- end -}}
	}
	return results, nil{{else if .Pagination.Results}}response, err := a.impl.{{.PascalName}}(ctx{{if .Request}}, request{{end}})
	if err != nil {
		return nil, err
	}
	return response.{{.Pagination.Results.PascalName}}, nil{{else}}return a.impl.{{.PascalName}}(ctx, request){{end}}
}
{{end}}{{if .NamedIdMap}}
// {{.NamedIdMap.PascalName}} calls [{{.Service.Name}}API.{{.PascalName}}{{if not .NamedIdMap.Direct}}All{{end -}}] and creates a map of results with [{{.NamedIdMap.Entity.PascalName}}]{{ template "field-path" .NamedIdMap.NamePath }} as key and [{{.NamedIdMap.Entity.PascalName}}]{{ template "field-path" .NamedIdMap.IdPath}} as value.
//
// Returns an error if there's more than one [{{.NamedIdMap.Entity.PascalName}}] with the same {{ template "field-path" .NamedIdMap.NamePath }}.
//
// Note: All [{{.NamedIdMap.Entity.PascalName}}] instances are loaded into memory before creating a map.
// 
// This method is generated by Databricks SDK Code Generator.
func (a *{{.Service.Name}}API) {{.NamedIdMap.PascalName}}(ctx context.Context{{if .Request}}, request {{.Request.PascalName}}{{end}}) (map[string]{{template "type" .NamedIdMap.Id.Entity}}, error) {
	ctx = useragent.InContext(ctx, "sdk-feature", "name-to-id")
	mapping := map[string]{{template "type" .NamedIdMap.Id.Entity}}{}
	result, err := a.{{.PascalName}}{{if not .NamedIdMap.Direct}}All{{end}}(ctx{{if .Request}}, request{{end}})
	if err != nil {
		return nil, err
	}
	for _, v := range result {
		key := v{{ template "field-path" .NamedIdMap.NamePath }}
		_, duplicate := mapping[key]
		if duplicate {
			return nil, fmt.Errorf("duplicate {{ template "field-path" .NamedIdMap.NamePath }}: %s", key)
		}
		mapping[key] = v{{ template "field-path" .NamedIdMap.IdPath }}
	}
	return mapping, nil
}
{{end}}{{if .GetByName}}
// GetBy{{range .NamedIdMap.NamePath}}{{.PascalName}}{{end}} calls [{{.Service.Name}}API.{{.NamedIdMap.Entity.PascalName}}{{range .NamedIdMap.NamePath}}{{.PascalName}}{{end}}To{{.NamedIdMap.Id.PascalName}}Map] and returns a single [{{.GetByName.PascalName}}].
//
// Returns an error if there's more than one [{{.NamedIdMap.Entity.PascalName}}] with the same {{ template "field-path" .NamedIdMap.NamePath }}.
//
// Note: All [{{.NamedIdMap.Entity.PascalName}}] instances are loaded into memory before returning matching by name.
// 
// This method is generated by Databricks SDK Code Generator.
func (a *{{.Service.Name}}API) GetBy{{range .NamedIdMap.NamePath}}{{.PascalName}}{{end}}(ctx context.Context, name string) (*{{template "type" .GetByName}}, error) {
	ctx = useragent.InContext(ctx, "sdk-feature", "get-by-name")
	result, err := a.{{.PascalName}}{{if not .NamedIdMap.Direct}}All{{end}}(ctx{{if .Request}}, {{.Request.PascalName}}{}{{end}})
	if err != nil {
		return nil, err
	}
	tmp := map[string][]{{.GetByName.PascalName}}{}
	for _, v := range result {
		key := v{{ template "field-path" .NamedIdMap.NamePath }}
		tmp[key] = append(tmp[key], v)
	}
	alternatives, ok := tmp[name]
	if !ok || len(alternatives) == 0 {
		return nil, fmt.Errorf("{{.GetByName.PascalName}} named '%s' does not exist", name)
	}
	if len(alternatives) > 1 {
		return nil, fmt.Errorf("there are %d instances of {{.GetByName.PascalName}} named '%s'", len(alternatives), name)
	}
	return &alternatives[0], nil
}
{{end}}{{if .Shortcut}}
{{.Comment "// " 80}}
func (a *{{.Service.Name}}API) {{.Shortcut.PascalName}}(ctx context.Context{{range .Shortcut.Params}}, {{.CamelName}} {{template "type" .Entity}}{{end}}) {{if .Response}}({{if .Response.ArrayValue}}[]{{.Response.ArrayValue.PascalName}}{{else}}*{{template "type" .Response}}{{end}}, error){{else}}error{{end}} {
	return a.impl.{{.PascalName}}(ctx, {{.Request.PascalName}}{
		{{- range .Shortcut.Params}}
		{{.PascalName}}: {{.CamelName}},{{end}}
	})
}
{{end}}{{if and .Shortcut $hasWaiter}}
func (a *{{.Service.Name}}API) {{.Shortcut.PascalName}}AndWait(ctx context.Context{{range .Shortcut.Params}}, {{.CamelName}} {{template "type" .Entity}}{{end}}, options ...retries.Option[{{.Wait.Poll.Response.PascalName}}]) (*{{.Wait.Poll.Response.PascalName}}, error) {
	return a.{{.PascalName}}AndWait(ctx, {{.Request.PascalName}}{
		{{- range .Shortcut.Params}}
		{{.PascalName}}: {{.CamelName}},{{end}}
	}, options...)
}
{{end}}
{{end -}}

{{- end}}
{{- define "field-path" -}}
	{{- range .}}.{{.PascalName}}{{end}}
{{- end -}}