// Code generated from OpenAPI specs by Databricks SDK Generator. DO NOT EDIT.

package mocks

import (
	"fmt"
	"github.com/databricks/databricks-sdk-go"
	{{range .Packages}}
	"github.com/databricks/databricks-sdk-go/experimental/mocks/service/{{.Name}}"{{end}}
)

type MockAccountClient struct {
	AccountClient *databricks.AccountClient
}

// NewMockAccountClient creates new mocked version of Databricks SDK client for Accounts
// which can be used for testing.
func NewMockAccountClient(t interface {
	mock.TestingT
	Cleanup(func())
}) (*MockAccountClient) {
	cli := &MockAccountClient {
		AccountClient: &databricks.AccountClient{
			Config: nil,
			{{range .Services}}{{if and .IsAccounts (not .HasParent) (not .IsDataPlane)}}
			{{(.TrimPrefix "account").PascalName}}: {{ template "mock-interface-constructor" . }}(t),
			{{- end}}{{end}}
		},
	}
	{{range .ServicesSortedByParent}} {{if and .IsAccounts (not .IsDataPlane)}}
	{{if  .HasSubservices}}
	mock{{.PascalName}}API := cli.GetMock{{.PascalName}}API()
	{{end}}
	{{if .HasParent}}
	mock{{.PascalName}} := {{ template "mock-interface-constructor" . }}(t)
	mock{{.ParentService.PascalName}}API.On("{{.PascalName}}").Return(mock{{.PascalName}}).Maybe()
	{{end}}
	{{end}}
	{{end}}
	return cli
}

{{range .Services}}{{if and (.IsAccounts) (.HasParent) (not .IsDataPlane)}}
func(m *MockAccountClient) GetMock{{.PascalName}}API() *{{ template "mock-interface-name" . }} {
	api, ok := m.GetMock{{.ParentService.PascalName}}API().{{.PascalName}}().(*{{ template "mock-interface-name" . }})
	if !ok {
		panic(fmt.Sprintf("expected {{.PascalName}} to be *{{ template "mock-interface-name" . }}, actual was %T", m.GetMock{{.ParentService.Name}}API().{{.PascalName}}()))
	}
	return api
}
{{end}}{{end}}

{{range .Services}}{{if and .IsAccounts (not .HasParent) (not .IsDataPlane)}}
func(m *MockAccountClient) GetMock{{.Name}}API() *{{ template "mock-interface-name" . }} {
	api, ok := m.AccountClient.{{(.TrimPrefix "account").PascalName}}.(*{{ template "mock-interface-name" . }})
	if !ok {
		panic(fmt.Sprintf("expected {{(.TrimPrefix "account").PascalName}} to be *{{ template "mock-interface-name" . }}, actual was %T", m.AccountClient.{{(.TrimPrefix "account").PascalName}}))
	}
	return api
}

{{end}}{{end}}

{{define "mock-interface-constructor" -}}
  {{.Package.Name}}.NewMock{{.PascalName}}Interface
{{- end}}
{{ define "mock-interface-name" -}}
  {{.Package.Name}}.Mock{{.PascalName}}Interface
{{- end}}