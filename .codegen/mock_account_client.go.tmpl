// Code generated from OpenAPI specs by Databricks SDK Generator. DO NOT EDIT.

package mocks

import (
	"fmt"
	"github.com/databricks/databricks-sdk-go"
	{{range .Packages}}
	"github.com/databricks/databricks-sdk-go/experimental/mocks/service/{{.Name}}"{{end}}
)

type MockAccountClient struct {
	AccountClient *databricks.AccountClient
}

// NewMockAccountClient creates new mocked version of Databricks SDK client for Accounts
// which can be used for testing.
func NewMockAccountClient(t interface {
	mock.TestingT
	Cleanup(func())
}) (*MockAccountClient) {
	return &MockAccountClient {
		AccountClient: &databricks.AccountClient{
			Config: nil,
			{{range .Services}}{{if .IsAccounts}}
			{{(.TrimPrefix "account").PascalName}}: {{ template "mock-interface-constructor" . }}(t),
			{{- end}}{{end}}
		},
	}
}

{{range .Services}}{{if .IsAccounts}}
func(m *MockAccountClient) GetMock{{.Name}}API() *{{ template "mock-interface-name" . }} {
	api, ok := m.AccountClient.{{(.TrimPrefix "account").PascalName}}.(*{{ template "mock-interface-name" . }})
	if !ok {
		panic(fmt.Sprintf("expected {{(.TrimPrefix "account").PascalName}} to be *{{ template "mock-interface-name" . }}, actual was %T", m.AccountClient.{{(.TrimPrefix "account").PascalName}}))
	}
	return api
}

{{end}}{{end}}

{{define "mock-interface-constructor" -}}
  {{.Package.Name}}.NewMock{{.PascalName}}Interface
{{- end}}
{{ define "mock-interface-name" -}}
  {{.Package.Name}}.Mock{{.PascalName}}Interface
{{- end}}