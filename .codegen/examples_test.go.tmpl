// Code generated from Databricks SDK for Go integration tests by openapi.roll.TestRegenerateExamples. DO NOT EDIT.

package {{.Package}}_test

import (
	"context"
	"fmt"
	"math/rand"
	"strings"
	"time"
    "os"

	"github.com/databricks/databricks-sdk-go"
    "github.com/databricks/databricks-sdk-go/logger"

    {{range .Suite.ServiceToPackage}}
	"github.com/databricks/databricks-sdk-go/service/{{.}}"{{end}}
)

{{if eq (len .Samples) 0}}{{skipThisFile}}{{end}}

{{range .Samples}}{{- $example := . -}}
func Example{{.Service.PascalName}}API_{{.Method.PascalName}}{{if eq .Method.PascalName "List"}}All{{end}}_{{.CamelName}}() {
    ctx := context.Background()
	{{if .IsAccount}}a{{else}}w{{end}}, err := databricks.New{{if .IsAccount}}Account{{else}}Workspace{{end}}Client()
	if err != nil {
		panic(err)
	}

    {{range .Init}}
    {{.CamelName}} := {{template "expr" .Value}}
    {{end}}

    {{range .Calls}}
        {{if .Service -}}
        {{with .Assign}}{{.CamelName}}, err {{if not (eq .Name "_")}}:{{end}}= {{else}}err = {{end}}{{if $example.IsAccount}}a{{else}}w{{end}}.{{.Service.PascalName}}.{{.PascalName}}(ctx{{range .Args}}, {{template "expr" .}}{{end}})
        if err != nil {
            panic(err)
        }
        {{with .Assign}}{{if not (eq .Name "_")}}logger.Infof(ctx, "found %v", {{.CamelName}}){{end}}{{end -}}
        {{- else -}}
        {{with .Assign}}{{.CamelName}} := {{end}}{{template "expr" .}}
        {{- end}}
    {{end}}

    {{with .Cleanup}}
    // cleanup
    {{range .}}
    {{with .Assign}}{{.CamelName}}, {{end}}err = {{if $example.IsAccount}}a{{else}}w{{end}}.{{.Service.PascalName}}.{{.PascalName}}(ctx{{range .Args}}, {{template "expr" .}}{{end}})
    if err != nil {
        panic(err)
    }{{end}}
    {{end}}
}

{{end}}

{{define "expr" -}}
{{- if eq .Type "binary" -}}
    {{template "expr" .Left}} {{.Op}} {{template "expr" .Right}}
{{- else if eq .Type "index" -}}
    {{template "expr" .Left}}[{{template "expr" .Right}}]
{{- else if eq .Type "boolean" -}}
    {{if .Value}}true{{else}}false{{end}}
{{- else if eq .Type "heredoc" -}}
    `{{.Value}}`
{{- else if eq .Type "literal" -}}
    {{.Value}}
{{- else if eq .Type "enum" -}}
    {{.Package}}.{{.Entity.PascalName}}{{.PascalName}}
{{- else if eq .Type "lookup" -}}
    {{template "expr" .X}}.{{.Field.PascalName}}
{{- else if eq .Type "variable" -}}
    {{.CamelName}}
{{- else if eq .Type "entity" -}}
    {{if .IsPointer}}&{{end}}{{.Package}}.{{.PascalName}}{ {{range .FieldValues}}
        {{.PascalName}}: {{template "expr" .Value}},{{end}}
    }
{{- else if eq .Type "call" -}}
    {{template "call" .}}
{{- else if eq .Type "map" -}}
    map[{{.KeyType}}]{{.ValueType}}{ {{range .Pairs}}{{template "expr" .Key}}: {{template "expr" .Value}},{{end}} }
{{- else if eq .Type "array" -}}
    []{{if .Package}}{{.Package}}.{{.PascalName}}{{else}}{{.Name}}{{end}}{ {{range $i, $x := .Values}}{{if $i}}, {{end}}{{template "expr" .}}{{end}} }
{{- else -}}
    /* UNKNOWN: {{.Type}} */
{{- end -}}
{{- end}}

{{define "bypass-args" -}}
{{range $i, $x := .Args}}{{if $i}}, {{end}}{{template "expr" .}}{{end}}
{{- end}}

{{define "call" -}}
{{- if eq .PascalName "GetEnvOrSkipTest" -}}
os.Getenv({{template "bypass-args" .}})
{{- else if eq .PascalName "Dir" -}}
filepath.Dir({{template "bypass-args" .}})
{{- else if eq .PascalName "Sprintf" -}}
fmt.Sprintf({{template "bypass-args" .}})
{{- else if eq .PascalName "MustParseInt64" -}}
func(v string) int64 {
    i, err := strconv.ParseInt(v, 10, 64)
	if err != nil {
		panic(fmt.Sprintf("`%s` is not int64: %s", v, err))
	}
	return i
}({{template "bypass-args" .}})
{{- else if eq .PascalName "RandomEmail" -}}
fmt.Sprintf("sdk-%x@example.com", time.Now().UnixNano())
{{- else if eq .PascalName "RandomName" -}}
fmt.Sprintf("sdk-%x", time.Now().UnixNano())
{{- else if eq .PascalName "RandomHex" -}}
fmt.Sprintf( "%x", time.Now().UnixNano())
{{- else if eq .PascalName "EncodeToString" -}}
base64.StdEncoding.EncodeToString([]byte({{template "bypass-args" .}}))
{{- else if eq .PascalName "CanonicalHostName" -}}
w.Config.CanonicalHostName()
{{- else if eq .PascalName "SharedRunningCluster" -}}
func() string {
    clusterId := os.Getenv("DATABRICKS_CLUSTER_ID")
	err := w.Clusters.EnsureClusterIsRunning(ctx, clusterId)
	if err != nil {
        panic(err)
    }
	return clusterId
}()
{{- else if eq .PascalName "DltNotebook" -}}
"CREATE LIVE TABLE dlt_sample AS SELECT 1"
{{- else if eq .PascalName "MyNotebookPath" -}}
func() string {
    me, err := w.CurrentUser.Me(ctx)
    if err != nil {
        panic(err)
    }
    return filepath.Join("/Users", me.UserName, fmt.Sprintf("sdk-%x", time.Now().UnixNano()))
}()
{{- else -}}
{{.PascalName}}({{range $i, $x := .Args}}{{if $i}}, {{end}}{{template "expr" .}}{{end}})
{{- end -}}
{{- end}}