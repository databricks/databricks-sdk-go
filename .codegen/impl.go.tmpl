// Code generated from OpenAPI specs by Databricks SDK Generator. DO NOT EDIT.

package {{.Name}}

import (
	"context"
	"fmt"
	"time"
	"io"
	"net/http"
	"github.com/databricks/databricks-sdk-go/client"
	"github.com/databricks/databricks-sdk-go/httpclient"
	{{range .ImportedPackages}}
	"github.com/databricks/databricks-sdk-go/service/{{.}}"{{end}}
	goauth "golang.org/x/oauth2"
)
{{range .Services}}
// unexported type that holds implementations of just {{.Name}} API methods
type {{.CamelName}}Impl struct {
	{{- if .IsDataPlane}}
	dataplane.DataPlaneTokenCache
	controlPlane *{{.ParentService.PascalName}}API
	{{end -}}
	client *client.DatabricksClient
}

{{range .Methods}}
{{if .Service.IsDataPlane}}
func (a *{{.Service.CamelName}}Impl) {{.PascalName}}(ctx context.Context{{if .Request}}, request {{.Request.PascalName}}{{end}}) {{ template "response-type" . }} {
	getRequest := {{.Service.ParentService.DataPlaneInfoMethod.Request.PascalName}}{
	{{- range .Service.ParentService.DataPlaneInfoMethod.Request.Fields}}
		{{.PascalName}}: request.{{.PascalName}},
	{{end}}
	}
	token, err := a.client.Config.GetToken()
	if err != nil {
		return nil, err
	}
	infoGetter := func() (*oauth2.DataPlaneInfo, error) {
		response, err := a.controlPlane.{{.Service.ParentService.DataPlaneInfoMethod.PascalName}}(ctx, getRequest)
		if err != nil {
			return nil, err
		}
		return response{{range .DataPlaneInfoFields}}.{{.PascalName}}{{end}}, nil 
	}
	refresh := func(info *oauth2.DataPlaneInfo) (*goauth.Token, error) {
		return a.client.GetOAuthToken(ctx, info.AuthorizationDetails, token)
	}
	getParams := []string{ 
	{{- range .Service.ParentService.DataPlaneInfoMethod.Request.Fields}}
		request.{{.PascalName}},
	{{end -}}
	}
	endpointUrl, token, err := a.GetDataPlane("{{.PascalName}}", getParams, refresh, infoGetter) 
	if err != nil {
		return nil, err
	}
	{{- template "response-var" . }}
	{{ template "make-header" . }} //TODO: visitors
	err = a.client.Do(ctx, http.Method{{.TitleVerb}}, endpointUrl, headers, {{ template "request-param" . }}, {{if .Response}}&{{.Response.CamelName}}{{else}}nil{{end}})
	return {{ template "response" . }}
}

{{else}}
func (a *{{.Service.CamelName}}Impl) {{.PascalName}}(ctx context.Context{{if .Request}}, request {{.Request.PascalName}}{{end}}) {{ template "response-type" . }} {
	{{- template "response-var" . }}
	path := {{ template "path" . }}
	{{ template "make-header" . }}
	err := a.client.Do(ctx, http.Method{{.TitleVerb}}, path, headers, {{ template "request-param" . }}, {{if .Response}}&{{.Response.CamelName}}{{else}}nil{{end}})
	return {{ template "response" . }}
}
{{end}}
{{end -}}
{{end}}

{{- define "path" -}}
{{- if .PathParts -}}
	fmt.Sprintf("{{range  .PathParts -}}
	    {{.Prefix}}{{if or .Field .IsAccountId}}%v{{end}}{{ end }}"
	    {{- range .PathParts -}}
	        {{- if and .Field .Field.IsPathMultiSegment}}, httpclient.EncodeMultiSegmentPathParameter(request.{{.Field.PascalName}})
	        {{- else if .Field}}, request.{{.Field.PascalName}}
			{{- else if .IsAccountId }}, a.client.ConfiguredAccountID()
			{{- end -}}
	    {{- end -}})
{{- else -}}
	"{{.Path}}"
{{- end -}}
{{- end -}}

{{ define "request-param" -}}
  {{ if or (and .Request (or (eq .Verb "GET") (eq .Verb "DELETE") (eq .Verb "HEAD"))) (and .Operation .Operation.RequestBody) -}}
    request{{ if .RequestBodyField }}.{{.RequestBodyField.PascalName}}{{end}}
  {{- else }}nil
  {{- end }}
{{- end }}

{{ define "response-var" -}}
{{ if .Response }}
  var {{ .Response.CamelName }} {{ template "type" .Response }}
{{- end }}
{{- end }}

{{ define "response-type" -}}
  {{ if not .Response.IsEmpty }}(
  {{- if not .Response.ArrayValue }}*{{end}}{{ template "type" .Response }}, error)
  {{- else }}error
  {{- end }}
{{- end }}

{{ define "response" -}}
  {{ if not .Response.IsEmpty -}}
  {{ if not .Response.ArrayValue }}&{{end}}{{.Response.CamelName}}, {{end}}err
{{- end }}

{{ define "make-header" -}}
	headers := make(map[string]string)
	{{- range $k, $v := .FixedRequestHeaders }}
	headers["{{$k}}"] = "{{$v}}"
	{{- end }}
{{- end }}