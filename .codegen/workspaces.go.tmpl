// Code generated from OpenAPI specs by Databricks SDK Generator. DO NOT EDIT.

package databricks

import (
	"context"

	"github.com/databricks/databricks-sdk-go/client"
	{{range .Packages}}
	"github.com/databricks/databricks-sdk-go/service/{{.Name}}"{{end}}
)

type WorkspaceClient struct {
	Config *config.Config
	apiClient *httpclient.ApiClient

	{{range .Services}}{{if and (not .IsAccounts) (not .HasParent)}}
	{{.Comment "    // " 80}}
	{{.Name}} {{.Package.Name}}.{{.Name}}Interface
	{{end}}{{end}}
}

// Returns a new OAuth scoped to the authorization details provided.
// It will return an error if the CredentialStrategy does not support OAuth tokens.
//
// **NOTE:** Experimental: This API may change or be removed in a future release
// without warning.
func (a *WorkspaceClient) GetOAuthToken(ctx context.Context, authorizationDetails string) (*credentials.OAuthToken, error) {
	originalToken, err := a.Config.GetToken()
	if err != nil {
		return nil, err
	}
	return a.apiClient.GetOAuthToken(ctx, authorizationDetails, originalToken)
}

var ErrNotWorkspaceClient = errors.New("invalid Databricks Workspace configuration")

// NewWorkspaceClient creates new Databricks SDK client for Workspaces or
// returns error in case configuration is wrong
func NewWorkspaceClient(c ...*Config) (*WorkspaceClient, error) {
	var cfg *config.Config
	if len(c) == 1 {
		// first config
		cfg = (*config.Config)(c[0])
	} else {
		// default config
		cfg = &config.Config{}
	}
	err := cfg.EnsureResolved()
	if err != nil {
		return nil, err
	}
	if cfg.IsAccountClient() {
		return nil, ErrNotWorkspaceClient
	}
	apiClient, err := cfg.NewApiClient()
	if err != nil {
		return nil, err
	}
	databricksClient, err := client.NewWithClient(cfg, apiClient)
	if err != nil {
		return nil, err
	}
	return &WorkspaceClient{
		Config: cfg,
		apiClient: apiClient,
		{{range .Services}}{{if and (not .IsAccounts) (not .HasParent)}}
		{{.Name}}: {{.Package.Name}}.New{{.Name}}(databricksClient),
		{{- end}}{{end}}
	}, nil
}
