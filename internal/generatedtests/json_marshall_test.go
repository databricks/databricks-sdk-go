// Code generated by Databricks SDK Generator. DO NOT EDIT.
package generated_tests

import (
	"encoding/json"
	"testing"
	"time"

	"github.com/databricks/databricks-sdk-go/common/types"
	"github.com/databricks/databricks-sdk-go/internal/testspecs/service/jsonmarshallv2"
	"github.com/google/go-cmp/cmp"
)

// Helper functions to simplify test generation.
// This allows us to define the test cases inline.
func timeFromString(s string) time.Time {
	t, err := time.Parse(time.RFC3339, s)
	if err != nil {
		panic(err)
	}
	return t
}

func TestJsonMarshall(t *testing.T) {
	testCases := []struct {
		name  string
		value any
		want  string
	}{
		{
			name: "OptionalString",
			value: jsonmarshallv2.OptionalFields{
				OptionalString: "test",
			},
			want: `{
				"optional_string": "test"
			}`,
		},
		{
			name: "OptionalInt32",
			value: jsonmarshallv2.OptionalFields{
				OptionalInt32: 42,
			},
			want: `{
				"optional_int32": 42
			}`,
		},
		{
			name: "OptionalInt64",
			value: jsonmarshallv2.OptionalFields{
				OptionalInt64: 9223372036854775807,
			},
			want: `{
				"optional_int64": 9223372036854775807
			}`,
		},
		{
			name: "OptionalBool",
			value: jsonmarshallv2.OptionalFields{
				OptionalBool: true,
			},
			want: `{
				"optional_bool": true
			}`,
		},
		{
			name: "OptionalEnum",
			value: jsonmarshallv2.OptionalFields{
				TestEnum: jsonmarshallv2.TestEnumTestEnumOne,
			},
			want: `{
				"test_enum": "TEST_ENUM_ONE"
			}`,
		},
		{
			name: "OptionalNestedMessage",
			value: jsonmarshallv2.OptionalFields{
				OptionalMessage: &jsonmarshallv2.NestedMessage{
					OptionalString: "nested_value",
				},
			},
			want: `{
				"optional_message": {
					"optional_string": "nested_value"
				}
			}`,
		},
		{
			name: "OptionalMap",
			value: jsonmarshallv2.OptionalFields{
				Map: map[string]string{
					"key":   "test_key",
					"value": "test_value",
				},
			},
			want: `{
				"map": {
					"key": "test_key",
					"value": "test_value"
				}
			}`,
		},
		{
			name: "OptionalDuration",
			value: jsonmarshallv2.OptionalFields{
				Duration: &types.Duration{Duration: 3600 * time.Second},
			},
			want: `{
				"duration": "3600.000000000s"
			}`,
		},
		{
			name: "OptionalFieldMask",
			value: jsonmarshallv2.OptionalFields{
				FieldMask: &types.FieldMask{Paths: []string{"optional_string", "optional_int32"}},
			},
			want: `{
				"field_mask": "optional_string,optional_int32"
			}`,
		},
		{
			name: "OptionalTimestamp",
			value: jsonmarshallv2.OptionalFields{
				Timestamp: &types.Time{Time: timeFromString("2023-01-01T00:00:00Z")},
			},
			want: `{
				"timestamp": "2023-01-01T00:00:00Z"
			}`,
		},
		{
			name: "MultipleOptionalFields",
			value: jsonmarshallv2.OptionalFields{
				OptionalBool:   true,
				OptionalInt32:  42,
				OptionalString: "test",
			},
			want: `{
				"optional_string":"test",
				"optional_int32":42,
				"optional_bool":true
			}`,
		},
		{
			name:  "RequiredFieldsNoInput",
			value: jsonmarshallv2.RequiredFields{},
			want: `{
				"required_string": "",
				"required_int32": 0,
				"required_int64": 0,
				"required_bool": false,
				"required_message": {},
				"test_required_enum": "",
				"required_duration": "0.000000000s",
				"required_field_mask": "",
				"required_timestamp": "0001-01-01T00:00:00Z"
			}`,
		},
		{
			name: "RequiredFieldsExplicitDefaults",
			value: jsonmarshallv2.RequiredFields{
				RequiredBool:     false,
				RequiredInt32:    0,
				RequiredInt64:    0,
				RequiredString:   "",
				TestRequiredEnum: jsonmarshallv2.TestEnumTestEnumOne,
			},
			want: `{
				"required_string": "",
				"required_int32": 0,
				"required_int64": 0,
				"required_bool": false,
				"required_message": {},
				"test_required_enum": "TEST_ENUM_ONE",
				"required_duration": "0.000000000s",
				"required_field_mask": "",
				"required_timestamp": "0001-01-01T00:00:00Z"
			}`,
		},
		{
			name: "RequiredFieldsNonDefaults",
			value: jsonmarshallv2.RequiredFields{
				RequiredBool:      true,
				RequiredDuration:  types.Duration{Duration: 7200 * time.Second},
				RequiredFieldMask: types.FieldMask{Paths: []string{"required_string", "required_int32"}},
				RequiredInt32:     42,
				RequiredInt64:     1234567890123456789,
				RequiredString:    "non_default_string",
				RequiredTimestamp: types.Time{Time: timeFromString("2023-12-31T23:59:59Z")},
				TestRequiredEnum:  jsonmarshallv2.TestEnumTestEnumTwo,
			},
			want: `{
				"required_string": "non_default_string",
				"required_int32": 42,
				"required_int64": 1234567890123456789,
				"required_bool": true,
				"required_message": {},
				"test_required_enum": "TEST_ENUM_TWO",
				"required_duration": "7200.000000000s",
				"required_field_mask": "required_string,required_int32",
				"required_timestamp": "2023-12-31T23:59:59Z"
			}`,
		},
		{
			name: "RequiredFieldsWithNestedMessage",
			value: jsonmarshallv2.RequiredFields{
				RequiredMessage: jsonmarshallv2.NestedMessage{
					OptionalString: "nested_value",
				},
			},
			want: `{
				"required_string": "",
				"required_int32": 0,
				"required_int64": 0,
				"required_bool": false,
				"required_message": {
					"optional_string": "nested_value"
				},
				"test_required_enum": "",
				"required_duration": "0.000000000s",
				"required_field_mask": "",
				"required_timestamp": "0001-01-01T00:00:00Z"
			}`,
		},
		{
			name: "RepeatedString",
			value: jsonmarshallv2.RepeatedFields{
				RepeatedString: []string{
					"item1",
					"item2",
					"item3",
				},
			},
			want: `{
				"repeated_string": ["item1", "item2", "item3"]
			}`,
		},
		{
			name: "RepeatedInt32",
			value: jsonmarshallv2.RepeatedFields{
				RepeatedInt32: []int{
					1,
					2,
					3,
					4,
					5,
				},
			},
			want: `{
				"repeated_int32": [1, 2, 3, 4, 5]
			}`,
		},
		{
			name: "RepeatedInt64",
			value: jsonmarshallv2.RepeatedFields{
				RepeatedInt64: []int64{
					1000000000000000000,
					2000000000000000000,
				},
			},
			want: `{
				"repeated_int64": [1000000000000000000, 2000000000000000000]
			}`,
		},
		{
			name: "RepeatedBool",
			value: jsonmarshallv2.RepeatedFields{
				RepeatedBool: []bool{
					true,
					false,
					true,
				},
			},
			want: `{
				"repeated_bool": [true, false, true]
			}`,
		},
		{
			name: "RepeatedEnum",
			value: jsonmarshallv2.RepeatedFields{
				TestRepeatedEnum: []jsonmarshallv2.TestEnum{
					jsonmarshallv2.TestEnumTestEnumOne,
					jsonmarshallv2.TestEnumTestEnumTwo,
				},
			},
			want: `{
				"test_repeated_enum": ["TEST_ENUM_ONE", "TEST_ENUM_TWO"]
			}`,
		},
		{
			name: "RepeatedNestedMessage",
			value: jsonmarshallv2.RepeatedFields{
				RepeatedMessage: []jsonmarshallv2.NestedMessage{
					jsonmarshallv2.NestedMessage{
						OptionalString: "nested1",
					},
					jsonmarshallv2.NestedMessage{
						OptionalString: "nested2",
					},
				},
			},
			want: `{
				"repeated_message": [
					{
						"optional_string": "nested1"
					},
					{
						"optional_string": "nested2"
					}
				]
			}`,
		},
		{
			name: "RepeatedDuration",
			value: jsonmarshallv2.RepeatedFields{
				RepeatedDuration: []types.Duration{
					types.Duration{Duration: 60 * time.Second},
					types.Duration{Duration: 120 * time.Second},
					types.Duration{Duration: 180 * time.Second},
				},
			},
			want: `{
				"repeated_duration": ["60.000000000s", "120.000000000s", "180.000000000s"]
			}`,
		},
		{
			name: "RepeatedFieldMask",
			value: jsonmarshallv2.RepeatedFields{
				RepeatedFieldMask: []types.FieldMask{
					types.FieldMask{Paths: []string{"field1"}},
					types.FieldMask{Paths: []string{"field2", "field3"}},
				},
			},
			want: `{
				"repeated_field_mask": ["field1", "field2,field3"]
			}`,
		},
		{
			name: "RepeatedTimestamp",
			value: jsonmarshallv2.RepeatedFields{
				RepeatedTimestamp: []types.Time{
					types.Time{Time: timeFromString("2023-01-01T00:00:00Z")},
					types.Time{Time: timeFromString("2023-01-02T00:00:00Z")},
				},
			},
			want: `{
				"repeated_timestamp": ["2023-01-01T00:00:00Z", "2023-01-02T00:00:00Z"]
			}`,
		},
		{
			name: "MultipleRepeatedFields",
			value: jsonmarshallv2.RepeatedFields{
				RepeatedBool: []bool{
					true,
					false,
				},
				RepeatedInt32: []int{
					10,
					20,
					30,
				},
				RepeatedString: []string{
					"a",
					"b",
					"c",
				},
			},
			want: `{
				"repeated_string": ["a", "b", "c"],
				"repeated_int32": [10, 20, 30],
				"repeated_bool": [true, false]
			}`,
		},
		{
			name: "EmptyRepeatedFields",
			value: jsonmarshallv2.RepeatedFields{
				RepeatedString: []string{},
			},
			want: `{}`,
		},
		{
			name:  "OptionalFieldsNoInput",
			value: jsonmarshallv2.OptionalFields{},
			want:  `{}`,
		},
		{
			name: "OptionalFieldsZeroValues",
			value: jsonmarshallv2.OptionalFields{
				OptionalBool:   false,
				OptionalInt32:  0,
				OptionalInt64:  0,
				OptionalString: "",
			},
			want: `{}`,
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			got, err := json.Marshal(tc.value)
			if err != nil {
				t.Fatalf("error marshalling input: %v", err)
			}

			// We want to compare the values as JSON objects, not raw strings.
			wantObject, err := toJSONObject([]byte(tc.want))
			if err != nil {
				t.Fatalf("error unmarshalling want: %s", err)
			}

			gotObject, err := toJSONObject(got)
			if err != nil {
				t.Errorf("error unmarshalling got: %s", err)
			}

			if diff := cmp.Diff(wantObject, gotObject); diff != "" {
				t.Fatalf("Unexpected diff (-want, +got): %s", diff)
			}
		})
	}
}

func toJSONObject(b []byte) (map[string]any, error) {
	obj := map[string]any{}
	if err := json.Unmarshal(b, &obj); err != nil {
		return obj, err
	}
	return obj, nil
}
