// Code generated from OpenAPI specs by Databricks SDK Generator. DO NOT EDIT.
package generated_tests

import (
	"context"
	"net/http"
	"net/http/httptest"
	"testing"

	"github.com/databricks/databricks-sdk-go/client"
	"github.com/databricks/databricks-sdk-go/config"
	"github.com/databricks/databricks-sdk-go/internal/testspecs/service/idempotencytesting"
	"github.com/databricks/databricks-sdk-go/qa"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
)

func TestIdempotency_CreateTestResource_WithRequestID(t *testing.T) {
	testCases := []struct {
		name       string
		fixtures   qa.HTTPFixtures
		request    idempotencytesting.CreateTestResourceRequest
		wantResult *idempotencytesting.TestResource
		wantErr    bool
	}{

		{
			name: "RetryWithProvidedRequestID",
			fixtures: qa.HTTPFixtures{{
				Method:   "POST",
				Resource: "/api/2.0/idempotency-testing/resources?request_id=test-request-id-12345",
				ExpectedRequest: idempotencytesting.TestResource{
					Id:   "test-resource-123",
					Name: "test-resource",
				},
				Response: `{"error_code":"TEMPORARILY_UNAVAILABLE","message":"Service temporarily unavailable"}`,
				Status:   503,
			}, {
				Method:   "POST",
				Resource: "/api/2.0/idempotency-testing/resources?request_id=test-request-id-12345",
				ExpectedRequest: idempotencytesting.TestResource{
					Id:   "test-resource-123",
					Name: "test-resource",
				},
				Response: `{"id":"test-resource-123","name":"test-resource"}`,
				Status:   200,
			}},
			request: idempotencytesting.CreateTestResourceRequest{
				TestResource: idempotencytesting.TestResource{
					Id:   "test-resource-123",
					Name: "test-resource",
				},
				RequestId: "test-request-id-12345",
			},
			wantResult: &idempotencytesting.TestResource{
				Id:   "test-resource-123",
				Name: "test-resource",
			},
			wantErr: false,
		},
	}
	for _, tt := range testCases {
		t.Run(tt.name, func(t *testing.T) {
			tt.fixtures.ApplyClient(t, func(ctx context.Context, client *client.DatabricksClient) {
				service := idempotencytesting.NewIdempotencyTesting(client)

				result, err := service.CreateTestResource(ctx, tt.request)
				// ForceSendFields is ignored in the comparison because it is an SDK implementation detail
				// that is automatically populated and not relevant to the business logic being tested.
				if diff := cmp.Diff(tt.wantResult, result, cmpopts.IgnoreFields(idempotencytesting.TestResource{}, "ForceSendFields")); diff != "" {
					t.Errorf("result mismatch (-expected +actual):\n%s", diff)
				}
				if tt.wantErr && err == nil {
					t.Fatalf("expected error, got nil")
				}
				if !tt.wantErr && err != nil {
					t.Fatalf("expected no error, got: %v", err)
				}
			})
		})
	}
}

func TestIdempotency_CreateTestResource_AutoGeneratedRequestID(t *testing.T) {
	testCases := []struct {
		name             string
		request          idempotencytesting.CreateTestResourceRequest
		firstStatusCode  int
		firstResponse    string
		secondStatusCode int
		secondResponse   string
		wantResult       *idempotencytesting.TestResource
		wantErr          bool
	}{

		{
			name: "RetryWithAutoGeneratedRequestID",
			request: idempotencytesting.CreateTestResourceRequest{
				TestResource: idempotencytesting.TestResource{
					Id:   "test-resource-123",
					Name: "test-resource",
				},
			},
			firstStatusCode:  503,
			firstResponse:    `{"error_code":"TEMPORARILY_UNAVAILABLE","message":"Service temporarily unavailable"}`,
			secondStatusCode: 200,
			secondResponse:   `{"id":"test-resource-123","name":"test-resource"}`,
			wantResult: &idempotencytesting.TestResource{
				Id:   "test-resource-123",
				Name: "test-resource",
			},
			wantErr: false,
		},
	}
	for _, tt := range testCases {
		t.Run(tt.name, func(t *testing.T) {
			var capturedRequestID string
			callCount := 0

			server := httptest.NewServer(http.HandlerFunc(func(writer http.ResponseWriter, request *http.Request) {
				callCount++

				// Extract request_id from query parameters
				requestID := request.URL.Query().Get("request_id")

				switch callCount {
				case 1:
					// First call: capture request_id and return configured status/response
					capturedRequestID = requestID
					if capturedRequestID == "" {
						t.Fatal("First request should have auto-generated request_id")
					}
					writer.WriteHeader(tt.firstStatusCode)
					writer.Write([]byte(tt.firstResponse))
				case 2:
					// Second call: validate same request_id and return configured status/response
					if requestID != capturedRequestID {
						t.Fatalf("Second request request_id %q != first request request_id %q",
							requestID, capturedRequestID)
					}
					writer.WriteHeader(tt.secondStatusCode)
					writer.Write([]byte(tt.secondResponse))
				default:
					t.Fatalf("expected 2 calls to create test resource, got %d", callCount)
				}
			}))
			defer server.Close()

			// Create client with custom server
			cfg := &config.Config{Host: server.URL, Token: "x"}
			client, err := client.New(cfg)
			if err != nil {
				t.Fatalf("failed to create client: %v", err)
			}
			service := idempotencytesting.NewIdempotencyTesting(client)

			result, err := service.CreateTestResource(context.Background(), tt.request)

			// ForceSendFields is ignored in the comparison because it is an SDK implementation detail
			// that is automatically populated and not relevant to the business logic being tested.
			if diff := cmp.Diff(tt.wantResult, result, cmpopts.IgnoreFields(idempotencytesting.TestResource{}, "ForceSendFields")); diff != "" {
				t.Errorf("result mismatch (-expected +actual):\n%s", diff)
			}
			if tt.wantErr && err == nil {
				t.Fatalf("expected error, got nil")
			}
			if !tt.wantErr && err != nil {
				t.Fatalf("expected no error, got: %v", err)
			}

			// Verify exactly 2 calls were made (initial + retry).
			if callCount != 2 {
				t.Fatalf("expected 2 calls to create test resource, got %d", callCount)
			}
		})
	}
}
