// Code generated by mockery v2.38.0. DO NOT EDIT.

package files

import (
	context "context"

	files "github.com/databricks/databricks-sdk-go/service/files"
	mock "github.com/stretchr/testify/mock"
)

// MockFilesAPIInterface is an autogenerated mock type for the FilesAPIInterface type
type MockFilesAPIInterface struct {
	mock.Mock
}

type MockFilesAPIInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFilesAPIInterface) EXPECT() *MockFilesAPIInterface_Expecter {
	return &MockFilesAPIInterface_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: ctx, request
func (_m *MockFilesAPIInterface) Delete(ctx context.Context, request files.DeleteFileRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, files.DeleteFileRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFilesAPIInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockFilesAPIInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - request files.DeleteFileRequest
func (_e *MockFilesAPIInterface_Expecter) Delete(ctx interface{}, request interface{}) *MockFilesAPIInterface_Delete_Call {
	return &MockFilesAPIInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, request)}
}

func (_c *MockFilesAPIInterface_Delete_Call) Run(run func(ctx context.Context, request files.DeleteFileRequest)) *MockFilesAPIInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(files.DeleteFileRequest))
	})
	return _c
}

func (_c *MockFilesAPIInterface_Delete_Call) Return(_a0 error) *MockFilesAPIInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFilesAPIInterface_Delete_Call) RunAndReturn(run func(context.Context, files.DeleteFileRequest) error) *MockFilesAPIInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByFilePath provides a mock function with given fields: ctx, filePath
func (_m *MockFilesAPIInterface) DeleteByFilePath(ctx context.Context, filePath string) error {
	ret := _m.Called(ctx, filePath)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByFilePath")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, filePath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFilesAPIInterface_DeleteByFilePath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByFilePath'
type MockFilesAPIInterface_DeleteByFilePath_Call struct {
	*mock.Call
}

// DeleteByFilePath is a helper method to define mock.On call
//   - ctx context.Context
//   - filePath string
func (_e *MockFilesAPIInterface_Expecter) DeleteByFilePath(ctx interface{}, filePath interface{}) *MockFilesAPIInterface_DeleteByFilePath_Call {
	return &MockFilesAPIInterface_DeleteByFilePath_Call{Call: _e.mock.On("DeleteByFilePath", ctx, filePath)}
}

func (_c *MockFilesAPIInterface_DeleteByFilePath_Call) Run(run func(ctx context.Context, filePath string)) *MockFilesAPIInterface_DeleteByFilePath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockFilesAPIInterface_DeleteByFilePath_Call) Return(_a0 error) *MockFilesAPIInterface_DeleteByFilePath_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFilesAPIInterface_DeleteByFilePath_Call) RunAndReturn(run func(context.Context, string) error) *MockFilesAPIInterface_DeleteByFilePath_Call {
	_c.Call.Return(run)
	return _c
}

// Download provides a mock function with given fields: ctx, request
func (_m *MockFilesAPIInterface) Download(ctx context.Context, request files.DownloadRequest) (*files.DownloadResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Download")
	}

	var r0 *files.DownloadResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, files.DownloadRequest) (*files.DownloadResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, files.DownloadRequest) *files.DownloadResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*files.DownloadResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, files.DownloadRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFilesAPIInterface_Download_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Download'
type MockFilesAPIInterface_Download_Call struct {
	*mock.Call
}

// Download is a helper method to define mock.On call
//   - ctx context.Context
//   - request files.DownloadRequest
func (_e *MockFilesAPIInterface_Expecter) Download(ctx interface{}, request interface{}) *MockFilesAPIInterface_Download_Call {
	return &MockFilesAPIInterface_Download_Call{Call: _e.mock.On("Download", ctx, request)}
}

func (_c *MockFilesAPIInterface_Download_Call) Run(run func(ctx context.Context, request files.DownloadRequest)) *MockFilesAPIInterface_Download_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(files.DownloadRequest))
	})
	return _c
}

func (_c *MockFilesAPIInterface_Download_Call) Return(_a0 *files.DownloadResponse, _a1 error) *MockFilesAPIInterface_Download_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFilesAPIInterface_Download_Call) RunAndReturn(run func(context.Context, files.DownloadRequest) (*files.DownloadResponse, error)) *MockFilesAPIInterface_Download_Call {
	_c.Call.Return(run)
	return _c
}

// DownloadByFilePath provides a mock function with given fields: ctx, filePath
func (_m *MockFilesAPIInterface) DownloadByFilePath(ctx context.Context, filePath string) (*files.DownloadResponse, error) {
	ret := _m.Called(ctx, filePath)

	if len(ret) == 0 {
		panic("no return value specified for DownloadByFilePath")
	}

	var r0 *files.DownloadResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*files.DownloadResponse, error)); ok {
		return rf(ctx, filePath)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *files.DownloadResponse); ok {
		r0 = rf(ctx, filePath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*files.DownloadResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, filePath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFilesAPIInterface_DownloadByFilePath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadByFilePath'
type MockFilesAPIInterface_DownloadByFilePath_Call struct {
	*mock.Call
}

// DownloadByFilePath is a helper method to define mock.On call
//   - ctx context.Context
//   - filePath string
func (_e *MockFilesAPIInterface_Expecter) DownloadByFilePath(ctx interface{}, filePath interface{}) *MockFilesAPIInterface_DownloadByFilePath_Call {
	return &MockFilesAPIInterface_DownloadByFilePath_Call{Call: _e.mock.On("DownloadByFilePath", ctx, filePath)}
}

func (_c *MockFilesAPIInterface_DownloadByFilePath_Call) Run(run func(ctx context.Context, filePath string)) *MockFilesAPIInterface_DownloadByFilePath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockFilesAPIInterface_DownloadByFilePath_Call) Return(_a0 *files.DownloadResponse, _a1 error) *MockFilesAPIInterface_DownloadByFilePath_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFilesAPIInterface_DownloadByFilePath_Call) RunAndReturn(run func(context.Context, string) (*files.DownloadResponse, error)) *MockFilesAPIInterface_DownloadByFilePath_Call {
	_c.Call.Return(run)
	return _c
}

// GetStatus provides a mock function with given fields: ctx, request
func (_m *MockFilesAPIInterface) GetStatus(ctx context.Context, request files.GetStatusRequest) (*files.FileInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetStatus")
	}

	var r0 *files.FileInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, files.GetStatusRequest) (*files.FileInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, files.GetStatusRequest) *files.FileInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*files.FileInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, files.GetStatusRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFilesAPIInterface_GetStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStatus'
type MockFilesAPIInterface_GetStatus_Call struct {
	*mock.Call
}

// GetStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - request files.GetStatusRequest
func (_e *MockFilesAPIInterface_Expecter) GetStatus(ctx interface{}, request interface{}) *MockFilesAPIInterface_GetStatus_Call {
	return &MockFilesAPIInterface_GetStatus_Call{Call: _e.mock.On("GetStatus", ctx, request)}
}

func (_c *MockFilesAPIInterface_GetStatus_Call) Run(run func(ctx context.Context, request files.GetStatusRequest)) *MockFilesAPIInterface_GetStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(files.GetStatusRequest))
	})
	return _c
}

func (_c *MockFilesAPIInterface_GetStatus_Call) Return(_a0 *files.FileInfo, _a1 error) *MockFilesAPIInterface_GetStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFilesAPIInterface_GetStatus_Call) RunAndReturn(run func(context.Context, files.GetStatusRequest) (*files.FileInfo, error)) *MockFilesAPIInterface_GetStatus_Call {
	_c.Call.Return(run)
	return _c
}

// Impl provides a mock function with given fields:
func (_m *MockFilesAPIInterface) Impl() files.FilesService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 files.FilesService
	if rf, ok := ret.Get(0).(func() files.FilesService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(files.FilesService)
		}
	}

	return r0
}

// MockFilesAPIInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockFilesAPIInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockFilesAPIInterface_Expecter) Impl() *MockFilesAPIInterface_Impl_Call {
	return &MockFilesAPIInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockFilesAPIInterface_Impl_Call) Run(run func()) *MockFilesAPIInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFilesAPIInterface_Impl_Call) Return(_a0 files.FilesService) *MockFilesAPIInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFilesAPIInterface_Impl_Call) RunAndReturn(run func() files.FilesService) *MockFilesAPIInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// Upload provides a mock function with given fields: ctx, request
func (_m *MockFilesAPIInterface) Upload(ctx context.Context, request files.UploadRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Upload")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, files.UploadRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFilesAPIInterface_Upload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upload'
type MockFilesAPIInterface_Upload_Call struct {
	*mock.Call
}

// Upload is a helper method to define mock.On call
//   - ctx context.Context
//   - request files.UploadRequest
func (_e *MockFilesAPIInterface_Expecter) Upload(ctx interface{}, request interface{}) *MockFilesAPIInterface_Upload_Call {
	return &MockFilesAPIInterface_Upload_Call{Call: _e.mock.On("Upload", ctx, request)}
}

func (_c *MockFilesAPIInterface_Upload_Call) Run(run func(ctx context.Context, request files.UploadRequest)) *MockFilesAPIInterface_Upload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(files.UploadRequest))
	})
	return _c
}

func (_c *MockFilesAPIInterface_Upload_Call) Return(_a0 error) *MockFilesAPIInterface_Upload_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFilesAPIInterface_Upload_Call) RunAndReturn(run func(context.Context, files.UploadRequest) error) *MockFilesAPIInterface_Upload_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockFilesAPIInterface) WithImpl(impl files.FilesService) files.FilesAPIInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 files.FilesAPIInterface
	if rf, ok := ret.Get(0).(func(files.FilesService) files.FilesAPIInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(files.FilesAPIInterface)
		}
	}

	return r0
}

// MockFilesAPIInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockFilesAPIInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl files.FilesService
func (_e *MockFilesAPIInterface_Expecter) WithImpl(impl interface{}) *MockFilesAPIInterface_WithImpl_Call {
	return &MockFilesAPIInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockFilesAPIInterface_WithImpl_Call) Run(run func(impl files.FilesService)) *MockFilesAPIInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(files.FilesService))
	})
	return _c
}

func (_c *MockFilesAPIInterface_WithImpl_Call) Return(_a0 files.FilesAPIInterface) *MockFilesAPIInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFilesAPIInterface_WithImpl_Call) RunAndReturn(run func(files.FilesService) files.FilesAPIInterface) *MockFilesAPIInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFilesAPIInterface creates a new instance of MockFilesAPIInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFilesAPIInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFilesAPIInterface {
	mock := &MockFilesAPIInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
