// Code generated by mockery v2.38.0. DO NOT EDIT.

package iam

import (
	context "context"

	listing "github.com/databricks/databricks-sdk-go/listing"
	iam "github.com/databricks/databricks-sdk-go/service/iam"

	mock "github.com/stretchr/testify/mock"
)

// MockUsersAPIInterface is an autogenerated mock type for the UsersAPIInterface type
type MockUsersAPIInterface struct {
	mock.Mock
}

type MockUsersAPIInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUsersAPIInterface) EXPECT() *MockUsersAPIInterface_Expecter {
	return &MockUsersAPIInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, request
func (_m *MockUsersAPIInterface) Create(ctx context.Context, request iam.User) (*iam.User, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *iam.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iam.User) (*iam.User, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iam.User) *iam.User); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iam.User) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUsersAPIInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockUsersAPIInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - request iam.User
func (_e *MockUsersAPIInterface_Expecter) Create(ctx interface{}, request interface{}) *MockUsersAPIInterface_Create_Call {
	return &MockUsersAPIInterface_Create_Call{Call: _e.mock.On("Create", ctx, request)}
}

func (_c *MockUsersAPIInterface_Create_Call) Run(run func(ctx context.Context, request iam.User)) *MockUsersAPIInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iam.User))
	})
	return _c
}

func (_c *MockUsersAPIInterface_Create_Call) Return(_a0 *iam.User, _a1 error) *MockUsersAPIInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUsersAPIInterface_Create_Call) RunAndReturn(run func(context.Context, iam.User) (*iam.User, error)) *MockUsersAPIInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, request
func (_m *MockUsersAPIInterface) Delete(ctx context.Context, request iam.DeleteUserRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, iam.DeleteUserRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUsersAPIInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockUsersAPIInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - request iam.DeleteUserRequest
func (_e *MockUsersAPIInterface_Expecter) Delete(ctx interface{}, request interface{}) *MockUsersAPIInterface_Delete_Call {
	return &MockUsersAPIInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, request)}
}

func (_c *MockUsersAPIInterface_Delete_Call) Run(run func(ctx context.Context, request iam.DeleteUserRequest)) *MockUsersAPIInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iam.DeleteUserRequest))
	})
	return _c
}

func (_c *MockUsersAPIInterface_Delete_Call) Return(_a0 error) *MockUsersAPIInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUsersAPIInterface_Delete_Call) RunAndReturn(run func(context.Context, iam.DeleteUserRequest) error) *MockUsersAPIInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteById provides a mock function with given fields: ctx, id
func (_m *MockUsersAPIInterface) DeleteById(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUsersAPIInterface_DeleteById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteById'
type MockUsersAPIInterface_DeleteById_Call struct {
	*mock.Call
}

// DeleteById is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockUsersAPIInterface_Expecter) DeleteById(ctx interface{}, id interface{}) *MockUsersAPIInterface_DeleteById_Call {
	return &MockUsersAPIInterface_DeleteById_Call{Call: _e.mock.On("DeleteById", ctx, id)}
}

func (_c *MockUsersAPIInterface_DeleteById_Call) Run(run func(ctx context.Context, id string)) *MockUsersAPIInterface_DeleteById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUsersAPIInterface_DeleteById_Call) Return(_a0 error) *MockUsersAPIInterface_DeleteById_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUsersAPIInterface_DeleteById_Call) RunAndReturn(run func(context.Context, string) error) *MockUsersAPIInterface_DeleteById_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, request
func (_m *MockUsersAPIInterface) Get(ctx context.Context, request iam.GetUserRequest) (*iam.User, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *iam.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iam.GetUserRequest) (*iam.User, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iam.GetUserRequest) *iam.User); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iam.GetUserRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUsersAPIInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockUsersAPIInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - request iam.GetUserRequest
func (_e *MockUsersAPIInterface_Expecter) Get(ctx interface{}, request interface{}) *MockUsersAPIInterface_Get_Call {
	return &MockUsersAPIInterface_Get_Call{Call: _e.mock.On("Get", ctx, request)}
}

func (_c *MockUsersAPIInterface_Get_Call) Run(run func(ctx context.Context, request iam.GetUserRequest)) *MockUsersAPIInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iam.GetUserRequest))
	})
	return _c
}

func (_c *MockUsersAPIInterface_Get_Call) Return(_a0 *iam.User, _a1 error) *MockUsersAPIInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUsersAPIInterface_Get_Call) RunAndReturn(run func(context.Context, iam.GetUserRequest) (*iam.User, error)) *MockUsersAPIInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetById provides a mock function with given fields: ctx, id
func (_m *MockUsersAPIInterface) GetById(ctx context.Context, id string) (*iam.User, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 *iam.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*iam.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *iam.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUsersAPIInterface_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type MockUsersAPIInterface_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockUsersAPIInterface_Expecter) GetById(ctx interface{}, id interface{}) *MockUsersAPIInterface_GetById_Call {
	return &MockUsersAPIInterface_GetById_Call{Call: _e.mock.On("GetById", ctx, id)}
}

func (_c *MockUsersAPIInterface_GetById_Call) Run(run func(ctx context.Context, id string)) *MockUsersAPIInterface_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUsersAPIInterface_GetById_Call) Return(_a0 *iam.User, _a1 error) *MockUsersAPIInterface_GetById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUsersAPIInterface_GetById_Call) RunAndReturn(run func(context.Context, string) (*iam.User, error)) *MockUsersAPIInterface_GetById_Call {
	_c.Call.Return(run)
	return _c
}

// GetByUserName provides a mock function with given fields: ctx, name
func (_m *MockUsersAPIInterface) GetByUserName(ctx context.Context, name string) (*iam.User, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetByUserName")
	}

	var r0 *iam.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*iam.User, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *iam.User); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUsersAPIInterface_GetByUserName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByUserName'
type MockUsersAPIInterface_GetByUserName_Call struct {
	*mock.Call
}

// GetByUserName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockUsersAPIInterface_Expecter) GetByUserName(ctx interface{}, name interface{}) *MockUsersAPIInterface_GetByUserName_Call {
	return &MockUsersAPIInterface_GetByUserName_Call{Call: _e.mock.On("GetByUserName", ctx, name)}
}

func (_c *MockUsersAPIInterface_GetByUserName_Call) Run(run func(ctx context.Context, name string)) *MockUsersAPIInterface_GetByUserName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUsersAPIInterface_GetByUserName_Call) Return(_a0 *iam.User, _a1 error) *MockUsersAPIInterface_GetByUserName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUsersAPIInterface_GetByUserName_Call) RunAndReturn(run func(context.Context, string) (*iam.User, error)) *MockUsersAPIInterface_GetByUserName_Call {
	_c.Call.Return(run)
	return _c
}

// GetPermissionLevels provides a mock function with given fields: ctx
func (_m *MockUsersAPIInterface) GetPermissionLevels(ctx context.Context) (*iam.GetPasswordPermissionLevelsResponse, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetPermissionLevels")
	}

	var r0 *iam.GetPasswordPermissionLevelsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*iam.GetPasswordPermissionLevelsResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *iam.GetPasswordPermissionLevelsResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.GetPasswordPermissionLevelsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUsersAPIInterface_GetPermissionLevels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPermissionLevels'
type MockUsersAPIInterface_GetPermissionLevels_Call struct {
	*mock.Call
}

// GetPermissionLevels is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUsersAPIInterface_Expecter) GetPermissionLevels(ctx interface{}) *MockUsersAPIInterface_GetPermissionLevels_Call {
	return &MockUsersAPIInterface_GetPermissionLevels_Call{Call: _e.mock.On("GetPermissionLevels", ctx)}
}

func (_c *MockUsersAPIInterface_GetPermissionLevels_Call) Run(run func(ctx context.Context)) *MockUsersAPIInterface_GetPermissionLevels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUsersAPIInterface_GetPermissionLevels_Call) Return(_a0 *iam.GetPasswordPermissionLevelsResponse, _a1 error) *MockUsersAPIInterface_GetPermissionLevels_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUsersAPIInterface_GetPermissionLevels_Call) RunAndReturn(run func(context.Context) (*iam.GetPasswordPermissionLevelsResponse, error)) *MockUsersAPIInterface_GetPermissionLevels_Call {
	_c.Call.Return(run)
	return _c
}

// GetPermissions provides a mock function with given fields: ctx
func (_m *MockUsersAPIInterface) GetPermissions(ctx context.Context) (*iam.PasswordPermissions, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetPermissions")
	}

	var r0 *iam.PasswordPermissions
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*iam.PasswordPermissions, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *iam.PasswordPermissions); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.PasswordPermissions)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUsersAPIInterface_GetPermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPermissions'
type MockUsersAPIInterface_GetPermissions_Call struct {
	*mock.Call
}

// GetPermissions is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUsersAPIInterface_Expecter) GetPermissions(ctx interface{}) *MockUsersAPIInterface_GetPermissions_Call {
	return &MockUsersAPIInterface_GetPermissions_Call{Call: _e.mock.On("GetPermissions", ctx)}
}

func (_c *MockUsersAPIInterface_GetPermissions_Call) Run(run func(ctx context.Context)) *MockUsersAPIInterface_GetPermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUsersAPIInterface_GetPermissions_Call) Return(_a0 *iam.PasswordPermissions, _a1 error) *MockUsersAPIInterface_GetPermissions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUsersAPIInterface_GetPermissions_Call) RunAndReturn(run func(context.Context) (*iam.PasswordPermissions, error)) *MockUsersAPIInterface_GetPermissions_Call {
	_c.Call.Return(run)
	return _c
}

// Impl provides a mock function with given fields:
func (_m *MockUsersAPIInterface) Impl() iam.UsersService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 iam.UsersService
	if rf, ok := ret.Get(0).(func() iam.UsersService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(iam.UsersService)
		}
	}

	return r0
}

// MockUsersAPIInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockUsersAPIInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockUsersAPIInterface_Expecter) Impl() *MockUsersAPIInterface_Impl_Call {
	return &MockUsersAPIInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockUsersAPIInterface_Impl_Call) Run(run func()) *MockUsersAPIInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUsersAPIInterface_Impl_Call) Return(_a0 iam.UsersService) *MockUsersAPIInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUsersAPIInterface_Impl_Call) RunAndReturn(run func() iam.UsersService) *MockUsersAPIInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, request
func (_m *MockUsersAPIInterface) List(ctx context.Context, request iam.ListUsersRequest) *listing.DeduplicatingIterator[iam.User, string] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *listing.DeduplicatingIterator[iam.User, string]
	if rf, ok := ret.Get(0).(func(context.Context, iam.ListUsersRequest) *listing.DeduplicatingIterator[iam.User, string]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*listing.DeduplicatingIterator[iam.User, string])
		}
	}

	return r0
}

// MockUsersAPIInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockUsersAPIInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - request iam.ListUsersRequest
func (_e *MockUsersAPIInterface_Expecter) List(ctx interface{}, request interface{}) *MockUsersAPIInterface_List_Call {
	return &MockUsersAPIInterface_List_Call{Call: _e.mock.On("List", ctx, request)}
}

func (_c *MockUsersAPIInterface_List_Call) Run(run func(ctx context.Context, request iam.ListUsersRequest)) *MockUsersAPIInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iam.ListUsersRequest))
	})
	return _c
}

func (_c *MockUsersAPIInterface_List_Call) Return(_a0 *listing.DeduplicatingIterator[iam.User, string]) *MockUsersAPIInterface_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUsersAPIInterface_List_Call) RunAndReturn(run func(context.Context, iam.ListUsersRequest) *listing.DeduplicatingIterator[iam.User, string]) *MockUsersAPIInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListAll provides a mock function with given fields: ctx, request
func (_m *MockUsersAPIInterface) ListAll(ctx context.Context, request iam.ListUsersRequest) ([]iam.User, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListAll")
	}

	var r0 []iam.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iam.ListUsersRequest) ([]iam.User, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iam.ListUsersRequest) []iam.User); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]iam.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iam.ListUsersRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUsersAPIInterface_ListAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAll'
type MockUsersAPIInterface_ListAll_Call struct {
	*mock.Call
}

// ListAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request iam.ListUsersRequest
func (_e *MockUsersAPIInterface_Expecter) ListAll(ctx interface{}, request interface{}) *MockUsersAPIInterface_ListAll_Call {
	return &MockUsersAPIInterface_ListAll_Call{Call: _e.mock.On("ListAll", ctx, request)}
}

func (_c *MockUsersAPIInterface_ListAll_Call) Run(run func(ctx context.Context, request iam.ListUsersRequest)) *MockUsersAPIInterface_ListAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iam.ListUsersRequest))
	})
	return _c
}

func (_c *MockUsersAPIInterface_ListAll_Call) Return(_a0 []iam.User, _a1 error) *MockUsersAPIInterface_ListAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUsersAPIInterface_ListAll_Call) RunAndReturn(run func(context.Context, iam.ListUsersRequest) ([]iam.User, error)) *MockUsersAPIInterface_ListAll_Call {
	_c.Call.Return(run)
	return _c
}

// Patch provides a mock function with given fields: ctx, request
func (_m *MockUsersAPIInterface) Patch(ctx context.Context, request iam.PartialUpdate) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Patch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, iam.PartialUpdate) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUsersAPIInterface_Patch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Patch'
type MockUsersAPIInterface_Patch_Call struct {
	*mock.Call
}

// Patch is a helper method to define mock.On call
//   - ctx context.Context
//   - request iam.PartialUpdate
func (_e *MockUsersAPIInterface_Expecter) Patch(ctx interface{}, request interface{}) *MockUsersAPIInterface_Patch_Call {
	return &MockUsersAPIInterface_Patch_Call{Call: _e.mock.On("Patch", ctx, request)}
}

func (_c *MockUsersAPIInterface_Patch_Call) Run(run func(ctx context.Context, request iam.PartialUpdate)) *MockUsersAPIInterface_Patch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iam.PartialUpdate))
	})
	return _c
}

func (_c *MockUsersAPIInterface_Patch_Call) Return(_a0 error) *MockUsersAPIInterface_Patch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUsersAPIInterface_Patch_Call) RunAndReturn(run func(context.Context, iam.PartialUpdate) error) *MockUsersAPIInterface_Patch_Call {
	_c.Call.Return(run)
	return _c
}

// SetPermissions provides a mock function with given fields: ctx, request
func (_m *MockUsersAPIInterface) SetPermissions(ctx context.Context, request iam.PasswordPermissionsRequest) (*iam.PasswordPermissions, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for SetPermissions")
	}

	var r0 *iam.PasswordPermissions
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iam.PasswordPermissionsRequest) (*iam.PasswordPermissions, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iam.PasswordPermissionsRequest) *iam.PasswordPermissions); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.PasswordPermissions)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iam.PasswordPermissionsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUsersAPIInterface_SetPermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetPermissions'
type MockUsersAPIInterface_SetPermissions_Call struct {
	*mock.Call
}

// SetPermissions is a helper method to define mock.On call
//   - ctx context.Context
//   - request iam.PasswordPermissionsRequest
func (_e *MockUsersAPIInterface_Expecter) SetPermissions(ctx interface{}, request interface{}) *MockUsersAPIInterface_SetPermissions_Call {
	return &MockUsersAPIInterface_SetPermissions_Call{Call: _e.mock.On("SetPermissions", ctx, request)}
}

func (_c *MockUsersAPIInterface_SetPermissions_Call) Run(run func(ctx context.Context, request iam.PasswordPermissionsRequest)) *MockUsersAPIInterface_SetPermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iam.PasswordPermissionsRequest))
	})
	return _c
}

func (_c *MockUsersAPIInterface_SetPermissions_Call) Return(_a0 *iam.PasswordPermissions, _a1 error) *MockUsersAPIInterface_SetPermissions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUsersAPIInterface_SetPermissions_Call) RunAndReturn(run func(context.Context, iam.PasswordPermissionsRequest) (*iam.PasswordPermissions, error)) *MockUsersAPIInterface_SetPermissions_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, request
func (_m *MockUsersAPIInterface) Update(ctx context.Context, request iam.User) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, iam.User) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUsersAPIInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockUsersAPIInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - request iam.User
func (_e *MockUsersAPIInterface_Expecter) Update(ctx interface{}, request interface{}) *MockUsersAPIInterface_Update_Call {
	return &MockUsersAPIInterface_Update_Call{Call: _e.mock.On("Update", ctx, request)}
}

func (_c *MockUsersAPIInterface_Update_Call) Run(run func(ctx context.Context, request iam.User)) *MockUsersAPIInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iam.User))
	})
	return _c
}

func (_c *MockUsersAPIInterface_Update_Call) Return(_a0 error) *MockUsersAPIInterface_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUsersAPIInterface_Update_Call) RunAndReturn(run func(context.Context, iam.User) error) *MockUsersAPIInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePermissions provides a mock function with given fields: ctx, request
func (_m *MockUsersAPIInterface) UpdatePermissions(ctx context.Context, request iam.PasswordPermissionsRequest) (*iam.PasswordPermissions, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePermissions")
	}

	var r0 *iam.PasswordPermissions
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iam.PasswordPermissionsRequest) (*iam.PasswordPermissions, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iam.PasswordPermissionsRequest) *iam.PasswordPermissions); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.PasswordPermissions)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iam.PasswordPermissionsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUsersAPIInterface_UpdatePermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePermissions'
type MockUsersAPIInterface_UpdatePermissions_Call struct {
	*mock.Call
}

// UpdatePermissions is a helper method to define mock.On call
//   - ctx context.Context
//   - request iam.PasswordPermissionsRequest
func (_e *MockUsersAPIInterface_Expecter) UpdatePermissions(ctx interface{}, request interface{}) *MockUsersAPIInterface_UpdatePermissions_Call {
	return &MockUsersAPIInterface_UpdatePermissions_Call{Call: _e.mock.On("UpdatePermissions", ctx, request)}
}

func (_c *MockUsersAPIInterface_UpdatePermissions_Call) Run(run func(ctx context.Context, request iam.PasswordPermissionsRequest)) *MockUsersAPIInterface_UpdatePermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iam.PasswordPermissionsRequest))
	})
	return _c
}

func (_c *MockUsersAPIInterface_UpdatePermissions_Call) Return(_a0 *iam.PasswordPermissions, _a1 error) *MockUsersAPIInterface_UpdatePermissions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUsersAPIInterface_UpdatePermissions_Call) RunAndReturn(run func(context.Context, iam.PasswordPermissionsRequest) (*iam.PasswordPermissions, error)) *MockUsersAPIInterface_UpdatePermissions_Call {
	_c.Call.Return(run)
	return _c
}

// UserUserNameToIdMap provides a mock function with given fields: ctx, request
func (_m *MockUsersAPIInterface) UserUserNameToIdMap(ctx context.Context, request iam.ListUsersRequest) (map[string]string, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UserUserNameToIdMap")
	}

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iam.ListUsersRequest) (map[string]string, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iam.ListUsersRequest) map[string]string); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iam.ListUsersRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUsersAPIInterface_UserUserNameToIdMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserUserNameToIdMap'
type MockUsersAPIInterface_UserUserNameToIdMap_Call struct {
	*mock.Call
}

// UserUserNameToIdMap is a helper method to define mock.On call
//   - ctx context.Context
//   - request iam.ListUsersRequest
func (_e *MockUsersAPIInterface_Expecter) UserUserNameToIdMap(ctx interface{}, request interface{}) *MockUsersAPIInterface_UserUserNameToIdMap_Call {
	return &MockUsersAPIInterface_UserUserNameToIdMap_Call{Call: _e.mock.On("UserUserNameToIdMap", ctx, request)}
}

func (_c *MockUsersAPIInterface_UserUserNameToIdMap_Call) Run(run func(ctx context.Context, request iam.ListUsersRequest)) *MockUsersAPIInterface_UserUserNameToIdMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iam.ListUsersRequest))
	})
	return _c
}

func (_c *MockUsersAPIInterface_UserUserNameToIdMap_Call) Return(_a0 map[string]string, _a1 error) *MockUsersAPIInterface_UserUserNameToIdMap_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUsersAPIInterface_UserUserNameToIdMap_Call) RunAndReturn(run func(context.Context, iam.ListUsersRequest) (map[string]string, error)) *MockUsersAPIInterface_UserUserNameToIdMap_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockUsersAPIInterface) WithImpl(impl iam.UsersService) iam.UsersAPIInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 iam.UsersAPIInterface
	if rf, ok := ret.Get(0).(func(iam.UsersService) iam.UsersAPIInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(iam.UsersAPIInterface)
		}
	}

	return r0
}

// MockUsersAPIInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockUsersAPIInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl iam.UsersService
func (_e *MockUsersAPIInterface_Expecter) WithImpl(impl interface{}) *MockUsersAPIInterface_WithImpl_Call {
	return &MockUsersAPIInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockUsersAPIInterface_WithImpl_Call) Run(run func(impl iam.UsersService)) *MockUsersAPIInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(iam.UsersService))
	})
	return _c
}

func (_c *MockUsersAPIInterface_WithImpl_Call) Return(_a0 iam.UsersAPIInterface) *MockUsersAPIInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUsersAPIInterface_WithImpl_Call) RunAndReturn(run func(iam.UsersService) iam.UsersAPIInterface) *MockUsersAPIInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUsersAPIInterface creates a new instance of MockUsersAPIInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUsersAPIInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUsersAPIInterface {
	mock := &MockUsersAPIInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
