// Code generated by mockery v2.38.0. DO NOT EDIT.

package iam

import (
	context "context"

	listing "github.com/databricks/databricks-sdk-go/listing"
	iam "github.com/databricks/databricks-sdk-go/service/iam"

	mock "github.com/stretchr/testify/mock"
)

// MockWorkspaceAssignmentAPIInterface is an autogenerated mock type for the WorkspaceAssignmentAPIInterface type
type MockWorkspaceAssignmentAPIInterface struct {
	mock.Mock
}

type MockWorkspaceAssignmentAPIInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWorkspaceAssignmentAPIInterface) EXPECT() *MockWorkspaceAssignmentAPIInterface_Expecter {
	return &MockWorkspaceAssignmentAPIInterface_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: ctx, request
func (_m *MockWorkspaceAssignmentAPIInterface) Delete(ctx context.Context, request iam.DeleteWorkspaceAssignmentRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, iam.DeleteWorkspaceAssignmentRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWorkspaceAssignmentAPIInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockWorkspaceAssignmentAPIInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - request iam.DeleteWorkspaceAssignmentRequest
func (_e *MockWorkspaceAssignmentAPIInterface_Expecter) Delete(ctx interface{}, request interface{}) *MockWorkspaceAssignmentAPIInterface_Delete_Call {
	return &MockWorkspaceAssignmentAPIInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, request)}
}

func (_c *MockWorkspaceAssignmentAPIInterface_Delete_Call) Run(run func(ctx context.Context, request iam.DeleteWorkspaceAssignmentRequest)) *MockWorkspaceAssignmentAPIInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iam.DeleteWorkspaceAssignmentRequest))
	})
	return _c
}

func (_c *MockWorkspaceAssignmentAPIInterface_Delete_Call) Return(_a0 error) *MockWorkspaceAssignmentAPIInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWorkspaceAssignmentAPIInterface_Delete_Call) RunAndReturn(run func(context.Context, iam.DeleteWorkspaceAssignmentRequest) error) *MockWorkspaceAssignmentAPIInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByWorkspaceIdAndPrincipalId provides a mock function with given fields: ctx, workspaceId, principalId
func (_m *MockWorkspaceAssignmentAPIInterface) DeleteByWorkspaceIdAndPrincipalId(ctx context.Context, workspaceId int64, principalId int64) error {
	ret := _m.Called(ctx, workspaceId, principalId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByWorkspaceIdAndPrincipalId")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, workspaceId, principalId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWorkspaceAssignmentAPIInterface_DeleteByWorkspaceIdAndPrincipalId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByWorkspaceIdAndPrincipalId'
type MockWorkspaceAssignmentAPIInterface_DeleteByWorkspaceIdAndPrincipalId_Call struct {
	*mock.Call
}

// DeleteByWorkspaceIdAndPrincipalId is a helper method to define mock.On call
//   - ctx context.Context
//   - workspaceId int64
//   - principalId int64
func (_e *MockWorkspaceAssignmentAPIInterface_Expecter) DeleteByWorkspaceIdAndPrincipalId(ctx interface{}, workspaceId interface{}, principalId interface{}) *MockWorkspaceAssignmentAPIInterface_DeleteByWorkspaceIdAndPrincipalId_Call {
	return &MockWorkspaceAssignmentAPIInterface_DeleteByWorkspaceIdAndPrincipalId_Call{Call: _e.mock.On("DeleteByWorkspaceIdAndPrincipalId", ctx, workspaceId, principalId)}
}

func (_c *MockWorkspaceAssignmentAPIInterface_DeleteByWorkspaceIdAndPrincipalId_Call) Run(run func(ctx context.Context, workspaceId int64, principalId int64)) *MockWorkspaceAssignmentAPIInterface_DeleteByWorkspaceIdAndPrincipalId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *MockWorkspaceAssignmentAPIInterface_DeleteByWorkspaceIdAndPrincipalId_Call) Return(_a0 error) *MockWorkspaceAssignmentAPIInterface_DeleteByWorkspaceIdAndPrincipalId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWorkspaceAssignmentAPIInterface_DeleteByWorkspaceIdAndPrincipalId_Call) RunAndReturn(run func(context.Context, int64, int64) error) *MockWorkspaceAssignmentAPIInterface_DeleteByWorkspaceIdAndPrincipalId_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, request
func (_m *MockWorkspaceAssignmentAPIInterface) Get(ctx context.Context, request iam.GetWorkspaceAssignmentRequest) (*iam.WorkspacePermissions, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *iam.WorkspacePermissions
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iam.GetWorkspaceAssignmentRequest) (*iam.WorkspacePermissions, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iam.GetWorkspaceAssignmentRequest) *iam.WorkspacePermissions); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.WorkspacePermissions)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iam.GetWorkspaceAssignmentRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWorkspaceAssignmentAPIInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockWorkspaceAssignmentAPIInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - request iam.GetWorkspaceAssignmentRequest
func (_e *MockWorkspaceAssignmentAPIInterface_Expecter) Get(ctx interface{}, request interface{}) *MockWorkspaceAssignmentAPIInterface_Get_Call {
	return &MockWorkspaceAssignmentAPIInterface_Get_Call{Call: _e.mock.On("Get", ctx, request)}
}

func (_c *MockWorkspaceAssignmentAPIInterface_Get_Call) Run(run func(ctx context.Context, request iam.GetWorkspaceAssignmentRequest)) *MockWorkspaceAssignmentAPIInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iam.GetWorkspaceAssignmentRequest))
	})
	return _c
}

func (_c *MockWorkspaceAssignmentAPIInterface_Get_Call) Return(_a0 *iam.WorkspacePermissions, _a1 error) *MockWorkspaceAssignmentAPIInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWorkspaceAssignmentAPIInterface_Get_Call) RunAndReturn(run func(context.Context, iam.GetWorkspaceAssignmentRequest) (*iam.WorkspacePermissions, error)) *MockWorkspaceAssignmentAPIInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByWorkspaceId provides a mock function with given fields: ctx, workspaceId
func (_m *MockWorkspaceAssignmentAPIInterface) GetByWorkspaceId(ctx context.Context, workspaceId int64) (*iam.WorkspacePermissions, error) {
	ret := _m.Called(ctx, workspaceId)

	if len(ret) == 0 {
		panic("no return value specified for GetByWorkspaceId")
	}

	var r0 *iam.WorkspacePermissions
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*iam.WorkspacePermissions, error)); ok {
		return rf(ctx, workspaceId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *iam.WorkspacePermissions); ok {
		r0 = rf(ctx, workspaceId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.WorkspacePermissions)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, workspaceId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWorkspaceAssignmentAPIInterface_GetByWorkspaceId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByWorkspaceId'
type MockWorkspaceAssignmentAPIInterface_GetByWorkspaceId_Call struct {
	*mock.Call
}

// GetByWorkspaceId is a helper method to define mock.On call
//   - ctx context.Context
//   - workspaceId int64
func (_e *MockWorkspaceAssignmentAPIInterface_Expecter) GetByWorkspaceId(ctx interface{}, workspaceId interface{}) *MockWorkspaceAssignmentAPIInterface_GetByWorkspaceId_Call {
	return &MockWorkspaceAssignmentAPIInterface_GetByWorkspaceId_Call{Call: _e.mock.On("GetByWorkspaceId", ctx, workspaceId)}
}

func (_c *MockWorkspaceAssignmentAPIInterface_GetByWorkspaceId_Call) Run(run func(ctx context.Context, workspaceId int64)) *MockWorkspaceAssignmentAPIInterface_GetByWorkspaceId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockWorkspaceAssignmentAPIInterface_GetByWorkspaceId_Call) Return(_a0 *iam.WorkspacePermissions, _a1 error) *MockWorkspaceAssignmentAPIInterface_GetByWorkspaceId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWorkspaceAssignmentAPIInterface_GetByWorkspaceId_Call) RunAndReturn(run func(context.Context, int64) (*iam.WorkspacePermissions, error)) *MockWorkspaceAssignmentAPIInterface_GetByWorkspaceId_Call {
	_c.Call.Return(run)
	return _c
}

// Impl provides a mock function with given fields:
func (_m *MockWorkspaceAssignmentAPIInterface) Impl() iam.WorkspaceAssignmentService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 iam.WorkspaceAssignmentService
	if rf, ok := ret.Get(0).(func() iam.WorkspaceAssignmentService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(iam.WorkspaceAssignmentService)
		}
	}

	return r0
}

// MockWorkspaceAssignmentAPIInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockWorkspaceAssignmentAPIInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockWorkspaceAssignmentAPIInterface_Expecter) Impl() *MockWorkspaceAssignmentAPIInterface_Impl_Call {
	return &MockWorkspaceAssignmentAPIInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockWorkspaceAssignmentAPIInterface_Impl_Call) Run(run func()) *MockWorkspaceAssignmentAPIInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockWorkspaceAssignmentAPIInterface_Impl_Call) Return(_a0 iam.WorkspaceAssignmentService) *MockWorkspaceAssignmentAPIInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWorkspaceAssignmentAPIInterface_Impl_Call) RunAndReturn(run func() iam.WorkspaceAssignmentService) *MockWorkspaceAssignmentAPIInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, request
func (_m *MockWorkspaceAssignmentAPIInterface) List(ctx context.Context, request iam.ListWorkspaceAssignmentRequest) *listing.PaginatingIterator[iam.ListWorkspaceAssignmentRequest, *iam.PermissionAssignments, iam.PermissionAssignment] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *listing.PaginatingIterator[iam.ListWorkspaceAssignmentRequest, *iam.PermissionAssignments, iam.PermissionAssignment]
	if rf, ok := ret.Get(0).(func(context.Context, iam.ListWorkspaceAssignmentRequest) *listing.PaginatingIterator[iam.ListWorkspaceAssignmentRequest, *iam.PermissionAssignments, iam.PermissionAssignment]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*listing.PaginatingIterator[iam.ListWorkspaceAssignmentRequest, *iam.PermissionAssignments, iam.PermissionAssignment])
		}
	}

	return r0
}

// MockWorkspaceAssignmentAPIInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockWorkspaceAssignmentAPIInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - request iam.ListWorkspaceAssignmentRequest
func (_e *MockWorkspaceAssignmentAPIInterface_Expecter) List(ctx interface{}, request interface{}) *MockWorkspaceAssignmentAPIInterface_List_Call {
	return &MockWorkspaceAssignmentAPIInterface_List_Call{Call: _e.mock.On("List", ctx, request)}
}

func (_c *MockWorkspaceAssignmentAPIInterface_List_Call) Run(run func(ctx context.Context, request iam.ListWorkspaceAssignmentRequest)) *MockWorkspaceAssignmentAPIInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iam.ListWorkspaceAssignmentRequest))
	})
	return _c
}

func (_c *MockWorkspaceAssignmentAPIInterface_List_Call) Return(_a0 *listing.PaginatingIterator[iam.ListWorkspaceAssignmentRequest, *iam.PermissionAssignments, iam.PermissionAssignment]) *MockWorkspaceAssignmentAPIInterface_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWorkspaceAssignmentAPIInterface_List_Call) RunAndReturn(run func(context.Context, iam.ListWorkspaceAssignmentRequest) *listing.PaginatingIterator[iam.ListWorkspaceAssignmentRequest, *iam.PermissionAssignments, iam.PermissionAssignment]) *MockWorkspaceAssignmentAPIInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListAll provides a mock function with given fields: ctx, request
func (_m *MockWorkspaceAssignmentAPIInterface) ListAll(ctx context.Context, request iam.ListWorkspaceAssignmentRequest) ([]iam.PermissionAssignment, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListAll")
	}

	var r0 []iam.PermissionAssignment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iam.ListWorkspaceAssignmentRequest) ([]iam.PermissionAssignment, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iam.ListWorkspaceAssignmentRequest) []iam.PermissionAssignment); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]iam.PermissionAssignment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iam.ListWorkspaceAssignmentRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWorkspaceAssignmentAPIInterface_ListAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAll'
type MockWorkspaceAssignmentAPIInterface_ListAll_Call struct {
	*mock.Call
}

// ListAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request iam.ListWorkspaceAssignmentRequest
func (_e *MockWorkspaceAssignmentAPIInterface_Expecter) ListAll(ctx interface{}, request interface{}) *MockWorkspaceAssignmentAPIInterface_ListAll_Call {
	return &MockWorkspaceAssignmentAPIInterface_ListAll_Call{Call: _e.mock.On("ListAll", ctx, request)}
}

func (_c *MockWorkspaceAssignmentAPIInterface_ListAll_Call) Run(run func(ctx context.Context, request iam.ListWorkspaceAssignmentRequest)) *MockWorkspaceAssignmentAPIInterface_ListAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iam.ListWorkspaceAssignmentRequest))
	})
	return _c
}

func (_c *MockWorkspaceAssignmentAPIInterface_ListAll_Call) Return(_a0 []iam.PermissionAssignment, _a1 error) *MockWorkspaceAssignmentAPIInterface_ListAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWorkspaceAssignmentAPIInterface_ListAll_Call) RunAndReturn(run func(context.Context, iam.ListWorkspaceAssignmentRequest) ([]iam.PermissionAssignment, error)) *MockWorkspaceAssignmentAPIInterface_ListAll_Call {
	_c.Call.Return(run)
	return _c
}

// ListByWorkspaceId provides a mock function with given fields: ctx, workspaceId
func (_m *MockWorkspaceAssignmentAPIInterface) ListByWorkspaceId(ctx context.Context, workspaceId int64) (*iam.PermissionAssignments, error) {
	ret := _m.Called(ctx, workspaceId)

	if len(ret) == 0 {
		panic("no return value specified for ListByWorkspaceId")
	}

	var r0 *iam.PermissionAssignments
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*iam.PermissionAssignments, error)); ok {
		return rf(ctx, workspaceId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *iam.PermissionAssignments); ok {
		r0 = rf(ctx, workspaceId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.PermissionAssignments)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, workspaceId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWorkspaceAssignmentAPIInterface_ListByWorkspaceId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByWorkspaceId'
type MockWorkspaceAssignmentAPIInterface_ListByWorkspaceId_Call struct {
	*mock.Call
}

// ListByWorkspaceId is a helper method to define mock.On call
//   - ctx context.Context
//   - workspaceId int64
func (_e *MockWorkspaceAssignmentAPIInterface_Expecter) ListByWorkspaceId(ctx interface{}, workspaceId interface{}) *MockWorkspaceAssignmentAPIInterface_ListByWorkspaceId_Call {
	return &MockWorkspaceAssignmentAPIInterface_ListByWorkspaceId_Call{Call: _e.mock.On("ListByWorkspaceId", ctx, workspaceId)}
}

func (_c *MockWorkspaceAssignmentAPIInterface_ListByWorkspaceId_Call) Run(run func(ctx context.Context, workspaceId int64)) *MockWorkspaceAssignmentAPIInterface_ListByWorkspaceId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockWorkspaceAssignmentAPIInterface_ListByWorkspaceId_Call) Return(_a0 *iam.PermissionAssignments, _a1 error) *MockWorkspaceAssignmentAPIInterface_ListByWorkspaceId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWorkspaceAssignmentAPIInterface_ListByWorkspaceId_Call) RunAndReturn(run func(context.Context, int64) (*iam.PermissionAssignments, error)) *MockWorkspaceAssignmentAPIInterface_ListByWorkspaceId_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, request
func (_m *MockWorkspaceAssignmentAPIInterface) Update(ctx context.Context, request iam.UpdateWorkspaceAssignments) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, iam.UpdateWorkspaceAssignments) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWorkspaceAssignmentAPIInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockWorkspaceAssignmentAPIInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - request iam.UpdateWorkspaceAssignments
func (_e *MockWorkspaceAssignmentAPIInterface_Expecter) Update(ctx interface{}, request interface{}) *MockWorkspaceAssignmentAPIInterface_Update_Call {
	return &MockWorkspaceAssignmentAPIInterface_Update_Call{Call: _e.mock.On("Update", ctx, request)}
}

func (_c *MockWorkspaceAssignmentAPIInterface_Update_Call) Run(run func(ctx context.Context, request iam.UpdateWorkspaceAssignments)) *MockWorkspaceAssignmentAPIInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iam.UpdateWorkspaceAssignments))
	})
	return _c
}

func (_c *MockWorkspaceAssignmentAPIInterface_Update_Call) Return(_a0 error) *MockWorkspaceAssignmentAPIInterface_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWorkspaceAssignmentAPIInterface_Update_Call) RunAndReturn(run func(context.Context, iam.UpdateWorkspaceAssignments) error) *MockWorkspaceAssignmentAPIInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockWorkspaceAssignmentAPIInterface) WithImpl(impl iam.WorkspaceAssignmentService) iam.WorkspaceAssignmentAPIInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 iam.WorkspaceAssignmentAPIInterface
	if rf, ok := ret.Get(0).(func(iam.WorkspaceAssignmentService) iam.WorkspaceAssignmentAPIInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(iam.WorkspaceAssignmentAPIInterface)
		}
	}

	return r0
}

// MockWorkspaceAssignmentAPIInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockWorkspaceAssignmentAPIInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl iam.WorkspaceAssignmentService
func (_e *MockWorkspaceAssignmentAPIInterface_Expecter) WithImpl(impl interface{}) *MockWorkspaceAssignmentAPIInterface_WithImpl_Call {
	return &MockWorkspaceAssignmentAPIInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockWorkspaceAssignmentAPIInterface_WithImpl_Call) Run(run func(impl iam.WorkspaceAssignmentService)) *MockWorkspaceAssignmentAPIInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(iam.WorkspaceAssignmentService))
	})
	return _c
}

func (_c *MockWorkspaceAssignmentAPIInterface_WithImpl_Call) Return(_a0 iam.WorkspaceAssignmentAPIInterface) *MockWorkspaceAssignmentAPIInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWorkspaceAssignmentAPIInterface_WithImpl_Call) RunAndReturn(run func(iam.WorkspaceAssignmentService) iam.WorkspaceAssignmentAPIInterface) *MockWorkspaceAssignmentAPIInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWorkspaceAssignmentAPIInterface creates a new instance of MockWorkspaceAssignmentAPIInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWorkspaceAssignmentAPIInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWorkspaceAssignmentAPIInterface {
	mock := &MockWorkspaceAssignmentAPIInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
