// Code generated by mockery v2.38.0. DO NOT EDIT.

package iam

import (
	context "context"

	listing "github.com/databricks/databricks-sdk-go/listing"
	iam "github.com/databricks/databricks-sdk-go/service/iam"

	mock "github.com/stretchr/testify/mock"
)

// MockAccountServicePrincipalsAPIInterface is an autogenerated mock type for the AccountServicePrincipalsAPIInterface type
type MockAccountServicePrincipalsAPIInterface struct {
	mock.Mock
}

type MockAccountServicePrincipalsAPIInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccountServicePrincipalsAPIInterface) EXPECT() *MockAccountServicePrincipalsAPIInterface_Expecter {
	return &MockAccountServicePrincipalsAPIInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, request
func (_m *MockAccountServicePrincipalsAPIInterface) Create(ctx context.Context, request iam.ServicePrincipal) (*iam.ServicePrincipal, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *iam.ServicePrincipal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iam.ServicePrincipal) (*iam.ServicePrincipal, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iam.ServicePrincipal) *iam.ServicePrincipal); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ServicePrincipal)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iam.ServicePrincipal) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountServicePrincipalsAPIInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockAccountServicePrincipalsAPIInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - request iam.ServicePrincipal
func (_e *MockAccountServicePrincipalsAPIInterface_Expecter) Create(ctx interface{}, request interface{}) *MockAccountServicePrincipalsAPIInterface_Create_Call {
	return &MockAccountServicePrincipalsAPIInterface_Create_Call{Call: _e.mock.On("Create", ctx, request)}
}

func (_c *MockAccountServicePrincipalsAPIInterface_Create_Call) Run(run func(ctx context.Context, request iam.ServicePrincipal)) *MockAccountServicePrincipalsAPIInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iam.ServicePrincipal))
	})
	return _c
}

func (_c *MockAccountServicePrincipalsAPIInterface_Create_Call) Return(_a0 *iam.ServicePrincipal, _a1 error) *MockAccountServicePrincipalsAPIInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountServicePrincipalsAPIInterface_Create_Call) RunAndReturn(run func(context.Context, iam.ServicePrincipal) (*iam.ServicePrincipal, error)) *MockAccountServicePrincipalsAPIInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, request
func (_m *MockAccountServicePrincipalsAPIInterface) Delete(ctx context.Context, request iam.DeleteAccountServicePrincipalRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, iam.DeleteAccountServicePrincipalRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccountServicePrincipalsAPIInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockAccountServicePrincipalsAPIInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - request iam.DeleteAccountServicePrincipalRequest
func (_e *MockAccountServicePrincipalsAPIInterface_Expecter) Delete(ctx interface{}, request interface{}) *MockAccountServicePrincipalsAPIInterface_Delete_Call {
	return &MockAccountServicePrincipalsAPIInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, request)}
}

func (_c *MockAccountServicePrincipalsAPIInterface_Delete_Call) Run(run func(ctx context.Context, request iam.DeleteAccountServicePrincipalRequest)) *MockAccountServicePrincipalsAPIInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iam.DeleteAccountServicePrincipalRequest))
	})
	return _c
}

func (_c *MockAccountServicePrincipalsAPIInterface_Delete_Call) Return(_a0 error) *MockAccountServicePrincipalsAPIInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountServicePrincipalsAPIInterface_Delete_Call) RunAndReturn(run func(context.Context, iam.DeleteAccountServicePrincipalRequest) error) *MockAccountServicePrincipalsAPIInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteById provides a mock function with given fields: ctx, id
func (_m *MockAccountServicePrincipalsAPIInterface) DeleteById(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccountServicePrincipalsAPIInterface_DeleteById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteById'
type MockAccountServicePrincipalsAPIInterface_DeleteById_Call struct {
	*mock.Call
}

// DeleteById is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockAccountServicePrincipalsAPIInterface_Expecter) DeleteById(ctx interface{}, id interface{}) *MockAccountServicePrincipalsAPIInterface_DeleteById_Call {
	return &MockAccountServicePrincipalsAPIInterface_DeleteById_Call{Call: _e.mock.On("DeleteById", ctx, id)}
}

func (_c *MockAccountServicePrincipalsAPIInterface_DeleteById_Call) Run(run func(ctx context.Context, id string)) *MockAccountServicePrincipalsAPIInterface_DeleteById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAccountServicePrincipalsAPIInterface_DeleteById_Call) Return(_a0 error) *MockAccountServicePrincipalsAPIInterface_DeleteById_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountServicePrincipalsAPIInterface_DeleteById_Call) RunAndReturn(run func(context.Context, string) error) *MockAccountServicePrincipalsAPIInterface_DeleteById_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, request
func (_m *MockAccountServicePrincipalsAPIInterface) Get(ctx context.Context, request iam.GetAccountServicePrincipalRequest) (*iam.ServicePrincipal, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *iam.ServicePrincipal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iam.GetAccountServicePrincipalRequest) (*iam.ServicePrincipal, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iam.GetAccountServicePrincipalRequest) *iam.ServicePrincipal); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ServicePrincipal)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iam.GetAccountServicePrincipalRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountServicePrincipalsAPIInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockAccountServicePrincipalsAPIInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - request iam.GetAccountServicePrincipalRequest
func (_e *MockAccountServicePrincipalsAPIInterface_Expecter) Get(ctx interface{}, request interface{}) *MockAccountServicePrincipalsAPIInterface_Get_Call {
	return &MockAccountServicePrincipalsAPIInterface_Get_Call{Call: _e.mock.On("Get", ctx, request)}
}

func (_c *MockAccountServicePrincipalsAPIInterface_Get_Call) Run(run func(ctx context.Context, request iam.GetAccountServicePrincipalRequest)) *MockAccountServicePrincipalsAPIInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iam.GetAccountServicePrincipalRequest))
	})
	return _c
}

func (_c *MockAccountServicePrincipalsAPIInterface_Get_Call) Return(_a0 *iam.ServicePrincipal, _a1 error) *MockAccountServicePrincipalsAPIInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountServicePrincipalsAPIInterface_Get_Call) RunAndReturn(run func(context.Context, iam.GetAccountServicePrincipalRequest) (*iam.ServicePrincipal, error)) *MockAccountServicePrincipalsAPIInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByDisplayName provides a mock function with given fields: ctx, name
func (_m *MockAccountServicePrincipalsAPIInterface) GetByDisplayName(ctx context.Context, name string) (*iam.ServicePrincipal, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetByDisplayName")
	}

	var r0 *iam.ServicePrincipal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*iam.ServicePrincipal, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *iam.ServicePrincipal); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ServicePrincipal)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountServicePrincipalsAPIInterface_GetByDisplayName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByDisplayName'
type MockAccountServicePrincipalsAPIInterface_GetByDisplayName_Call struct {
	*mock.Call
}

// GetByDisplayName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockAccountServicePrincipalsAPIInterface_Expecter) GetByDisplayName(ctx interface{}, name interface{}) *MockAccountServicePrincipalsAPIInterface_GetByDisplayName_Call {
	return &MockAccountServicePrincipalsAPIInterface_GetByDisplayName_Call{Call: _e.mock.On("GetByDisplayName", ctx, name)}
}

func (_c *MockAccountServicePrincipalsAPIInterface_GetByDisplayName_Call) Run(run func(ctx context.Context, name string)) *MockAccountServicePrincipalsAPIInterface_GetByDisplayName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAccountServicePrincipalsAPIInterface_GetByDisplayName_Call) Return(_a0 *iam.ServicePrincipal, _a1 error) *MockAccountServicePrincipalsAPIInterface_GetByDisplayName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountServicePrincipalsAPIInterface_GetByDisplayName_Call) RunAndReturn(run func(context.Context, string) (*iam.ServicePrincipal, error)) *MockAccountServicePrincipalsAPIInterface_GetByDisplayName_Call {
	_c.Call.Return(run)
	return _c
}

// GetById provides a mock function with given fields: ctx, id
func (_m *MockAccountServicePrincipalsAPIInterface) GetById(ctx context.Context, id string) (*iam.ServicePrincipal, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 *iam.ServicePrincipal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*iam.ServicePrincipal, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *iam.ServicePrincipal); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ServicePrincipal)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountServicePrincipalsAPIInterface_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type MockAccountServicePrincipalsAPIInterface_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockAccountServicePrincipalsAPIInterface_Expecter) GetById(ctx interface{}, id interface{}) *MockAccountServicePrincipalsAPIInterface_GetById_Call {
	return &MockAccountServicePrincipalsAPIInterface_GetById_Call{Call: _e.mock.On("GetById", ctx, id)}
}

func (_c *MockAccountServicePrincipalsAPIInterface_GetById_Call) Run(run func(ctx context.Context, id string)) *MockAccountServicePrincipalsAPIInterface_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAccountServicePrincipalsAPIInterface_GetById_Call) Return(_a0 *iam.ServicePrincipal, _a1 error) *MockAccountServicePrincipalsAPIInterface_GetById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountServicePrincipalsAPIInterface_GetById_Call) RunAndReturn(run func(context.Context, string) (*iam.ServicePrincipal, error)) *MockAccountServicePrincipalsAPIInterface_GetById_Call {
	_c.Call.Return(run)
	return _c
}

// Impl provides a mock function with given fields:
func (_m *MockAccountServicePrincipalsAPIInterface) Impl() iam.AccountServicePrincipalsService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 iam.AccountServicePrincipalsService
	if rf, ok := ret.Get(0).(func() iam.AccountServicePrincipalsService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(iam.AccountServicePrincipalsService)
		}
	}

	return r0
}

// MockAccountServicePrincipalsAPIInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockAccountServicePrincipalsAPIInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockAccountServicePrincipalsAPIInterface_Expecter) Impl() *MockAccountServicePrincipalsAPIInterface_Impl_Call {
	return &MockAccountServicePrincipalsAPIInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockAccountServicePrincipalsAPIInterface_Impl_Call) Run(run func()) *MockAccountServicePrincipalsAPIInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAccountServicePrincipalsAPIInterface_Impl_Call) Return(_a0 iam.AccountServicePrincipalsService) *MockAccountServicePrincipalsAPIInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountServicePrincipalsAPIInterface_Impl_Call) RunAndReturn(run func() iam.AccountServicePrincipalsService) *MockAccountServicePrincipalsAPIInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, request
func (_m *MockAccountServicePrincipalsAPIInterface) List(ctx context.Context, request iam.ListAccountServicePrincipalsRequest) *listing.DeduplicatingIterator[iam.ServicePrincipal, string] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *listing.DeduplicatingIterator[iam.ServicePrincipal, string]
	if rf, ok := ret.Get(0).(func(context.Context, iam.ListAccountServicePrincipalsRequest) *listing.DeduplicatingIterator[iam.ServicePrincipal, string]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*listing.DeduplicatingIterator[iam.ServicePrincipal, string])
		}
	}

	return r0
}

// MockAccountServicePrincipalsAPIInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockAccountServicePrincipalsAPIInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - request iam.ListAccountServicePrincipalsRequest
func (_e *MockAccountServicePrincipalsAPIInterface_Expecter) List(ctx interface{}, request interface{}) *MockAccountServicePrincipalsAPIInterface_List_Call {
	return &MockAccountServicePrincipalsAPIInterface_List_Call{Call: _e.mock.On("List", ctx, request)}
}

func (_c *MockAccountServicePrincipalsAPIInterface_List_Call) Run(run func(ctx context.Context, request iam.ListAccountServicePrincipalsRequest)) *MockAccountServicePrincipalsAPIInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iam.ListAccountServicePrincipalsRequest))
	})
	return _c
}

func (_c *MockAccountServicePrincipalsAPIInterface_List_Call) Return(_a0 *listing.DeduplicatingIterator[iam.ServicePrincipal, string]) *MockAccountServicePrincipalsAPIInterface_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountServicePrincipalsAPIInterface_List_Call) RunAndReturn(run func(context.Context, iam.ListAccountServicePrincipalsRequest) *listing.DeduplicatingIterator[iam.ServicePrincipal, string]) *MockAccountServicePrincipalsAPIInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListAll provides a mock function with given fields: ctx, request
func (_m *MockAccountServicePrincipalsAPIInterface) ListAll(ctx context.Context, request iam.ListAccountServicePrincipalsRequest) ([]iam.ServicePrincipal, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListAll")
	}

	var r0 []iam.ServicePrincipal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iam.ListAccountServicePrincipalsRequest) ([]iam.ServicePrincipal, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iam.ListAccountServicePrincipalsRequest) []iam.ServicePrincipal); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]iam.ServicePrincipal)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iam.ListAccountServicePrincipalsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountServicePrincipalsAPIInterface_ListAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAll'
type MockAccountServicePrincipalsAPIInterface_ListAll_Call struct {
	*mock.Call
}

// ListAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request iam.ListAccountServicePrincipalsRequest
func (_e *MockAccountServicePrincipalsAPIInterface_Expecter) ListAll(ctx interface{}, request interface{}) *MockAccountServicePrincipalsAPIInterface_ListAll_Call {
	return &MockAccountServicePrincipalsAPIInterface_ListAll_Call{Call: _e.mock.On("ListAll", ctx, request)}
}

func (_c *MockAccountServicePrincipalsAPIInterface_ListAll_Call) Run(run func(ctx context.Context, request iam.ListAccountServicePrincipalsRequest)) *MockAccountServicePrincipalsAPIInterface_ListAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iam.ListAccountServicePrincipalsRequest))
	})
	return _c
}

func (_c *MockAccountServicePrincipalsAPIInterface_ListAll_Call) Return(_a0 []iam.ServicePrincipal, _a1 error) *MockAccountServicePrincipalsAPIInterface_ListAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountServicePrincipalsAPIInterface_ListAll_Call) RunAndReturn(run func(context.Context, iam.ListAccountServicePrincipalsRequest) ([]iam.ServicePrincipal, error)) *MockAccountServicePrincipalsAPIInterface_ListAll_Call {
	_c.Call.Return(run)
	return _c
}

// Patch provides a mock function with given fields: ctx, request
func (_m *MockAccountServicePrincipalsAPIInterface) Patch(ctx context.Context, request iam.PartialUpdate) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Patch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, iam.PartialUpdate) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccountServicePrincipalsAPIInterface_Patch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Patch'
type MockAccountServicePrincipalsAPIInterface_Patch_Call struct {
	*mock.Call
}

// Patch is a helper method to define mock.On call
//   - ctx context.Context
//   - request iam.PartialUpdate
func (_e *MockAccountServicePrincipalsAPIInterface_Expecter) Patch(ctx interface{}, request interface{}) *MockAccountServicePrincipalsAPIInterface_Patch_Call {
	return &MockAccountServicePrincipalsAPIInterface_Patch_Call{Call: _e.mock.On("Patch", ctx, request)}
}

func (_c *MockAccountServicePrincipalsAPIInterface_Patch_Call) Run(run func(ctx context.Context, request iam.PartialUpdate)) *MockAccountServicePrincipalsAPIInterface_Patch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iam.PartialUpdate))
	})
	return _c
}

func (_c *MockAccountServicePrincipalsAPIInterface_Patch_Call) Return(_a0 error) *MockAccountServicePrincipalsAPIInterface_Patch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountServicePrincipalsAPIInterface_Patch_Call) RunAndReturn(run func(context.Context, iam.PartialUpdate) error) *MockAccountServicePrincipalsAPIInterface_Patch_Call {
	_c.Call.Return(run)
	return _c
}

// ServicePrincipalDisplayNameToIdMap provides a mock function with given fields: ctx, request
func (_m *MockAccountServicePrincipalsAPIInterface) ServicePrincipalDisplayNameToIdMap(ctx context.Context, request iam.ListAccountServicePrincipalsRequest) (map[string]string, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ServicePrincipalDisplayNameToIdMap")
	}

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iam.ListAccountServicePrincipalsRequest) (map[string]string, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iam.ListAccountServicePrincipalsRequest) map[string]string); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iam.ListAccountServicePrincipalsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountServicePrincipalsAPIInterface_ServicePrincipalDisplayNameToIdMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServicePrincipalDisplayNameToIdMap'
type MockAccountServicePrincipalsAPIInterface_ServicePrincipalDisplayNameToIdMap_Call struct {
	*mock.Call
}

// ServicePrincipalDisplayNameToIdMap is a helper method to define mock.On call
//   - ctx context.Context
//   - request iam.ListAccountServicePrincipalsRequest
func (_e *MockAccountServicePrincipalsAPIInterface_Expecter) ServicePrincipalDisplayNameToIdMap(ctx interface{}, request interface{}) *MockAccountServicePrincipalsAPIInterface_ServicePrincipalDisplayNameToIdMap_Call {
	return &MockAccountServicePrincipalsAPIInterface_ServicePrincipalDisplayNameToIdMap_Call{Call: _e.mock.On("ServicePrincipalDisplayNameToIdMap", ctx, request)}
}

func (_c *MockAccountServicePrincipalsAPIInterface_ServicePrincipalDisplayNameToIdMap_Call) Run(run func(ctx context.Context, request iam.ListAccountServicePrincipalsRequest)) *MockAccountServicePrincipalsAPIInterface_ServicePrincipalDisplayNameToIdMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iam.ListAccountServicePrincipalsRequest))
	})
	return _c
}

func (_c *MockAccountServicePrincipalsAPIInterface_ServicePrincipalDisplayNameToIdMap_Call) Return(_a0 map[string]string, _a1 error) *MockAccountServicePrincipalsAPIInterface_ServicePrincipalDisplayNameToIdMap_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountServicePrincipalsAPIInterface_ServicePrincipalDisplayNameToIdMap_Call) RunAndReturn(run func(context.Context, iam.ListAccountServicePrincipalsRequest) (map[string]string, error)) *MockAccountServicePrincipalsAPIInterface_ServicePrincipalDisplayNameToIdMap_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, request
func (_m *MockAccountServicePrincipalsAPIInterface) Update(ctx context.Context, request iam.ServicePrincipal) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, iam.ServicePrincipal) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccountServicePrincipalsAPIInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockAccountServicePrincipalsAPIInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - request iam.ServicePrincipal
func (_e *MockAccountServicePrincipalsAPIInterface_Expecter) Update(ctx interface{}, request interface{}) *MockAccountServicePrincipalsAPIInterface_Update_Call {
	return &MockAccountServicePrincipalsAPIInterface_Update_Call{Call: _e.mock.On("Update", ctx, request)}
}

func (_c *MockAccountServicePrincipalsAPIInterface_Update_Call) Run(run func(ctx context.Context, request iam.ServicePrincipal)) *MockAccountServicePrincipalsAPIInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iam.ServicePrincipal))
	})
	return _c
}

func (_c *MockAccountServicePrincipalsAPIInterface_Update_Call) Return(_a0 error) *MockAccountServicePrincipalsAPIInterface_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountServicePrincipalsAPIInterface_Update_Call) RunAndReturn(run func(context.Context, iam.ServicePrincipal) error) *MockAccountServicePrincipalsAPIInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockAccountServicePrincipalsAPIInterface) WithImpl(impl iam.AccountServicePrincipalsService) iam.AccountServicePrincipalsAPIInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 iam.AccountServicePrincipalsAPIInterface
	if rf, ok := ret.Get(0).(func(iam.AccountServicePrincipalsService) iam.AccountServicePrincipalsAPIInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(iam.AccountServicePrincipalsAPIInterface)
		}
	}

	return r0
}

// MockAccountServicePrincipalsAPIInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockAccountServicePrincipalsAPIInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl iam.AccountServicePrincipalsService
func (_e *MockAccountServicePrincipalsAPIInterface_Expecter) WithImpl(impl interface{}) *MockAccountServicePrincipalsAPIInterface_WithImpl_Call {
	return &MockAccountServicePrincipalsAPIInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockAccountServicePrincipalsAPIInterface_WithImpl_Call) Run(run func(impl iam.AccountServicePrincipalsService)) *MockAccountServicePrincipalsAPIInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(iam.AccountServicePrincipalsService))
	})
	return _c
}

func (_c *MockAccountServicePrincipalsAPIInterface_WithImpl_Call) Return(_a0 iam.AccountServicePrincipalsAPIInterface) *MockAccountServicePrincipalsAPIInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountServicePrincipalsAPIInterface_WithImpl_Call) RunAndReturn(run func(iam.AccountServicePrincipalsService) iam.AccountServicePrincipalsAPIInterface) *MockAccountServicePrincipalsAPIInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAccountServicePrincipalsAPIInterface creates a new instance of MockAccountServicePrincipalsAPIInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccountServicePrincipalsAPIInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccountServicePrincipalsAPIInterface {
	mock := &MockAccountServicePrincipalsAPIInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
