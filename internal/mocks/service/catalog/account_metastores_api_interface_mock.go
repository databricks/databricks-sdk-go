// Code generated by mockery v2.38.0. DO NOT EDIT.

package catalog

import (
	context "context"

	catalog "github.com/databricks/databricks-sdk-go/service/catalog"

	listing "github.com/databricks/databricks-sdk-go/listing"

	mock "github.com/stretchr/testify/mock"
)

// MockAccountMetastoresAPIInterface is an autogenerated mock type for the AccountMetastoresAPIInterface type
type MockAccountMetastoresAPIInterface struct {
	mock.Mock
}

type MockAccountMetastoresAPIInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccountMetastoresAPIInterface) EXPECT() *MockAccountMetastoresAPIInterface_Expecter {
	return &MockAccountMetastoresAPIInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, request
func (_m *MockAccountMetastoresAPIInterface) Create(ctx context.Context, request catalog.AccountsCreateMetastore) (*catalog.AccountsMetastoreInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *catalog.AccountsMetastoreInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.AccountsCreateMetastore) (*catalog.AccountsMetastoreInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.AccountsCreateMetastore) *catalog.AccountsMetastoreInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.AccountsMetastoreInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.AccountsCreateMetastore) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountMetastoresAPIInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockAccountMetastoresAPIInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.AccountsCreateMetastore
func (_e *MockAccountMetastoresAPIInterface_Expecter) Create(ctx interface{}, request interface{}) *MockAccountMetastoresAPIInterface_Create_Call {
	return &MockAccountMetastoresAPIInterface_Create_Call{Call: _e.mock.On("Create", ctx, request)}
}

func (_c *MockAccountMetastoresAPIInterface_Create_Call) Run(run func(ctx context.Context, request catalog.AccountsCreateMetastore)) *MockAccountMetastoresAPIInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.AccountsCreateMetastore))
	})
	return _c
}

func (_c *MockAccountMetastoresAPIInterface_Create_Call) Return(_a0 *catalog.AccountsMetastoreInfo, _a1 error) *MockAccountMetastoresAPIInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountMetastoresAPIInterface_Create_Call) RunAndReturn(run func(context.Context, catalog.AccountsCreateMetastore) (*catalog.AccountsMetastoreInfo, error)) *MockAccountMetastoresAPIInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, request
func (_m *MockAccountMetastoresAPIInterface) Delete(ctx context.Context, request catalog.DeleteAccountMetastoreRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.DeleteAccountMetastoreRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccountMetastoresAPIInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockAccountMetastoresAPIInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.DeleteAccountMetastoreRequest
func (_e *MockAccountMetastoresAPIInterface_Expecter) Delete(ctx interface{}, request interface{}) *MockAccountMetastoresAPIInterface_Delete_Call {
	return &MockAccountMetastoresAPIInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, request)}
}

func (_c *MockAccountMetastoresAPIInterface_Delete_Call) Run(run func(ctx context.Context, request catalog.DeleteAccountMetastoreRequest)) *MockAccountMetastoresAPIInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.DeleteAccountMetastoreRequest))
	})
	return _c
}

func (_c *MockAccountMetastoresAPIInterface_Delete_Call) Return(_a0 error) *MockAccountMetastoresAPIInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountMetastoresAPIInterface_Delete_Call) RunAndReturn(run func(context.Context, catalog.DeleteAccountMetastoreRequest) error) *MockAccountMetastoresAPIInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByMetastoreId provides a mock function with given fields: ctx, metastoreId
func (_m *MockAccountMetastoresAPIInterface) DeleteByMetastoreId(ctx context.Context, metastoreId string) error {
	ret := _m.Called(ctx, metastoreId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByMetastoreId")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, metastoreId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccountMetastoresAPIInterface_DeleteByMetastoreId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByMetastoreId'
type MockAccountMetastoresAPIInterface_DeleteByMetastoreId_Call struct {
	*mock.Call
}

// DeleteByMetastoreId is a helper method to define mock.On call
//   - ctx context.Context
//   - metastoreId string
func (_e *MockAccountMetastoresAPIInterface_Expecter) DeleteByMetastoreId(ctx interface{}, metastoreId interface{}) *MockAccountMetastoresAPIInterface_DeleteByMetastoreId_Call {
	return &MockAccountMetastoresAPIInterface_DeleteByMetastoreId_Call{Call: _e.mock.On("DeleteByMetastoreId", ctx, metastoreId)}
}

func (_c *MockAccountMetastoresAPIInterface_DeleteByMetastoreId_Call) Run(run func(ctx context.Context, metastoreId string)) *MockAccountMetastoresAPIInterface_DeleteByMetastoreId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAccountMetastoresAPIInterface_DeleteByMetastoreId_Call) Return(_a0 error) *MockAccountMetastoresAPIInterface_DeleteByMetastoreId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountMetastoresAPIInterface_DeleteByMetastoreId_Call) RunAndReturn(run func(context.Context, string) error) *MockAccountMetastoresAPIInterface_DeleteByMetastoreId_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, request
func (_m *MockAccountMetastoresAPIInterface) Get(ctx context.Context, request catalog.GetAccountMetastoreRequest) (*catalog.AccountsMetastoreInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *catalog.AccountsMetastoreInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.GetAccountMetastoreRequest) (*catalog.AccountsMetastoreInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.GetAccountMetastoreRequest) *catalog.AccountsMetastoreInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.AccountsMetastoreInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.GetAccountMetastoreRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountMetastoresAPIInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockAccountMetastoresAPIInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.GetAccountMetastoreRequest
func (_e *MockAccountMetastoresAPIInterface_Expecter) Get(ctx interface{}, request interface{}) *MockAccountMetastoresAPIInterface_Get_Call {
	return &MockAccountMetastoresAPIInterface_Get_Call{Call: _e.mock.On("Get", ctx, request)}
}

func (_c *MockAccountMetastoresAPIInterface_Get_Call) Run(run func(ctx context.Context, request catalog.GetAccountMetastoreRequest)) *MockAccountMetastoresAPIInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.GetAccountMetastoreRequest))
	})
	return _c
}

func (_c *MockAccountMetastoresAPIInterface_Get_Call) Return(_a0 *catalog.AccountsMetastoreInfo, _a1 error) *MockAccountMetastoresAPIInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountMetastoresAPIInterface_Get_Call) RunAndReturn(run func(context.Context, catalog.GetAccountMetastoreRequest) (*catalog.AccountsMetastoreInfo, error)) *MockAccountMetastoresAPIInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByMetastoreId provides a mock function with given fields: ctx, metastoreId
func (_m *MockAccountMetastoresAPIInterface) GetByMetastoreId(ctx context.Context, metastoreId string) (*catalog.AccountsMetastoreInfo, error) {
	ret := _m.Called(ctx, metastoreId)

	if len(ret) == 0 {
		panic("no return value specified for GetByMetastoreId")
	}

	var r0 *catalog.AccountsMetastoreInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*catalog.AccountsMetastoreInfo, error)); ok {
		return rf(ctx, metastoreId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *catalog.AccountsMetastoreInfo); ok {
		r0 = rf(ctx, metastoreId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.AccountsMetastoreInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, metastoreId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountMetastoresAPIInterface_GetByMetastoreId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByMetastoreId'
type MockAccountMetastoresAPIInterface_GetByMetastoreId_Call struct {
	*mock.Call
}

// GetByMetastoreId is a helper method to define mock.On call
//   - ctx context.Context
//   - metastoreId string
func (_e *MockAccountMetastoresAPIInterface_Expecter) GetByMetastoreId(ctx interface{}, metastoreId interface{}) *MockAccountMetastoresAPIInterface_GetByMetastoreId_Call {
	return &MockAccountMetastoresAPIInterface_GetByMetastoreId_Call{Call: _e.mock.On("GetByMetastoreId", ctx, metastoreId)}
}

func (_c *MockAccountMetastoresAPIInterface_GetByMetastoreId_Call) Run(run func(ctx context.Context, metastoreId string)) *MockAccountMetastoresAPIInterface_GetByMetastoreId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAccountMetastoresAPIInterface_GetByMetastoreId_Call) Return(_a0 *catalog.AccountsMetastoreInfo, _a1 error) *MockAccountMetastoresAPIInterface_GetByMetastoreId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountMetastoresAPIInterface_GetByMetastoreId_Call) RunAndReturn(run func(context.Context, string) (*catalog.AccountsMetastoreInfo, error)) *MockAccountMetastoresAPIInterface_GetByMetastoreId_Call {
	_c.Call.Return(run)
	return _c
}

// Impl provides a mock function with given fields:
func (_m *MockAccountMetastoresAPIInterface) Impl() catalog.AccountMetastoresService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 catalog.AccountMetastoresService
	if rf, ok := ret.Get(0).(func() catalog.AccountMetastoresService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(catalog.AccountMetastoresService)
		}
	}

	return r0
}

// MockAccountMetastoresAPIInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockAccountMetastoresAPIInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockAccountMetastoresAPIInterface_Expecter) Impl() *MockAccountMetastoresAPIInterface_Impl_Call {
	return &MockAccountMetastoresAPIInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockAccountMetastoresAPIInterface_Impl_Call) Run(run func()) *MockAccountMetastoresAPIInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAccountMetastoresAPIInterface_Impl_Call) Return(_a0 catalog.AccountMetastoresService) *MockAccountMetastoresAPIInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountMetastoresAPIInterface_Impl_Call) RunAndReturn(run func() catalog.AccountMetastoresService) *MockAccountMetastoresAPIInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx
func (_m *MockAccountMetastoresAPIInterface) List(ctx context.Context) *listing.PaginatingIterator[struct{}, *catalog.ListMetastoresResponse, catalog.MetastoreInfo] {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *listing.PaginatingIterator[struct{}, *catalog.ListMetastoresResponse, catalog.MetastoreInfo]
	if rf, ok := ret.Get(0).(func(context.Context) *listing.PaginatingIterator[struct{}, *catalog.ListMetastoresResponse, catalog.MetastoreInfo]); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*listing.PaginatingIterator[struct{}, *catalog.ListMetastoresResponse, catalog.MetastoreInfo])
		}
	}

	return r0
}

// MockAccountMetastoresAPIInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockAccountMetastoresAPIInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAccountMetastoresAPIInterface_Expecter) List(ctx interface{}) *MockAccountMetastoresAPIInterface_List_Call {
	return &MockAccountMetastoresAPIInterface_List_Call{Call: _e.mock.On("List", ctx)}
}

func (_c *MockAccountMetastoresAPIInterface_List_Call) Run(run func(ctx context.Context)) *MockAccountMetastoresAPIInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockAccountMetastoresAPIInterface_List_Call) Return(_a0 *listing.PaginatingIterator[struct{}, *catalog.ListMetastoresResponse, catalog.MetastoreInfo]) *MockAccountMetastoresAPIInterface_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountMetastoresAPIInterface_List_Call) RunAndReturn(run func(context.Context) *listing.PaginatingIterator[struct{}, *catalog.ListMetastoresResponse, catalog.MetastoreInfo]) *MockAccountMetastoresAPIInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListAll provides a mock function with given fields: ctx
func (_m *MockAccountMetastoresAPIInterface) ListAll(ctx context.Context) ([]catalog.MetastoreInfo, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListAll")
	}

	var r0 []catalog.MetastoreInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]catalog.MetastoreInfo, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []catalog.MetastoreInfo); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]catalog.MetastoreInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountMetastoresAPIInterface_ListAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAll'
type MockAccountMetastoresAPIInterface_ListAll_Call struct {
	*mock.Call
}

// ListAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAccountMetastoresAPIInterface_Expecter) ListAll(ctx interface{}) *MockAccountMetastoresAPIInterface_ListAll_Call {
	return &MockAccountMetastoresAPIInterface_ListAll_Call{Call: _e.mock.On("ListAll", ctx)}
}

func (_c *MockAccountMetastoresAPIInterface_ListAll_Call) Run(run func(ctx context.Context)) *MockAccountMetastoresAPIInterface_ListAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockAccountMetastoresAPIInterface_ListAll_Call) Return(_a0 []catalog.MetastoreInfo, _a1 error) *MockAccountMetastoresAPIInterface_ListAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountMetastoresAPIInterface_ListAll_Call) RunAndReturn(run func(context.Context) ([]catalog.MetastoreInfo, error)) *MockAccountMetastoresAPIInterface_ListAll_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, request
func (_m *MockAccountMetastoresAPIInterface) Update(ctx context.Context, request catalog.AccountsUpdateMetastore) (*catalog.AccountsMetastoreInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *catalog.AccountsMetastoreInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.AccountsUpdateMetastore) (*catalog.AccountsMetastoreInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.AccountsUpdateMetastore) *catalog.AccountsMetastoreInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.AccountsMetastoreInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.AccountsUpdateMetastore) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountMetastoresAPIInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockAccountMetastoresAPIInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.AccountsUpdateMetastore
func (_e *MockAccountMetastoresAPIInterface_Expecter) Update(ctx interface{}, request interface{}) *MockAccountMetastoresAPIInterface_Update_Call {
	return &MockAccountMetastoresAPIInterface_Update_Call{Call: _e.mock.On("Update", ctx, request)}
}

func (_c *MockAccountMetastoresAPIInterface_Update_Call) Run(run func(ctx context.Context, request catalog.AccountsUpdateMetastore)) *MockAccountMetastoresAPIInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.AccountsUpdateMetastore))
	})
	return _c
}

func (_c *MockAccountMetastoresAPIInterface_Update_Call) Return(_a0 *catalog.AccountsMetastoreInfo, _a1 error) *MockAccountMetastoresAPIInterface_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountMetastoresAPIInterface_Update_Call) RunAndReturn(run func(context.Context, catalog.AccountsUpdateMetastore) (*catalog.AccountsMetastoreInfo, error)) *MockAccountMetastoresAPIInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockAccountMetastoresAPIInterface) WithImpl(impl catalog.AccountMetastoresService) catalog.AccountMetastoresAPIInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 catalog.AccountMetastoresAPIInterface
	if rf, ok := ret.Get(0).(func(catalog.AccountMetastoresService) catalog.AccountMetastoresAPIInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(catalog.AccountMetastoresAPIInterface)
		}
	}

	return r0
}

// MockAccountMetastoresAPIInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockAccountMetastoresAPIInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl catalog.AccountMetastoresService
func (_e *MockAccountMetastoresAPIInterface_Expecter) WithImpl(impl interface{}) *MockAccountMetastoresAPIInterface_WithImpl_Call {
	return &MockAccountMetastoresAPIInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockAccountMetastoresAPIInterface_WithImpl_Call) Run(run func(impl catalog.AccountMetastoresService)) *MockAccountMetastoresAPIInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(catalog.AccountMetastoresService))
	})
	return _c
}

func (_c *MockAccountMetastoresAPIInterface_WithImpl_Call) Return(_a0 catalog.AccountMetastoresAPIInterface) *MockAccountMetastoresAPIInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountMetastoresAPIInterface_WithImpl_Call) RunAndReturn(run func(catalog.AccountMetastoresService) catalog.AccountMetastoresAPIInterface) *MockAccountMetastoresAPIInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAccountMetastoresAPIInterface creates a new instance of MockAccountMetastoresAPIInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccountMetastoresAPIInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccountMetastoresAPIInterface {
	mock := &MockAccountMetastoresAPIInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
