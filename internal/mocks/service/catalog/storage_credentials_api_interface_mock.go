// Code generated by mockery v2.38.0. DO NOT EDIT.

package catalog

import (
	context "context"

	catalog "github.com/databricks/databricks-sdk-go/service/catalog"

	listing "github.com/databricks/databricks-sdk-go/listing"

	mock "github.com/stretchr/testify/mock"
)

// MockStorageCredentialsAPIInterface is an autogenerated mock type for the StorageCredentialsAPIInterface type
type MockStorageCredentialsAPIInterface struct {
	mock.Mock
}

type MockStorageCredentialsAPIInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStorageCredentialsAPIInterface) EXPECT() *MockStorageCredentialsAPIInterface_Expecter {
	return &MockStorageCredentialsAPIInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, request
func (_m *MockStorageCredentialsAPIInterface) Create(ctx context.Context, request catalog.CreateStorageCredential) (*catalog.StorageCredentialInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *catalog.StorageCredentialInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.CreateStorageCredential) (*catalog.StorageCredentialInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.CreateStorageCredential) *catalog.StorageCredentialInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.StorageCredentialInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.CreateStorageCredential) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorageCredentialsAPIInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockStorageCredentialsAPIInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.CreateStorageCredential
func (_e *MockStorageCredentialsAPIInterface_Expecter) Create(ctx interface{}, request interface{}) *MockStorageCredentialsAPIInterface_Create_Call {
	return &MockStorageCredentialsAPIInterface_Create_Call{Call: _e.mock.On("Create", ctx, request)}
}

func (_c *MockStorageCredentialsAPIInterface_Create_Call) Run(run func(ctx context.Context, request catalog.CreateStorageCredential)) *MockStorageCredentialsAPIInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.CreateStorageCredential))
	})
	return _c
}

func (_c *MockStorageCredentialsAPIInterface_Create_Call) Return(_a0 *catalog.StorageCredentialInfo, _a1 error) *MockStorageCredentialsAPIInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorageCredentialsAPIInterface_Create_Call) RunAndReturn(run func(context.Context, catalog.CreateStorageCredential) (*catalog.StorageCredentialInfo, error)) *MockStorageCredentialsAPIInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, request
func (_m *MockStorageCredentialsAPIInterface) Delete(ctx context.Context, request catalog.DeleteStorageCredentialRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.DeleteStorageCredentialRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorageCredentialsAPIInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockStorageCredentialsAPIInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.DeleteStorageCredentialRequest
func (_e *MockStorageCredentialsAPIInterface_Expecter) Delete(ctx interface{}, request interface{}) *MockStorageCredentialsAPIInterface_Delete_Call {
	return &MockStorageCredentialsAPIInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, request)}
}

func (_c *MockStorageCredentialsAPIInterface_Delete_Call) Run(run func(ctx context.Context, request catalog.DeleteStorageCredentialRequest)) *MockStorageCredentialsAPIInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.DeleteStorageCredentialRequest))
	})
	return _c
}

func (_c *MockStorageCredentialsAPIInterface_Delete_Call) Return(_a0 error) *MockStorageCredentialsAPIInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorageCredentialsAPIInterface_Delete_Call) RunAndReturn(run func(context.Context, catalog.DeleteStorageCredentialRequest) error) *MockStorageCredentialsAPIInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByName provides a mock function with given fields: ctx, name
func (_m *MockStorageCredentialsAPIInterface) DeleteByName(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByName")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorageCredentialsAPIInterface_DeleteByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByName'
type MockStorageCredentialsAPIInterface_DeleteByName_Call struct {
	*mock.Call
}

// DeleteByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockStorageCredentialsAPIInterface_Expecter) DeleteByName(ctx interface{}, name interface{}) *MockStorageCredentialsAPIInterface_DeleteByName_Call {
	return &MockStorageCredentialsAPIInterface_DeleteByName_Call{Call: _e.mock.On("DeleteByName", ctx, name)}
}

func (_c *MockStorageCredentialsAPIInterface_DeleteByName_Call) Run(run func(ctx context.Context, name string)) *MockStorageCredentialsAPIInterface_DeleteByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStorageCredentialsAPIInterface_DeleteByName_Call) Return(_a0 error) *MockStorageCredentialsAPIInterface_DeleteByName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorageCredentialsAPIInterface_DeleteByName_Call) RunAndReturn(run func(context.Context, string) error) *MockStorageCredentialsAPIInterface_DeleteByName_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, request
func (_m *MockStorageCredentialsAPIInterface) Get(ctx context.Context, request catalog.GetStorageCredentialRequest) (*catalog.StorageCredentialInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *catalog.StorageCredentialInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.GetStorageCredentialRequest) (*catalog.StorageCredentialInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.GetStorageCredentialRequest) *catalog.StorageCredentialInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.StorageCredentialInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.GetStorageCredentialRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorageCredentialsAPIInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockStorageCredentialsAPIInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.GetStorageCredentialRequest
func (_e *MockStorageCredentialsAPIInterface_Expecter) Get(ctx interface{}, request interface{}) *MockStorageCredentialsAPIInterface_Get_Call {
	return &MockStorageCredentialsAPIInterface_Get_Call{Call: _e.mock.On("Get", ctx, request)}
}

func (_c *MockStorageCredentialsAPIInterface_Get_Call) Run(run func(ctx context.Context, request catalog.GetStorageCredentialRequest)) *MockStorageCredentialsAPIInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.GetStorageCredentialRequest))
	})
	return _c
}

func (_c *MockStorageCredentialsAPIInterface_Get_Call) Return(_a0 *catalog.StorageCredentialInfo, _a1 error) *MockStorageCredentialsAPIInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorageCredentialsAPIInterface_Get_Call) RunAndReturn(run func(context.Context, catalog.GetStorageCredentialRequest) (*catalog.StorageCredentialInfo, error)) *MockStorageCredentialsAPIInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByName provides a mock function with given fields: ctx, name
func (_m *MockStorageCredentialsAPIInterface) GetByName(ctx context.Context, name string) (*catalog.StorageCredentialInfo, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetByName")
	}

	var r0 *catalog.StorageCredentialInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*catalog.StorageCredentialInfo, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *catalog.StorageCredentialInfo); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.StorageCredentialInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorageCredentialsAPIInterface_GetByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByName'
type MockStorageCredentialsAPIInterface_GetByName_Call struct {
	*mock.Call
}

// GetByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockStorageCredentialsAPIInterface_Expecter) GetByName(ctx interface{}, name interface{}) *MockStorageCredentialsAPIInterface_GetByName_Call {
	return &MockStorageCredentialsAPIInterface_GetByName_Call{Call: _e.mock.On("GetByName", ctx, name)}
}

func (_c *MockStorageCredentialsAPIInterface_GetByName_Call) Run(run func(ctx context.Context, name string)) *MockStorageCredentialsAPIInterface_GetByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStorageCredentialsAPIInterface_GetByName_Call) Return(_a0 *catalog.StorageCredentialInfo, _a1 error) *MockStorageCredentialsAPIInterface_GetByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorageCredentialsAPIInterface_GetByName_Call) RunAndReturn(run func(context.Context, string) (*catalog.StorageCredentialInfo, error)) *MockStorageCredentialsAPIInterface_GetByName_Call {
	_c.Call.Return(run)
	return _c
}

// Impl provides a mock function with given fields:
func (_m *MockStorageCredentialsAPIInterface) Impl() catalog.StorageCredentialsService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 catalog.StorageCredentialsService
	if rf, ok := ret.Get(0).(func() catalog.StorageCredentialsService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(catalog.StorageCredentialsService)
		}
	}

	return r0
}

// MockStorageCredentialsAPIInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockStorageCredentialsAPIInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockStorageCredentialsAPIInterface_Expecter) Impl() *MockStorageCredentialsAPIInterface_Impl_Call {
	return &MockStorageCredentialsAPIInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockStorageCredentialsAPIInterface_Impl_Call) Run(run func()) *MockStorageCredentialsAPIInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStorageCredentialsAPIInterface_Impl_Call) Return(_a0 catalog.StorageCredentialsService) *MockStorageCredentialsAPIInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorageCredentialsAPIInterface_Impl_Call) RunAndReturn(run func() catalog.StorageCredentialsService) *MockStorageCredentialsAPIInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx
func (_m *MockStorageCredentialsAPIInterface) List(ctx context.Context) *listing.PaginatingIterator[struct{}, *catalog.ListStorageCredentialsResponse, catalog.StorageCredentialInfo] {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *listing.PaginatingIterator[struct{}, *catalog.ListStorageCredentialsResponse, catalog.StorageCredentialInfo]
	if rf, ok := ret.Get(0).(func(context.Context) *listing.PaginatingIterator[struct{}, *catalog.ListStorageCredentialsResponse, catalog.StorageCredentialInfo]); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*listing.PaginatingIterator[struct{}, *catalog.ListStorageCredentialsResponse, catalog.StorageCredentialInfo])
		}
	}

	return r0
}

// MockStorageCredentialsAPIInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockStorageCredentialsAPIInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockStorageCredentialsAPIInterface_Expecter) List(ctx interface{}) *MockStorageCredentialsAPIInterface_List_Call {
	return &MockStorageCredentialsAPIInterface_List_Call{Call: _e.mock.On("List", ctx)}
}

func (_c *MockStorageCredentialsAPIInterface_List_Call) Run(run func(ctx context.Context)) *MockStorageCredentialsAPIInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockStorageCredentialsAPIInterface_List_Call) Return(_a0 *listing.PaginatingIterator[struct{}, *catalog.ListStorageCredentialsResponse, catalog.StorageCredentialInfo]) *MockStorageCredentialsAPIInterface_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorageCredentialsAPIInterface_List_Call) RunAndReturn(run func(context.Context) *listing.PaginatingIterator[struct{}, *catalog.ListStorageCredentialsResponse, catalog.StorageCredentialInfo]) *MockStorageCredentialsAPIInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListAll provides a mock function with given fields: ctx
func (_m *MockStorageCredentialsAPIInterface) ListAll(ctx context.Context) ([]catalog.StorageCredentialInfo, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListAll")
	}

	var r0 []catalog.StorageCredentialInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]catalog.StorageCredentialInfo, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []catalog.StorageCredentialInfo); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]catalog.StorageCredentialInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorageCredentialsAPIInterface_ListAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAll'
type MockStorageCredentialsAPIInterface_ListAll_Call struct {
	*mock.Call
}

// ListAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockStorageCredentialsAPIInterface_Expecter) ListAll(ctx interface{}) *MockStorageCredentialsAPIInterface_ListAll_Call {
	return &MockStorageCredentialsAPIInterface_ListAll_Call{Call: _e.mock.On("ListAll", ctx)}
}

func (_c *MockStorageCredentialsAPIInterface_ListAll_Call) Run(run func(ctx context.Context)) *MockStorageCredentialsAPIInterface_ListAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockStorageCredentialsAPIInterface_ListAll_Call) Return(_a0 []catalog.StorageCredentialInfo, _a1 error) *MockStorageCredentialsAPIInterface_ListAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorageCredentialsAPIInterface_ListAll_Call) RunAndReturn(run func(context.Context) ([]catalog.StorageCredentialInfo, error)) *MockStorageCredentialsAPIInterface_ListAll_Call {
	_c.Call.Return(run)
	return _c
}

// StorageCredentialInfoNameToIdMap provides a mock function with given fields: ctx
func (_m *MockStorageCredentialsAPIInterface) StorageCredentialInfoNameToIdMap(ctx context.Context) (map[string]string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for StorageCredentialInfoNameToIdMap")
	}

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (map[string]string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) map[string]string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorageCredentialsAPIInterface_StorageCredentialInfoNameToIdMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StorageCredentialInfoNameToIdMap'
type MockStorageCredentialsAPIInterface_StorageCredentialInfoNameToIdMap_Call struct {
	*mock.Call
}

// StorageCredentialInfoNameToIdMap is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockStorageCredentialsAPIInterface_Expecter) StorageCredentialInfoNameToIdMap(ctx interface{}) *MockStorageCredentialsAPIInterface_StorageCredentialInfoNameToIdMap_Call {
	return &MockStorageCredentialsAPIInterface_StorageCredentialInfoNameToIdMap_Call{Call: _e.mock.On("StorageCredentialInfoNameToIdMap", ctx)}
}

func (_c *MockStorageCredentialsAPIInterface_StorageCredentialInfoNameToIdMap_Call) Run(run func(ctx context.Context)) *MockStorageCredentialsAPIInterface_StorageCredentialInfoNameToIdMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockStorageCredentialsAPIInterface_StorageCredentialInfoNameToIdMap_Call) Return(_a0 map[string]string, _a1 error) *MockStorageCredentialsAPIInterface_StorageCredentialInfoNameToIdMap_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorageCredentialsAPIInterface_StorageCredentialInfoNameToIdMap_Call) RunAndReturn(run func(context.Context) (map[string]string, error)) *MockStorageCredentialsAPIInterface_StorageCredentialInfoNameToIdMap_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, request
func (_m *MockStorageCredentialsAPIInterface) Update(ctx context.Context, request catalog.UpdateStorageCredential) (*catalog.StorageCredentialInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *catalog.StorageCredentialInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.UpdateStorageCredential) (*catalog.StorageCredentialInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.UpdateStorageCredential) *catalog.StorageCredentialInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.StorageCredentialInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.UpdateStorageCredential) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorageCredentialsAPIInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockStorageCredentialsAPIInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.UpdateStorageCredential
func (_e *MockStorageCredentialsAPIInterface_Expecter) Update(ctx interface{}, request interface{}) *MockStorageCredentialsAPIInterface_Update_Call {
	return &MockStorageCredentialsAPIInterface_Update_Call{Call: _e.mock.On("Update", ctx, request)}
}

func (_c *MockStorageCredentialsAPIInterface_Update_Call) Run(run func(ctx context.Context, request catalog.UpdateStorageCredential)) *MockStorageCredentialsAPIInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.UpdateStorageCredential))
	})
	return _c
}

func (_c *MockStorageCredentialsAPIInterface_Update_Call) Return(_a0 *catalog.StorageCredentialInfo, _a1 error) *MockStorageCredentialsAPIInterface_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorageCredentialsAPIInterface_Update_Call) RunAndReturn(run func(context.Context, catalog.UpdateStorageCredential) (*catalog.StorageCredentialInfo, error)) *MockStorageCredentialsAPIInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// Validate provides a mock function with given fields: ctx, request
func (_m *MockStorageCredentialsAPIInterface) Validate(ctx context.Context, request catalog.ValidateStorageCredential) (*catalog.ValidateStorageCredentialResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 *catalog.ValidateStorageCredentialResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.ValidateStorageCredential) (*catalog.ValidateStorageCredentialResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.ValidateStorageCredential) *catalog.ValidateStorageCredentialResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.ValidateStorageCredentialResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.ValidateStorageCredential) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorageCredentialsAPIInterface_Validate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Validate'
type MockStorageCredentialsAPIInterface_Validate_Call struct {
	*mock.Call
}

// Validate is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.ValidateStorageCredential
func (_e *MockStorageCredentialsAPIInterface_Expecter) Validate(ctx interface{}, request interface{}) *MockStorageCredentialsAPIInterface_Validate_Call {
	return &MockStorageCredentialsAPIInterface_Validate_Call{Call: _e.mock.On("Validate", ctx, request)}
}

func (_c *MockStorageCredentialsAPIInterface_Validate_Call) Run(run func(ctx context.Context, request catalog.ValidateStorageCredential)) *MockStorageCredentialsAPIInterface_Validate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.ValidateStorageCredential))
	})
	return _c
}

func (_c *MockStorageCredentialsAPIInterface_Validate_Call) Return(_a0 *catalog.ValidateStorageCredentialResponse, _a1 error) *MockStorageCredentialsAPIInterface_Validate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorageCredentialsAPIInterface_Validate_Call) RunAndReturn(run func(context.Context, catalog.ValidateStorageCredential) (*catalog.ValidateStorageCredentialResponse, error)) *MockStorageCredentialsAPIInterface_Validate_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockStorageCredentialsAPIInterface) WithImpl(impl catalog.StorageCredentialsService) catalog.StorageCredentialsAPIInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 catalog.StorageCredentialsAPIInterface
	if rf, ok := ret.Get(0).(func(catalog.StorageCredentialsService) catalog.StorageCredentialsAPIInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(catalog.StorageCredentialsAPIInterface)
		}
	}

	return r0
}

// MockStorageCredentialsAPIInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockStorageCredentialsAPIInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl catalog.StorageCredentialsService
func (_e *MockStorageCredentialsAPIInterface_Expecter) WithImpl(impl interface{}) *MockStorageCredentialsAPIInterface_WithImpl_Call {
	return &MockStorageCredentialsAPIInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockStorageCredentialsAPIInterface_WithImpl_Call) Run(run func(impl catalog.StorageCredentialsService)) *MockStorageCredentialsAPIInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(catalog.StorageCredentialsService))
	})
	return _c
}

func (_c *MockStorageCredentialsAPIInterface_WithImpl_Call) Return(_a0 catalog.StorageCredentialsAPIInterface) *MockStorageCredentialsAPIInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorageCredentialsAPIInterface_WithImpl_Call) RunAndReturn(run func(catalog.StorageCredentialsService) catalog.StorageCredentialsAPIInterface) *MockStorageCredentialsAPIInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStorageCredentialsAPIInterface creates a new instance of MockStorageCredentialsAPIInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStorageCredentialsAPIInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStorageCredentialsAPIInterface {
	mock := &MockStorageCredentialsAPIInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
