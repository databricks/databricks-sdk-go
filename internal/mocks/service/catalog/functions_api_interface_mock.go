// Code generated by mockery v2.38.0. DO NOT EDIT.

package catalog

import (
	context "context"

	catalog "github.com/databricks/databricks-sdk-go/service/catalog"

	listing "github.com/databricks/databricks-sdk-go/listing"

	mock "github.com/stretchr/testify/mock"
)

// MockFunctionsAPIInterface is an autogenerated mock type for the FunctionsAPIInterface type
type MockFunctionsAPIInterface struct {
	mock.Mock
}

type MockFunctionsAPIInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFunctionsAPIInterface) EXPECT() *MockFunctionsAPIInterface_Expecter {
	return &MockFunctionsAPIInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, request
func (_m *MockFunctionsAPIInterface) Create(ctx context.Context, request catalog.CreateFunctionRequest) (*catalog.FunctionInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *catalog.FunctionInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.CreateFunctionRequest) (*catalog.FunctionInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.CreateFunctionRequest) *catalog.FunctionInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.FunctionInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.CreateFunctionRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFunctionsAPIInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockFunctionsAPIInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.CreateFunctionRequest
func (_e *MockFunctionsAPIInterface_Expecter) Create(ctx interface{}, request interface{}) *MockFunctionsAPIInterface_Create_Call {
	return &MockFunctionsAPIInterface_Create_Call{Call: _e.mock.On("Create", ctx, request)}
}

func (_c *MockFunctionsAPIInterface_Create_Call) Run(run func(ctx context.Context, request catalog.CreateFunctionRequest)) *MockFunctionsAPIInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.CreateFunctionRequest))
	})
	return _c
}

func (_c *MockFunctionsAPIInterface_Create_Call) Return(_a0 *catalog.FunctionInfo, _a1 error) *MockFunctionsAPIInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFunctionsAPIInterface_Create_Call) RunAndReturn(run func(context.Context, catalog.CreateFunctionRequest) (*catalog.FunctionInfo, error)) *MockFunctionsAPIInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, request
func (_m *MockFunctionsAPIInterface) Delete(ctx context.Context, request catalog.DeleteFunctionRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.DeleteFunctionRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFunctionsAPIInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockFunctionsAPIInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.DeleteFunctionRequest
func (_e *MockFunctionsAPIInterface_Expecter) Delete(ctx interface{}, request interface{}) *MockFunctionsAPIInterface_Delete_Call {
	return &MockFunctionsAPIInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, request)}
}

func (_c *MockFunctionsAPIInterface_Delete_Call) Run(run func(ctx context.Context, request catalog.DeleteFunctionRequest)) *MockFunctionsAPIInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.DeleteFunctionRequest))
	})
	return _c
}

func (_c *MockFunctionsAPIInterface_Delete_Call) Return(_a0 error) *MockFunctionsAPIInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFunctionsAPIInterface_Delete_Call) RunAndReturn(run func(context.Context, catalog.DeleteFunctionRequest) error) *MockFunctionsAPIInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByName provides a mock function with given fields: ctx, name
func (_m *MockFunctionsAPIInterface) DeleteByName(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByName")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFunctionsAPIInterface_DeleteByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByName'
type MockFunctionsAPIInterface_DeleteByName_Call struct {
	*mock.Call
}

// DeleteByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockFunctionsAPIInterface_Expecter) DeleteByName(ctx interface{}, name interface{}) *MockFunctionsAPIInterface_DeleteByName_Call {
	return &MockFunctionsAPIInterface_DeleteByName_Call{Call: _e.mock.On("DeleteByName", ctx, name)}
}

func (_c *MockFunctionsAPIInterface_DeleteByName_Call) Run(run func(ctx context.Context, name string)) *MockFunctionsAPIInterface_DeleteByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockFunctionsAPIInterface_DeleteByName_Call) Return(_a0 error) *MockFunctionsAPIInterface_DeleteByName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFunctionsAPIInterface_DeleteByName_Call) RunAndReturn(run func(context.Context, string) error) *MockFunctionsAPIInterface_DeleteByName_Call {
	_c.Call.Return(run)
	return _c
}

// FunctionInfoNameToFullNameMap provides a mock function with given fields: ctx, request
func (_m *MockFunctionsAPIInterface) FunctionInfoNameToFullNameMap(ctx context.Context, request catalog.ListFunctionsRequest) (map[string]string, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for FunctionInfoNameToFullNameMap")
	}

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.ListFunctionsRequest) (map[string]string, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.ListFunctionsRequest) map[string]string); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.ListFunctionsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFunctionsAPIInterface_FunctionInfoNameToFullNameMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FunctionInfoNameToFullNameMap'
type MockFunctionsAPIInterface_FunctionInfoNameToFullNameMap_Call struct {
	*mock.Call
}

// FunctionInfoNameToFullNameMap is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.ListFunctionsRequest
func (_e *MockFunctionsAPIInterface_Expecter) FunctionInfoNameToFullNameMap(ctx interface{}, request interface{}) *MockFunctionsAPIInterface_FunctionInfoNameToFullNameMap_Call {
	return &MockFunctionsAPIInterface_FunctionInfoNameToFullNameMap_Call{Call: _e.mock.On("FunctionInfoNameToFullNameMap", ctx, request)}
}

func (_c *MockFunctionsAPIInterface_FunctionInfoNameToFullNameMap_Call) Run(run func(ctx context.Context, request catalog.ListFunctionsRequest)) *MockFunctionsAPIInterface_FunctionInfoNameToFullNameMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.ListFunctionsRequest))
	})
	return _c
}

func (_c *MockFunctionsAPIInterface_FunctionInfoNameToFullNameMap_Call) Return(_a0 map[string]string, _a1 error) *MockFunctionsAPIInterface_FunctionInfoNameToFullNameMap_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFunctionsAPIInterface_FunctionInfoNameToFullNameMap_Call) RunAndReturn(run func(context.Context, catalog.ListFunctionsRequest) (map[string]string, error)) *MockFunctionsAPIInterface_FunctionInfoNameToFullNameMap_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, request
func (_m *MockFunctionsAPIInterface) Get(ctx context.Context, request catalog.GetFunctionRequest) (*catalog.FunctionInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *catalog.FunctionInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.GetFunctionRequest) (*catalog.FunctionInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.GetFunctionRequest) *catalog.FunctionInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.FunctionInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.GetFunctionRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFunctionsAPIInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockFunctionsAPIInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.GetFunctionRequest
func (_e *MockFunctionsAPIInterface_Expecter) Get(ctx interface{}, request interface{}) *MockFunctionsAPIInterface_Get_Call {
	return &MockFunctionsAPIInterface_Get_Call{Call: _e.mock.On("Get", ctx, request)}
}

func (_c *MockFunctionsAPIInterface_Get_Call) Run(run func(ctx context.Context, request catalog.GetFunctionRequest)) *MockFunctionsAPIInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.GetFunctionRequest))
	})
	return _c
}

func (_c *MockFunctionsAPIInterface_Get_Call) Return(_a0 *catalog.FunctionInfo, _a1 error) *MockFunctionsAPIInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFunctionsAPIInterface_Get_Call) RunAndReturn(run func(context.Context, catalog.GetFunctionRequest) (*catalog.FunctionInfo, error)) *MockFunctionsAPIInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByName provides a mock function with given fields: ctx, name
func (_m *MockFunctionsAPIInterface) GetByName(ctx context.Context, name string) (*catalog.FunctionInfo, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetByName")
	}

	var r0 *catalog.FunctionInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*catalog.FunctionInfo, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *catalog.FunctionInfo); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.FunctionInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFunctionsAPIInterface_GetByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByName'
type MockFunctionsAPIInterface_GetByName_Call struct {
	*mock.Call
}

// GetByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockFunctionsAPIInterface_Expecter) GetByName(ctx interface{}, name interface{}) *MockFunctionsAPIInterface_GetByName_Call {
	return &MockFunctionsAPIInterface_GetByName_Call{Call: _e.mock.On("GetByName", ctx, name)}
}

func (_c *MockFunctionsAPIInterface_GetByName_Call) Run(run func(ctx context.Context, name string)) *MockFunctionsAPIInterface_GetByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockFunctionsAPIInterface_GetByName_Call) Return(_a0 *catalog.FunctionInfo, _a1 error) *MockFunctionsAPIInterface_GetByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFunctionsAPIInterface_GetByName_Call) RunAndReturn(run func(context.Context, string) (*catalog.FunctionInfo, error)) *MockFunctionsAPIInterface_GetByName_Call {
	_c.Call.Return(run)
	return _c
}

// Impl provides a mock function with given fields:
func (_m *MockFunctionsAPIInterface) Impl() catalog.FunctionsService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 catalog.FunctionsService
	if rf, ok := ret.Get(0).(func() catalog.FunctionsService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(catalog.FunctionsService)
		}
	}

	return r0
}

// MockFunctionsAPIInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockFunctionsAPIInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockFunctionsAPIInterface_Expecter) Impl() *MockFunctionsAPIInterface_Impl_Call {
	return &MockFunctionsAPIInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockFunctionsAPIInterface_Impl_Call) Run(run func()) *MockFunctionsAPIInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFunctionsAPIInterface_Impl_Call) Return(_a0 catalog.FunctionsService) *MockFunctionsAPIInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFunctionsAPIInterface_Impl_Call) RunAndReturn(run func() catalog.FunctionsService) *MockFunctionsAPIInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, request
func (_m *MockFunctionsAPIInterface) List(ctx context.Context, request catalog.ListFunctionsRequest) *listing.PaginatingIterator[catalog.ListFunctionsRequest, *catalog.ListFunctionsResponse, catalog.FunctionInfo] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *listing.PaginatingIterator[catalog.ListFunctionsRequest, *catalog.ListFunctionsResponse, catalog.FunctionInfo]
	if rf, ok := ret.Get(0).(func(context.Context, catalog.ListFunctionsRequest) *listing.PaginatingIterator[catalog.ListFunctionsRequest, *catalog.ListFunctionsResponse, catalog.FunctionInfo]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*listing.PaginatingIterator[catalog.ListFunctionsRequest, *catalog.ListFunctionsResponse, catalog.FunctionInfo])
		}
	}

	return r0
}

// MockFunctionsAPIInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockFunctionsAPIInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.ListFunctionsRequest
func (_e *MockFunctionsAPIInterface_Expecter) List(ctx interface{}, request interface{}) *MockFunctionsAPIInterface_List_Call {
	return &MockFunctionsAPIInterface_List_Call{Call: _e.mock.On("List", ctx, request)}
}

func (_c *MockFunctionsAPIInterface_List_Call) Run(run func(ctx context.Context, request catalog.ListFunctionsRequest)) *MockFunctionsAPIInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.ListFunctionsRequest))
	})
	return _c
}

func (_c *MockFunctionsAPIInterface_List_Call) Return(_a0 *listing.PaginatingIterator[catalog.ListFunctionsRequest, *catalog.ListFunctionsResponse, catalog.FunctionInfo]) *MockFunctionsAPIInterface_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFunctionsAPIInterface_List_Call) RunAndReturn(run func(context.Context, catalog.ListFunctionsRequest) *listing.PaginatingIterator[catalog.ListFunctionsRequest, *catalog.ListFunctionsResponse, catalog.FunctionInfo]) *MockFunctionsAPIInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListAll provides a mock function with given fields: ctx, request
func (_m *MockFunctionsAPIInterface) ListAll(ctx context.Context, request catalog.ListFunctionsRequest) ([]catalog.FunctionInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListAll")
	}

	var r0 []catalog.FunctionInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.ListFunctionsRequest) ([]catalog.FunctionInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.ListFunctionsRequest) []catalog.FunctionInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]catalog.FunctionInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.ListFunctionsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFunctionsAPIInterface_ListAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAll'
type MockFunctionsAPIInterface_ListAll_Call struct {
	*mock.Call
}

// ListAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.ListFunctionsRequest
func (_e *MockFunctionsAPIInterface_Expecter) ListAll(ctx interface{}, request interface{}) *MockFunctionsAPIInterface_ListAll_Call {
	return &MockFunctionsAPIInterface_ListAll_Call{Call: _e.mock.On("ListAll", ctx, request)}
}

func (_c *MockFunctionsAPIInterface_ListAll_Call) Run(run func(ctx context.Context, request catalog.ListFunctionsRequest)) *MockFunctionsAPIInterface_ListAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.ListFunctionsRequest))
	})
	return _c
}

func (_c *MockFunctionsAPIInterface_ListAll_Call) Return(_a0 []catalog.FunctionInfo, _a1 error) *MockFunctionsAPIInterface_ListAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFunctionsAPIInterface_ListAll_Call) RunAndReturn(run func(context.Context, catalog.ListFunctionsRequest) ([]catalog.FunctionInfo, error)) *MockFunctionsAPIInterface_ListAll_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, request
func (_m *MockFunctionsAPIInterface) Update(ctx context.Context, request catalog.UpdateFunction) (*catalog.FunctionInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *catalog.FunctionInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.UpdateFunction) (*catalog.FunctionInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.UpdateFunction) *catalog.FunctionInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.FunctionInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.UpdateFunction) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFunctionsAPIInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockFunctionsAPIInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.UpdateFunction
func (_e *MockFunctionsAPIInterface_Expecter) Update(ctx interface{}, request interface{}) *MockFunctionsAPIInterface_Update_Call {
	return &MockFunctionsAPIInterface_Update_Call{Call: _e.mock.On("Update", ctx, request)}
}

func (_c *MockFunctionsAPIInterface_Update_Call) Run(run func(ctx context.Context, request catalog.UpdateFunction)) *MockFunctionsAPIInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.UpdateFunction))
	})
	return _c
}

func (_c *MockFunctionsAPIInterface_Update_Call) Return(_a0 *catalog.FunctionInfo, _a1 error) *MockFunctionsAPIInterface_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFunctionsAPIInterface_Update_Call) RunAndReturn(run func(context.Context, catalog.UpdateFunction) (*catalog.FunctionInfo, error)) *MockFunctionsAPIInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockFunctionsAPIInterface) WithImpl(impl catalog.FunctionsService) catalog.FunctionsAPIInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 catalog.FunctionsAPIInterface
	if rf, ok := ret.Get(0).(func(catalog.FunctionsService) catalog.FunctionsAPIInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(catalog.FunctionsAPIInterface)
		}
	}

	return r0
}

// MockFunctionsAPIInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockFunctionsAPIInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl catalog.FunctionsService
func (_e *MockFunctionsAPIInterface_Expecter) WithImpl(impl interface{}) *MockFunctionsAPIInterface_WithImpl_Call {
	return &MockFunctionsAPIInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockFunctionsAPIInterface_WithImpl_Call) Run(run func(impl catalog.FunctionsService)) *MockFunctionsAPIInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(catalog.FunctionsService))
	})
	return _c
}

func (_c *MockFunctionsAPIInterface_WithImpl_Call) Return(_a0 catalog.FunctionsAPIInterface) *MockFunctionsAPIInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFunctionsAPIInterface_WithImpl_Call) RunAndReturn(run func(catalog.FunctionsService) catalog.FunctionsAPIInterface) *MockFunctionsAPIInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFunctionsAPIInterface creates a new instance of MockFunctionsAPIInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFunctionsAPIInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFunctionsAPIInterface {
	mock := &MockFunctionsAPIInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
