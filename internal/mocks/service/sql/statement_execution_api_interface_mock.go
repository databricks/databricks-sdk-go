// Code generated by mockery v2.38.0. DO NOT EDIT.

package sql

import (
	context "context"

	sql "github.com/databricks/databricks-sdk-go/service/sql"
	mock "github.com/stretchr/testify/mock"
)

// MockStatementExecutionAPIInterface is an autogenerated mock type for the StatementExecutionAPIInterface type
type MockStatementExecutionAPIInterface struct {
	mock.Mock
}

type MockStatementExecutionAPIInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStatementExecutionAPIInterface) EXPECT() *MockStatementExecutionAPIInterface_Expecter {
	return &MockStatementExecutionAPIInterface_Expecter{mock: &_m.Mock}
}

// CancelExecution provides a mock function with given fields: ctx, request
func (_m *MockStatementExecutionAPIInterface) CancelExecution(ctx context.Context, request sql.CancelExecutionRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CancelExecution")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.CancelExecutionRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStatementExecutionAPIInterface_CancelExecution_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelExecution'
type MockStatementExecutionAPIInterface_CancelExecution_Call struct {
	*mock.Call
}

// CancelExecution is a helper method to define mock.On call
//   - ctx context.Context
//   - request sql.CancelExecutionRequest
func (_e *MockStatementExecutionAPIInterface_Expecter) CancelExecution(ctx interface{}, request interface{}) *MockStatementExecutionAPIInterface_CancelExecution_Call {
	return &MockStatementExecutionAPIInterface_CancelExecution_Call{Call: _e.mock.On("CancelExecution", ctx, request)}
}

func (_c *MockStatementExecutionAPIInterface_CancelExecution_Call) Run(run func(ctx context.Context, request sql.CancelExecutionRequest)) *MockStatementExecutionAPIInterface_CancelExecution_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.CancelExecutionRequest))
	})
	return _c
}

func (_c *MockStatementExecutionAPIInterface_CancelExecution_Call) Return(_a0 error) *MockStatementExecutionAPIInterface_CancelExecution_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStatementExecutionAPIInterface_CancelExecution_Call) RunAndReturn(run func(context.Context, sql.CancelExecutionRequest) error) *MockStatementExecutionAPIInterface_CancelExecution_Call {
	_c.Call.Return(run)
	return _c
}

// ExecuteStatement provides a mock function with given fields: ctx, request
func (_m *MockStatementExecutionAPIInterface) ExecuteStatement(ctx context.Context, request sql.ExecuteStatementRequest) (*sql.ExecuteStatementResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteStatement")
	}

	var r0 *sql.ExecuteStatementResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.ExecuteStatementRequest) (*sql.ExecuteStatementResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.ExecuteStatementRequest) *sql.ExecuteStatementResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.ExecuteStatementResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.ExecuteStatementRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStatementExecutionAPIInterface_ExecuteStatement_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteStatement'
type MockStatementExecutionAPIInterface_ExecuteStatement_Call struct {
	*mock.Call
}

// ExecuteStatement is a helper method to define mock.On call
//   - ctx context.Context
//   - request sql.ExecuteStatementRequest
func (_e *MockStatementExecutionAPIInterface_Expecter) ExecuteStatement(ctx interface{}, request interface{}) *MockStatementExecutionAPIInterface_ExecuteStatement_Call {
	return &MockStatementExecutionAPIInterface_ExecuteStatement_Call{Call: _e.mock.On("ExecuteStatement", ctx, request)}
}

func (_c *MockStatementExecutionAPIInterface_ExecuteStatement_Call) Run(run func(ctx context.Context, request sql.ExecuteStatementRequest)) *MockStatementExecutionAPIInterface_ExecuteStatement_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.ExecuteStatementRequest))
	})
	return _c
}

func (_c *MockStatementExecutionAPIInterface_ExecuteStatement_Call) Return(_a0 *sql.ExecuteStatementResponse, _a1 error) *MockStatementExecutionAPIInterface_ExecuteStatement_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStatementExecutionAPIInterface_ExecuteStatement_Call) RunAndReturn(run func(context.Context, sql.ExecuteStatementRequest) (*sql.ExecuteStatementResponse, error)) *MockStatementExecutionAPIInterface_ExecuteStatement_Call {
	_c.Call.Return(run)
	return _c
}

// GetStatement provides a mock function with given fields: ctx, request
func (_m *MockStatementExecutionAPIInterface) GetStatement(ctx context.Context, request sql.GetStatementRequest) (*sql.GetStatementResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetStatement")
	}

	var r0 *sql.GetStatementResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.GetStatementRequest) (*sql.GetStatementResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.GetStatementRequest) *sql.GetStatementResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.GetStatementResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.GetStatementRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStatementExecutionAPIInterface_GetStatement_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStatement'
type MockStatementExecutionAPIInterface_GetStatement_Call struct {
	*mock.Call
}

// GetStatement is a helper method to define mock.On call
//   - ctx context.Context
//   - request sql.GetStatementRequest
func (_e *MockStatementExecutionAPIInterface_Expecter) GetStatement(ctx interface{}, request interface{}) *MockStatementExecutionAPIInterface_GetStatement_Call {
	return &MockStatementExecutionAPIInterface_GetStatement_Call{Call: _e.mock.On("GetStatement", ctx, request)}
}

func (_c *MockStatementExecutionAPIInterface_GetStatement_Call) Run(run func(ctx context.Context, request sql.GetStatementRequest)) *MockStatementExecutionAPIInterface_GetStatement_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.GetStatementRequest))
	})
	return _c
}

func (_c *MockStatementExecutionAPIInterface_GetStatement_Call) Return(_a0 *sql.GetStatementResponse, _a1 error) *MockStatementExecutionAPIInterface_GetStatement_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStatementExecutionAPIInterface_GetStatement_Call) RunAndReturn(run func(context.Context, sql.GetStatementRequest) (*sql.GetStatementResponse, error)) *MockStatementExecutionAPIInterface_GetStatement_Call {
	_c.Call.Return(run)
	return _c
}

// GetStatementByStatementId provides a mock function with given fields: ctx, statementId
func (_m *MockStatementExecutionAPIInterface) GetStatementByStatementId(ctx context.Context, statementId string) (*sql.GetStatementResponse, error) {
	ret := _m.Called(ctx, statementId)

	if len(ret) == 0 {
		panic("no return value specified for GetStatementByStatementId")
	}

	var r0 *sql.GetStatementResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*sql.GetStatementResponse, error)); ok {
		return rf(ctx, statementId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *sql.GetStatementResponse); ok {
		r0 = rf(ctx, statementId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.GetStatementResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, statementId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStatementExecutionAPIInterface_GetStatementByStatementId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStatementByStatementId'
type MockStatementExecutionAPIInterface_GetStatementByStatementId_Call struct {
	*mock.Call
}

// GetStatementByStatementId is a helper method to define mock.On call
//   - ctx context.Context
//   - statementId string
func (_e *MockStatementExecutionAPIInterface_Expecter) GetStatementByStatementId(ctx interface{}, statementId interface{}) *MockStatementExecutionAPIInterface_GetStatementByStatementId_Call {
	return &MockStatementExecutionAPIInterface_GetStatementByStatementId_Call{Call: _e.mock.On("GetStatementByStatementId", ctx, statementId)}
}

func (_c *MockStatementExecutionAPIInterface_GetStatementByStatementId_Call) Run(run func(ctx context.Context, statementId string)) *MockStatementExecutionAPIInterface_GetStatementByStatementId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStatementExecutionAPIInterface_GetStatementByStatementId_Call) Return(_a0 *sql.GetStatementResponse, _a1 error) *MockStatementExecutionAPIInterface_GetStatementByStatementId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStatementExecutionAPIInterface_GetStatementByStatementId_Call) RunAndReturn(run func(context.Context, string) (*sql.GetStatementResponse, error)) *MockStatementExecutionAPIInterface_GetStatementByStatementId_Call {
	_c.Call.Return(run)
	return _c
}

// GetStatementResultChunkN provides a mock function with given fields: ctx, request
func (_m *MockStatementExecutionAPIInterface) GetStatementResultChunkN(ctx context.Context, request sql.GetStatementResultChunkNRequest) (*sql.ResultData, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetStatementResultChunkN")
	}

	var r0 *sql.ResultData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.GetStatementResultChunkNRequest) (*sql.ResultData, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.GetStatementResultChunkNRequest) *sql.ResultData); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.ResultData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.GetStatementResultChunkNRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStatementExecutionAPIInterface_GetStatementResultChunkN_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStatementResultChunkN'
type MockStatementExecutionAPIInterface_GetStatementResultChunkN_Call struct {
	*mock.Call
}

// GetStatementResultChunkN is a helper method to define mock.On call
//   - ctx context.Context
//   - request sql.GetStatementResultChunkNRequest
func (_e *MockStatementExecutionAPIInterface_Expecter) GetStatementResultChunkN(ctx interface{}, request interface{}) *MockStatementExecutionAPIInterface_GetStatementResultChunkN_Call {
	return &MockStatementExecutionAPIInterface_GetStatementResultChunkN_Call{Call: _e.mock.On("GetStatementResultChunkN", ctx, request)}
}

func (_c *MockStatementExecutionAPIInterface_GetStatementResultChunkN_Call) Run(run func(ctx context.Context, request sql.GetStatementResultChunkNRequest)) *MockStatementExecutionAPIInterface_GetStatementResultChunkN_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.GetStatementResultChunkNRequest))
	})
	return _c
}

func (_c *MockStatementExecutionAPIInterface_GetStatementResultChunkN_Call) Return(_a0 *sql.ResultData, _a1 error) *MockStatementExecutionAPIInterface_GetStatementResultChunkN_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStatementExecutionAPIInterface_GetStatementResultChunkN_Call) RunAndReturn(run func(context.Context, sql.GetStatementResultChunkNRequest) (*sql.ResultData, error)) *MockStatementExecutionAPIInterface_GetStatementResultChunkN_Call {
	_c.Call.Return(run)
	return _c
}

// GetStatementResultChunkNByStatementIdAndChunkIndex provides a mock function with given fields: ctx, statementId, chunkIndex
func (_m *MockStatementExecutionAPIInterface) GetStatementResultChunkNByStatementIdAndChunkIndex(ctx context.Context, statementId string, chunkIndex int) (*sql.ResultData, error) {
	ret := _m.Called(ctx, statementId, chunkIndex)

	if len(ret) == 0 {
		panic("no return value specified for GetStatementResultChunkNByStatementIdAndChunkIndex")
	}

	var r0 *sql.ResultData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) (*sql.ResultData, error)); ok {
		return rf(ctx, statementId, chunkIndex)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int) *sql.ResultData); ok {
		r0 = rf(ctx, statementId, chunkIndex)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.ResultData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int) error); ok {
		r1 = rf(ctx, statementId, chunkIndex)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStatementExecutionAPIInterface_GetStatementResultChunkNByStatementIdAndChunkIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStatementResultChunkNByStatementIdAndChunkIndex'
type MockStatementExecutionAPIInterface_GetStatementResultChunkNByStatementIdAndChunkIndex_Call struct {
	*mock.Call
}

// GetStatementResultChunkNByStatementIdAndChunkIndex is a helper method to define mock.On call
//   - ctx context.Context
//   - statementId string
//   - chunkIndex int
func (_e *MockStatementExecutionAPIInterface_Expecter) GetStatementResultChunkNByStatementIdAndChunkIndex(ctx interface{}, statementId interface{}, chunkIndex interface{}) *MockStatementExecutionAPIInterface_GetStatementResultChunkNByStatementIdAndChunkIndex_Call {
	return &MockStatementExecutionAPIInterface_GetStatementResultChunkNByStatementIdAndChunkIndex_Call{Call: _e.mock.On("GetStatementResultChunkNByStatementIdAndChunkIndex", ctx, statementId, chunkIndex)}
}

func (_c *MockStatementExecutionAPIInterface_GetStatementResultChunkNByStatementIdAndChunkIndex_Call) Run(run func(ctx context.Context, statementId string, chunkIndex int)) *MockStatementExecutionAPIInterface_GetStatementResultChunkNByStatementIdAndChunkIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int))
	})
	return _c
}

func (_c *MockStatementExecutionAPIInterface_GetStatementResultChunkNByStatementIdAndChunkIndex_Call) Return(_a0 *sql.ResultData, _a1 error) *MockStatementExecutionAPIInterface_GetStatementResultChunkNByStatementIdAndChunkIndex_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStatementExecutionAPIInterface_GetStatementResultChunkNByStatementIdAndChunkIndex_Call) RunAndReturn(run func(context.Context, string, int) (*sql.ResultData, error)) *MockStatementExecutionAPIInterface_GetStatementResultChunkNByStatementIdAndChunkIndex_Call {
	_c.Call.Return(run)
	return _c
}

// Impl provides a mock function with given fields:
func (_m *MockStatementExecutionAPIInterface) Impl() sql.StatementExecutionService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 sql.StatementExecutionService
	if rf, ok := ret.Get(0).(func() sql.StatementExecutionService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.StatementExecutionService)
		}
	}

	return r0
}

// MockStatementExecutionAPIInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockStatementExecutionAPIInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockStatementExecutionAPIInterface_Expecter) Impl() *MockStatementExecutionAPIInterface_Impl_Call {
	return &MockStatementExecutionAPIInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockStatementExecutionAPIInterface_Impl_Call) Run(run func()) *MockStatementExecutionAPIInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStatementExecutionAPIInterface_Impl_Call) Return(_a0 sql.StatementExecutionService) *MockStatementExecutionAPIInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStatementExecutionAPIInterface_Impl_Call) RunAndReturn(run func() sql.StatementExecutionService) *MockStatementExecutionAPIInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockStatementExecutionAPIInterface) WithImpl(impl sql.StatementExecutionService) sql.StatementExecutionAPIInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 sql.StatementExecutionAPIInterface
	if rf, ok := ret.Get(0).(func(sql.StatementExecutionService) sql.StatementExecutionAPIInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.StatementExecutionAPIInterface)
		}
	}

	return r0
}

// MockStatementExecutionAPIInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockStatementExecutionAPIInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl sql.StatementExecutionService
func (_e *MockStatementExecutionAPIInterface_Expecter) WithImpl(impl interface{}) *MockStatementExecutionAPIInterface_WithImpl_Call {
	return &MockStatementExecutionAPIInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockStatementExecutionAPIInterface_WithImpl_Call) Run(run func(impl sql.StatementExecutionService)) *MockStatementExecutionAPIInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(sql.StatementExecutionService))
	})
	return _c
}

func (_c *MockStatementExecutionAPIInterface_WithImpl_Call) Return(_a0 sql.StatementExecutionAPIInterface) *MockStatementExecutionAPIInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStatementExecutionAPIInterface_WithImpl_Call) RunAndReturn(run func(sql.StatementExecutionService) sql.StatementExecutionAPIInterface) *MockStatementExecutionAPIInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStatementExecutionAPIInterface creates a new instance of MockStatementExecutionAPIInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStatementExecutionAPIInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStatementExecutionAPIInterface {
	mock := &MockStatementExecutionAPIInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
