// Code generated by mockery v2.38.0. DO NOT EDIT.

package sql

import (
	context "context"

	listing "github.com/databricks/databricks-sdk-go/listing"
	mock "github.com/stretchr/testify/mock"

	sql "github.com/databricks/databricks-sdk-go/service/sql"
)

// MockQueryHistoryAPIInterface is an autogenerated mock type for the QueryHistoryAPIInterface type
type MockQueryHistoryAPIInterface struct {
	mock.Mock
}

type MockQueryHistoryAPIInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQueryHistoryAPIInterface) EXPECT() *MockQueryHistoryAPIInterface_Expecter {
	return &MockQueryHistoryAPIInterface_Expecter{mock: &_m.Mock}
}

// Impl provides a mock function with given fields:
func (_m *MockQueryHistoryAPIInterface) Impl() sql.QueryHistoryService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 sql.QueryHistoryService
	if rf, ok := ret.Get(0).(func() sql.QueryHistoryService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.QueryHistoryService)
		}
	}

	return r0
}

// MockQueryHistoryAPIInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockQueryHistoryAPIInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockQueryHistoryAPIInterface_Expecter) Impl() *MockQueryHistoryAPIInterface_Impl_Call {
	return &MockQueryHistoryAPIInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockQueryHistoryAPIInterface_Impl_Call) Run(run func()) *MockQueryHistoryAPIInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockQueryHistoryAPIInterface_Impl_Call) Return(_a0 sql.QueryHistoryService) *MockQueryHistoryAPIInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQueryHistoryAPIInterface_Impl_Call) RunAndReturn(run func() sql.QueryHistoryService) *MockQueryHistoryAPIInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, request
func (_m *MockQueryHistoryAPIInterface) List(ctx context.Context, request sql.ListQueryHistoryRequest) *listing.PaginatingIterator[sql.ListQueryHistoryRequest, *sql.ListQueriesResponse, sql.QueryInfo] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *listing.PaginatingIterator[sql.ListQueryHistoryRequest, *sql.ListQueriesResponse, sql.QueryInfo]
	if rf, ok := ret.Get(0).(func(context.Context, sql.ListQueryHistoryRequest) *listing.PaginatingIterator[sql.ListQueryHistoryRequest, *sql.ListQueriesResponse, sql.QueryInfo]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*listing.PaginatingIterator[sql.ListQueryHistoryRequest, *sql.ListQueriesResponse, sql.QueryInfo])
		}
	}

	return r0
}

// MockQueryHistoryAPIInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockQueryHistoryAPIInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - request sql.ListQueryHistoryRequest
func (_e *MockQueryHistoryAPIInterface_Expecter) List(ctx interface{}, request interface{}) *MockQueryHistoryAPIInterface_List_Call {
	return &MockQueryHistoryAPIInterface_List_Call{Call: _e.mock.On("List", ctx, request)}
}

func (_c *MockQueryHistoryAPIInterface_List_Call) Run(run func(ctx context.Context, request sql.ListQueryHistoryRequest)) *MockQueryHistoryAPIInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.ListQueryHistoryRequest))
	})
	return _c
}

func (_c *MockQueryHistoryAPIInterface_List_Call) Return(_a0 *listing.PaginatingIterator[sql.ListQueryHistoryRequest, *sql.ListQueriesResponse, sql.QueryInfo]) *MockQueryHistoryAPIInterface_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQueryHistoryAPIInterface_List_Call) RunAndReturn(run func(context.Context, sql.ListQueryHistoryRequest) *listing.PaginatingIterator[sql.ListQueryHistoryRequest, *sql.ListQueriesResponse, sql.QueryInfo]) *MockQueryHistoryAPIInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListAll provides a mock function with given fields: ctx, request
func (_m *MockQueryHistoryAPIInterface) ListAll(ctx context.Context, request sql.ListQueryHistoryRequest) ([]sql.QueryInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListAll")
	}

	var r0 []sql.QueryInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.ListQueryHistoryRequest) ([]sql.QueryInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.ListQueryHistoryRequest) []sql.QueryInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sql.QueryInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.ListQueryHistoryRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueryHistoryAPIInterface_ListAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAll'
type MockQueryHistoryAPIInterface_ListAll_Call struct {
	*mock.Call
}

// ListAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request sql.ListQueryHistoryRequest
func (_e *MockQueryHistoryAPIInterface_Expecter) ListAll(ctx interface{}, request interface{}) *MockQueryHistoryAPIInterface_ListAll_Call {
	return &MockQueryHistoryAPIInterface_ListAll_Call{Call: _e.mock.On("ListAll", ctx, request)}
}

func (_c *MockQueryHistoryAPIInterface_ListAll_Call) Run(run func(ctx context.Context, request sql.ListQueryHistoryRequest)) *MockQueryHistoryAPIInterface_ListAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.ListQueryHistoryRequest))
	})
	return _c
}

func (_c *MockQueryHistoryAPIInterface_ListAll_Call) Return(_a0 []sql.QueryInfo, _a1 error) *MockQueryHistoryAPIInterface_ListAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueryHistoryAPIInterface_ListAll_Call) RunAndReturn(run func(context.Context, sql.ListQueryHistoryRequest) ([]sql.QueryInfo, error)) *MockQueryHistoryAPIInterface_ListAll_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockQueryHistoryAPIInterface) WithImpl(impl sql.QueryHistoryService) sql.QueryHistoryAPIInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 sql.QueryHistoryAPIInterface
	if rf, ok := ret.Get(0).(func(sql.QueryHistoryService) sql.QueryHistoryAPIInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.QueryHistoryAPIInterface)
		}
	}

	return r0
}

// MockQueryHistoryAPIInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockQueryHistoryAPIInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl sql.QueryHistoryService
func (_e *MockQueryHistoryAPIInterface_Expecter) WithImpl(impl interface{}) *MockQueryHistoryAPIInterface_WithImpl_Call {
	return &MockQueryHistoryAPIInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockQueryHistoryAPIInterface_WithImpl_Call) Run(run func(impl sql.QueryHistoryService)) *MockQueryHistoryAPIInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(sql.QueryHistoryService))
	})
	return _c
}

func (_c *MockQueryHistoryAPIInterface_WithImpl_Call) Return(_a0 sql.QueryHistoryAPIInterface) *MockQueryHistoryAPIInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQueryHistoryAPIInterface_WithImpl_Call) RunAndReturn(run func(sql.QueryHistoryService) sql.QueryHistoryAPIInterface) *MockQueryHistoryAPIInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockQueryHistoryAPIInterface creates a new instance of MockQueryHistoryAPIInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQueryHistoryAPIInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQueryHistoryAPIInterface {
	mock := &MockQueryHistoryAPIInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
