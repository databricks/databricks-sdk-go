// Code generated by mockery v2.38.0. DO NOT EDIT.

package sql

import (
	context "context"

	sql "github.com/databricks/databricks-sdk-go/service/sql"
	mock "github.com/stretchr/testify/mock"
)

// MockQueryVisualizationsAPIInterface is an autogenerated mock type for the QueryVisualizationsAPIInterface type
type MockQueryVisualizationsAPIInterface struct {
	mock.Mock
}

type MockQueryVisualizationsAPIInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQueryVisualizationsAPIInterface) EXPECT() *MockQueryVisualizationsAPIInterface_Expecter {
	return &MockQueryVisualizationsAPIInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, request
func (_m *MockQueryVisualizationsAPIInterface) Create(ctx context.Context, request sql.CreateQueryVisualizationRequest) (*sql.Visualization, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *sql.Visualization
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.CreateQueryVisualizationRequest) (*sql.Visualization, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.CreateQueryVisualizationRequest) *sql.Visualization); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Visualization)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.CreateQueryVisualizationRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueryVisualizationsAPIInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockQueryVisualizationsAPIInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - request sql.CreateQueryVisualizationRequest
func (_e *MockQueryVisualizationsAPIInterface_Expecter) Create(ctx interface{}, request interface{}) *MockQueryVisualizationsAPIInterface_Create_Call {
	return &MockQueryVisualizationsAPIInterface_Create_Call{Call: _e.mock.On("Create", ctx, request)}
}

func (_c *MockQueryVisualizationsAPIInterface_Create_Call) Run(run func(ctx context.Context, request sql.CreateQueryVisualizationRequest)) *MockQueryVisualizationsAPIInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.CreateQueryVisualizationRequest))
	})
	return _c
}

func (_c *MockQueryVisualizationsAPIInterface_Create_Call) Return(_a0 *sql.Visualization, _a1 error) *MockQueryVisualizationsAPIInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueryVisualizationsAPIInterface_Create_Call) RunAndReturn(run func(context.Context, sql.CreateQueryVisualizationRequest) (*sql.Visualization, error)) *MockQueryVisualizationsAPIInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, request
func (_m *MockQueryVisualizationsAPIInterface) Delete(ctx context.Context, request sql.DeleteQueryVisualizationRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.DeleteQueryVisualizationRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQueryVisualizationsAPIInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockQueryVisualizationsAPIInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - request sql.DeleteQueryVisualizationRequest
func (_e *MockQueryVisualizationsAPIInterface_Expecter) Delete(ctx interface{}, request interface{}) *MockQueryVisualizationsAPIInterface_Delete_Call {
	return &MockQueryVisualizationsAPIInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, request)}
}

func (_c *MockQueryVisualizationsAPIInterface_Delete_Call) Run(run func(ctx context.Context, request sql.DeleteQueryVisualizationRequest)) *MockQueryVisualizationsAPIInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.DeleteQueryVisualizationRequest))
	})
	return _c
}

func (_c *MockQueryVisualizationsAPIInterface_Delete_Call) Return(_a0 error) *MockQueryVisualizationsAPIInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQueryVisualizationsAPIInterface_Delete_Call) RunAndReturn(run func(context.Context, sql.DeleteQueryVisualizationRequest) error) *MockQueryVisualizationsAPIInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteById provides a mock function with given fields: ctx, id
func (_m *MockQueryVisualizationsAPIInterface) DeleteById(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQueryVisualizationsAPIInterface_DeleteById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteById'
type MockQueryVisualizationsAPIInterface_DeleteById_Call struct {
	*mock.Call
}

// DeleteById is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockQueryVisualizationsAPIInterface_Expecter) DeleteById(ctx interface{}, id interface{}) *MockQueryVisualizationsAPIInterface_DeleteById_Call {
	return &MockQueryVisualizationsAPIInterface_DeleteById_Call{Call: _e.mock.On("DeleteById", ctx, id)}
}

func (_c *MockQueryVisualizationsAPIInterface_DeleteById_Call) Run(run func(ctx context.Context, id string)) *MockQueryVisualizationsAPIInterface_DeleteById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockQueryVisualizationsAPIInterface_DeleteById_Call) Return(_a0 error) *MockQueryVisualizationsAPIInterface_DeleteById_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQueryVisualizationsAPIInterface_DeleteById_Call) RunAndReturn(run func(context.Context, string) error) *MockQueryVisualizationsAPIInterface_DeleteById_Call {
	_c.Call.Return(run)
	return _c
}

// Impl provides a mock function with given fields:
func (_m *MockQueryVisualizationsAPIInterface) Impl() sql.QueryVisualizationsService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 sql.QueryVisualizationsService
	if rf, ok := ret.Get(0).(func() sql.QueryVisualizationsService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.QueryVisualizationsService)
		}
	}

	return r0
}

// MockQueryVisualizationsAPIInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockQueryVisualizationsAPIInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockQueryVisualizationsAPIInterface_Expecter) Impl() *MockQueryVisualizationsAPIInterface_Impl_Call {
	return &MockQueryVisualizationsAPIInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockQueryVisualizationsAPIInterface_Impl_Call) Run(run func()) *MockQueryVisualizationsAPIInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockQueryVisualizationsAPIInterface_Impl_Call) Return(_a0 sql.QueryVisualizationsService) *MockQueryVisualizationsAPIInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQueryVisualizationsAPIInterface_Impl_Call) RunAndReturn(run func() sql.QueryVisualizationsService) *MockQueryVisualizationsAPIInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, request
func (_m *MockQueryVisualizationsAPIInterface) Update(ctx context.Context, request sql.Visualization) (*sql.Visualization, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *sql.Visualization
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.Visualization) (*sql.Visualization, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.Visualization) *sql.Visualization); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Visualization)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.Visualization) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueryVisualizationsAPIInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockQueryVisualizationsAPIInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - request sql.Visualization
func (_e *MockQueryVisualizationsAPIInterface_Expecter) Update(ctx interface{}, request interface{}) *MockQueryVisualizationsAPIInterface_Update_Call {
	return &MockQueryVisualizationsAPIInterface_Update_Call{Call: _e.mock.On("Update", ctx, request)}
}

func (_c *MockQueryVisualizationsAPIInterface_Update_Call) Run(run func(ctx context.Context, request sql.Visualization)) *MockQueryVisualizationsAPIInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.Visualization))
	})
	return _c
}

func (_c *MockQueryVisualizationsAPIInterface_Update_Call) Return(_a0 *sql.Visualization, _a1 error) *MockQueryVisualizationsAPIInterface_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueryVisualizationsAPIInterface_Update_Call) RunAndReturn(run func(context.Context, sql.Visualization) (*sql.Visualization, error)) *MockQueryVisualizationsAPIInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockQueryVisualizationsAPIInterface) WithImpl(impl sql.QueryVisualizationsService) sql.QueryVisualizationsAPIInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 sql.QueryVisualizationsAPIInterface
	if rf, ok := ret.Get(0).(func(sql.QueryVisualizationsService) sql.QueryVisualizationsAPIInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.QueryVisualizationsAPIInterface)
		}
	}

	return r0
}

// MockQueryVisualizationsAPIInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockQueryVisualizationsAPIInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl sql.QueryVisualizationsService
func (_e *MockQueryVisualizationsAPIInterface_Expecter) WithImpl(impl interface{}) *MockQueryVisualizationsAPIInterface_WithImpl_Call {
	return &MockQueryVisualizationsAPIInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockQueryVisualizationsAPIInterface_WithImpl_Call) Run(run func(impl sql.QueryVisualizationsService)) *MockQueryVisualizationsAPIInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(sql.QueryVisualizationsService))
	})
	return _c
}

func (_c *MockQueryVisualizationsAPIInterface_WithImpl_Call) Return(_a0 sql.QueryVisualizationsAPIInterface) *MockQueryVisualizationsAPIInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQueryVisualizationsAPIInterface_WithImpl_Call) RunAndReturn(run func(sql.QueryVisualizationsService) sql.QueryVisualizationsAPIInterface) *MockQueryVisualizationsAPIInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockQueryVisualizationsAPIInterface creates a new instance of MockQueryVisualizationsAPIInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQueryVisualizationsAPIInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQueryVisualizationsAPIInterface {
	mock := &MockQueryVisualizationsAPIInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
