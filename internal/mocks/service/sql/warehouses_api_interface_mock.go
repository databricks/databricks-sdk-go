// Code generated by mockery v2.38.0. DO NOT EDIT.

package sql

import (
	context "context"

	listing "github.com/databricks/databricks-sdk-go/listing"
	mock "github.com/stretchr/testify/mock"

	retries "github.com/databricks/databricks-sdk-go/retries"

	sql "github.com/databricks/databricks-sdk-go/service/sql"

	time "time"
)

// MockWarehousesAPIInterface is an autogenerated mock type for the WarehousesAPIInterface type
type MockWarehousesAPIInterface struct {
	mock.Mock
}

type MockWarehousesAPIInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWarehousesAPIInterface) EXPECT() *MockWarehousesAPIInterface_Expecter {
	return &MockWarehousesAPIInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, createWarehouseRequest
func (_m *MockWarehousesAPIInterface) Create(ctx context.Context, createWarehouseRequest sql.CreateWarehouseRequest) (*sql.WaitGetWarehouseRunning[sql.CreateWarehouseResponse], error) {
	ret := _m.Called(ctx, createWarehouseRequest)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *sql.WaitGetWarehouseRunning[sql.CreateWarehouseResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.CreateWarehouseRequest) (*sql.WaitGetWarehouseRunning[sql.CreateWarehouseResponse], error)); ok {
		return rf(ctx, createWarehouseRequest)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.CreateWarehouseRequest) *sql.WaitGetWarehouseRunning[sql.CreateWarehouseResponse]); ok {
		r0 = rf(ctx, createWarehouseRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.WaitGetWarehouseRunning[sql.CreateWarehouseResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.CreateWarehouseRequest) error); ok {
		r1 = rf(ctx, createWarehouseRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWarehousesAPIInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockWarehousesAPIInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - createWarehouseRequest sql.CreateWarehouseRequest
func (_e *MockWarehousesAPIInterface_Expecter) Create(ctx interface{}, createWarehouseRequest interface{}) *MockWarehousesAPIInterface_Create_Call {
	return &MockWarehousesAPIInterface_Create_Call{Call: _e.mock.On("Create", ctx, createWarehouseRequest)}
}

func (_c *MockWarehousesAPIInterface_Create_Call) Run(run func(ctx context.Context, createWarehouseRequest sql.CreateWarehouseRequest)) *MockWarehousesAPIInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.CreateWarehouseRequest))
	})
	return _c
}

func (_c *MockWarehousesAPIInterface_Create_Call) Return(_a0 *sql.WaitGetWarehouseRunning[sql.CreateWarehouseResponse], _a1 error) *MockWarehousesAPIInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWarehousesAPIInterface_Create_Call) RunAndReturn(run func(context.Context, sql.CreateWarehouseRequest) (*sql.WaitGetWarehouseRunning[sql.CreateWarehouseResponse], error)) *MockWarehousesAPIInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAndWait provides a mock function with given fields: ctx, createWarehouseRequest, options
func (_m *MockWarehousesAPIInterface) CreateAndWait(ctx context.Context, createWarehouseRequest sql.CreateWarehouseRequest, options ...retries.Option[sql.GetWarehouseResponse]) (*sql.GetWarehouseResponse, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, createWarehouseRequest)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAndWait")
	}

	var r0 *sql.GetWarehouseResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.CreateWarehouseRequest, ...retries.Option[sql.GetWarehouseResponse]) (*sql.GetWarehouseResponse, error)); ok {
		return rf(ctx, createWarehouseRequest, options...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.CreateWarehouseRequest, ...retries.Option[sql.GetWarehouseResponse]) *sql.GetWarehouseResponse); ok {
		r0 = rf(ctx, createWarehouseRequest, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.GetWarehouseResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.CreateWarehouseRequest, ...retries.Option[sql.GetWarehouseResponse]) error); ok {
		r1 = rf(ctx, createWarehouseRequest, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWarehousesAPIInterface_CreateAndWait_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAndWait'
type MockWarehousesAPIInterface_CreateAndWait_Call struct {
	*mock.Call
}

// CreateAndWait is a helper method to define mock.On call
//   - ctx context.Context
//   - createWarehouseRequest sql.CreateWarehouseRequest
//   - options ...retries.Option[sql.GetWarehouseResponse]
func (_e *MockWarehousesAPIInterface_Expecter) CreateAndWait(ctx interface{}, createWarehouseRequest interface{}, options ...interface{}) *MockWarehousesAPIInterface_CreateAndWait_Call {
	return &MockWarehousesAPIInterface_CreateAndWait_Call{Call: _e.mock.On("CreateAndWait",
		append([]interface{}{ctx, createWarehouseRequest}, options...)...)}
}

func (_c *MockWarehousesAPIInterface_CreateAndWait_Call) Run(run func(ctx context.Context, createWarehouseRequest sql.CreateWarehouseRequest, options ...retries.Option[sql.GetWarehouseResponse])) *MockWarehousesAPIInterface_CreateAndWait_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]retries.Option[sql.GetWarehouseResponse], len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(retries.Option[sql.GetWarehouseResponse])
			}
		}
		run(args[0].(context.Context), args[1].(sql.CreateWarehouseRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockWarehousesAPIInterface_CreateAndWait_Call) Return(_a0 *sql.GetWarehouseResponse, _a1 error) *MockWarehousesAPIInterface_CreateAndWait_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWarehousesAPIInterface_CreateAndWait_Call) RunAndReturn(run func(context.Context, sql.CreateWarehouseRequest, ...retries.Option[sql.GetWarehouseResponse]) (*sql.GetWarehouseResponse, error)) *MockWarehousesAPIInterface_CreateAndWait_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, request
func (_m *MockWarehousesAPIInterface) Delete(ctx context.Context, request sql.DeleteWarehouseRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.DeleteWarehouseRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWarehousesAPIInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockWarehousesAPIInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - request sql.DeleteWarehouseRequest
func (_e *MockWarehousesAPIInterface_Expecter) Delete(ctx interface{}, request interface{}) *MockWarehousesAPIInterface_Delete_Call {
	return &MockWarehousesAPIInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, request)}
}

func (_c *MockWarehousesAPIInterface_Delete_Call) Run(run func(ctx context.Context, request sql.DeleteWarehouseRequest)) *MockWarehousesAPIInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.DeleteWarehouseRequest))
	})
	return _c
}

func (_c *MockWarehousesAPIInterface_Delete_Call) Return(_a0 error) *MockWarehousesAPIInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWarehousesAPIInterface_Delete_Call) RunAndReturn(run func(context.Context, sql.DeleteWarehouseRequest) error) *MockWarehousesAPIInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteById provides a mock function with given fields: ctx, id
func (_m *MockWarehousesAPIInterface) DeleteById(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWarehousesAPIInterface_DeleteById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteById'
type MockWarehousesAPIInterface_DeleteById_Call struct {
	*mock.Call
}

// DeleteById is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockWarehousesAPIInterface_Expecter) DeleteById(ctx interface{}, id interface{}) *MockWarehousesAPIInterface_DeleteById_Call {
	return &MockWarehousesAPIInterface_DeleteById_Call{Call: _e.mock.On("DeleteById", ctx, id)}
}

func (_c *MockWarehousesAPIInterface_DeleteById_Call) Run(run func(ctx context.Context, id string)) *MockWarehousesAPIInterface_DeleteById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockWarehousesAPIInterface_DeleteById_Call) Return(_a0 error) *MockWarehousesAPIInterface_DeleteById_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWarehousesAPIInterface_DeleteById_Call) RunAndReturn(run func(context.Context, string) error) *MockWarehousesAPIInterface_DeleteById_Call {
	_c.Call.Return(run)
	return _c
}

// Edit provides a mock function with given fields: ctx, editWarehouseRequest
func (_m *MockWarehousesAPIInterface) Edit(ctx context.Context, editWarehouseRequest sql.EditWarehouseRequest) (*sql.WaitGetWarehouseRunning[interface{}], error) {
	ret := _m.Called(ctx, editWarehouseRequest)

	if len(ret) == 0 {
		panic("no return value specified for Edit")
	}

	var r0 *sql.WaitGetWarehouseRunning[interface{}]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.EditWarehouseRequest) (*sql.WaitGetWarehouseRunning[interface{}], error)); ok {
		return rf(ctx, editWarehouseRequest)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.EditWarehouseRequest) *sql.WaitGetWarehouseRunning[interface{}]); ok {
		r0 = rf(ctx, editWarehouseRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.WaitGetWarehouseRunning[interface{}])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.EditWarehouseRequest) error); ok {
		r1 = rf(ctx, editWarehouseRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWarehousesAPIInterface_Edit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Edit'
type MockWarehousesAPIInterface_Edit_Call struct {
	*mock.Call
}

// Edit is a helper method to define mock.On call
//   - ctx context.Context
//   - editWarehouseRequest sql.EditWarehouseRequest
func (_e *MockWarehousesAPIInterface_Expecter) Edit(ctx interface{}, editWarehouseRequest interface{}) *MockWarehousesAPIInterface_Edit_Call {
	return &MockWarehousesAPIInterface_Edit_Call{Call: _e.mock.On("Edit", ctx, editWarehouseRequest)}
}

func (_c *MockWarehousesAPIInterface_Edit_Call) Run(run func(ctx context.Context, editWarehouseRequest sql.EditWarehouseRequest)) *MockWarehousesAPIInterface_Edit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.EditWarehouseRequest))
	})
	return _c
}

func (_c *MockWarehousesAPIInterface_Edit_Call) Return(_a0 *sql.WaitGetWarehouseRunning[interface{}], _a1 error) *MockWarehousesAPIInterface_Edit_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWarehousesAPIInterface_Edit_Call) RunAndReturn(run func(context.Context, sql.EditWarehouseRequest) (*sql.WaitGetWarehouseRunning[interface{}], error)) *MockWarehousesAPIInterface_Edit_Call {
	_c.Call.Return(run)
	return _c
}

// EditAndWait provides a mock function with given fields: ctx, editWarehouseRequest, options
func (_m *MockWarehousesAPIInterface) EditAndWait(ctx context.Context, editWarehouseRequest sql.EditWarehouseRequest, options ...retries.Option[sql.GetWarehouseResponse]) (*sql.GetWarehouseResponse, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, editWarehouseRequest)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EditAndWait")
	}

	var r0 *sql.GetWarehouseResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.EditWarehouseRequest, ...retries.Option[sql.GetWarehouseResponse]) (*sql.GetWarehouseResponse, error)); ok {
		return rf(ctx, editWarehouseRequest, options...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.EditWarehouseRequest, ...retries.Option[sql.GetWarehouseResponse]) *sql.GetWarehouseResponse); ok {
		r0 = rf(ctx, editWarehouseRequest, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.GetWarehouseResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.EditWarehouseRequest, ...retries.Option[sql.GetWarehouseResponse]) error); ok {
		r1 = rf(ctx, editWarehouseRequest, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWarehousesAPIInterface_EditAndWait_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EditAndWait'
type MockWarehousesAPIInterface_EditAndWait_Call struct {
	*mock.Call
}

// EditAndWait is a helper method to define mock.On call
//   - ctx context.Context
//   - editWarehouseRequest sql.EditWarehouseRequest
//   - options ...retries.Option[sql.GetWarehouseResponse]
func (_e *MockWarehousesAPIInterface_Expecter) EditAndWait(ctx interface{}, editWarehouseRequest interface{}, options ...interface{}) *MockWarehousesAPIInterface_EditAndWait_Call {
	return &MockWarehousesAPIInterface_EditAndWait_Call{Call: _e.mock.On("EditAndWait",
		append([]interface{}{ctx, editWarehouseRequest}, options...)...)}
}

func (_c *MockWarehousesAPIInterface_EditAndWait_Call) Run(run func(ctx context.Context, editWarehouseRequest sql.EditWarehouseRequest, options ...retries.Option[sql.GetWarehouseResponse])) *MockWarehousesAPIInterface_EditAndWait_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]retries.Option[sql.GetWarehouseResponse], len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(retries.Option[sql.GetWarehouseResponse])
			}
		}
		run(args[0].(context.Context), args[1].(sql.EditWarehouseRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockWarehousesAPIInterface_EditAndWait_Call) Return(_a0 *sql.GetWarehouseResponse, _a1 error) *MockWarehousesAPIInterface_EditAndWait_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWarehousesAPIInterface_EditAndWait_Call) RunAndReturn(run func(context.Context, sql.EditWarehouseRequest, ...retries.Option[sql.GetWarehouseResponse]) (*sql.GetWarehouseResponse, error)) *MockWarehousesAPIInterface_EditAndWait_Call {
	_c.Call.Return(run)
	return _c
}

// EndpointInfoNameToIdMap provides a mock function with given fields: ctx, request
func (_m *MockWarehousesAPIInterface) EndpointInfoNameToIdMap(ctx context.Context, request sql.ListWarehousesRequest) (map[string]string, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for EndpointInfoNameToIdMap")
	}

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.ListWarehousesRequest) (map[string]string, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.ListWarehousesRequest) map[string]string); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.ListWarehousesRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWarehousesAPIInterface_EndpointInfoNameToIdMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EndpointInfoNameToIdMap'
type MockWarehousesAPIInterface_EndpointInfoNameToIdMap_Call struct {
	*mock.Call
}

// EndpointInfoNameToIdMap is a helper method to define mock.On call
//   - ctx context.Context
//   - request sql.ListWarehousesRequest
func (_e *MockWarehousesAPIInterface_Expecter) EndpointInfoNameToIdMap(ctx interface{}, request interface{}) *MockWarehousesAPIInterface_EndpointInfoNameToIdMap_Call {
	return &MockWarehousesAPIInterface_EndpointInfoNameToIdMap_Call{Call: _e.mock.On("EndpointInfoNameToIdMap", ctx, request)}
}

func (_c *MockWarehousesAPIInterface_EndpointInfoNameToIdMap_Call) Run(run func(ctx context.Context, request sql.ListWarehousesRequest)) *MockWarehousesAPIInterface_EndpointInfoNameToIdMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.ListWarehousesRequest))
	})
	return _c
}

func (_c *MockWarehousesAPIInterface_EndpointInfoNameToIdMap_Call) Return(_a0 map[string]string, _a1 error) *MockWarehousesAPIInterface_EndpointInfoNameToIdMap_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWarehousesAPIInterface_EndpointInfoNameToIdMap_Call) RunAndReturn(run func(context.Context, sql.ListWarehousesRequest) (map[string]string, error)) *MockWarehousesAPIInterface_EndpointInfoNameToIdMap_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, request
func (_m *MockWarehousesAPIInterface) Get(ctx context.Context, request sql.GetWarehouseRequest) (*sql.GetWarehouseResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *sql.GetWarehouseResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.GetWarehouseRequest) (*sql.GetWarehouseResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.GetWarehouseRequest) *sql.GetWarehouseResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.GetWarehouseResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.GetWarehouseRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWarehousesAPIInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockWarehousesAPIInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - request sql.GetWarehouseRequest
func (_e *MockWarehousesAPIInterface_Expecter) Get(ctx interface{}, request interface{}) *MockWarehousesAPIInterface_Get_Call {
	return &MockWarehousesAPIInterface_Get_Call{Call: _e.mock.On("Get", ctx, request)}
}

func (_c *MockWarehousesAPIInterface_Get_Call) Run(run func(ctx context.Context, request sql.GetWarehouseRequest)) *MockWarehousesAPIInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.GetWarehouseRequest))
	})
	return _c
}

func (_c *MockWarehousesAPIInterface_Get_Call) Return(_a0 *sql.GetWarehouseResponse, _a1 error) *MockWarehousesAPIInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWarehousesAPIInterface_Get_Call) RunAndReturn(run func(context.Context, sql.GetWarehouseRequest) (*sql.GetWarehouseResponse, error)) *MockWarehousesAPIInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetById provides a mock function with given fields: ctx, id
func (_m *MockWarehousesAPIInterface) GetById(ctx context.Context, id string) (*sql.GetWarehouseResponse, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 *sql.GetWarehouseResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*sql.GetWarehouseResponse, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *sql.GetWarehouseResponse); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.GetWarehouseResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWarehousesAPIInterface_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type MockWarehousesAPIInterface_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockWarehousesAPIInterface_Expecter) GetById(ctx interface{}, id interface{}) *MockWarehousesAPIInterface_GetById_Call {
	return &MockWarehousesAPIInterface_GetById_Call{Call: _e.mock.On("GetById", ctx, id)}
}

func (_c *MockWarehousesAPIInterface_GetById_Call) Run(run func(ctx context.Context, id string)) *MockWarehousesAPIInterface_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockWarehousesAPIInterface_GetById_Call) Return(_a0 *sql.GetWarehouseResponse, _a1 error) *MockWarehousesAPIInterface_GetById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWarehousesAPIInterface_GetById_Call) RunAndReturn(run func(context.Context, string) (*sql.GetWarehouseResponse, error)) *MockWarehousesAPIInterface_GetById_Call {
	_c.Call.Return(run)
	return _c
}

// GetByName provides a mock function with given fields: ctx, name
func (_m *MockWarehousesAPIInterface) GetByName(ctx context.Context, name string) (*sql.EndpointInfo, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetByName")
	}

	var r0 *sql.EndpointInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*sql.EndpointInfo, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *sql.EndpointInfo); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.EndpointInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWarehousesAPIInterface_GetByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByName'
type MockWarehousesAPIInterface_GetByName_Call struct {
	*mock.Call
}

// GetByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockWarehousesAPIInterface_Expecter) GetByName(ctx interface{}, name interface{}) *MockWarehousesAPIInterface_GetByName_Call {
	return &MockWarehousesAPIInterface_GetByName_Call{Call: _e.mock.On("GetByName", ctx, name)}
}

func (_c *MockWarehousesAPIInterface_GetByName_Call) Run(run func(ctx context.Context, name string)) *MockWarehousesAPIInterface_GetByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockWarehousesAPIInterface_GetByName_Call) Return(_a0 *sql.EndpointInfo, _a1 error) *MockWarehousesAPIInterface_GetByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWarehousesAPIInterface_GetByName_Call) RunAndReturn(run func(context.Context, string) (*sql.EndpointInfo, error)) *MockWarehousesAPIInterface_GetByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetPermissionLevels provides a mock function with given fields: ctx, request
func (_m *MockWarehousesAPIInterface) GetPermissionLevels(ctx context.Context, request sql.GetWarehousePermissionLevelsRequest) (*sql.GetWarehousePermissionLevelsResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetPermissionLevels")
	}

	var r0 *sql.GetWarehousePermissionLevelsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.GetWarehousePermissionLevelsRequest) (*sql.GetWarehousePermissionLevelsResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.GetWarehousePermissionLevelsRequest) *sql.GetWarehousePermissionLevelsResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.GetWarehousePermissionLevelsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.GetWarehousePermissionLevelsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWarehousesAPIInterface_GetPermissionLevels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPermissionLevels'
type MockWarehousesAPIInterface_GetPermissionLevels_Call struct {
	*mock.Call
}

// GetPermissionLevels is a helper method to define mock.On call
//   - ctx context.Context
//   - request sql.GetWarehousePermissionLevelsRequest
func (_e *MockWarehousesAPIInterface_Expecter) GetPermissionLevels(ctx interface{}, request interface{}) *MockWarehousesAPIInterface_GetPermissionLevels_Call {
	return &MockWarehousesAPIInterface_GetPermissionLevels_Call{Call: _e.mock.On("GetPermissionLevels", ctx, request)}
}

func (_c *MockWarehousesAPIInterface_GetPermissionLevels_Call) Run(run func(ctx context.Context, request sql.GetWarehousePermissionLevelsRequest)) *MockWarehousesAPIInterface_GetPermissionLevels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.GetWarehousePermissionLevelsRequest))
	})
	return _c
}

func (_c *MockWarehousesAPIInterface_GetPermissionLevels_Call) Return(_a0 *sql.GetWarehousePermissionLevelsResponse, _a1 error) *MockWarehousesAPIInterface_GetPermissionLevels_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWarehousesAPIInterface_GetPermissionLevels_Call) RunAndReturn(run func(context.Context, sql.GetWarehousePermissionLevelsRequest) (*sql.GetWarehousePermissionLevelsResponse, error)) *MockWarehousesAPIInterface_GetPermissionLevels_Call {
	_c.Call.Return(run)
	return _c
}

// GetPermissionLevelsByWarehouseId provides a mock function with given fields: ctx, warehouseId
func (_m *MockWarehousesAPIInterface) GetPermissionLevelsByWarehouseId(ctx context.Context, warehouseId string) (*sql.GetWarehousePermissionLevelsResponse, error) {
	ret := _m.Called(ctx, warehouseId)

	if len(ret) == 0 {
		panic("no return value specified for GetPermissionLevelsByWarehouseId")
	}

	var r0 *sql.GetWarehousePermissionLevelsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*sql.GetWarehousePermissionLevelsResponse, error)); ok {
		return rf(ctx, warehouseId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *sql.GetWarehousePermissionLevelsResponse); ok {
		r0 = rf(ctx, warehouseId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.GetWarehousePermissionLevelsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, warehouseId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWarehousesAPIInterface_GetPermissionLevelsByWarehouseId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPermissionLevelsByWarehouseId'
type MockWarehousesAPIInterface_GetPermissionLevelsByWarehouseId_Call struct {
	*mock.Call
}

// GetPermissionLevelsByWarehouseId is a helper method to define mock.On call
//   - ctx context.Context
//   - warehouseId string
func (_e *MockWarehousesAPIInterface_Expecter) GetPermissionLevelsByWarehouseId(ctx interface{}, warehouseId interface{}) *MockWarehousesAPIInterface_GetPermissionLevelsByWarehouseId_Call {
	return &MockWarehousesAPIInterface_GetPermissionLevelsByWarehouseId_Call{Call: _e.mock.On("GetPermissionLevelsByWarehouseId", ctx, warehouseId)}
}

func (_c *MockWarehousesAPIInterface_GetPermissionLevelsByWarehouseId_Call) Run(run func(ctx context.Context, warehouseId string)) *MockWarehousesAPIInterface_GetPermissionLevelsByWarehouseId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockWarehousesAPIInterface_GetPermissionLevelsByWarehouseId_Call) Return(_a0 *sql.GetWarehousePermissionLevelsResponse, _a1 error) *MockWarehousesAPIInterface_GetPermissionLevelsByWarehouseId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWarehousesAPIInterface_GetPermissionLevelsByWarehouseId_Call) RunAndReturn(run func(context.Context, string) (*sql.GetWarehousePermissionLevelsResponse, error)) *MockWarehousesAPIInterface_GetPermissionLevelsByWarehouseId_Call {
	_c.Call.Return(run)
	return _c
}

// GetPermissions provides a mock function with given fields: ctx, request
func (_m *MockWarehousesAPIInterface) GetPermissions(ctx context.Context, request sql.GetWarehousePermissionsRequest) (*sql.WarehousePermissions, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetPermissions")
	}

	var r0 *sql.WarehousePermissions
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.GetWarehousePermissionsRequest) (*sql.WarehousePermissions, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.GetWarehousePermissionsRequest) *sql.WarehousePermissions); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.WarehousePermissions)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.GetWarehousePermissionsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWarehousesAPIInterface_GetPermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPermissions'
type MockWarehousesAPIInterface_GetPermissions_Call struct {
	*mock.Call
}

// GetPermissions is a helper method to define mock.On call
//   - ctx context.Context
//   - request sql.GetWarehousePermissionsRequest
func (_e *MockWarehousesAPIInterface_Expecter) GetPermissions(ctx interface{}, request interface{}) *MockWarehousesAPIInterface_GetPermissions_Call {
	return &MockWarehousesAPIInterface_GetPermissions_Call{Call: _e.mock.On("GetPermissions", ctx, request)}
}

func (_c *MockWarehousesAPIInterface_GetPermissions_Call) Run(run func(ctx context.Context, request sql.GetWarehousePermissionsRequest)) *MockWarehousesAPIInterface_GetPermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.GetWarehousePermissionsRequest))
	})
	return _c
}

func (_c *MockWarehousesAPIInterface_GetPermissions_Call) Return(_a0 *sql.WarehousePermissions, _a1 error) *MockWarehousesAPIInterface_GetPermissions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWarehousesAPIInterface_GetPermissions_Call) RunAndReturn(run func(context.Context, sql.GetWarehousePermissionsRequest) (*sql.WarehousePermissions, error)) *MockWarehousesAPIInterface_GetPermissions_Call {
	_c.Call.Return(run)
	return _c
}

// GetPermissionsByWarehouseId provides a mock function with given fields: ctx, warehouseId
func (_m *MockWarehousesAPIInterface) GetPermissionsByWarehouseId(ctx context.Context, warehouseId string) (*sql.WarehousePermissions, error) {
	ret := _m.Called(ctx, warehouseId)

	if len(ret) == 0 {
		panic("no return value specified for GetPermissionsByWarehouseId")
	}

	var r0 *sql.WarehousePermissions
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*sql.WarehousePermissions, error)); ok {
		return rf(ctx, warehouseId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *sql.WarehousePermissions); ok {
		r0 = rf(ctx, warehouseId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.WarehousePermissions)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, warehouseId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWarehousesAPIInterface_GetPermissionsByWarehouseId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPermissionsByWarehouseId'
type MockWarehousesAPIInterface_GetPermissionsByWarehouseId_Call struct {
	*mock.Call
}

// GetPermissionsByWarehouseId is a helper method to define mock.On call
//   - ctx context.Context
//   - warehouseId string
func (_e *MockWarehousesAPIInterface_Expecter) GetPermissionsByWarehouseId(ctx interface{}, warehouseId interface{}) *MockWarehousesAPIInterface_GetPermissionsByWarehouseId_Call {
	return &MockWarehousesAPIInterface_GetPermissionsByWarehouseId_Call{Call: _e.mock.On("GetPermissionsByWarehouseId", ctx, warehouseId)}
}

func (_c *MockWarehousesAPIInterface_GetPermissionsByWarehouseId_Call) Run(run func(ctx context.Context, warehouseId string)) *MockWarehousesAPIInterface_GetPermissionsByWarehouseId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockWarehousesAPIInterface_GetPermissionsByWarehouseId_Call) Return(_a0 *sql.WarehousePermissions, _a1 error) *MockWarehousesAPIInterface_GetPermissionsByWarehouseId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWarehousesAPIInterface_GetPermissionsByWarehouseId_Call) RunAndReturn(run func(context.Context, string) (*sql.WarehousePermissions, error)) *MockWarehousesAPIInterface_GetPermissionsByWarehouseId_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkspaceWarehouseConfig provides a mock function with given fields: ctx
func (_m *MockWarehousesAPIInterface) GetWorkspaceWarehouseConfig(ctx context.Context) (*sql.GetWorkspaceWarehouseConfigResponse, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkspaceWarehouseConfig")
	}

	var r0 *sql.GetWorkspaceWarehouseConfigResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*sql.GetWorkspaceWarehouseConfigResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *sql.GetWorkspaceWarehouseConfigResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.GetWorkspaceWarehouseConfigResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWarehousesAPIInterface_GetWorkspaceWarehouseConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkspaceWarehouseConfig'
type MockWarehousesAPIInterface_GetWorkspaceWarehouseConfig_Call struct {
	*mock.Call
}

// GetWorkspaceWarehouseConfig is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockWarehousesAPIInterface_Expecter) GetWorkspaceWarehouseConfig(ctx interface{}) *MockWarehousesAPIInterface_GetWorkspaceWarehouseConfig_Call {
	return &MockWarehousesAPIInterface_GetWorkspaceWarehouseConfig_Call{Call: _e.mock.On("GetWorkspaceWarehouseConfig", ctx)}
}

func (_c *MockWarehousesAPIInterface_GetWorkspaceWarehouseConfig_Call) Run(run func(ctx context.Context)) *MockWarehousesAPIInterface_GetWorkspaceWarehouseConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockWarehousesAPIInterface_GetWorkspaceWarehouseConfig_Call) Return(_a0 *sql.GetWorkspaceWarehouseConfigResponse, _a1 error) *MockWarehousesAPIInterface_GetWorkspaceWarehouseConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWarehousesAPIInterface_GetWorkspaceWarehouseConfig_Call) RunAndReturn(run func(context.Context) (*sql.GetWorkspaceWarehouseConfigResponse, error)) *MockWarehousesAPIInterface_GetWorkspaceWarehouseConfig_Call {
	_c.Call.Return(run)
	return _c
}

// Impl provides a mock function with given fields:
func (_m *MockWarehousesAPIInterface) Impl() sql.WarehousesService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 sql.WarehousesService
	if rf, ok := ret.Get(0).(func() sql.WarehousesService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.WarehousesService)
		}
	}

	return r0
}

// MockWarehousesAPIInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockWarehousesAPIInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockWarehousesAPIInterface_Expecter) Impl() *MockWarehousesAPIInterface_Impl_Call {
	return &MockWarehousesAPIInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockWarehousesAPIInterface_Impl_Call) Run(run func()) *MockWarehousesAPIInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockWarehousesAPIInterface_Impl_Call) Return(_a0 sql.WarehousesService) *MockWarehousesAPIInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWarehousesAPIInterface_Impl_Call) RunAndReturn(run func() sql.WarehousesService) *MockWarehousesAPIInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, request
func (_m *MockWarehousesAPIInterface) List(ctx context.Context, request sql.ListWarehousesRequest) *listing.PaginatingIterator[sql.ListWarehousesRequest, *sql.ListWarehousesResponse, sql.EndpointInfo] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *listing.PaginatingIterator[sql.ListWarehousesRequest, *sql.ListWarehousesResponse, sql.EndpointInfo]
	if rf, ok := ret.Get(0).(func(context.Context, sql.ListWarehousesRequest) *listing.PaginatingIterator[sql.ListWarehousesRequest, *sql.ListWarehousesResponse, sql.EndpointInfo]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*listing.PaginatingIterator[sql.ListWarehousesRequest, *sql.ListWarehousesResponse, sql.EndpointInfo])
		}
	}

	return r0
}

// MockWarehousesAPIInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockWarehousesAPIInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - request sql.ListWarehousesRequest
func (_e *MockWarehousesAPIInterface_Expecter) List(ctx interface{}, request interface{}) *MockWarehousesAPIInterface_List_Call {
	return &MockWarehousesAPIInterface_List_Call{Call: _e.mock.On("List", ctx, request)}
}

func (_c *MockWarehousesAPIInterface_List_Call) Run(run func(ctx context.Context, request sql.ListWarehousesRequest)) *MockWarehousesAPIInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.ListWarehousesRequest))
	})
	return _c
}

func (_c *MockWarehousesAPIInterface_List_Call) Return(_a0 *listing.PaginatingIterator[sql.ListWarehousesRequest, *sql.ListWarehousesResponse, sql.EndpointInfo]) *MockWarehousesAPIInterface_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWarehousesAPIInterface_List_Call) RunAndReturn(run func(context.Context, sql.ListWarehousesRequest) *listing.PaginatingIterator[sql.ListWarehousesRequest, *sql.ListWarehousesResponse, sql.EndpointInfo]) *MockWarehousesAPIInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListAll provides a mock function with given fields: ctx, request
func (_m *MockWarehousesAPIInterface) ListAll(ctx context.Context, request sql.ListWarehousesRequest) ([]sql.EndpointInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListAll")
	}

	var r0 []sql.EndpointInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.ListWarehousesRequest) ([]sql.EndpointInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.ListWarehousesRequest) []sql.EndpointInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sql.EndpointInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.ListWarehousesRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWarehousesAPIInterface_ListAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAll'
type MockWarehousesAPIInterface_ListAll_Call struct {
	*mock.Call
}

// ListAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request sql.ListWarehousesRequest
func (_e *MockWarehousesAPIInterface_Expecter) ListAll(ctx interface{}, request interface{}) *MockWarehousesAPIInterface_ListAll_Call {
	return &MockWarehousesAPIInterface_ListAll_Call{Call: _e.mock.On("ListAll", ctx, request)}
}

func (_c *MockWarehousesAPIInterface_ListAll_Call) Run(run func(ctx context.Context, request sql.ListWarehousesRequest)) *MockWarehousesAPIInterface_ListAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.ListWarehousesRequest))
	})
	return _c
}

func (_c *MockWarehousesAPIInterface_ListAll_Call) Return(_a0 []sql.EndpointInfo, _a1 error) *MockWarehousesAPIInterface_ListAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWarehousesAPIInterface_ListAll_Call) RunAndReturn(run func(context.Context, sql.ListWarehousesRequest) ([]sql.EndpointInfo, error)) *MockWarehousesAPIInterface_ListAll_Call {
	_c.Call.Return(run)
	return _c
}

// SetPermissions provides a mock function with given fields: ctx, request
func (_m *MockWarehousesAPIInterface) SetPermissions(ctx context.Context, request sql.WarehousePermissionsRequest) (*sql.WarehousePermissions, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for SetPermissions")
	}

	var r0 *sql.WarehousePermissions
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.WarehousePermissionsRequest) (*sql.WarehousePermissions, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.WarehousePermissionsRequest) *sql.WarehousePermissions); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.WarehousePermissions)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.WarehousePermissionsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWarehousesAPIInterface_SetPermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetPermissions'
type MockWarehousesAPIInterface_SetPermissions_Call struct {
	*mock.Call
}

// SetPermissions is a helper method to define mock.On call
//   - ctx context.Context
//   - request sql.WarehousePermissionsRequest
func (_e *MockWarehousesAPIInterface_Expecter) SetPermissions(ctx interface{}, request interface{}) *MockWarehousesAPIInterface_SetPermissions_Call {
	return &MockWarehousesAPIInterface_SetPermissions_Call{Call: _e.mock.On("SetPermissions", ctx, request)}
}

func (_c *MockWarehousesAPIInterface_SetPermissions_Call) Run(run func(ctx context.Context, request sql.WarehousePermissionsRequest)) *MockWarehousesAPIInterface_SetPermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.WarehousePermissionsRequest))
	})
	return _c
}

func (_c *MockWarehousesAPIInterface_SetPermissions_Call) Return(_a0 *sql.WarehousePermissions, _a1 error) *MockWarehousesAPIInterface_SetPermissions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWarehousesAPIInterface_SetPermissions_Call) RunAndReturn(run func(context.Context, sql.WarehousePermissionsRequest) (*sql.WarehousePermissions, error)) *MockWarehousesAPIInterface_SetPermissions_Call {
	_c.Call.Return(run)
	return _c
}

// SetWorkspaceWarehouseConfig provides a mock function with given fields: ctx, request
func (_m *MockWarehousesAPIInterface) SetWorkspaceWarehouseConfig(ctx context.Context, request sql.SetWorkspaceWarehouseConfigRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for SetWorkspaceWarehouseConfig")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.SetWorkspaceWarehouseConfigRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWarehousesAPIInterface_SetWorkspaceWarehouseConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetWorkspaceWarehouseConfig'
type MockWarehousesAPIInterface_SetWorkspaceWarehouseConfig_Call struct {
	*mock.Call
}

// SetWorkspaceWarehouseConfig is a helper method to define mock.On call
//   - ctx context.Context
//   - request sql.SetWorkspaceWarehouseConfigRequest
func (_e *MockWarehousesAPIInterface_Expecter) SetWorkspaceWarehouseConfig(ctx interface{}, request interface{}) *MockWarehousesAPIInterface_SetWorkspaceWarehouseConfig_Call {
	return &MockWarehousesAPIInterface_SetWorkspaceWarehouseConfig_Call{Call: _e.mock.On("SetWorkspaceWarehouseConfig", ctx, request)}
}

func (_c *MockWarehousesAPIInterface_SetWorkspaceWarehouseConfig_Call) Run(run func(ctx context.Context, request sql.SetWorkspaceWarehouseConfigRequest)) *MockWarehousesAPIInterface_SetWorkspaceWarehouseConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.SetWorkspaceWarehouseConfigRequest))
	})
	return _c
}

func (_c *MockWarehousesAPIInterface_SetWorkspaceWarehouseConfig_Call) Return(_a0 error) *MockWarehousesAPIInterface_SetWorkspaceWarehouseConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWarehousesAPIInterface_SetWorkspaceWarehouseConfig_Call) RunAndReturn(run func(context.Context, sql.SetWorkspaceWarehouseConfigRequest) error) *MockWarehousesAPIInterface_SetWorkspaceWarehouseConfig_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: ctx, startRequest
func (_m *MockWarehousesAPIInterface) Start(ctx context.Context, startRequest sql.StartRequest) (*sql.WaitGetWarehouseRunning[interface{}], error) {
	ret := _m.Called(ctx, startRequest)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 *sql.WaitGetWarehouseRunning[interface{}]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.StartRequest) (*sql.WaitGetWarehouseRunning[interface{}], error)); ok {
		return rf(ctx, startRequest)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.StartRequest) *sql.WaitGetWarehouseRunning[interface{}]); ok {
		r0 = rf(ctx, startRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.WaitGetWarehouseRunning[interface{}])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.StartRequest) error); ok {
		r1 = rf(ctx, startRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWarehousesAPIInterface_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockWarehousesAPIInterface_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
//   - startRequest sql.StartRequest
func (_e *MockWarehousesAPIInterface_Expecter) Start(ctx interface{}, startRequest interface{}) *MockWarehousesAPIInterface_Start_Call {
	return &MockWarehousesAPIInterface_Start_Call{Call: _e.mock.On("Start", ctx, startRequest)}
}

func (_c *MockWarehousesAPIInterface_Start_Call) Run(run func(ctx context.Context, startRequest sql.StartRequest)) *MockWarehousesAPIInterface_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.StartRequest))
	})
	return _c
}

func (_c *MockWarehousesAPIInterface_Start_Call) Return(_a0 *sql.WaitGetWarehouseRunning[interface{}], _a1 error) *MockWarehousesAPIInterface_Start_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWarehousesAPIInterface_Start_Call) RunAndReturn(run func(context.Context, sql.StartRequest) (*sql.WaitGetWarehouseRunning[interface{}], error)) *MockWarehousesAPIInterface_Start_Call {
	_c.Call.Return(run)
	return _c
}

// StartAndWait provides a mock function with given fields: ctx, startRequest, options
func (_m *MockWarehousesAPIInterface) StartAndWait(ctx context.Context, startRequest sql.StartRequest, options ...retries.Option[sql.GetWarehouseResponse]) (*sql.GetWarehouseResponse, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, startRequest)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartAndWait")
	}

	var r0 *sql.GetWarehouseResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.StartRequest, ...retries.Option[sql.GetWarehouseResponse]) (*sql.GetWarehouseResponse, error)); ok {
		return rf(ctx, startRequest, options...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.StartRequest, ...retries.Option[sql.GetWarehouseResponse]) *sql.GetWarehouseResponse); ok {
		r0 = rf(ctx, startRequest, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.GetWarehouseResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.StartRequest, ...retries.Option[sql.GetWarehouseResponse]) error); ok {
		r1 = rf(ctx, startRequest, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWarehousesAPIInterface_StartAndWait_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartAndWait'
type MockWarehousesAPIInterface_StartAndWait_Call struct {
	*mock.Call
}

// StartAndWait is a helper method to define mock.On call
//   - ctx context.Context
//   - startRequest sql.StartRequest
//   - options ...retries.Option[sql.GetWarehouseResponse]
func (_e *MockWarehousesAPIInterface_Expecter) StartAndWait(ctx interface{}, startRequest interface{}, options ...interface{}) *MockWarehousesAPIInterface_StartAndWait_Call {
	return &MockWarehousesAPIInterface_StartAndWait_Call{Call: _e.mock.On("StartAndWait",
		append([]interface{}{ctx, startRequest}, options...)...)}
}

func (_c *MockWarehousesAPIInterface_StartAndWait_Call) Run(run func(ctx context.Context, startRequest sql.StartRequest, options ...retries.Option[sql.GetWarehouseResponse])) *MockWarehousesAPIInterface_StartAndWait_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]retries.Option[sql.GetWarehouseResponse], len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(retries.Option[sql.GetWarehouseResponse])
			}
		}
		run(args[0].(context.Context), args[1].(sql.StartRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockWarehousesAPIInterface_StartAndWait_Call) Return(_a0 *sql.GetWarehouseResponse, _a1 error) *MockWarehousesAPIInterface_StartAndWait_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWarehousesAPIInterface_StartAndWait_Call) RunAndReturn(run func(context.Context, sql.StartRequest, ...retries.Option[sql.GetWarehouseResponse]) (*sql.GetWarehouseResponse, error)) *MockWarehousesAPIInterface_StartAndWait_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with given fields: ctx, stopRequest
func (_m *MockWarehousesAPIInterface) Stop(ctx context.Context, stopRequest sql.StopRequest) (*sql.WaitGetWarehouseStopped[interface{}], error) {
	ret := _m.Called(ctx, stopRequest)

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 *sql.WaitGetWarehouseStopped[interface{}]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.StopRequest) (*sql.WaitGetWarehouseStopped[interface{}], error)); ok {
		return rf(ctx, stopRequest)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.StopRequest) *sql.WaitGetWarehouseStopped[interface{}]); ok {
		r0 = rf(ctx, stopRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.WaitGetWarehouseStopped[interface{}])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.StopRequest) error); ok {
		r1 = rf(ctx, stopRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWarehousesAPIInterface_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockWarehousesAPIInterface_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
//   - ctx context.Context
//   - stopRequest sql.StopRequest
func (_e *MockWarehousesAPIInterface_Expecter) Stop(ctx interface{}, stopRequest interface{}) *MockWarehousesAPIInterface_Stop_Call {
	return &MockWarehousesAPIInterface_Stop_Call{Call: _e.mock.On("Stop", ctx, stopRequest)}
}

func (_c *MockWarehousesAPIInterface_Stop_Call) Run(run func(ctx context.Context, stopRequest sql.StopRequest)) *MockWarehousesAPIInterface_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.StopRequest))
	})
	return _c
}

func (_c *MockWarehousesAPIInterface_Stop_Call) Return(_a0 *sql.WaitGetWarehouseStopped[interface{}], _a1 error) *MockWarehousesAPIInterface_Stop_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWarehousesAPIInterface_Stop_Call) RunAndReturn(run func(context.Context, sql.StopRequest) (*sql.WaitGetWarehouseStopped[interface{}], error)) *MockWarehousesAPIInterface_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// StopAndWait provides a mock function with given fields: ctx, stopRequest, options
func (_m *MockWarehousesAPIInterface) StopAndWait(ctx context.Context, stopRequest sql.StopRequest, options ...retries.Option[sql.GetWarehouseResponse]) (*sql.GetWarehouseResponse, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, stopRequest)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopAndWait")
	}

	var r0 *sql.GetWarehouseResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.StopRequest, ...retries.Option[sql.GetWarehouseResponse]) (*sql.GetWarehouseResponse, error)); ok {
		return rf(ctx, stopRequest, options...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.StopRequest, ...retries.Option[sql.GetWarehouseResponse]) *sql.GetWarehouseResponse); ok {
		r0 = rf(ctx, stopRequest, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.GetWarehouseResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.StopRequest, ...retries.Option[sql.GetWarehouseResponse]) error); ok {
		r1 = rf(ctx, stopRequest, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWarehousesAPIInterface_StopAndWait_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StopAndWait'
type MockWarehousesAPIInterface_StopAndWait_Call struct {
	*mock.Call
}

// StopAndWait is a helper method to define mock.On call
//   - ctx context.Context
//   - stopRequest sql.StopRequest
//   - options ...retries.Option[sql.GetWarehouseResponse]
func (_e *MockWarehousesAPIInterface_Expecter) StopAndWait(ctx interface{}, stopRequest interface{}, options ...interface{}) *MockWarehousesAPIInterface_StopAndWait_Call {
	return &MockWarehousesAPIInterface_StopAndWait_Call{Call: _e.mock.On("StopAndWait",
		append([]interface{}{ctx, stopRequest}, options...)...)}
}

func (_c *MockWarehousesAPIInterface_StopAndWait_Call) Run(run func(ctx context.Context, stopRequest sql.StopRequest, options ...retries.Option[sql.GetWarehouseResponse])) *MockWarehousesAPIInterface_StopAndWait_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]retries.Option[sql.GetWarehouseResponse], len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(retries.Option[sql.GetWarehouseResponse])
			}
		}
		run(args[0].(context.Context), args[1].(sql.StopRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockWarehousesAPIInterface_StopAndWait_Call) Return(_a0 *sql.GetWarehouseResponse, _a1 error) *MockWarehousesAPIInterface_StopAndWait_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWarehousesAPIInterface_StopAndWait_Call) RunAndReturn(run func(context.Context, sql.StopRequest, ...retries.Option[sql.GetWarehouseResponse]) (*sql.GetWarehouseResponse, error)) *MockWarehousesAPIInterface_StopAndWait_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePermissions provides a mock function with given fields: ctx, request
func (_m *MockWarehousesAPIInterface) UpdatePermissions(ctx context.Context, request sql.WarehousePermissionsRequest) (*sql.WarehousePermissions, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePermissions")
	}

	var r0 *sql.WarehousePermissions
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.WarehousePermissionsRequest) (*sql.WarehousePermissions, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.WarehousePermissionsRequest) *sql.WarehousePermissions); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.WarehousePermissions)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.WarehousePermissionsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWarehousesAPIInterface_UpdatePermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePermissions'
type MockWarehousesAPIInterface_UpdatePermissions_Call struct {
	*mock.Call
}

// UpdatePermissions is a helper method to define mock.On call
//   - ctx context.Context
//   - request sql.WarehousePermissionsRequest
func (_e *MockWarehousesAPIInterface_Expecter) UpdatePermissions(ctx interface{}, request interface{}) *MockWarehousesAPIInterface_UpdatePermissions_Call {
	return &MockWarehousesAPIInterface_UpdatePermissions_Call{Call: _e.mock.On("UpdatePermissions", ctx, request)}
}

func (_c *MockWarehousesAPIInterface_UpdatePermissions_Call) Run(run func(ctx context.Context, request sql.WarehousePermissionsRequest)) *MockWarehousesAPIInterface_UpdatePermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.WarehousePermissionsRequest))
	})
	return _c
}

func (_c *MockWarehousesAPIInterface_UpdatePermissions_Call) Return(_a0 *sql.WarehousePermissions, _a1 error) *MockWarehousesAPIInterface_UpdatePermissions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWarehousesAPIInterface_UpdatePermissions_Call) RunAndReturn(run func(context.Context, sql.WarehousePermissionsRequest) (*sql.WarehousePermissions, error)) *MockWarehousesAPIInterface_UpdatePermissions_Call {
	_c.Call.Return(run)
	return _c
}

// WaitGetWarehouseRunning provides a mock function with given fields: ctx, id, timeout, callback
func (_m *MockWarehousesAPIInterface) WaitGetWarehouseRunning(ctx context.Context, id string, timeout time.Duration, callback func(*sql.GetWarehouseResponse)) (*sql.GetWarehouseResponse, error) {
	ret := _m.Called(ctx, id, timeout, callback)

	if len(ret) == 0 {
		panic("no return value specified for WaitGetWarehouseRunning")
	}

	var r0 *sql.GetWarehouseResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration, func(*sql.GetWarehouseResponse)) (*sql.GetWarehouseResponse, error)); ok {
		return rf(ctx, id, timeout, callback)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration, func(*sql.GetWarehouseResponse)) *sql.GetWarehouseResponse); ok {
		r0 = rf(ctx, id, timeout, callback)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.GetWarehouseResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, time.Duration, func(*sql.GetWarehouseResponse)) error); ok {
		r1 = rf(ctx, id, timeout, callback)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWarehousesAPIInterface_WaitGetWarehouseRunning_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitGetWarehouseRunning'
type MockWarehousesAPIInterface_WaitGetWarehouseRunning_Call struct {
	*mock.Call
}

// WaitGetWarehouseRunning is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - timeout time.Duration
//   - callback func(*sql.GetWarehouseResponse)
func (_e *MockWarehousesAPIInterface_Expecter) WaitGetWarehouseRunning(ctx interface{}, id interface{}, timeout interface{}, callback interface{}) *MockWarehousesAPIInterface_WaitGetWarehouseRunning_Call {
	return &MockWarehousesAPIInterface_WaitGetWarehouseRunning_Call{Call: _e.mock.On("WaitGetWarehouseRunning", ctx, id, timeout, callback)}
}

func (_c *MockWarehousesAPIInterface_WaitGetWarehouseRunning_Call) Run(run func(ctx context.Context, id string, timeout time.Duration, callback func(*sql.GetWarehouseResponse))) *MockWarehousesAPIInterface_WaitGetWarehouseRunning_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Duration), args[3].(func(*sql.GetWarehouseResponse)))
	})
	return _c
}

func (_c *MockWarehousesAPIInterface_WaitGetWarehouseRunning_Call) Return(_a0 *sql.GetWarehouseResponse, _a1 error) *MockWarehousesAPIInterface_WaitGetWarehouseRunning_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWarehousesAPIInterface_WaitGetWarehouseRunning_Call) RunAndReturn(run func(context.Context, string, time.Duration, func(*sql.GetWarehouseResponse)) (*sql.GetWarehouseResponse, error)) *MockWarehousesAPIInterface_WaitGetWarehouseRunning_Call {
	_c.Call.Return(run)
	return _c
}

// WaitGetWarehouseStopped provides a mock function with given fields: ctx, id, timeout, callback
func (_m *MockWarehousesAPIInterface) WaitGetWarehouseStopped(ctx context.Context, id string, timeout time.Duration, callback func(*sql.GetWarehouseResponse)) (*sql.GetWarehouseResponse, error) {
	ret := _m.Called(ctx, id, timeout, callback)

	if len(ret) == 0 {
		panic("no return value specified for WaitGetWarehouseStopped")
	}

	var r0 *sql.GetWarehouseResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration, func(*sql.GetWarehouseResponse)) (*sql.GetWarehouseResponse, error)); ok {
		return rf(ctx, id, timeout, callback)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration, func(*sql.GetWarehouseResponse)) *sql.GetWarehouseResponse); ok {
		r0 = rf(ctx, id, timeout, callback)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.GetWarehouseResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, time.Duration, func(*sql.GetWarehouseResponse)) error); ok {
		r1 = rf(ctx, id, timeout, callback)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWarehousesAPIInterface_WaitGetWarehouseStopped_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitGetWarehouseStopped'
type MockWarehousesAPIInterface_WaitGetWarehouseStopped_Call struct {
	*mock.Call
}

// WaitGetWarehouseStopped is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - timeout time.Duration
//   - callback func(*sql.GetWarehouseResponse)
func (_e *MockWarehousesAPIInterface_Expecter) WaitGetWarehouseStopped(ctx interface{}, id interface{}, timeout interface{}, callback interface{}) *MockWarehousesAPIInterface_WaitGetWarehouseStopped_Call {
	return &MockWarehousesAPIInterface_WaitGetWarehouseStopped_Call{Call: _e.mock.On("WaitGetWarehouseStopped", ctx, id, timeout, callback)}
}

func (_c *MockWarehousesAPIInterface_WaitGetWarehouseStopped_Call) Run(run func(ctx context.Context, id string, timeout time.Duration, callback func(*sql.GetWarehouseResponse))) *MockWarehousesAPIInterface_WaitGetWarehouseStopped_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Duration), args[3].(func(*sql.GetWarehouseResponse)))
	})
	return _c
}

func (_c *MockWarehousesAPIInterface_WaitGetWarehouseStopped_Call) Return(_a0 *sql.GetWarehouseResponse, _a1 error) *MockWarehousesAPIInterface_WaitGetWarehouseStopped_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWarehousesAPIInterface_WaitGetWarehouseStopped_Call) RunAndReturn(run func(context.Context, string, time.Duration, func(*sql.GetWarehouseResponse)) (*sql.GetWarehouseResponse, error)) *MockWarehousesAPIInterface_WaitGetWarehouseStopped_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockWarehousesAPIInterface) WithImpl(impl sql.WarehousesService) sql.WarehousesAPIInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 sql.WarehousesAPIInterface
	if rf, ok := ret.Get(0).(func(sql.WarehousesService) sql.WarehousesAPIInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.WarehousesAPIInterface)
		}
	}

	return r0
}

// MockWarehousesAPIInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockWarehousesAPIInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl sql.WarehousesService
func (_e *MockWarehousesAPIInterface_Expecter) WithImpl(impl interface{}) *MockWarehousesAPIInterface_WithImpl_Call {
	return &MockWarehousesAPIInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockWarehousesAPIInterface_WithImpl_Call) Run(run func(impl sql.WarehousesService)) *MockWarehousesAPIInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(sql.WarehousesService))
	})
	return _c
}

func (_c *MockWarehousesAPIInterface_WithImpl_Call) Return(_a0 sql.WarehousesAPIInterface) *MockWarehousesAPIInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWarehousesAPIInterface_WithImpl_Call) RunAndReturn(run func(sql.WarehousesService) sql.WarehousesAPIInterface) *MockWarehousesAPIInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWarehousesAPIInterface creates a new instance of MockWarehousesAPIInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWarehousesAPIInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWarehousesAPIInterface {
	mock := &MockWarehousesAPIInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
