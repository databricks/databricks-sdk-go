// Code generated by mockery v2.38.0. DO NOT EDIT.

package sql

import (
	context "context"

	sql "github.com/databricks/databricks-sdk-go/service/sql"
	mock "github.com/stretchr/testify/mock"
)

// MockDashboardWidgetsAPIInterface is an autogenerated mock type for the DashboardWidgetsAPIInterface type
type MockDashboardWidgetsAPIInterface struct {
	mock.Mock
}

type MockDashboardWidgetsAPIInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDashboardWidgetsAPIInterface) EXPECT() *MockDashboardWidgetsAPIInterface_Expecter {
	return &MockDashboardWidgetsAPIInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, request
func (_m *MockDashboardWidgetsAPIInterface) Create(ctx context.Context, request sql.CreateWidget) (*sql.Widget, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *sql.Widget
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.CreateWidget) (*sql.Widget, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.CreateWidget) *sql.Widget); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Widget)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.CreateWidget) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDashboardWidgetsAPIInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockDashboardWidgetsAPIInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - request sql.CreateWidget
func (_e *MockDashboardWidgetsAPIInterface_Expecter) Create(ctx interface{}, request interface{}) *MockDashboardWidgetsAPIInterface_Create_Call {
	return &MockDashboardWidgetsAPIInterface_Create_Call{Call: _e.mock.On("Create", ctx, request)}
}

func (_c *MockDashboardWidgetsAPIInterface_Create_Call) Run(run func(ctx context.Context, request sql.CreateWidget)) *MockDashboardWidgetsAPIInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.CreateWidget))
	})
	return _c
}

func (_c *MockDashboardWidgetsAPIInterface_Create_Call) Return(_a0 *sql.Widget, _a1 error) *MockDashboardWidgetsAPIInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDashboardWidgetsAPIInterface_Create_Call) RunAndReturn(run func(context.Context, sql.CreateWidget) (*sql.Widget, error)) *MockDashboardWidgetsAPIInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, request
func (_m *MockDashboardWidgetsAPIInterface) Delete(ctx context.Context, request sql.DeleteDashboardWidgetRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.DeleteDashboardWidgetRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDashboardWidgetsAPIInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockDashboardWidgetsAPIInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - request sql.DeleteDashboardWidgetRequest
func (_e *MockDashboardWidgetsAPIInterface_Expecter) Delete(ctx interface{}, request interface{}) *MockDashboardWidgetsAPIInterface_Delete_Call {
	return &MockDashboardWidgetsAPIInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, request)}
}

func (_c *MockDashboardWidgetsAPIInterface_Delete_Call) Run(run func(ctx context.Context, request sql.DeleteDashboardWidgetRequest)) *MockDashboardWidgetsAPIInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.DeleteDashboardWidgetRequest))
	})
	return _c
}

func (_c *MockDashboardWidgetsAPIInterface_Delete_Call) Return(_a0 error) *MockDashboardWidgetsAPIInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDashboardWidgetsAPIInterface_Delete_Call) RunAndReturn(run func(context.Context, sql.DeleteDashboardWidgetRequest) error) *MockDashboardWidgetsAPIInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteById provides a mock function with given fields: ctx, id
func (_m *MockDashboardWidgetsAPIInterface) DeleteById(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDashboardWidgetsAPIInterface_DeleteById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteById'
type MockDashboardWidgetsAPIInterface_DeleteById_Call struct {
	*mock.Call
}

// DeleteById is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockDashboardWidgetsAPIInterface_Expecter) DeleteById(ctx interface{}, id interface{}) *MockDashboardWidgetsAPIInterface_DeleteById_Call {
	return &MockDashboardWidgetsAPIInterface_DeleteById_Call{Call: _e.mock.On("DeleteById", ctx, id)}
}

func (_c *MockDashboardWidgetsAPIInterface_DeleteById_Call) Run(run func(ctx context.Context, id string)) *MockDashboardWidgetsAPIInterface_DeleteById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDashboardWidgetsAPIInterface_DeleteById_Call) Return(_a0 error) *MockDashboardWidgetsAPIInterface_DeleteById_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDashboardWidgetsAPIInterface_DeleteById_Call) RunAndReturn(run func(context.Context, string) error) *MockDashboardWidgetsAPIInterface_DeleteById_Call {
	_c.Call.Return(run)
	return _c
}

// Impl provides a mock function with given fields:
func (_m *MockDashboardWidgetsAPIInterface) Impl() sql.DashboardWidgetsService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 sql.DashboardWidgetsService
	if rf, ok := ret.Get(0).(func() sql.DashboardWidgetsService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.DashboardWidgetsService)
		}
	}

	return r0
}

// MockDashboardWidgetsAPIInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockDashboardWidgetsAPIInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockDashboardWidgetsAPIInterface_Expecter) Impl() *MockDashboardWidgetsAPIInterface_Impl_Call {
	return &MockDashboardWidgetsAPIInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockDashboardWidgetsAPIInterface_Impl_Call) Run(run func()) *MockDashboardWidgetsAPIInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDashboardWidgetsAPIInterface_Impl_Call) Return(_a0 sql.DashboardWidgetsService) *MockDashboardWidgetsAPIInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDashboardWidgetsAPIInterface_Impl_Call) RunAndReturn(run func() sql.DashboardWidgetsService) *MockDashboardWidgetsAPIInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, request
func (_m *MockDashboardWidgetsAPIInterface) Update(ctx context.Context, request sql.CreateWidget) (*sql.Widget, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *sql.Widget
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.CreateWidget) (*sql.Widget, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.CreateWidget) *sql.Widget); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Widget)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.CreateWidget) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDashboardWidgetsAPIInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockDashboardWidgetsAPIInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - request sql.CreateWidget
func (_e *MockDashboardWidgetsAPIInterface_Expecter) Update(ctx interface{}, request interface{}) *MockDashboardWidgetsAPIInterface_Update_Call {
	return &MockDashboardWidgetsAPIInterface_Update_Call{Call: _e.mock.On("Update", ctx, request)}
}

func (_c *MockDashboardWidgetsAPIInterface_Update_Call) Run(run func(ctx context.Context, request sql.CreateWidget)) *MockDashboardWidgetsAPIInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.CreateWidget))
	})
	return _c
}

func (_c *MockDashboardWidgetsAPIInterface_Update_Call) Return(_a0 *sql.Widget, _a1 error) *MockDashboardWidgetsAPIInterface_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDashboardWidgetsAPIInterface_Update_Call) RunAndReturn(run func(context.Context, sql.CreateWidget) (*sql.Widget, error)) *MockDashboardWidgetsAPIInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockDashboardWidgetsAPIInterface) WithImpl(impl sql.DashboardWidgetsService) sql.DashboardWidgetsAPIInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 sql.DashboardWidgetsAPIInterface
	if rf, ok := ret.Get(0).(func(sql.DashboardWidgetsService) sql.DashboardWidgetsAPIInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.DashboardWidgetsAPIInterface)
		}
	}

	return r0
}

// MockDashboardWidgetsAPIInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockDashboardWidgetsAPIInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl sql.DashboardWidgetsService
func (_e *MockDashboardWidgetsAPIInterface_Expecter) WithImpl(impl interface{}) *MockDashboardWidgetsAPIInterface_WithImpl_Call {
	return &MockDashboardWidgetsAPIInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockDashboardWidgetsAPIInterface_WithImpl_Call) Run(run func(impl sql.DashboardWidgetsService)) *MockDashboardWidgetsAPIInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(sql.DashboardWidgetsService))
	})
	return _c
}

func (_c *MockDashboardWidgetsAPIInterface_WithImpl_Call) Return(_a0 sql.DashboardWidgetsAPIInterface) *MockDashboardWidgetsAPIInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDashboardWidgetsAPIInterface_WithImpl_Call) RunAndReturn(run func(sql.DashboardWidgetsService) sql.DashboardWidgetsAPIInterface) *MockDashboardWidgetsAPIInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDashboardWidgetsAPIInterface creates a new instance of MockDashboardWidgetsAPIInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDashboardWidgetsAPIInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDashboardWidgetsAPIInterface {
	mock := &MockDashboardWidgetsAPIInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
