// Code generated by mockery v2.38.0. DO NOT EDIT.

package compute

import (
	context "context"

	compute "github.com/databricks/databricks-sdk-go/service/compute"

	listing "github.com/databricks/databricks-sdk-go/listing"

	mock "github.com/stretchr/testify/mock"
)

// MockLibrariesAPIInterface is an autogenerated mock type for the LibrariesAPIInterface type
type MockLibrariesAPIInterface struct {
	mock.Mock
}

type MockLibrariesAPIInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLibrariesAPIInterface) EXPECT() *MockLibrariesAPIInterface_Expecter {
	return &MockLibrariesAPIInterface_Expecter{mock: &_m.Mock}
}

// AllClusterStatuses provides a mock function with given fields: ctx
func (_m *MockLibrariesAPIInterface) AllClusterStatuses(ctx context.Context) (*compute.ListAllClusterLibraryStatusesResponse, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for AllClusterStatuses")
	}

	var r0 *compute.ListAllClusterLibraryStatusesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*compute.ListAllClusterLibraryStatusesResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *compute.ListAllClusterLibraryStatusesResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compute.ListAllClusterLibraryStatusesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLibrariesAPIInterface_AllClusterStatuses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllClusterStatuses'
type MockLibrariesAPIInterface_AllClusterStatuses_Call struct {
	*mock.Call
}

// AllClusterStatuses is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockLibrariesAPIInterface_Expecter) AllClusterStatuses(ctx interface{}) *MockLibrariesAPIInterface_AllClusterStatuses_Call {
	return &MockLibrariesAPIInterface_AllClusterStatuses_Call{Call: _e.mock.On("AllClusterStatuses", ctx)}
}

func (_c *MockLibrariesAPIInterface_AllClusterStatuses_Call) Run(run func(ctx context.Context)) *MockLibrariesAPIInterface_AllClusterStatuses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockLibrariesAPIInterface_AllClusterStatuses_Call) Return(_a0 *compute.ListAllClusterLibraryStatusesResponse, _a1 error) *MockLibrariesAPIInterface_AllClusterStatuses_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLibrariesAPIInterface_AllClusterStatuses_Call) RunAndReturn(run func(context.Context) (*compute.ListAllClusterLibraryStatusesResponse, error)) *MockLibrariesAPIInterface_AllClusterStatuses_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterStatus provides a mock function with given fields: ctx, request
func (_m *MockLibrariesAPIInterface) ClusterStatus(ctx context.Context, request compute.ClusterStatusRequest) *listing.PaginatingIterator[compute.ClusterStatusRequest, *compute.ClusterLibraryStatuses, compute.LibraryFullStatus] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ClusterStatus")
	}

	var r0 *listing.PaginatingIterator[compute.ClusterStatusRequest, *compute.ClusterLibraryStatuses, compute.LibraryFullStatus]
	if rf, ok := ret.Get(0).(func(context.Context, compute.ClusterStatusRequest) *listing.PaginatingIterator[compute.ClusterStatusRequest, *compute.ClusterLibraryStatuses, compute.LibraryFullStatus]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*listing.PaginatingIterator[compute.ClusterStatusRequest, *compute.ClusterLibraryStatuses, compute.LibraryFullStatus])
		}
	}

	return r0
}

// MockLibrariesAPIInterface_ClusterStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterStatus'
type MockLibrariesAPIInterface_ClusterStatus_Call struct {
	*mock.Call
}

// ClusterStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - request compute.ClusterStatusRequest
func (_e *MockLibrariesAPIInterface_Expecter) ClusterStatus(ctx interface{}, request interface{}) *MockLibrariesAPIInterface_ClusterStatus_Call {
	return &MockLibrariesAPIInterface_ClusterStatus_Call{Call: _e.mock.On("ClusterStatus", ctx, request)}
}

func (_c *MockLibrariesAPIInterface_ClusterStatus_Call) Run(run func(ctx context.Context, request compute.ClusterStatusRequest)) *MockLibrariesAPIInterface_ClusterStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(compute.ClusterStatusRequest))
	})
	return _c
}

func (_c *MockLibrariesAPIInterface_ClusterStatus_Call) Return(_a0 *listing.PaginatingIterator[compute.ClusterStatusRequest, *compute.ClusterLibraryStatuses, compute.LibraryFullStatus]) *MockLibrariesAPIInterface_ClusterStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLibrariesAPIInterface_ClusterStatus_Call) RunAndReturn(run func(context.Context, compute.ClusterStatusRequest) *listing.PaginatingIterator[compute.ClusterStatusRequest, *compute.ClusterLibraryStatuses, compute.LibraryFullStatus]) *MockLibrariesAPIInterface_ClusterStatus_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterStatusAll provides a mock function with given fields: ctx, request
func (_m *MockLibrariesAPIInterface) ClusterStatusAll(ctx context.Context, request compute.ClusterStatusRequest) ([]compute.LibraryFullStatus, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ClusterStatusAll")
	}

	var r0 []compute.LibraryFullStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, compute.ClusterStatusRequest) ([]compute.LibraryFullStatus, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, compute.ClusterStatusRequest) []compute.LibraryFullStatus); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]compute.LibraryFullStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, compute.ClusterStatusRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLibrariesAPIInterface_ClusterStatusAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterStatusAll'
type MockLibrariesAPIInterface_ClusterStatusAll_Call struct {
	*mock.Call
}

// ClusterStatusAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request compute.ClusterStatusRequest
func (_e *MockLibrariesAPIInterface_Expecter) ClusterStatusAll(ctx interface{}, request interface{}) *MockLibrariesAPIInterface_ClusterStatusAll_Call {
	return &MockLibrariesAPIInterface_ClusterStatusAll_Call{Call: _e.mock.On("ClusterStatusAll", ctx, request)}
}

func (_c *MockLibrariesAPIInterface_ClusterStatusAll_Call) Run(run func(ctx context.Context, request compute.ClusterStatusRequest)) *MockLibrariesAPIInterface_ClusterStatusAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(compute.ClusterStatusRequest))
	})
	return _c
}

func (_c *MockLibrariesAPIInterface_ClusterStatusAll_Call) Return(_a0 []compute.LibraryFullStatus, _a1 error) *MockLibrariesAPIInterface_ClusterStatusAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLibrariesAPIInterface_ClusterStatusAll_Call) RunAndReturn(run func(context.Context, compute.ClusterStatusRequest) ([]compute.LibraryFullStatus, error)) *MockLibrariesAPIInterface_ClusterStatusAll_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterStatusByClusterId provides a mock function with given fields: ctx, clusterId
func (_m *MockLibrariesAPIInterface) ClusterStatusByClusterId(ctx context.Context, clusterId string) (*compute.ClusterLibraryStatuses, error) {
	ret := _m.Called(ctx, clusterId)

	if len(ret) == 0 {
		panic("no return value specified for ClusterStatusByClusterId")
	}

	var r0 *compute.ClusterLibraryStatuses
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*compute.ClusterLibraryStatuses, error)); ok {
		return rf(ctx, clusterId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *compute.ClusterLibraryStatuses); ok {
		r0 = rf(ctx, clusterId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compute.ClusterLibraryStatuses)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, clusterId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLibrariesAPIInterface_ClusterStatusByClusterId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterStatusByClusterId'
type MockLibrariesAPIInterface_ClusterStatusByClusterId_Call struct {
	*mock.Call
}

// ClusterStatusByClusterId is a helper method to define mock.On call
//   - ctx context.Context
//   - clusterId string
func (_e *MockLibrariesAPIInterface_Expecter) ClusterStatusByClusterId(ctx interface{}, clusterId interface{}) *MockLibrariesAPIInterface_ClusterStatusByClusterId_Call {
	return &MockLibrariesAPIInterface_ClusterStatusByClusterId_Call{Call: _e.mock.On("ClusterStatusByClusterId", ctx, clusterId)}
}

func (_c *MockLibrariesAPIInterface_ClusterStatusByClusterId_Call) Run(run func(ctx context.Context, clusterId string)) *MockLibrariesAPIInterface_ClusterStatusByClusterId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockLibrariesAPIInterface_ClusterStatusByClusterId_Call) Return(_a0 *compute.ClusterLibraryStatuses, _a1 error) *MockLibrariesAPIInterface_ClusterStatusByClusterId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLibrariesAPIInterface_ClusterStatusByClusterId_Call) RunAndReturn(run func(context.Context, string) (*compute.ClusterLibraryStatuses, error)) *MockLibrariesAPIInterface_ClusterStatusByClusterId_Call {
	_c.Call.Return(run)
	return _c
}

// Impl provides a mock function with given fields:
func (_m *MockLibrariesAPIInterface) Impl() compute.LibrariesService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 compute.LibrariesService
	if rf, ok := ret.Get(0).(func() compute.LibrariesService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(compute.LibrariesService)
		}
	}

	return r0
}

// MockLibrariesAPIInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockLibrariesAPIInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockLibrariesAPIInterface_Expecter) Impl() *MockLibrariesAPIInterface_Impl_Call {
	return &MockLibrariesAPIInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockLibrariesAPIInterface_Impl_Call) Run(run func()) *MockLibrariesAPIInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLibrariesAPIInterface_Impl_Call) Return(_a0 compute.LibrariesService) *MockLibrariesAPIInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLibrariesAPIInterface_Impl_Call) RunAndReturn(run func() compute.LibrariesService) *MockLibrariesAPIInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// Install provides a mock function with given fields: ctx, request
func (_m *MockLibrariesAPIInterface) Install(ctx context.Context, request compute.InstallLibraries) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Install")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, compute.InstallLibraries) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLibrariesAPIInterface_Install_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Install'
type MockLibrariesAPIInterface_Install_Call struct {
	*mock.Call
}

// Install is a helper method to define mock.On call
//   - ctx context.Context
//   - request compute.InstallLibraries
func (_e *MockLibrariesAPIInterface_Expecter) Install(ctx interface{}, request interface{}) *MockLibrariesAPIInterface_Install_Call {
	return &MockLibrariesAPIInterface_Install_Call{Call: _e.mock.On("Install", ctx, request)}
}

func (_c *MockLibrariesAPIInterface_Install_Call) Run(run func(ctx context.Context, request compute.InstallLibraries)) *MockLibrariesAPIInterface_Install_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(compute.InstallLibraries))
	})
	return _c
}

func (_c *MockLibrariesAPIInterface_Install_Call) Return(_a0 error) *MockLibrariesAPIInterface_Install_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLibrariesAPIInterface_Install_Call) RunAndReturn(run func(context.Context, compute.InstallLibraries) error) *MockLibrariesAPIInterface_Install_Call {
	_c.Call.Return(run)
	return _c
}

// Uninstall provides a mock function with given fields: ctx, request
func (_m *MockLibrariesAPIInterface) Uninstall(ctx context.Context, request compute.UninstallLibraries) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Uninstall")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, compute.UninstallLibraries) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLibrariesAPIInterface_Uninstall_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Uninstall'
type MockLibrariesAPIInterface_Uninstall_Call struct {
	*mock.Call
}

// Uninstall is a helper method to define mock.On call
//   - ctx context.Context
//   - request compute.UninstallLibraries
func (_e *MockLibrariesAPIInterface_Expecter) Uninstall(ctx interface{}, request interface{}) *MockLibrariesAPIInterface_Uninstall_Call {
	return &MockLibrariesAPIInterface_Uninstall_Call{Call: _e.mock.On("Uninstall", ctx, request)}
}

func (_c *MockLibrariesAPIInterface_Uninstall_Call) Run(run func(ctx context.Context, request compute.UninstallLibraries)) *MockLibrariesAPIInterface_Uninstall_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(compute.UninstallLibraries))
	})
	return _c
}

func (_c *MockLibrariesAPIInterface_Uninstall_Call) Return(_a0 error) *MockLibrariesAPIInterface_Uninstall_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLibrariesAPIInterface_Uninstall_Call) RunAndReturn(run func(context.Context, compute.UninstallLibraries) error) *MockLibrariesAPIInterface_Uninstall_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockLibrariesAPIInterface) WithImpl(impl compute.LibrariesService) compute.LibrariesAPIInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 compute.LibrariesAPIInterface
	if rf, ok := ret.Get(0).(func(compute.LibrariesService) compute.LibrariesAPIInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(compute.LibrariesAPIInterface)
		}
	}

	return r0
}

// MockLibrariesAPIInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockLibrariesAPIInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl compute.LibrariesService
func (_e *MockLibrariesAPIInterface_Expecter) WithImpl(impl interface{}) *MockLibrariesAPIInterface_WithImpl_Call {
	return &MockLibrariesAPIInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockLibrariesAPIInterface_WithImpl_Call) Run(run func(impl compute.LibrariesService)) *MockLibrariesAPIInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(compute.LibrariesService))
	})
	return _c
}

func (_c *MockLibrariesAPIInterface_WithImpl_Call) Return(_a0 compute.LibrariesAPIInterface) *MockLibrariesAPIInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLibrariesAPIInterface_WithImpl_Call) RunAndReturn(run func(compute.LibrariesService) compute.LibrariesAPIInterface) *MockLibrariesAPIInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLibrariesAPIInterface creates a new instance of MockLibrariesAPIInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLibrariesAPIInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLibrariesAPIInterface {
	mock := &MockLibrariesAPIInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
