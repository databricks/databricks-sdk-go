// Code generated by mockery v2.38.0. DO NOT EDIT.

package compute

import (
	context "context"

	compute "github.com/databricks/databricks-sdk-go/service/compute"

	listing "github.com/databricks/databricks-sdk-go/listing"

	mock "github.com/stretchr/testify/mock"
)

// MockClusterPoliciesAPIInterface is an autogenerated mock type for the ClusterPoliciesAPIInterface type
type MockClusterPoliciesAPIInterface struct {
	mock.Mock
}

type MockClusterPoliciesAPIInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClusterPoliciesAPIInterface) EXPECT() *MockClusterPoliciesAPIInterface_Expecter {
	return &MockClusterPoliciesAPIInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, request
func (_m *MockClusterPoliciesAPIInterface) Create(ctx context.Context, request compute.CreatePolicy) (*compute.CreatePolicyResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *compute.CreatePolicyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, compute.CreatePolicy) (*compute.CreatePolicyResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, compute.CreatePolicy) *compute.CreatePolicyResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compute.CreatePolicyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, compute.CreatePolicy) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClusterPoliciesAPIInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockClusterPoliciesAPIInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - request compute.CreatePolicy
func (_e *MockClusterPoliciesAPIInterface_Expecter) Create(ctx interface{}, request interface{}) *MockClusterPoliciesAPIInterface_Create_Call {
	return &MockClusterPoliciesAPIInterface_Create_Call{Call: _e.mock.On("Create", ctx, request)}
}

func (_c *MockClusterPoliciesAPIInterface_Create_Call) Run(run func(ctx context.Context, request compute.CreatePolicy)) *MockClusterPoliciesAPIInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(compute.CreatePolicy))
	})
	return _c
}

func (_c *MockClusterPoliciesAPIInterface_Create_Call) Return(_a0 *compute.CreatePolicyResponse, _a1 error) *MockClusterPoliciesAPIInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClusterPoliciesAPIInterface_Create_Call) RunAndReturn(run func(context.Context, compute.CreatePolicy) (*compute.CreatePolicyResponse, error)) *MockClusterPoliciesAPIInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, request
func (_m *MockClusterPoliciesAPIInterface) Delete(ctx context.Context, request compute.DeletePolicy) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, compute.DeletePolicy) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClusterPoliciesAPIInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockClusterPoliciesAPIInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - request compute.DeletePolicy
func (_e *MockClusterPoliciesAPIInterface_Expecter) Delete(ctx interface{}, request interface{}) *MockClusterPoliciesAPIInterface_Delete_Call {
	return &MockClusterPoliciesAPIInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, request)}
}

func (_c *MockClusterPoliciesAPIInterface_Delete_Call) Run(run func(ctx context.Context, request compute.DeletePolicy)) *MockClusterPoliciesAPIInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(compute.DeletePolicy))
	})
	return _c
}

func (_c *MockClusterPoliciesAPIInterface_Delete_Call) Return(_a0 error) *MockClusterPoliciesAPIInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClusterPoliciesAPIInterface_Delete_Call) RunAndReturn(run func(context.Context, compute.DeletePolicy) error) *MockClusterPoliciesAPIInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByPolicyId provides a mock function with given fields: ctx, policyId
func (_m *MockClusterPoliciesAPIInterface) DeleteByPolicyId(ctx context.Context, policyId string) error {
	ret := _m.Called(ctx, policyId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByPolicyId")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, policyId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClusterPoliciesAPIInterface_DeleteByPolicyId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByPolicyId'
type MockClusterPoliciesAPIInterface_DeleteByPolicyId_Call struct {
	*mock.Call
}

// DeleteByPolicyId is a helper method to define mock.On call
//   - ctx context.Context
//   - policyId string
func (_e *MockClusterPoliciesAPIInterface_Expecter) DeleteByPolicyId(ctx interface{}, policyId interface{}) *MockClusterPoliciesAPIInterface_DeleteByPolicyId_Call {
	return &MockClusterPoliciesAPIInterface_DeleteByPolicyId_Call{Call: _e.mock.On("DeleteByPolicyId", ctx, policyId)}
}

func (_c *MockClusterPoliciesAPIInterface_DeleteByPolicyId_Call) Run(run func(ctx context.Context, policyId string)) *MockClusterPoliciesAPIInterface_DeleteByPolicyId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockClusterPoliciesAPIInterface_DeleteByPolicyId_Call) Return(_a0 error) *MockClusterPoliciesAPIInterface_DeleteByPolicyId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClusterPoliciesAPIInterface_DeleteByPolicyId_Call) RunAndReturn(run func(context.Context, string) error) *MockClusterPoliciesAPIInterface_DeleteByPolicyId_Call {
	_c.Call.Return(run)
	return _c
}

// Edit provides a mock function with given fields: ctx, request
func (_m *MockClusterPoliciesAPIInterface) Edit(ctx context.Context, request compute.EditPolicy) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Edit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, compute.EditPolicy) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClusterPoliciesAPIInterface_Edit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Edit'
type MockClusterPoliciesAPIInterface_Edit_Call struct {
	*mock.Call
}

// Edit is a helper method to define mock.On call
//   - ctx context.Context
//   - request compute.EditPolicy
func (_e *MockClusterPoliciesAPIInterface_Expecter) Edit(ctx interface{}, request interface{}) *MockClusterPoliciesAPIInterface_Edit_Call {
	return &MockClusterPoliciesAPIInterface_Edit_Call{Call: _e.mock.On("Edit", ctx, request)}
}

func (_c *MockClusterPoliciesAPIInterface_Edit_Call) Run(run func(ctx context.Context, request compute.EditPolicy)) *MockClusterPoliciesAPIInterface_Edit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(compute.EditPolicy))
	})
	return _c
}

func (_c *MockClusterPoliciesAPIInterface_Edit_Call) Return(_a0 error) *MockClusterPoliciesAPIInterface_Edit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClusterPoliciesAPIInterface_Edit_Call) RunAndReturn(run func(context.Context, compute.EditPolicy) error) *MockClusterPoliciesAPIInterface_Edit_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, request
func (_m *MockClusterPoliciesAPIInterface) Get(ctx context.Context, request compute.GetClusterPolicyRequest) (*compute.Policy, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *compute.Policy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, compute.GetClusterPolicyRequest) (*compute.Policy, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, compute.GetClusterPolicyRequest) *compute.Policy); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compute.Policy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, compute.GetClusterPolicyRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClusterPoliciesAPIInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockClusterPoliciesAPIInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - request compute.GetClusterPolicyRequest
func (_e *MockClusterPoliciesAPIInterface_Expecter) Get(ctx interface{}, request interface{}) *MockClusterPoliciesAPIInterface_Get_Call {
	return &MockClusterPoliciesAPIInterface_Get_Call{Call: _e.mock.On("Get", ctx, request)}
}

func (_c *MockClusterPoliciesAPIInterface_Get_Call) Run(run func(ctx context.Context, request compute.GetClusterPolicyRequest)) *MockClusterPoliciesAPIInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(compute.GetClusterPolicyRequest))
	})
	return _c
}

func (_c *MockClusterPoliciesAPIInterface_Get_Call) Return(_a0 *compute.Policy, _a1 error) *MockClusterPoliciesAPIInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClusterPoliciesAPIInterface_Get_Call) RunAndReturn(run func(context.Context, compute.GetClusterPolicyRequest) (*compute.Policy, error)) *MockClusterPoliciesAPIInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByName provides a mock function with given fields: ctx, name
func (_m *MockClusterPoliciesAPIInterface) GetByName(ctx context.Context, name string) (*compute.Policy, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetByName")
	}

	var r0 *compute.Policy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*compute.Policy, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *compute.Policy); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compute.Policy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClusterPoliciesAPIInterface_GetByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByName'
type MockClusterPoliciesAPIInterface_GetByName_Call struct {
	*mock.Call
}

// GetByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockClusterPoliciesAPIInterface_Expecter) GetByName(ctx interface{}, name interface{}) *MockClusterPoliciesAPIInterface_GetByName_Call {
	return &MockClusterPoliciesAPIInterface_GetByName_Call{Call: _e.mock.On("GetByName", ctx, name)}
}

func (_c *MockClusterPoliciesAPIInterface_GetByName_Call) Run(run func(ctx context.Context, name string)) *MockClusterPoliciesAPIInterface_GetByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockClusterPoliciesAPIInterface_GetByName_Call) Return(_a0 *compute.Policy, _a1 error) *MockClusterPoliciesAPIInterface_GetByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClusterPoliciesAPIInterface_GetByName_Call) RunAndReturn(run func(context.Context, string) (*compute.Policy, error)) *MockClusterPoliciesAPIInterface_GetByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetByPolicyId provides a mock function with given fields: ctx, policyId
func (_m *MockClusterPoliciesAPIInterface) GetByPolicyId(ctx context.Context, policyId string) (*compute.Policy, error) {
	ret := _m.Called(ctx, policyId)

	if len(ret) == 0 {
		panic("no return value specified for GetByPolicyId")
	}

	var r0 *compute.Policy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*compute.Policy, error)); ok {
		return rf(ctx, policyId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *compute.Policy); ok {
		r0 = rf(ctx, policyId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compute.Policy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, policyId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClusterPoliciesAPIInterface_GetByPolicyId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByPolicyId'
type MockClusterPoliciesAPIInterface_GetByPolicyId_Call struct {
	*mock.Call
}

// GetByPolicyId is a helper method to define mock.On call
//   - ctx context.Context
//   - policyId string
func (_e *MockClusterPoliciesAPIInterface_Expecter) GetByPolicyId(ctx interface{}, policyId interface{}) *MockClusterPoliciesAPIInterface_GetByPolicyId_Call {
	return &MockClusterPoliciesAPIInterface_GetByPolicyId_Call{Call: _e.mock.On("GetByPolicyId", ctx, policyId)}
}

func (_c *MockClusterPoliciesAPIInterface_GetByPolicyId_Call) Run(run func(ctx context.Context, policyId string)) *MockClusterPoliciesAPIInterface_GetByPolicyId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockClusterPoliciesAPIInterface_GetByPolicyId_Call) Return(_a0 *compute.Policy, _a1 error) *MockClusterPoliciesAPIInterface_GetByPolicyId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClusterPoliciesAPIInterface_GetByPolicyId_Call) RunAndReturn(run func(context.Context, string) (*compute.Policy, error)) *MockClusterPoliciesAPIInterface_GetByPolicyId_Call {
	_c.Call.Return(run)
	return _c
}

// GetPermissionLevels provides a mock function with given fields: ctx, request
func (_m *MockClusterPoliciesAPIInterface) GetPermissionLevels(ctx context.Context, request compute.GetClusterPolicyPermissionLevelsRequest) (*compute.GetClusterPolicyPermissionLevelsResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetPermissionLevels")
	}

	var r0 *compute.GetClusterPolicyPermissionLevelsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, compute.GetClusterPolicyPermissionLevelsRequest) (*compute.GetClusterPolicyPermissionLevelsResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, compute.GetClusterPolicyPermissionLevelsRequest) *compute.GetClusterPolicyPermissionLevelsResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compute.GetClusterPolicyPermissionLevelsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, compute.GetClusterPolicyPermissionLevelsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClusterPoliciesAPIInterface_GetPermissionLevels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPermissionLevels'
type MockClusterPoliciesAPIInterface_GetPermissionLevels_Call struct {
	*mock.Call
}

// GetPermissionLevels is a helper method to define mock.On call
//   - ctx context.Context
//   - request compute.GetClusterPolicyPermissionLevelsRequest
func (_e *MockClusterPoliciesAPIInterface_Expecter) GetPermissionLevels(ctx interface{}, request interface{}) *MockClusterPoliciesAPIInterface_GetPermissionLevels_Call {
	return &MockClusterPoliciesAPIInterface_GetPermissionLevels_Call{Call: _e.mock.On("GetPermissionLevels", ctx, request)}
}

func (_c *MockClusterPoliciesAPIInterface_GetPermissionLevels_Call) Run(run func(ctx context.Context, request compute.GetClusterPolicyPermissionLevelsRequest)) *MockClusterPoliciesAPIInterface_GetPermissionLevels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(compute.GetClusterPolicyPermissionLevelsRequest))
	})
	return _c
}

func (_c *MockClusterPoliciesAPIInterface_GetPermissionLevels_Call) Return(_a0 *compute.GetClusterPolicyPermissionLevelsResponse, _a1 error) *MockClusterPoliciesAPIInterface_GetPermissionLevels_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClusterPoliciesAPIInterface_GetPermissionLevels_Call) RunAndReturn(run func(context.Context, compute.GetClusterPolicyPermissionLevelsRequest) (*compute.GetClusterPolicyPermissionLevelsResponse, error)) *MockClusterPoliciesAPIInterface_GetPermissionLevels_Call {
	_c.Call.Return(run)
	return _c
}

// GetPermissionLevelsByClusterPolicyId provides a mock function with given fields: ctx, clusterPolicyId
func (_m *MockClusterPoliciesAPIInterface) GetPermissionLevelsByClusterPolicyId(ctx context.Context, clusterPolicyId string) (*compute.GetClusterPolicyPermissionLevelsResponse, error) {
	ret := _m.Called(ctx, clusterPolicyId)

	if len(ret) == 0 {
		panic("no return value specified for GetPermissionLevelsByClusterPolicyId")
	}

	var r0 *compute.GetClusterPolicyPermissionLevelsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*compute.GetClusterPolicyPermissionLevelsResponse, error)); ok {
		return rf(ctx, clusterPolicyId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *compute.GetClusterPolicyPermissionLevelsResponse); ok {
		r0 = rf(ctx, clusterPolicyId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compute.GetClusterPolicyPermissionLevelsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, clusterPolicyId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClusterPoliciesAPIInterface_GetPermissionLevelsByClusterPolicyId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPermissionLevelsByClusterPolicyId'
type MockClusterPoliciesAPIInterface_GetPermissionLevelsByClusterPolicyId_Call struct {
	*mock.Call
}

// GetPermissionLevelsByClusterPolicyId is a helper method to define mock.On call
//   - ctx context.Context
//   - clusterPolicyId string
func (_e *MockClusterPoliciesAPIInterface_Expecter) GetPermissionLevelsByClusterPolicyId(ctx interface{}, clusterPolicyId interface{}) *MockClusterPoliciesAPIInterface_GetPermissionLevelsByClusterPolicyId_Call {
	return &MockClusterPoliciesAPIInterface_GetPermissionLevelsByClusterPolicyId_Call{Call: _e.mock.On("GetPermissionLevelsByClusterPolicyId", ctx, clusterPolicyId)}
}

func (_c *MockClusterPoliciesAPIInterface_GetPermissionLevelsByClusterPolicyId_Call) Run(run func(ctx context.Context, clusterPolicyId string)) *MockClusterPoliciesAPIInterface_GetPermissionLevelsByClusterPolicyId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockClusterPoliciesAPIInterface_GetPermissionLevelsByClusterPolicyId_Call) Return(_a0 *compute.GetClusterPolicyPermissionLevelsResponse, _a1 error) *MockClusterPoliciesAPIInterface_GetPermissionLevelsByClusterPolicyId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClusterPoliciesAPIInterface_GetPermissionLevelsByClusterPolicyId_Call) RunAndReturn(run func(context.Context, string) (*compute.GetClusterPolicyPermissionLevelsResponse, error)) *MockClusterPoliciesAPIInterface_GetPermissionLevelsByClusterPolicyId_Call {
	_c.Call.Return(run)
	return _c
}

// GetPermissions provides a mock function with given fields: ctx, request
func (_m *MockClusterPoliciesAPIInterface) GetPermissions(ctx context.Context, request compute.GetClusterPolicyPermissionsRequest) (*compute.ClusterPolicyPermissions, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetPermissions")
	}

	var r0 *compute.ClusterPolicyPermissions
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, compute.GetClusterPolicyPermissionsRequest) (*compute.ClusterPolicyPermissions, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, compute.GetClusterPolicyPermissionsRequest) *compute.ClusterPolicyPermissions); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compute.ClusterPolicyPermissions)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, compute.GetClusterPolicyPermissionsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClusterPoliciesAPIInterface_GetPermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPermissions'
type MockClusterPoliciesAPIInterface_GetPermissions_Call struct {
	*mock.Call
}

// GetPermissions is a helper method to define mock.On call
//   - ctx context.Context
//   - request compute.GetClusterPolicyPermissionsRequest
func (_e *MockClusterPoliciesAPIInterface_Expecter) GetPermissions(ctx interface{}, request interface{}) *MockClusterPoliciesAPIInterface_GetPermissions_Call {
	return &MockClusterPoliciesAPIInterface_GetPermissions_Call{Call: _e.mock.On("GetPermissions", ctx, request)}
}

func (_c *MockClusterPoliciesAPIInterface_GetPermissions_Call) Run(run func(ctx context.Context, request compute.GetClusterPolicyPermissionsRequest)) *MockClusterPoliciesAPIInterface_GetPermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(compute.GetClusterPolicyPermissionsRequest))
	})
	return _c
}

func (_c *MockClusterPoliciesAPIInterface_GetPermissions_Call) Return(_a0 *compute.ClusterPolicyPermissions, _a1 error) *MockClusterPoliciesAPIInterface_GetPermissions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClusterPoliciesAPIInterface_GetPermissions_Call) RunAndReturn(run func(context.Context, compute.GetClusterPolicyPermissionsRequest) (*compute.ClusterPolicyPermissions, error)) *MockClusterPoliciesAPIInterface_GetPermissions_Call {
	_c.Call.Return(run)
	return _c
}

// GetPermissionsByClusterPolicyId provides a mock function with given fields: ctx, clusterPolicyId
func (_m *MockClusterPoliciesAPIInterface) GetPermissionsByClusterPolicyId(ctx context.Context, clusterPolicyId string) (*compute.ClusterPolicyPermissions, error) {
	ret := _m.Called(ctx, clusterPolicyId)

	if len(ret) == 0 {
		panic("no return value specified for GetPermissionsByClusterPolicyId")
	}

	var r0 *compute.ClusterPolicyPermissions
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*compute.ClusterPolicyPermissions, error)); ok {
		return rf(ctx, clusterPolicyId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *compute.ClusterPolicyPermissions); ok {
		r0 = rf(ctx, clusterPolicyId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compute.ClusterPolicyPermissions)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, clusterPolicyId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClusterPoliciesAPIInterface_GetPermissionsByClusterPolicyId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPermissionsByClusterPolicyId'
type MockClusterPoliciesAPIInterface_GetPermissionsByClusterPolicyId_Call struct {
	*mock.Call
}

// GetPermissionsByClusterPolicyId is a helper method to define mock.On call
//   - ctx context.Context
//   - clusterPolicyId string
func (_e *MockClusterPoliciesAPIInterface_Expecter) GetPermissionsByClusterPolicyId(ctx interface{}, clusterPolicyId interface{}) *MockClusterPoliciesAPIInterface_GetPermissionsByClusterPolicyId_Call {
	return &MockClusterPoliciesAPIInterface_GetPermissionsByClusterPolicyId_Call{Call: _e.mock.On("GetPermissionsByClusterPolicyId", ctx, clusterPolicyId)}
}

func (_c *MockClusterPoliciesAPIInterface_GetPermissionsByClusterPolicyId_Call) Run(run func(ctx context.Context, clusterPolicyId string)) *MockClusterPoliciesAPIInterface_GetPermissionsByClusterPolicyId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockClusterPoliciesAPIInterface_GetPermissionsByClusterPolicyId_Call) Return(_a0 *compute.ClusterPolicyPermissions, _a1 error) *MockClusterPoliciesAPIInterface_GetPermissionsByClusterPolicyId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClusterPoliciesAPIInterface_GetPermissionsByClusterPolicyId_Call) RunAndReturn(run func(context.Context, string) (*compute.ClusterPolicyPermissions, error)) *MockClusterPoliciesAPIInterface_GetPermissionsByClusterPolicyId_Call {
	_c.Call.Return(run)
	return _c
}

// Impl provides a mock function with given fields:
func (_m *MockClusterPoliciesAPIInterface) Impl() compute.ClusterPoliciesService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 compute.ClusterPoliciesService
	if rf, ok := ret.Get(0).(func() compute.ClusterPoliciesService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(compute.ClusterPoliciesService)
		}
	}

	return r0
}

// MockClusterPoliciesAPIInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockClusterPoliciesAPIInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockClusterPoliciesAPIInterface_Expecter) Impl() *MockClusterPoliciesAPIInterface_Impl_Call {
	return &MockClusterPoliciesAPIInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockClusterPoliciesAPIInterface_Impl_Call) Run(run func()) *MockClusterPoliciesAPIInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClusterPoliciesAPIInterface_Impl_Call) Return(_a0 compute.ClusterPoliciesService) *MockClusterPoliciesAPIInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClusterPoliciesAPIInterface_Impl_Call) RunAndReturn(run func() compute.ClusterPoliciesService) *MockClusterPoliciesAPIInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, request
func (_m *MockClusterPoliciesAPIInterface) List(ctx context.Context, request compute.ListClusterPoliciesRequest) *listing.PaginatingIterator[compute.ListClusterPoliciesRequest, *compute.ListPoliciesResponse, compute.Policy] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *listing.PaginatingIterator[compute.ListClusterPoliciesRequest, *compute.ListPoliciesResponse, compute.Policy]
	if rf, ok := ret.Get(0).(func(context.Context, compute.ListClusterPoliciesRequest) *listing.PaginatingIterator[compute.ListClusterPoliciesRequest, *compute.ListPoliciesResponse, compute.Policy]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*listing.PaginatingIterator[compute.ListClusterPoliciesRequest, *compute.ListPoliciesResponse, compute.Policy])
		}
	}

	return r0
}

// MockClusterPoliciesAPIInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockClusterPoliciesAPIInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - request compute.ListClusterPoliciesRequest
func (_e *MockClusterPoliciesAPIInterface_Expecter) List(ctx interface{}, request interface{}) *MockClusterPoliciesAPIInterface_List_Call {
	return &MockClusterPoliciesAPIInterface_List_Call{Call: _e.mock.On("List", ctx, request)}
}

func (_c *MockClusterPoliciesAPIInterface_List_Call) Run(run func(ctx context.Context, request compute.ListClusterPoliciesRequest)) *MockClusterPoliciesAPIInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(compute.ListClusterPoliciesRequest))
	})
	return _c
}

func (_c *MockClusterPoliciesAPIInterface_List_Call) Return(_a0 *listing.PaginatingIterator[compute.ListClusterPoliciesRequest, *compute.ListPoliciesResponse, compute.Policy]) *MockClusterPoliciesAPIInterface_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClusterPoliciesAPIInterface_List_Call) RunAndReturn(run func(context.Context, compute.ListClusterPoliciesRequest) *listing.PaginatingIterator[compute.ListClusterPoliciesRequest, *compute.ListPoliciesResponse, compute.Policy]) *MockClusterPoliciesAPIInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListAll provides a mock function with given fields: ctx, request
func (_m *MockClusterPoliciesAPIInterface) ListAll(ctx context.Context, request compute.ListClusterPoliciesRequest) ([]compute.Policy, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListAll")
	}

	var r0 []compute.Policy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, compute.ListClusterPoliciesRequest) ([]compute.Policy, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, compute.ListClusterPoliciesRequest) []compute.Policy); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]compute.Policy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, compute.ListClusterPoliciesRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClusterPoliciesAPIInterface_ListAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAll'
type MockClusterPoliciesAPIInterface_ListAll_Call struct {
	*mock.Call
}

// ListAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request compute.ListClusterPoliciesRequest
func (_e *MockClusterPoliciesAPIInterface_Expecter) ListAll(ctx interface{}, request interface{}) *MockClusterPoliciesAPIInterface_ListAll_Call {
	return &MockClusterPoliciesAPIInterface_ListAll_Call{Call: _e.mock.On("ListAll", ctx, request)}
}

func (_c *MockClusterPoliciesAPIInterface_ListAll_Call) Run(run func(ctx context.Context, request compute.ListClusterPoliciesRequest)) *MockClusterPoliciesAPIInterface_ListAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(compute.ListClusterPoliciesRequest))
	})
	return _c
}

func (_c *MockClusterPoliciesAPIInterface_ListAll_Call) Return(_a0 []compute.Policy, _a1 error) *MockClusterPoliciesAPIInterface_ListAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClusterPoliciesAPIInterface_ListAll_Call) RunAndReturn(run func(context.Context, compute.ListClusterPoliciesRequest) ([]compute.Policy, error)) *MockClusterPoliciesAPIInterface_ListAll_Call {
	_c.Call.Return(run)
	return _c
}

// PolicyNameToPolicyIdMap provides a mock function with given fields: ctx, request
func (_m *MockClusterPoliciesAPIInterface) PolicyNameToPolicyIdMap(ctx context.Context, request compute.ListClusterPoliciesRequest) (map[string]string, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for PolicyNameToPolicyIdMap")
	}

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, compute.ListClusterPoliciesRequest) (map[string]string, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, compute.ListClusterPoliciesRequest) map[string]string); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, compute.ListClusterPoliciesRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClusterPoliciesAPIInterface_PolicyNameToPolicyIdMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PolicyNameToPolicyIdMap'
type MockClusterPoliciesAPIInterface_PolicyNameToPolicyIdMap_Call struct {
	*mock.Call
}

// PolicyNameToPolicyIdMap is a helper method to define mock.On call
//   - ctx context.Context
//   - request compute.ListClusterPoliciesRequest
func (_e *MockClusterPoliciesAPIInterface_Expecter) PolicyNameToPolicyIdMap(ctx interface{}, request interface{}) *MockClusterPoliciesAPIInterface_PolicyNameToPolicyIdMap_Call {
	return &MockClusterPoliciesAPIInterface_PolicyNameToPolicyIdMap_Call{Call: _e.mock.On("PolicyNameToPolicyIdMap", ctx, request)}
}

func (_c *MockClusterPoliciesAPIInterface_PolicyNameToPolicyIdMap_Call) Run(run func(ctx context.Context, request compute.ListClusterPoliciesRequest)) *MockClusterPoliciesAPIInterface_PolicyNameToPolicyIdMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(compute.ListClusterPoliciesRequest))
	})
	return _c
}

func (_c *MockClusterPoliciesAPIInterface_PolicyNameToPolicyIdMap_Call) Return(_a0 map[string]string, _a1 error) *MockClusterPoliciesAPIInterface_PolicyNameToPolicyIdMap_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClusterPoliciesAPIInterface_PolicyNameToPolicyIdMap_Call) RunAndReturn(run func(context.Context, compute.ListClusterPoliciesRequest) (map[string]string, error)) *MockClusterPoliciesAPIInterface_PolicyNameToPolicyIdMap_Call {
	_c.Call.Return(run)
	return _c
}

// SetPermissions provides a mock function with given fields: ctx, request
func (_m *MockClusterPoliciesAPIInterface) SetPermissions(ctx context.Context, request compute.ClusterPolicyPermissionsRequest) (*compute.ClusterPolicyPermissions, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for SetPermissions")
	}

	var r0 *compute.ClusterPolicyPermissions
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, compute.ClusterPolicyPermissionsRequest) (*compute.ClusterPolicyPermissions, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, compute.ClusterPolicyPermissionsRequest) *compute.ClusterPolicyPermissions); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compute.ClusterPolicyPermissions)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, compute.ClusterPolicyPermissionsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClusterPoliciesAPIInterface_SetPermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetPermissions'
type MockClusterPoliciesAPIInterface_SetPermissions_Call struct {
	*mock.Call
}

// SetPermissions is a helper method to define mock.On call
//   - ctx context.Context
//   - request compute.ClusterPolicyPermissionsRequest
func (_e *MockClusterPoliciesAPIInterface_Expecter) SetPermissions(ctx interface{}, request interface{}) *MockClusterPoliciesAPIInterface_SetPermissions_Call {
	return &MockClusterPoliciesAPIInterface_SetPermissions_Call{Call: _e.mock.On("SetPermissions", ctx, request)}
}

func (_c *MockClusterPoliciesAPIInterface_SetPermissions_Call) Run(run func(ctx context.Context, request compute.ClusterPolicyPermissionsRequest)) *MockClusterPoliciesAPIInterface_SetPermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(compute.ClusterPolicyPermissionsRequest))
	})
	return _c
}

func (_c *MockClusterPoliciesAPIInterface_SetPermissions_Call) Return(_a0 *compute.ClusterPolicyPermissions, _a1 error) *MockClusterPoliciesAPIInterface_SetPermissions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClusterPoliciesAPIInterface_SetPermissions_Call) RunAndReturn(run func(context.Context, compute.ClusterPolicyPermissionsRequest) (*compute.ClusterPolicyPermissions, error)) *MockClusterPoliciesAPIInterface_SetPermissions_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePermissions provides a mock function with given fields: ctx, request
func (_m *MockClusterPoliciesAPIInterface) UpdatePermissions(ctx context.Context, request compute.ClusterPolicyPermissionsRequest) (*compute.ClusterPolicyPermissions, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePermissions")
	}

	var r0 *compute.ClusterPolicyPermissions
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, compute.ClusterPolicyPermissionsRequest) (*compute.ClusterPolicyPermissions, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, compute.ClusterPolicyPermissionsRequest) *compute.ClusterPolicyPermissions); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compute.ClusterPolicyPermissions)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, compute.ClusterPolicyPermissionsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClusterPoliciesAPIInterface_UpdatePermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePermissions'
type MockClusterPoliciesAPIInterface_UpdatePermissions_Call struct {
	*mock.Call
}

// UpdatePermissions is a helper method to define mock.On call
//   - ctx context.Context
//   - request compute.ClusterPolicyPermissionsRequest
func (_e *MockClusterPoliciesAPIInterface_Expecter) UpdatePermissions(ctx interface{}, request interface{}) *MockClusterPoliciesAPIInterface_UpdatePermissions_Call {
	return &MockClusterPoliciesAPIInterface_UpdatePermissions_Call{Call: _e.mock.On("UpdatePermissions", ctx, request)}
}

func (_c *MockClusterPoliciesAPIInterface_UpdatePermissions_Call) Run(run func(ctx context.Context, request compute.ClusterPolicyPermissionsRequest)) *MockClusterPoliciesAPIInterface_UpdatePermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(compute.ClusterPolicyPermissionsRequest))
	})
	return _c
}

func (_c *MockClusterPoliciesAPIInterface_UpdatePermissions_Call) Return(_a0 *compute.ClusterPolicyPermissions, _a1 error) *MockClusterPoliciesAPIInterface_UpdatePermissions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClusterPoliciesAPIInterface_UpdatePermissions_Call) RunAndReturn(run func(context.Context, compute.ClusterPolicyPermissionsRequest) (*compute.ClusterPolicyPermissions, error)) *MockClusterPoliciesAPIInterface_UpdatePermissions_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockClusterPoliciesAPIInterface) WithImpl(impl compute.ClusterPoliciesService) compute.ClusterPoliciesAPIInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 compute.ClusterPoliciesAPIInterface
	if rf, ok := ret.Get(0).(func(compute.ClusterPoliciesService) compute.ClusterPoliciesAPIInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(compute.ClusterPoliciesAPIInterface)
		}
	}

	return r0
}

// MockClusterPoliciesAPIInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockClusterPoliciesAPIInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl compute.ClusterPoliciesService
func (_e *MockClusterPoliciesAPIInterface_Expecter) WithImpl(impl interface{}) *MockClusterPoliciesAPIInterface_WithImpl_Call {
	return &MockClusterPoliciesAPIInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockClusterPoliciesAPIInterface_WithImpl_Call) Run(run func(impl compute.ClusterPoliciesService)) *MockClusterPoliciesAPIInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(compute.ClusterPoliciesService))
	})
	return _c
}

func (_c *MockClusterPoliciesAPIInterface_WithImpl_Call) Return(_a0 compute.ClusterPoliciesAPIInterface) *MockClusterPoliciesAPIInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClusterPoliciesAPIInterface_WithImpl_Call) RunAndReturn(run func(compute.ClusterPoliciesService) compute.ClusterPoliciesAPIInterface) *MockClusterPoliciesAPIInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClusterPoliciesAPIInterface creates a new instance of MockClusterPoliciesAPIInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClusterPoliciesAPIInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClusterPoliciesAPIInterface {
	mock := &MockClusterPoliciesAPIInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
