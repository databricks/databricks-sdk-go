// Code generated from OpenAPI specs by Databricks SDK Generator. DO NOT EDIT.

// These APIs allow you to manage Vector Search Endpoints, Vector Search Indexes, etc.
package vectorsearch

import (
	"context"

	"github.com/databricks/databricks-sdk-go/databricks/httpclient"
	"github.com/databricks/databricks-sdk-go/databricks/listing"
)

type VectorSearchEndpointsInterface interface {

	// Create an endpoint.
	//
	// Create a new endpoint.
	CreateEndpoint(ctx context.Context, request CreateEndpoint) (*EndpointInfo, error)

	// Delete an endpoint.
	DeleteEndpoint(ctx context.Context, request DeleteEndpointRequest) error

	// Delete an endpoint.
	DeleteEndpointByEndpointName(ctx context.Context, endpointName string) error

	// Get an endpoint.
	GetEndpoint(ctx context.Context, request GetEndpointRequest) (*EndpointInfo, error)

	// Get an endpoint.
	GetEndpointByEndpointName(ctx context.Context, endpointName string) (*EndpointInfo, error)

	// List all endpoints.
	//
	// This method is generated by Databricks SDK Code Generator.
	ListEndpoints(ctx context.Context, request ListEndpointsRequest) listing.Iterator[EndpointInfo]

	// List all endpoints.
	//
	// This method is generated by Databricks SDK Code Generator.
	ListEndpointsAll(ctx context.Context, request ListEndpointsRequest) ([]EndpointInfo, error)
}

func NewVectorSearchEndpoints(client *httpclient.ApiClient) *VectorSearchEndpointsAPI {
	return &VectorSearchEndpointsAPI{
		vectorSearchEndpointsImpl: vectorSearchEndpointsImpl{
			client: client,
		},
	}
}

// **Endpoint**: Represents the compute resources to host vector search indexes.
type VectorSearchEndpointsAPI struct {
	vectorSearchEndpointsImpl
}

// Delete an endpoint.
func (a *VectorSearchEndpointsAPI) DeleteEndpointByEndpointName(ctx context.Context, endpointName string) error {
	return a.vectorSearchEndpointsImpl.DeleteEndpoint(ctx, DeleteEndpointRequest{
		EndpointName: endpointName,
	})
}

// Get an endpoint.
func (a *VectorSearchEndpointsAPI) GetEndpointByEndpointName(ctx context.Context, endpointName string) (*EndpointInfo, error) {
	return a.vectorSearchEndpointsImpl.GetEndpoint(ctx, GetEndpointRequest{
		EndpointName: endpointName,
	})
}

type VectorSearchIndexesInterface interface {

	// Create an index.
	//
	// Create a new index.
	CreateIndex(ctx context.Context, request CreateVectorIndexRequest) (*CreateVectorIndexResponse, error)

	// Delete data from index.
	//
	// Handles the deletion of data from a specified vector index.
	DeleteDataVectorIndex(ctx context.Context, request DeleteDataVectorIndexRequest) (*DeleteDataVectorIndexResponse, error)

	// Delete an index.
	//
	// Delete an index.
	DeleteIndex(ctx context.Context, request DeleteIndexRequest) error

	// Delete an index.
	//
	// Delete an index.
	DeleteIndexByIndexName(ctx context.Context, indexName string) error

	// Get an index.
	//
	// Get an index.
	GetIndex(ctx context.Context, request GetIndexRequest) (*VectorIndex, error)

	// Get an index.
	//
	// Get an index.
	GetIndexByIndexName(ctx context.Context, indexName string) (*VectorIndex, error)

	// List indexes.
	//
	// List all indexes in the given endpoint.
	//
	// This method is generated by Databricks SDK Code Generator.
	ListIndexes(ctx context.Context, request ListIndexesRequest) listing.Iterator[MiniVectorIndex]

	// List indexes.
	//
	// List all indexes in the given endpoint.
	//
	// This method is generated by Databricks SDK Code Generator.
	ListIndexesAll(ctx context.Context, request ListIndexesRequest) ([]MiniVectorIndex, error)

	// Query an index.
	//
	// Query the specified vector index.
	QueryIndex(ctx context.Context, request QueryVectorIndexRequest) (*QueryVectorIndexResponse, error)

	// Query next page.
	//
	// Use `next_page_token` returned from previous `QueryVectorIndex` or
	// `QueryVectorIndexNextPage` request to fetch next page of results.
	QueryNextPage(ctx context.Context, request QueryVectorIndexNextPageRequest) (*QueryVectorIndexResponse, error)

	// Scan an index.
	//
	// Scan the specified vector index and return the first `num_results` entries
	// after the exclusive `primary_key`.
	ScanIndex(ctx context.Context, request ScanVectorIndexRequest) (*ScanVectorIndexResponse, error)

	// Synchronize an index.
	//
	// Triggers a synchronization process for a specified vector index.
	SyncIndex(ctx context.Context, request SyncIndexRequest) error

	// Upsert data into an index.
	//
	// Handles the upserting of data into a specified vector index.
	UpsertDataVectorIndex(ctx context.Context, request UpsertDataVectorIndexRequest) (*UpsertDataVectorIndexResponse, error)
}

func NewVectorSearchIndexes(client *httpclient.ApiClient) *VectorSearchIndexesAPI {
	return &VectorSearchIndexesAPI{
		vectorSearchIndexesImpl: vectorSearchIndexesImpl{
			client: client,
		},
	}
}

// **Index**: An efficient representation of your embedding vectors that
// supports real-time and efficient approximate nearest neighbor (ANN) search
// queries.
//
// There are 2 types of Vector Search indexes: * **Delta Sync Index**: An index
// that automatically syncs with a source Delta Table, automatically and
// incrementally updating the index as the underlying data in the Delta Table
// changes. * **Direct Vector Access Index**: An index that supports direct read
// and write of vectors and metadata through our REST and SDK APIs. With this
// model, the user manages index updates.
type VectorSearchIndexesAPI struct {
	vectorSearchIndexesImpl
}

// Delete an index.
//
// Delete an index.
func (a *VectorSearchIndexesAPI) DeleteIndexByIndexName(ctx context.Context, indexName string) error {
	return a.vectorSearchIndexesImpl.DeleteIndex(ctx, DeleteIndexRequest{
		IndexName: indexName,
	})
}

// Get an index.
//
// Get an index.
func (a *VectorSearchIndexesAPI) GetIndexByIndexName(ctx context.Context, indexName string) (*VectorIndex, error) {
	return a.vectorSearchIndexesImpl.GetIndex(ctx, GetIndexRequest{
		IndexName: indexName,
	})
}
