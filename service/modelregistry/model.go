// Code generated from OpenAPI specs by Databricks SDK Generator. DO NOT EDIT.

package modelregistry

// all definitions in this file are in alphabetical order

type CreateModelVersionRequest struct {
    // Optional description for model version.
    Description string `json:"description,omitempty"`
    // Register model under this name
    Name string `json:"name"`
    // MLflow run ID for correlation, if ``source`` was generated by an
    // experiment run in MLflow tracking server
    RunId string `json:"run_id,omitempty"`
    // MLflow run link - this is the exact link of the run that generated this
    // model version, potentially hosted at another instance of MLflow.
    RunLink string `json:"run_link,omitempty"`
    // URI indicating the location of the model artifacts.
    Source string `json:"source"`
    // Additional metadata for model version.
    Tags []ModelVersionTag `json:"tags,omitempty"`
}


type CreateModelVersionResponse struct {
    // Return new version number generated for this model in registry.
    ModelVersion *ModelVersion `json:"model_version,omitempty"`
}


type CreateRegisteredModelRequest struct {
    // Optional description for registered model.
    Description string `json:"description,omitempty"`
    // Register models under this name
    Name string `json:"name"`
    // Additional metadata for registered model.
    Tags []RegisteredModelTag `json:"tags,omitempty"`
}


type CreateRegisteredModelResponse struct {
    
    RegisteredModel *RegisteredModel `json:"registered_model,omitempty"`
}


type DeleteModelVersionRequest struct {
    // Name of the registered model
    Name string `json:"name"`
    // Model version number
    Version string `json:"version"`
}


type DeleteModelVersionTagRequest struct {
    // Name of the tag. The name must be an exact match; wild-card deletion is
    // not supported. Maximum size is 250 bytes.
    Key string `json:"key"`
    // Name of the registered model that the tag was logged under.
    Name string `json:"name"`
    // Model version number that the tag was logged under.
    Version string `json:"version"`
}


type DeleteRegisteredModelRequest struct {
    // Registered model unique name identifier.
    Name string `json:"name"`
}


type DeleteRegisteredModelTagRequest struct {
    // Name of the tag. The name must be an exact match; wild-card deletion is
    // not supported. Maximum size is 250 bytes.
    Key string `json:"key"`
    // Name of the registered model that the tag was logged under.
    Name string `json:"name"`
}


type GetLatestVersionsRequest struct {
    // Registered model unique name identifier.
    Name string `json:"name"`
    // List of stages.
    Stages []string `json:"stages,omitempty"`
}


type GetLatestVersionsResponse struct {
    // Latest version models for each requests stage. Only return models with
    // current ``READY`` status. If no ``stages`` provided, returns the latest
    // version for each stage, including ``&#34;None&#34;``.
    ModelVersions []ModelVersion `json:"model_versions,omitempty"`
}


type GetModelVersionDownloadUriRequest struct {
    // Name of the registered model
    Name string ` url:"name,omitempty"`
    // Model version number
    Version string ` url:"version,omitempty"`
}


type GetModelVersionDownloadUriResponse struct {
    // URI corresponding to where artifacts for this model version are stored.
    ArtifactUri string `json:"artifact_uri,omitempty"`
}


type GetModelVersionRequest struct {
    // Name of the registered model
    Name string ` url:"name,omitempty"`
    // Model version number
    Version string ` url:"version,omitempty"`
}


type GetModelVersionResponse struct {
    
    ModelVersion *ModelVersion `json:"model_version,omitempty"`
}


type GetRegisteredModelRequest struct {
    // Registered model unique name identifier.
    Name string ` url:"name,omitempty"`
}


type GetRegisteredModelResponse struct {
    
    RegisteredModel *RegisteredModel `json:"registered_model,omitempty"`
}


type ListRegisteredModelsRequest struct {
    // Maximum number of registered models desired. Max threshold is 1000.
    MaxResults int ` url:"max_results,omitempty"`
    // Pagination token to go to the next page based on a previous query.
    PageToken string ` url:"page_token,omitempty"`
}


type ListRegisteredModelsResponse struct {
    // Pagination token to request next page of models for the same query.
    NextPageToken string `json:"next_page_token,omitempty"`
    
    RegisteredModels []RegisteredModel `json:"registered_models,omitempty"`
}


type ModelVersion struct {
    // Timestamp recorded when this ``model_version`` was created.
    CreationTimestamp int64 `json:"creation_timestamp,omitempty"`
    // Current stage for this ``model_version``.
    CurrentStage string `json:"current_stage,omitempty"`
    // Description of this ``model_version``.
    Description string `json:"description,omitempty"`
    // Timestamp recorded when metadata for this ``model_version`` was last
    // updated.
    LastUpdatedTimestamp int64 `json:"last_updated_timestamp,omitempty"`
    // Unique name of the model
    Name string `json:"name,omitempty"`
    // MLflow run ID used when creating ``model_version``, if ``source`` was
    // generated by an experiment run stored in MLflow tracking server.
    RunId string `json:"run_id,omitempty"`
    // Run Link: Direct link to the run that generated this version
    RunLink string `json:"run_link,omitempty"`
    // URI indicating the location of the source model artifacts, used when
    // creating ``model_version``
    Source string `json:"source,omitempty"`
    // Current status of ``model_version``
    Status ModelVersionStatus `json:"status,omitempty"`
    // Details on current ``status``, if it is pending or failed.
    StatusMessage string `json:"status_message,omitempty"`
    // Tags: Additional metadata key-value pairs for this ``model_version``.
    Tags []ModelVersionTag `json:"tags,omitempty"`
    // User that created this ``model_version``.
    UserId string `json:"user_id,omitempty"`
    // Model&#39;s version number.
    Version string `json:"version,omitempty"`
}

// Current status of ``model_version``
type ModelVersionStatus string


const ModelVersionStatusPendingRegistration ModelVersionStatus = `PENDING_REGISTRATION`

const ModelVersionStatusFailedRegistration ModelVersionStatus = `FAILED_REGISTRATION`

const ModelVersionStatusReady ModelVersionStatus = `READY`

type ModelVersionTag struct {
    // The tag key.
    Key string `json:"key,omitempty"`
    // The tag value.
    Value string `json:"value,omitempty"`
}


type RegisteredModel struct {
    // Timestamp recorded when this ``registered_model`` was created.
    CreationTimestamp int64 `json:"creation_timestamp,omitempty"`
    // Description of this ``registered_model``.
    Description string `json:"description,omitempty"`
    // Timestamp recorded when metadata for this ``registered_model`` was last
    // updated.
    LastUpdatedTimestamp int64 `json:"last_updated_timestamp,omitempty"`
    // Collection of latest model versions for each stage. Only contains models
    // with current ``READY`` status.
    LatestVersions []ModelVersion `json:"latest_versions,omitempty"`
    // Unique name for the model.
    Name string `json:"name,omitempty"`
    // Tags: Additional metadata key-value pairs for this ``registered_model``.
    Tags []RegisteredModelTag `json:"tags,omitempty"`
    // User that created this ``registered_model``
    UserId string `json:"user_id,omitempty"`
}


type RegisteredModelTag struct {
    // The tag key.
    Key string `json:"key,omitempty"`
    // The tag value.
    Value string `json:"value,omitempty"`
}


type RenameRegisteredModelRequest struct {
    // Registered model unique name identifier.
    Name string `json:"name"`
    // If provided, updates the name for this ``registered_model``.
    NewName string `json:"new_name,omitempty"`
}


type RenameRegisteredModelResponse struct {
    
    RegisteredModel *RegisteredModel `json:"registered_model,omitempty"`
}


type SearchModelVersionsRequest struct {
    // String filter condition, like &#34;name=&#39;my-model-name&#39;&#34;. Must be a single
    // boolean condition, with string values wrapped in single quotes.
    Filter string ` url:"filter,omitempty"`
    // Maximum number of models desired. Max threshold is 10K.
    MaxResults int ` url:"max_results,omitempty"`
    // List of columns to be ordered by including model name, version, stage
    // with an optional &#34;DESC&#34; or &#34;ASC&#34; annotation, where &#34;ASC&#34; is the default.
    // Tiebreaks are done by latest stage transition timestamp, followed by name
    // ASC, followed by version DESC.
    OrderBy any /* MISSING TYPE */ ` url:"order_by,omitempty"`
    // Pagination token to go to next page based on previous search query.
    PageToken string ` url:"page_token,omitempty"`
}


type SearchModelVersionsResponse struct {
    // Models that match the search criteria
    ModelVersions []ModelVersion `json:"model_versions,omitempty"`
    // Pagination token to request next page of models for the same search
    // query.
    NextPageToken string `json:"next_page_token,omitempty"`
}


type SearchRegisteredModelsRequest struct {
    // String filter condition, like &#34;name LIKE &#39;my-model-name&#39;&#34;. Interpreted in
    // the backend automatically as &#34;name LIKE &#39;%my-model-name%&#39;&#34;. Single
    // boolean condition, with string values wrapped in single quotes.
    Filter string ` url:"filter,omitempty"`
    // Maximum number of models desired. Default is 100. Max threshold is 1000.
    MaxResults int ` url:"max_results,omitempty"`
    // List of columns for ordering search results, which can include model name
    // and last updated timestamp with an optional &#34;DESC&#34; or &#34;ASC&#34; annotation,
    // where &#34;ASC&#34; is the default. Tiebreaks are done by model name ASC.
    OrderBy any /* MISSING TYPE */ ` url:"order_by,omitempty"`
    // Pagination token to go to the next page based on a previous search query.
    PageToken string ` url:"page_token,omitempty"`
}


type SearchRegisteredModelsResponse struct {
    // Pagination token to request the next page of models.
    NextPageToken string `json:"next_page_token,omitempty"`
    // Registered Models that match the search criteria.
    RegisteredModels []RegisteredModel `json:"registered_models,omitempty"`
}


type SetModelVersionTagRequest struct {
    // Name of the tag. Maximum size depends on storage backend. If a tag with
    // this name already exists, its preexisting value will be replaced by the
    // specified `value`. All storage backends are guaranteed to support key
    // values up to 250 bytes in size.
    Key string `json:"key"`
    // Unique name of the model.
    Name string `json:"name"`
    // String value of the tag being logged. Maximum size depends on storage
    // backend. All storage backends are guaranteed to support key values up to
    // 5000 bytes in size.
    Value string `json:"value"`
    // Model version number.
    Version string `json:"version"`
}


type SetRegisteredModelTagRequest struct {
    // Name of the tag. Maximum size depends on storage backend. If a tag with
    // this name already exists, its preexisting value will be replaced by the
    // specified `value`. All storage backends are guaranteed to support key
    // values up to 250 bytes in size.
    Key string `json:"key"`
    // Unique name of the model.
    Name string `json:"name"`
    // String value of the tag being logged. Maximum size depends on storage
    // backend. All storage backends are guaranteed to support key values up to
    // 5000 bytes in size.
    Value string `json:"value"`
}


type TransitionModelVersionStageRequest struct {
    // When transitioning a model version to a particular stage, this flag
    // dictates whether all existing model versions in that stage should be
    // atomically moved to the &#34;archived&#34; stage. This ensures that at-most-one
    // model version exists in the target stage. This field is *required* when
    // transitioning a model versions&#39;s stage
    ArchiveExistingVersions bool `json:"archive_existing_versions"`
    // Name of the registered model
    Name string `json:"name"`
    // Transition `model_version` to new stage.
    Stage string `json:"stage"`
    // Model version number
    Version string `json:"version"`
}


type TransitionModelVersionStageResponse struct {
    // Updated model version
    ModelVersion *ModelVersion `json:"model_version,omitempty"`
}


type UpdateModelVersionRequest struct {
    // If provided, updates the description for this ``registered_model``.
    Description string `json:"description,omitempty"`
    // Name of the registered model
    Name string `json:"name"`
    // Model version number
    Version string `json:"version"`
}


type UpdateRegisteredModelRequest struct {
    // If provided, updates the description for this ``registered_model``.
    Description string `json:"description,omitempty"`
    // Registered model unique name identifier.
    Name string `json:"name"`
}

