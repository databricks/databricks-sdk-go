// Code generated from OpenAPI specs by Databricks SDK Generator. DO NOT EDIT.

// Database Instances provide access to a database via REST API or direct SQL.
package database

import (
	"context"

	"github.com/databricks/databricks-sdk-go/client"
	"github.com/databricks/databricks-sdk-go/listing"
)

type DatabaseInterface interface {
	CreateDatabaseCatalog(ctx context.Context, request CreateDatabaseCatalogRequest) (*DatabaseCatalog, error)

	CreateDatabaseInstance(ctx context.Context, request CreateDatabaseInstanceRequest) (*DatabaseInstance, error)

	CreateDatabaseTable(ctx context.Context, request CreateDatabaseTableRequest) (*DatabaseTable, error)

	CreateSyncedDatabaseTable(ctx context.Context, request CreateSyncedDatabaseTableRequest) (*SyncedDatabaseTable, error)

	DeleteDatabaseCatalog(ctx context.Context, request DeleteDatabaseCatalogRequest) error

	DeleteDatabaseCatalogByName(ctx context.Context, name string) error

	DeleteDatabaseInstance(ctx context.Context, request DeleteDatabaseInstanceRequest) error

	DeleteDatabaseInstanceByName(ctx context.Context, name string) error

	DeleteDatabaseTable(ctx context.Context, request DeleteDatabaseTableRequest) error

	DeleteDatabaseTableByName(ctx context.Context, name string) error

	DeleteSyncedDatabaseTable(ctx context.Context, request DeleteSyncedDatabaseTableRequest) error

	DeleteSyncedDatabaseTableByName(ctx context.Context, name string) error

	FindDatabaseInstanceByUid(ctx context.Context, request FindDatabaseInstanceByUidRequest) (*DatabaseInstance, error)

	GenerateDatabaseCredential(ctx context.Context, request GenerateDatabaseCredentialRequest) (*DatabaseCredential, error)

	GetDatabaseCatalog(ctx context.Context, request GetDatabaseCatalogRequest) (*DatabaseCatalog, error)

	GetDatabaseCatalogByName(ctx context.Context, name string) (*DatabaseCatalog, error)

	GetDatabaseInstance(ctx context.Context, request GetDatabaseInstanceRequest) (*DatabaseInstance, error)

	GetDatabaseInstanceByName(ctx context.Context, name string) (*DatabaseInstance, error)

	GetDatabaseTable(ctx context.Context, request GetDatabaseTableRequest) (*DatabaseTable, error)

	GetDatabaseTableByName(ctx context.Context, name string) (*DatabaseTable, error)

	GetSyncedDatabaseTable(ctx context.Context, request GetSyncedDatabaseTableRequest) (*SyncedDatabaseTable, error)

	GetSyncedDatabaseTableByName(ctx context.Context, name string) (*SyncedDatabaseTable, error)

	//
	// This method is generated by Databricks SDK Code Generator.
	ListDatabaseInstances(ctx context.Context, request ListDatabaseInstancesRequest) listing.Iterator[DatabaseInstance]

	//
	// This method is generated by Databricks SDK Code Generator.
	ListDatabaseInstancesAll(ctx context.Context, request ListDatabaseInstancesRequest) ([]DatabaseInstance, error)

	UpdateDatabaseInstance(ctx context.Context, request UpdateDatabaseInstanceRequest) (*DatabaseInstance, error)
}

func NewDatabase(client *client.DatabricksClient) *DatabaseAPI {
	return &DatabaseAPI{
		databaseImpl: databaseImpl{
			client: client,
		},
	}
}

// Database Instances provide access to a database via REST API or direct SQL.
type DatabaseAPI struct {
	databaseImpl
}

func (a *DatabaseAPI) DeleteDatabaseCatalogByName(ctx context.Context, name string) error {
	return a.databaseImpl.DeleteDatabaseCatalog(ctx, DeleteDatabaseCatalogRequest{
		Name: name,
	})
}

func (a *DatabaseAPI) DeleteDatabaseInstanceByName(ctx context.Context, name string) error {
	return a.databaseImpl.DeleteDatabaseInstance(ctx, DeleteDatabaseInstanceRequest{
		Name: name,
	})
}

func (a *DatabaseAPI) DeleteDatabaseTableByName(ctx context.Context, name string) error {
	return a.databaseImpl.DeleteDatabaseTable(ctx, DeleteDatabaseTableRequest{
		Name: name,
	})
}

func (a *DatabaseAPI) DeleteSyncedDatabaseTableByName(ctx context.Context, name string) error {
	return a.databaseImpl.DeleteSyncedDatabaseTable(ctx, DeleteSyncedDatabaseTableRequest{
		Name: name,
	})
}

func (a *DatabaseAPI) GetDatabaseCatalogByName(ctx context.Context, name string) (*DatabaseCatalog, error) {
	return a.databaseImpl.GetDatabaseCatalog(ctx, GetDatabaseCatalogRequest{
		Name: name,
	})
}

func (a *DatabaseAPI) GetDatabaseInstanceByName(ctx context.Context, name string) (*DatabaseInstance, error) {
	return a.databaseImpl.GetDatabaseInstance(ctx, GetDatabaseInstanceRequest{
		Name: name,
	})
}

func (a *DatabaseAPI) GetDatabaseTableByName(ctx context.Context, name string) (*DatabaseTable, error) {
	return a.databaseImpl.GetDatabaseTable(ctx, GetDatabaseTableRequest{
		Name: name,
	})
}

func (a *DatabaseAPI) GetSyncedDatabaseTableByName(ctx context.Context, name string) (*SyncedDatabaseTable, error) {
	return a.databaseImpl.GetSyncedDatabaseTable(ctx, GetSyncedDatabaseTableRequest{
		Name: name,
	})
}
