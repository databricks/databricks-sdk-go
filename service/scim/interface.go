// Code generated from OpenAPI specs by Databricks SDK Generator. DO NOT EDIT.

package scim

import (
	"context"
)

// This API allows retrieving information about currently authenticated user or
// service principal.
//
// This is the high-level interface, that contains generated methods.
//
// Evolving: this interface is under development. Method signatures may change.
type CurrentUserService interface {

	// Get current user info
	//
	// Get details about the current method caller's identity.
	Me(ctx context.Context) (*User, error)
}

// Groups simplify identity management, making it easier to assign access to
// workspaces, data, and other securable objects.
//
// It is best practice to assign access to workspaces and access-control
// policies in Unity Catalog to groups, instead of to users individually. All
// Databricks identities can be assigned as members of groups, and members
// inherit permissions that are assigned to their group.
//
// This is the high-level interface, that contains generated methods.
//
// Evolving: this interface is under development. Method signatures may change.
type GroupsService interface {

	// Create a new group
	//
	// Creates a group in the <Workspace> with a unique name, using the supplied
	// group details.
	CreateGroup(ctx context.Context, request Group) (*Group, error)

	// Delete a group
	//
	// Deletes a group from the <Workspace>.
	DeleteGroup(ctx context.Context, request DeleteGroupRequest) error

	// DeleteGroupById calls DeleteGroup, but directly with primitive function arguments,
	// instead of constructing request instance.
	//
	// This method is generated by Databricks SDK Code Generator.
	DeleteGroupById(ctx context.Context, id string) error

	// Get group details
	//
	// Gets the information for a specific group in the <Workspace>.
	GetGroup(ctx context.Context, request GetGroupRequest) (*Group, error)

	// GetGroupById calls GetGroup, but directly with primitive function arguments,
	// instead of constructing request instance.
	//
	// This method is generated by Databricks SDK Code Generator.
	GetGroupById(ctx context.Context, id string) (*Group, error)

	// List group details
	//
	// Gets all details of the groups associated with the <Workspace>.
	//
	// Use ListGroupsAll() to get all Group instances
	ListGroups(ctx context.Context, request ListGroupsRequest) (*ListGroupsResponse, error)

	// ListGroupsAll calls ListGroups() to retrieve all available results from the platform.
	//
	// This method is generated by Databricks SDK Code Generator.
	ListGroupsAll(ctx context.Context, request ListGroupsRequest) ([]Group, error)

	// GroupDisplayNameToIdMap retrieves a mapping to access ID by name
	//
	// This method is generated by Databricks SDK Code Generator.
	GroupDisplayNameToIdMap(ctx context.Context, request ListGroupsRequest) (map[string]string, error)

	// GetGroupByDisplayName retrieves Group by name.
	//
	// This method is generated by Databricks SDK Code Generator.
	GetGroupByDisplayName(ctx context.Context, name string) (*Group, error)

	// Update group details
	//
	// Partially updates the details of a group.
	PatchGroup(ctx context.Context, request PartialUpdate) error

	// Replace a group
	//
	// Updates the details of a group by replacing the entire group entity.
	UpdateGroup(ctx context.Context, request Group) error
}

// Identities for use with jobs, automated tools, and systems such as scripts,
// apps, and CI/CD platforms. Databricks recommends creating service principals
// to run production jobs or modify production data. If all processes that act
// on production data run with service principals, interactive users do not need
// any write, delete, or modify privileges in production. This eliminates the
// risk of a user overwriting production data by accident.
//
// This is the high-level interface, that contains generated methods.
//
// Evolving: this interface is under development. Method signatures may change.
type ServicePrincipalsService interface {

	// Create a service principal
	//
	// Creates a new service principal in the <Workspace>.
	CreateServicePrincipal(ctx context.Context, request ServicePrincipal) (*ServicePrincipal, error)

	// Delete a service principal
	//
	// Delete a single service principal in the <Workspace>.
	DeleteServicePrincipal(ctx context.Context, request DeleteServicePrincipalRequest) error

	// DeleteServicePrincipalById calls DeleteServicePrincipal, but directly with primitive function arguments,
	// instead of constructing request instance.
	//
	// This method is generated by Databricks SDK Code Generator.
	DeleteServicePrincipalById(ctx context.Context, id string) error

	// Get service principal details
	//
	// Gets the details for a single service principal define in the
	// <Workspace>.
	GetServicePrincipal(ctx context.Context, request GetServicePrincipalRequest) (*ServicePrincipal, error)

	// GetServicePrincipalById calls GetServicePrincipal, but directly with primitive function arguments,
	// instead of constructing request instance.
	//
	// This method is generated by Databricks SDK Code Generator.
	GetServicePrincipalById(ctx context.Context, id string) (*ServicePrincipal, error)

	// List service principals
	//
	// Gets the set of service principals associated with a <Workspace>.
	//
	// Use ListServicePrincipalsAll() to get all ServicePrincipal instances
	ListServicePrincipals(ctx context.Context, request ListServicePrincipalsRequest) (*ListServicePrincipalResponse, error)

	// ListServicePrincipalsAll calls ListServicePrincipals() to retrieve all available results from the platform.
	//
	// This method is generated by Databricks SDK Code Generator.
	ListServicePrincipalsAll(ctx context.Context, request ListServicePrincipalsRequest) ([]ServicePrincipal, error)

	// ServicePrincipalDisplayNameToIdMap retrieves a mapping to access ID by name
	//
	// This method is generated by Databricks SDK Code Generator.
	ServicePrincipalDisplayNameToIdMap(ctx context.Context, request ListServicePrincipalsRequest) (map[string]string, error)

	// GetServicePrincipalByDisplayName retrieves ServicePrincipal by name.
	//
	// This method is generated by Databricks SDK Code Generator.
	GetServicePrincipalByDisplayName(ctx context.Context, name string) (*ServicePrincipal, error)

	// Update service principal details
	//
	// Partially updates the details of a single service principal in the
	// <Workspace>.
	PatchServicePrincipal(ctx context.Context, request PartialUpdate) error

	// Replace service principal in <Workspace>
	//
	// Updates the details of a single service principal.
	//
	// This action replaces the existing service principal with the same name.
	UpdateServicePrincipal(ctx context.Context, request ServicePrincipal) error
}

// User identities recognized by Databricks and represented by email addresses.
//
// Databricks recommends using SCIM provisioning to sync users and groups
// automatically from your identity provider to your Databricks account. SCIM
// streamlines onboarding a new employee or team by using your identity provider
// to create users and groups in Databricks and give them the proper level of
// access. When a user leaves your organization or no longer needs access to
// Databricks, admins can terminate the user in your identity provider and that
// userâ€™s account will also be removed from Databricks. This ensures a
// consistent offboarding process and prevents unauthorized users from accessing
// sensitive data.
//
// This is the high-level interface, that contains generated methods.
//
// Evolving: this interface is under development. Method signatures may change.
type UsersService interface {

	// Create a new user
	//
	// Creates a new user in the <Workspace>. This new user will also be added
	// to the <Workspace> account.
	CreateUser(ctx context.Context, request User) (*User, error)

	// Delete a user
	//
	// Deletes a user. Deleting a user from a workspace also removes objects
	// associated with the user.
	DeleteUser(ctx context.Context, request DeleteUserRequest) error

	// DeleteUserById calls DeleteUser, but directly with primitive function arguments,
	// instead of constructing request instance.
	//
	// This method is generated by Databricks SDK Code Generator.
	DeleteUserById(ctx context.Context, id string) error

	// Get user details
	//
	// Gets information for a specific user in <Workspace>.
	GetUser(ctx context.Context, request GetUserRequest) (*User, error)

	// GetUserById calls GetUser, but directly with primitive function arguments,
	// instead of constructing request instance.
	//
	// This method is generated by Databricks SDK Code Generator.
	GetUserById(ctx context.Context, id string) (*User, error)

	// List users
	//
	// Gets details for all the users associated with a <Workspace>.
	//
	// Use ListUsersAll() to get all User instances
	ListUsers(ctx context.Context, request ListUsersRequest) (*ListUsersResponse, error)

	// ListUsersAll calls ListUsers() to retrieve all available results from the platform.
	//
	// This method is generated by Databricks SDK Code Generator.
	ListUsersAll(ctx context.Context, request ListUsersRequest) ([]User, error)

	// UserUserNameToIdMap retrieves a mapping to access ID by name
	//
	// This method is generated by Databricks SDK Code Generator.
	UserUserNameToIdMap(ctx context.Context, request ListUsersRequest) (map[string]string, error)

	// GetUserByUserName retrieves User by name.
	//
	// This method is generated by Databricks SDK Code Generator.
	GetUserByUserName(ctx context.Context, name string) (*User, error)

	// Update user details
	//
	// Partially updates a user resource by applying the supplied operations on
	// specific user attributes.
	PatchUser(ctx context.Context, request PartialUpdate) error

	// Replace a user
	//
	// Replaces a user's information with the data supplied in request.
	UpdateUser(ctx context.Context, request User) error
}
