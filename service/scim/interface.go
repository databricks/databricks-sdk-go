// Code generated from OpenAPI specs by Databricks SDK Generator. DO NOT EDIT.

package scim

import (
	"context"
)

// This is the high-level interface, that contains generated methods.
//
// Evolving: this interface is under development. Method signatures may change.
type CurrentUserService interface {

	// Fetch details about caller identity
	//
	// Get details about caller identity
	Me(ctx context.Context) (*User, error)
}

// This is the high-level interface, that contains generated methods.
//
// Evolving: this interface is under development. Method signatures may change.
type GroupsService interface {

	// Delete a group in <Workspace>
	//
	// Remove a group in the <Workspace>.
	DeleteGroup(ctx context.Context, request DeleteGroupRequest) error

	// DeleteGroupById calls DeleteGroup, but directly with primitive function arguments,
	// instead of constructing request instance.
	//
	// This method is generated by Databricks SDK Code Generator.
	DeleteGroupById(ctx context.Context, id string) error

	// Fetch details of a group in <Workspace>
	//
	// Fetch information of one group in the <Workspace>
	FetchGroup(ctx context.Context, request FetchGroupRequest) (*Group, error)

	// FetchGroupById calls FetchGroup, but directly with primitive function arguments,
	// instead of constructing request instance.
	//
	// This method is generated by Databricks SDK Code Generator.
	FetchGroupById(ctx context.Context, id string) (*Group, error)

	// Fetch details of multiple groups in <Workspace>
	//
	// Get all details of the groups associated with the <Workspace>.
	//
	// Use ListGroupsAll() to get all Group instances
	ListGroups(ctx context.Context, request ListGroupsRequest) (*ListGroupsResponse, error)

	// ListGroupsAll calls ListGroups() to retrieve all available results from the platform.
	//
	// This method is generated by Databricks SDK Code Generator.
	ListGroupsAll(ctx context.Context, request ListGroupsRequest) ([]Group, error)

	// GroupDisplayNameToIdMap retrieves a mapping to access ID by name
	//
	// This method is generated by Databricks SDK Code Generator.
	GroupDisplayNameToIdMap(ctx context.Context, request ListGroupsRequest) (map[string]string, error)

	// GetGroupByDisplayName retrieves Group by name.
	//
	// This method is generated by Databricks SDK Code Generator.
	GetGroupByDisplayName(ctx context.Context, name string) (*Group, error)

	// Create a new group in <Workspace>
	//
	// Create one group in the <Workspace> with a unique name
	NewGroup(ctx context.Context, request Group) (*Group, error)

	// Update details of a group
	//
	// Partially update details of a group
	PatchGroup(ctx context.Context, request PartialUpdate) error

	// Update details of a group
	//
	// Update details of a group by replacing the entire entity
	ReplaceGroup(ctx context.Context, request Group) error
}

// This is the high-level interface, that contains generated methods.
//
// Evolving: this interface is under development. Method signatures may change.
type ServicePrincipalsService interface {

	// Delete a service principal in <Workspace>
	//
	// Delete one service principal
	DeleteServicePrincipal(ctx context.Context, request DeleteServicePrincipalRequest) error

	// DeleteServicePrincipalById calls DeleteServicePrincipal, but directly with primitive function arguments,
	// instead of constructing request instance.
	//
	// This method is generated by Databricks SDK Code Generator.
	DeleteServicePrincipalById(ctx context.Context, id string) error

	// Fetch details of a service principal in <Workspace>
	//
	// Fetch information of one service principal
	FetchServicePrincipal(ctx context.Context, request FetchServicePrincipalRequest) (*ServicePrincipal, error)

	// FetchServicePrincipalById calls FetchServicePrincipal, but directly with primitive function arguments,
	// instead of constructing request instance.
	//
	// This method is generated by Databricks SDK Code Generator.
	FetchServicePrincipalById(ctx context.Context, id string) (*ServicePrincipal, error)

	// Fetch details of multiple service principals in <Workspace>
	//
	// Get multiple service principals associated with a <Workspace>.
	//
	// Use ListServicePrincipalsAll() to get all ServicePrincipal instances
	ListServicePrincipals(ctx context.Context, request ListServicePrincipalsRequest) (*ListServicePrincipalResponse, error)

	// ListServicePrincipalsAll calls ListServicePrincipals() to retrieve all available results from the platform.
	//
	// This method is generated by Databricks SDK Code Generator.
	ListServicePrincipalsAll(ctx context.Context, request ListServicePrincipalsRequest) ([]ServicePrincipal, error)

	// ServicePrincipalDisplayNameToIdMap retrieves a mapping to access ID by name
	//
	// This method is generated by Databricks SDK Code Generator.
	ServicePrincipalDisplayNameToIdMap(ctx context.Context, request ListServicePrincipalsRequest) (map[string]string, error)

	// GetServicePrincipalByDisplayName retrieves ServicePrincipal by name.
	//
	// This method is generated by Databricks SDK Code Generator.
	GetServicePrincipalByDisplayName(ctx context.Context, name string) (*ServicePrincipal, error)

	// Create a new service principal in <Workspace>
	//
	// Create one service principal in the <Workspace>.
	NewServicePrincipal(ctx context.Context, request ServicePrincipal) (*ServicePrincipal, error)

	// Update details of a service principal in <Workspace>
	//
	// Partially update details of one service principal.
	PatchServicePrincipal(ctx context.Context, request PartialUpdate) error

	// Replace service principal in <Workspace>
	//
	// Update details of one service principal.
	ReplaceServicePrincipal(ctx context.Context, request ServicePrincipal) error
}

// This is the high-level interface, that contains generated methods.
//
// Evolving: this interface is under development. Method signatures may change.
type UsersService interface {

	// Delete a user in <Workspace>
	//
	// Delete one user. Deleting a user from a workspace also removes objects
	// associated with the user.
	DeleteUser(ctx context.Context, request DeleteUserRequest) error

	// DeleteUserById calls DeleteUser, but directly with primitive function arguments,
	// instead of constructing request instance.
	//
	// This method is generated by Databricks SDK Code Generator.
	DeleteUserById(ctx context.Context, id string) error

	// Get details of a user in <Workspace>
	//
	// Fetch information of one user in <Workspace>
	FetchUser(ctx context.Context, request FetchUserRequest) (*User, error)

	// FetchUserById calls FetchUser, but directly with primitive function arguments,
	// instead of constructing request instance.
	//
	// This method is generated by Databricks SDK Code Generator.
	FetchUserById(ctx context.Context, id string) (*User, error)

	// Fetch details of multiple users in <Workspace>
	//
	// Get all the users associated with a <Workspace>.
	//
	// Use ListUsersAll() to get all User instances
	ListUsers(ctx context.Context, request ListUsersRequest) (*ListUsersResponse, error)

	// ListUsersAll calls ListUsers() to retrieve all available results from the platform.
	//
	// This method is generated by Databricks SDK Code Generator.
	ListUsersAll(ctx context.Context, request ListUsersRequest) ([]User, error)

	// UserUserNameToIdMap retrieves a mapping to access ID by name
	//
	// This method is generated by Databricks SDK Code Generator.
	UserUserNameToIdMap(ctx context.Context, request ListUsersRequest) (map[string]string, error)

	// GetUserByUserName retrieves User by name.
	//
	// This method is generated by Databricks SDK Code Generator.
	GetUserByUserName(ctx context.Context, name string) (*User, error)

	// Create a new user in <Workspace>
	//
	// Create a user in the <Workspace> who will automatically added to the
	// account.
	NewUser(ctx context.Context, request User) (*User, error)

	// Update details of a user in <Workspace>
	//
	// Partially update a user resource with operations on specific attributes
	PatchUser(ctx context.Context, request PartialUpdate) error

	// Update details of a user in <Workspace>
	//
	// Replaces user with the data supplied in request
	ReplaceUser(ctx context.Context, request User) error
}
