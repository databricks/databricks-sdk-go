// Code generated from OpenAPI specs by Databricks SDK Generator. DO NOT EDIT.

package scim

import (
	"context"
	"fmt"

	"github.com/databricks/databricks-sdk-go/databricks/client"
)

func NewAccountGroups(client *client.DatabricksClient) *AccountGroupsAPI {
	return &AccountGroupsAPI{
		AccountGroupsService: &accountGroupsAPI{
			client: client,
		},
	}
}

// Groups simplify identity management, making it easier to assign access to
// Databricks Account, data, and other securable objects.
//
// It is best practice to assign access to workspaces and access-control
// policies in Unity Catalog to groups, instead of to users individually. All
// Databricks Account identities can be assigned as members of groups, and
// members inherit permissions that are assigned to their group.
type AccountGroupsAPI struct {
	// AccountGroupsService contains low-level REST API interface.
	AccountGroupsService
}

// Create a new group
//
// Creates a group in the Databricks Account with a unique name, using the
// supplied group details.
func (a *AccountGroupsAPI) CreateGroup(ctx context.Context, request Group) (*Group, error) {
	return a.AccountGroupsService.CreateGroup(ctx, request)
}

// Delete a group
//
// Deletes a group from the Databricks Account.
func (a *AccountGroupsAPI) DeleteGroup(ctx context.Context, request DeleteGroupRequest) error {
	return a.AccountGroupsService.DeleteGroup(ctx, request)
}

// Delete a group
//
// Deletes a group from the Databricks Account.
func (a *AccountGroupsAPI) DeleteGroupById(ctx context.Context, id string) error {
	return a.DeleteGroup(ctx, DeleteGroupRequest{
		Id: id,
	})
}

// Get group details
//
// Gets the information for a specific group in the Databricks Account.
func (a *AccountGroupsAPI) GetGroup(ctx context.Context, request GetGroupRequest) (*Group, error) {
	return a.AccountGroupsService.GetGroup(ctx, request)
}

// Get group details
//
// Gets the information for a specific group in the Databricks Account.
func (a *AccountGroupsAPI) GetGroupById(ctx context.Context, id string) (*Group, error) {
	return a.GetGroup(ctx, GetGroupRequest{
		Id: id,
	})
}

// List group details
//
// Gets all details of the groups associated with the Databricks Account.
//
// This method is generated by Databricks SDK Code Generator.
func (a *AccountGroupsAPI) ListGroupsAll(ctx context.Context, request ListGroupsRequest) ([]Group, error) {
	response, err := a.ListGroups(ctx, request)
	if err != nil {
		return nil, err
	}
	return response.Resources, nil
}

// Update group details
//
// Partially updates the details of a group.
func (a *AccountGroupsAPI) PatchGroup(ctx context.Context, request PartialUpdate) error {
	return a.AccountGroupsService.PatchGroup(ctx, request)
}

// Replace a group
//
// Updates the details of a group by replacing the entire group entity.
func (a *AccountGroupsAPI) UpdateGroup(ctx context.Context, request Group) error {
	return a.AccountGroupsService.UpdateGroup(ctx, request)
}

// unexported type that holds implementations of just AccountGroups API methods
type accountGroupsAPI struct {
	client *client.DatabricksClient
}

func (a *accountGroupsAPI) CreateGroup(ctx context.Context, request Group) (*Group, error) {
	var group Group
	path := fmt.Sprintf("/api/2.0/accounts/%v/scim/v2/Groups", a.client.Config.AccountID)
	err := a.client.Post(ctx, path, request, &group)
	return &group, err
}

func (a *accountGroupsAPI) DeleteGroup(ctx context.Context, request DeleteGroupRequest) error {
	path := fmt.Sprintf("/api/2.0/accounts/%v/scim/v2/Groups/%v", a.client.Config.AccountID, request.Id)
	err := a.client.Delete(ctx, path, request)
	return err
}

func (a *accountGroupsAPI) GetGroup(ctx context.Context, request GetGroupRequest) (*Group, error) {
	var group Group
	path := fmt.Sprintf("/api/2.0/accounts/%v/scim/v2/Groups/%v", a.client.Config.AccountID, request.Id)
	err := a.client.Get(ctx, path, request, &group)
	return &group, err
}

func (a *accountGroupsAPI) ListGroups(ctx context.Context, request ListGroupsRequest) (*ListGroupsResponse, error) {
	var listGroupsResponse ListGroupsResponse
	path := fmt.Sprintf("/api/2.0/accounts/%v/scim/v2/Groups", a.client.Config.AccountID)
	err := a.client.Get(ctx, path, request, &listGroupsResponse)
	return &listGroupsResponse, err
}

func (a *accountGroupsAPI) PatchGroup(ctx context.Context, request PartialUpdate) error {
	path := fmt.Sprintf("/api/2.0/accounts/%v/scim/v2/Groups/%v", a.client.Config.AccountID, request.Id)
	err := a.client.Patch(ctx, path, request)
	return err
}

func (a *accountGroupsAPI) UpdateGroup(ctx context.Context, request Group) error {
	path := fmt.Sprintf("/api/2.0/accounts/%v/scim/v2/Groups/%v", a.client.Config.AccountID, request.Id)
	err := a.client.Put(ctx, path, request)
	return err
}

func NewAccountServicePrincipals(client *client.DatabricksClient) *AccountServicePrincipalsAPI {
	return &AccountServicePrincipalsAPI{
		AccountServicePrincipalsService: &accountServicePrincipalsAPI{
			client: client,
		},
	}
}

// Identities for use with jobs, automated tools, and systems such as scripts,
// apps, and CI/CD platforms. Databricks recommends creating service principals
// to run production jobs or modify production data. If all processes that act
// on production data run with service principals, interactive users do not need
// any write, delete, or modify privileges in production. This eliminates the
// risk of a user overwriting production data by accident.
type AccountServicePrincipalsAPI struct {
	// AccountServicePrincipalsService contains low-level REST API interface.
	AccountServicePrincipalsService
}

// Create a service principal
//
// Creates a new service principal in the Databricks Account.
func (a *AccountServicePrincipalsAPI) CreateServicePrincipal(ctx context.Context, request ServicePrincipal) (*ServicePrincipal, error) {
	return a.AccountServicePrincipalsService.CreateServicePrincipal(ctx, request)
}

// Delete a service principal
//
// Delete a single service principal in the Databricks Account.
func (a *AccountServicePrincipalsAPI) DeleteServicePrincipal(ctx context.Context, request DeleteServicePrincipalRequest) error {
	return a.AccountServicePrincipalsService.DeleteServicePrincipal(ctx, request)
}

// Delete a service principal
//
// Delete a single service principal in the Databricks Account.
func (a *AccountServicePrincipalsAPI) DeleteServicePrincipalById(ctx context.Context, id string) error {
	return a.DeleteServicePrincipal(ctx, DeleteServicePrincipalRequest{
		Id: id,
	})
}

// Get service principal details
//
// Gets the details for a single service principal define in the Databricks
// Account.
func (a *AccountServicePrincipalsAPI) GetServicePrincipal(ctx context.Context, request GetServicePrincipalRequest) (*ServicePrincipal, error) {
	return a.AccountServicePrincipalsService.GetServicePrincipal(ctx, request)
}

// Get service principal details
//
// Gets the details for a single service principal define in the Databricks
// Account.
func (a *AccountServicePrincipalsAPI) GetServicePrincipalById(ctx context.Context, id string) (*ServicePrincipal, error) {
	return a.GetServicePrincipal(ctx, GetServicePrincipalRequest{
		Id: id,
	})
}

// List service principals
//
// Gets the set of service principals associated with a Databricks Account.
//
// This method is generated by Databricks SDK Code Generator.
func (a *AccountServicePrincipalsAPI) ListServicePrincipalsAll(ctx context.Context, request ListServicePrincipalsRequest) ([]ServicePrincipal, error) {
	response, err := a.ListServicePrincipals(ctx, request)
	if err != nil {
		return nil, err
	}
	return response.Resources, nil
}

// Update service principal details
//
// Partially updates the details of a single service principal in the Databricks
// Account.
func (a *AccountServicePrincipalsAPI) PatchServicePrincipal(ctx context.Context, request PartialUpdate) error {
	return a.AccountServicePrincipalsService.PatchServicePrincipal(ctx, request)
}

// Replace service principal
//
// Updates the details of a single service principal.
//
// This action replaces the existing service principal with the same name.
func (a *AccountServicePrincipalsAPI) UpdateServicePrincipal(ctx context.Context, request ServicePrincipal) error {
	return a.AccountServicePrincipalsService.UpdateServicePrincipal(ctx, request)
}

// unexported type that holds implementations of just AccountServicePrincipals API methods
type accountServicePrincipalsAPI struct {
	client *client.DatabricksClient
}

func (a *accountServicePrincipalsAPI) CreateServicePrincipal(ctx context.Context, request ServicePrincipal) (*ServicePrincipal, error) {
	var servicePrincipal ServicePrincipal
	path := fmt.Sprintf("/api/2.0/accounts/%v/scim/v2/ServicePrincipals", a.client.Config.AccountID)
	err := a.client.Post(ctx, path, request, &servicePrincipal)
	return &servicePrincipal, err
}

func (a *accountServicePrincipalsAPI) DeleteServicePrincipal(ctx context.Context, request DeleteServicePrincipalRequest) error {
	path := fmt.Sprintf("/api/2.0/accounts/%v/scim/v2/ServicePrincipals/%v", a.client.Config.AccountID, request.Id)
	err := a.client.Delete(ctx, path, request)
	return err
}

func (a *accountServicePrincipalsAPI) GetServicePrincipal(ctx context.Context, request GetServicePrincipalRequest) (*ServicePrincipal, error) {
	var servicePrincipal ServicePrincipal
	path := fmt.Sprintf("/api/2.0/accounts/%v/scim/v2/ServicePrincipals/%v", a.client.Config.AccountID, request.Id)
	err := a.client.Get(ctx, path, request, &servicePrincipal)
	return &servicePrincipal, err
}

func (a *accountServicePrincipalsAPI) ListServicePrincipals(ctx context.Context, request ListServicePrincipalsRequest) (*ListServicePrincipalResponse, error) {
	var listServicePrincipalResponse ListServicePrincipalResponse
	path := fmt.Sprintf("/api/2.0/accounts/%v/scim/v2/ServicePrincipals", a.client.Config.AccountID)
	err := a.client.Get(ctx, path, request, &listServicePrincipalResponse)
	return &listServicePrincipalResponse, err
}

func (a *accountServicePrincipalsAPI) PatchServicePrincipal(ctx context.Context, request PartialUpdate) error {
	path := fmt.Sprintf("/api/2.0/accounts/%v/scim/v2/ServicePrincipals/%v", a.client.Config.AccountID, request.Id)
	err := a.client.Patch(ctx, path, request)
	return err
}

func (a *accountServicePrincipalsAPI) UpdateServicePrincipal(ctx context.Context, request ServicePrincipal) error {
	path := fmt.Sprintf("/api/2.0/accounts/%v/scim/v2/ServicePrincipals/%v", a.client.Config.AccountID, request.Id)
	err := a.client.Put(ctx, path, request)
	return err
}

func NewAccountUsers(client *client.DatabricksClient) *AccountUsersAPI {
	return &AccountUsersAPI{
		AccountUsersService: &accountUsersAPI{
			client: client,
		},
	}
}

// User identities recognized by Databricks and represented by email addresses.
//
// Databricks recommends using SCIM provisioning to sync users and groups
// automatically from your identity provider to your Databricks Account. SCIM
// streamlines onboarding a new employee or team by using your identity provider
// to create users and groups in Databricks Account and give them the proper
// level of access. When a user leaves your organization or no longer needs
// access to Databricks Account, admins can terminate the user in your identity
// provider and that user’s account will also be removed from Databricks
// Account. This ensures a consistent offboarding process and prevents
// unauthorized users from accessing sensitive data.
type AccountUsersAPI struct {
	// AccountUsersService contains low-level REST API interface.
	AccountUsersService
}

// Create a new user
//
// Creates a new user in the Databricks Account. This new user will also be
// added to the Databricks account.
func (a *AccountUsersAPI) CreateUser(ctx context.Context, request User) (*User, error) {
	return a.AccountUsersService.CreateUser(ctx, request)
}

// Delete a user
//
// Deletes a user. Deleting a user from a Databricks Account also removes
// objects associated with the user.
func (a *AccountUsersAPI) DeleteUser(ctx context.Context, request DeleteUserRequest) error {
	return a.AccountUsersService.DeleteUser(ctx, request)
}

// Delete a user
//
// Deletes a user. Deleting a user from a Databricks Account also removes
// objects associated with the user.
func (a *AccountUsersAPI) DeleteUserById(ctx context.Context, id string) error {
	return a.DeleteUser(ctx, DeleteUserRequest{
		Id: id,
	})
}

// Get user details
//
// Gets information for a specific user in Databricks Account.
func (a *AccountUsersAPI) GetUser(ctx context.Context, request GetUserRequest) (*User, error) {
	return a.AccountUsersService.GetUser(ctx, request)
}

// Get user details
//
// Gets information for a specific user in Databricks Account.
func (a *AccountUsersAPI) GetUserById(ctx context.Context, id string) (*User, error) {
	return a.GetUser(ctx, GetUserRequest{
		Id: id,
	})
}

// List users
//
// Gets details for all the users associated with a Databricks Account.
//
// This method is generated by Databricks SDK Code Generator.
func (a *AccountUsersAPI) ListUsersAll(ctx context.Context, request ListUsersRequest) ([]User, error) {
	response, err := a.ListUsers(ctx, request)
	if err != nil {
		return nil, err
	}
	return response.Resources, nil
}

// Update user details
//
// Partially updates a user resource by applying the supplied operations on
// specific user attributes.
func (a *AccountUsersAPI) PatchUser(ctx context.Context, request PartialUpdate) error {
	return a.AccountUsersService.PatchUser(ctx, request)
}

// Replace a user
//
// Replaces a user's information with the data supplied in request.
func (a *AccountUsersAPI) UpdateUser(ctx context.Context, request User) error {
	return a.AccountUsersService.UpdateUser(ctx, request)
}

// unexported type that holds implementations of just AccountUsers API methods
type accountUsersAPI struct {
	client *client.DatabricksClient
}

func (a *accountUsersAPI) CreateUser(ctx context.Context, request User) (*User, error) {
	var user User
	path := fmt.Sprintf("/api/2.0/accounts/%v/scim/v2/Users", a.client.Config.AccountID)
	err := a.client.Post(ctx, path, request, &user)
	return &user, err
}

func (a *accountUsersAPI) DeleteUser(ctx context.Context, request DeleteUserRequest) error {
	path := fmt.Sprintf("/api/2.0/accounts/%v/scim/v2/Users/%v", a.client.Config.AccountID, request.Id)
	err := a.client.Delete(ctx, path, request)
	return err
}

func (a *accountUsersAPI) GetUser(ctx context.Context, request GetUserRequest) (*User, error) {
	var user User
	path := fmt.Sprintf("/api/2.0/accounts/%v/scim/v2/Users/%v", a.client.Config.AccountID, request.Id)
	err := a.client.Get(ctx, path, request, &user)
	return &user, err
}

func (a *accountUsersAPI) ListUsers(ctx context.Context, request ListUsersRequest) (*ListUsersResponse, error) {
	var listUsersResponse ListUsersResponse
	path := fmt.Sprintf("/api/2.0/accounts/%v/scim/v2/Users", a.client.Config.AccountID)
	err := a.client.Get(ctx, path, request, &listUsersResponse)
	return &listUsersResponse, err
}

func (a *accountUsersAPI) PatchUser(ctx context.Context, request PartialUpdate) error {
	path := fmt.Sprintf("/api/2.0/accounts/%v/scim/v2/Users/%v", a.client.Config.AccountID, request.Id)
	err := a.client.Patch(ctx, path, request)
	return err
}

func (a *accountUsersAPI) UpdateUser(ctx context.Context, request User) error {
	path := fmt.Sprintf("/api/2.0/accounts/%v/scim/v2/Users/%v", a.client.Config.AccountID, request.Id)
	err := a.client.Put(ctx, path, request)
	return err
}

func NewCurrentUser(client *client.DatabricksClient) *CurrentUserAPI {
	return &CurrentUserAPI{
		CurrentUserService: &currentUserAPI{
			client: client,
		},
	}
}

// This API allows retrieving information about currently authenticated user or
// service principal.
type CurrentUserAPI struct {
	// CurrentUserService contains low-level REST API interface.
	CurrentUserService
}

// Get current user info
//
// Get details about the current method caller's identity.
func (a *CurrentUserAPI) Me(ctx context.Context) (*User, error) {
	return a.CurrentUserService.Me(ctx)
}

// unexported type that holds implementations of just CurrentUser API methods
type currentUserAPI struct {
	client *client.DatabricksClient
}

func (a *currentUserAPI) Me(ctx context.Context) (*User, error) {
	var user User
	path := "/api/2.0/preview/scim/v2/Me"
	err := a.client.Get(ctx, path, nil, &user)
	return &user, err
}

func NewGroups(client *client.DatabricksClient) *GroupsAPI {
	return &GroupsAPI{
		GroupsService: &groupsAPI{
			client: client,
		},
	}
}

// Groups simplify identity management, making it easier to assign access to
// Databricks Workspace, data, and other securable objects.
//
// It is best practice to assign access to workspaces and access-control
// policies in Unity Catalog to groups, instead of to users individually. All
// Databricks Workspace identities can be assigned as members of groups, and
// members inherit permissions that are assigned to their group.
type GroupsAPI struct {
	// GroupsService contains low-level REST API interface.
	GroupsService
}

// Create a new group
//
// Creates a group in the Databricks Workspace with a unique name, using the
// supplied group details.
func (a *GroupsAPI) CreateGroup(ctx context.Context, request Group) (*Group, error) {
	return a.GroupsService.CreateGroup(ctx, request)
}

// Delete a group
//
// Deletes a group from the Databricks Workspace.
func (a *GroupsAPI) DeleteGroup(ctx context.Context, request DeleteGroupRequest) error {
	return a.GroupsService.DeleteGroup(ctx, request)
}

// Delete a group
//
// Deletes a group from the Databricks Workspace.
func (a *GroupsAPI) DeleteGroupById(ctx context.Context, id string) error {
	return a.DeleteGroup(ctx, DeleteGroupRequest{
		Id: id,
	})
}

// Get group details
//
// Gets the information for a specific group in the Databricks Workspace.
func (a *GroupsAPI) GetGroup(ctx context.Context, request GetGroupRequest) (*Group, error) {
	return a.GroupsService.GetGroup(ctx, request)
}

// Get group details
//
// Gets the information for a specific group in the Databricks Workspace.
func (a *GroupsAPI) GetGroupById(ctx context.Context, id string) (*Group, error) {
	return a.GetGroup(ctx, GetGroupRequest{
		Id: id,
	})
}

// List group details
//
// Gets all details of the groups associated with the Databricks Workspace.
//
// This method is generated by Databricks SDK Code Generator.
func (a *GroupsAPI) ListGroupsAll(ctx context.Context, request ListGroupsRequest) ([]Group, error) {
	response, err := a.ListGroups(ctx, request)
	if err != nil {
		return nil, err
	}
	return response.Resources, nil
}

// Update group details
//
// Partially updates the details of a group.
func (a *GroupsAPI) PatchGroup(ctx context.Context, request PartialUpdate) error {
	return a.GroupsService.PatchGroup(ctx, request)
}

// Replace a group
//
// Updates the details of a group by replacing the entire group entity.
func (a *GroupsAPI) UpdateGroup(ctx context.Context, request Group) error {
	return a.GroupsService.UpdateGroup(ctx, request)
}

// unexported type that holds implementations of just Groups API methods
type groupsAPI struct {
	client *client.DatabricksClient
}

func (a *groupsAPI) CreateGroup(ctx context.Context, request Group) (*Group, error) {
	var group Group
	path := "/api/2.0/preview/scim/v2/Groups"
	err := a.client.Post(ctx, path, request, &group)
	return &group, err
}

func (a *groupsAPI) DeleteGroup(ctx context.Context, request DeleteGroupRequest) error {
	path := fmt.Sprintf("/api/2.0/preview/scim/v2/Groups/%v", request.Id)
	err := a.client.Delete(ctx, path, request)
	return err
}

func (a *groupsAPI) GetGroup(ctx context.Context, request GetGroupRequest) (*Group, error) {
	var group Group
	path := fmt.Sprintf("/api/2.0/preview/scim/v2/Groups/%v", request.Id)
	err := a.client.Get(ctx, path, request, &group)
	return &group, err
}

func (a *groupsAPI) ListGroups(ctx context.Context, request ListGroupsRequest) (*ListGroupsResponse, error) {
	var listGroupsResponse ListGroupsResponse
	path := "/api/2.0/preview/scim/v2/Groups"
	err := a.client.Get(ctx, path, request, &listGroupsResponse)
	return &listGroupsResponse, err
}

func (a *groupsAPI) PatchGroup(ctx context.Context, request PartialUpdate) error {
	path := fmt.Sprintf("/api/2.0/preview/scim/v2/Groups/%v", request.Id)
	err := a.client.Patch(ctx, path, request)
	return err
}

func (a *groupsAPI) UpdateGroup(ctx context.Context, request Group) error {
	path := fmt.Sprintf("/api/2.0/preview/scim/v2/Groups/%v", request.Id)
	err := a.client.Put(ctx, path, request)
	return err
}

func NewServicePrincipals(client *client.DatabricksClient) *ServicePrincipalsAPI {
	return &ServicePrincipalsAPI{
		ServicePrincipalsService: &servicePrincipalsAPI{
			client: client,
		},
	}
}

// Identities for use with jobs, automated tools, and systems such as scripts,
// apps, and CI/CD platforms. Databricks recommends creating service principals
// to run production jobs or modify production data. If all processes that act
// on production data run with service principals, interactive users do not need
// any write, delete, or modify privileges in production. This eliminates the
// risk of a user overwriting production data by accident.
type ServicePrincipalsAPI struct {
	// ServicePrincipalsService contains low-level REST API interface.
	ServicePrincipalsService
}

// Create a service principal
//
// Creates a new service principal in the Databricks Workspace.
func (a *ServicePrincipalsAPI) CreateServicePrincipal(ctx context.Context, request ServicePrincipal) (*ServicePrincipal, error) {
	return a.ServicePrincipalsService.CreateServicePrincipal(ctx, request)
}

// Delete a service principal
//
// Delete a single service principal in the Databricks Workspace.
func (a *ServicePrincipalsAPI) DeleteServicePrincipal(ctx context.Context, request DeleteServicePrincipalRequest) error {
	return a.ServicePrincipalsService.DeleteServicePrincipal(ctx, request)
}

// Delete a service principal
//
// Delete a single service principal in the Databricks Workspace.
func (a *ServicePrincipalsAPI) DeleteServicePrincipalById(ctx context.Context, id string) error {
	return a.DeleteServicePrincipal(ctx, DeleteServicePrincipalRequest{
		Id: id,
	})
}

// Get service principal details
//
// Gets the details for a single service principal define in the Databricks
// Workspace.
func (a *ServicePrincipalsAPI) GetServicePrincipal(ctx context.Context, request GetServicePrincipalRequest) (*ServicePrincipal, error) {
	return a.ServicePrincipalsService.GetServicePrincipal(ctx, request)
}

// Get service principal details
//
// Gets the details for a single service principal define in the Databricks
// Workspace.
func (a *ServicePrincipalsAPI) GetServicePrincipalById(ctx context.Context, id string) (*ServicePrincipal, error) {
	return a.GetServicePrincipal(ctx, GetServicePrincipalRequest{
		Id: id,
	})
}

// List service principals
//
// Gets the set of service principals associated with a Databricks Workspace.
//
// This method is generated by Databricks SDK Code Generator.
func (a *ServicePrincipalsAPI) ListServicePrincipalsAll(ctx context.Context, request ListServicePrincipalsRequest) ([]ServicePrincipal, error) {
	response, err := a.ListServicePrincipals(ctx, request)
	if err != nil {
		return nil, err
	}
	return response.Resources, nil
}

// Update service principal details
//
// Partially updates the details of a single service principal in the Databricks
// Workspace.
func (a *ServicePrincipalsAPI) PatchServicePrincipal(ctx context.Context, request PartialUpdate) error {
	return a.ServicePrincipalsService.PatchServicePrincipal(ctx, request)
}

// Replace service principal
//
// Updates the details of a single service principal.
//
// This action replaces the existing service principal with the same name.
func (a *ServicePrincipalsAPI) UpdateServicePrincipal(ctx context.Context, request ServicePrincipal) error {
	return a.ServicePrincipalsService.UpdateServicePrincipal(ctx, request)
}

// unexported type that holds implementations of just ServicePrincipals API methods
type servicePrincipalsAPI struct {
	client *client.DatabricksClient
}

func (a *servicePrincipalsAPI) CreateServicePrincipal(ctx context.Context, request ServicePrincipal) (*ServicePrincipal, error) {
	var servicePrincipal ServicePrincipal
	path := "/api/2.0/preview/scim/v2/ServicePrincipals"
	err := a.client.Post(ctx, path, request, &servicePrincipal)
	return &servicePrincipal, err
}

func (a *servicePrincipalsAPI) DeleteServicePrincipal(ctx context.Context, request DeleteServicePrincipalRequest) error {
	path := fmt.Sprintf("/api/2.0/preview/scim/v2/ServicePrincipals/%v", request.Id)
	err := a.client.Delete(ctx, path, request)
	return err
}

func (a *servicePrincipalsAPI) GetServicePrincipal(ctx context.Context, request GetServicePrincipalRequest) (*ServicePrincipal, error) {
	var servicePrincipal ServicePrincipal
	path := fmt.Sprintf("/api/2.0/preview/scim/v2/ServicePrincipals/%v", request.Id)
	err := a.client.Get(ctx, path, request, &servicePrincipal)
	return &servicePrincipal, err
}

func (a *servicePrincipalsAPI) ListServicePrincipals(ctx context.Context, request ListServicePrincipalsRequest) (*ListServicePrincipalResponse, error) {
	var listServicePrincipalResponse ListServicePrincipalResponse
	path := "/api/2.0/preview/scim/v2/ServicePrincipals"
	err := a.client.Get(ctx, path, request, &listServicePrincipalResponse)
	return &listServicePrincipalResponse, err
}

func (a *servicePrincipalsAPI) PatchServicePrincipal(ctx context.Context, request PartialUpdate) error {
	path := fmt.Sprintf("/api/2.0/preview/scim/v2/ServicePrincipals/%v", request.Id)
	err := a.client.Patch(ctx, path, request)
	return err
}

func (a *servicePrincipalsAPI) UpdateServicePrincipal(ctx context.Context, request ServicePrincipal) error {
	path := fmt.Sprintf("/api/2.0/preview/scim/v2/ServicePrincipals/%v", request.Id)
	err := a.client.Put(ctx, path, request)
	return err
}

func NewUsers(client *client.DatabricksClient) *UsersAPI {
	return &UsersAPI{
		UsersService: &usersAPI{
			client: client,
		},
	}
}

// User identities recognized by Databricks and represented by email addresses.
//
// Databricks recommends using SCIM provisioning to sync users and groups
// automatically from your identity provider to your Databricks Workspace. SCIM
// streamlines onboarding a new employee or team by using your identity provider
// to create users and groups in Databricks Workspace and give them the proper
// level of access. When a user leaves your organization or no longer needs
// access to Databricks Workspace, admins can terminate the user in your
// identity provider and that user’s account will also be removed from
// Databricks Workspace. This ensures a consistent offboarding process and
// prevents unauthorized users from accessing sensitive data.
type UsersAPI struct {
	// UsersService contains low-level REST API interface.
	UsersService
}

// Create a new user
//
// Creates a new user in the Databricks Workspace. This new user will also be
// added to the Databricks account.
func (a *UsersAPI) CreateUser(ctx context.Context, request User) (*User, error) {
	return a.UsersService.CreateUser(ctx, request)
}

// Delete a user
//
// Deletes a user. Deleting a user from a Databricks Workspace also removes
// objects associated with the user.
func (a *UsersAPI) DeleteUser(ctx context.Context, request DeleteUserRequest) error {
	return a.UsersService.DeleteUser(ctx, request)
}

// Delete a user
//
// Deletes a user. Deleting a user from a Databricks Workspace also removes
// objects associated with the user.
func (a *UsersAPI) DeleteUserById(ctx context.Context, id string) error {
	return a.DeleteUser(ctx, DeleteUserRequest{
		Id: id,
	})
}

// Get user details
//
// Gets information for a specific user in Databricks Workspace.
func (a *UsersAPI) GetUser(ctx context.Context, request GetUserRequest) (*User, error) {
	return a.UsersService.GetUser(ctx, request)
}

// Get user details
//
// Gets information for a specific user in Databricks Workspace.
func (a *UsersAPI) GetUserById(ctx context.Context, id string) (*User, error) {
	return a.GetUser(ctx, GetUserRequest{
		Id: id,
	})
}

// List users
//
// Gets details for all the users associated with a Databricks Workspace.
//
// This method is generated by Databricks SDK Code Generator.
func (a *UsersAPI) ListUsersAll(ctx context.Context, request ListUsersRequest) ([]User, error) {
	response, err := a.ListUsers(ctx, request)
	if err != nil {
		return nil, err
	}
	return response.Resources, nil
}

// Update user details
//
// Partially updates a user resource by applying the supplied operations on
// specific user attributes.
func (a *UsersAPI) PatchUser(ctx context.Context, request PartialUpdate) error {
	return a.UsersService.PatchUser(ctx, request)
}

// Replace a user
//
// Replaces a user's information with the data supplied in request.
func (a *UsersAPI) UpdateUser(ctx context.Context, request User) error {
	return a.UsersService.UpdateUser(ctx, request)
}

// unexported type that holds implementations of just Users API methods
type usersAPI struct {
	client *client.DatabricksClient
}

func (a *usersAPI) CreateUser(ctx context.Context, request User) (*User, error) {
	var user User
	path := "/api/2.0/preview/scim/v2/Users"
	err := a.client.Post(ctx, path, request, &user)
	return &user, err
}

func (a *usersAPI) DeleteUser(ctx context.Context, request DeleteUserRequest) error {
	path := fmt.Sprintf("/api/2.0/preview/scim/v2/Users/%v", request.Id)
	err := a.client.Delete(ctx, path, request)
	return err
}

func (a *usersAPI) GetUser(ctx context.Context, request GetUserRequest) (*User, error) {
	var user User
	path := fmt.Sprintf("/api/2.0/preview/scim/v2/Users/%v", request.Id)
	err := a.client.Get(ctx, path, request, &user)
	return &user, err
}

func (a *usersAPI) ListUsers(ctx context.Context, request ListUsersRequest) (*ListUsersResponse, error) {
	var listUsersResponse ListUsersResponse
	path := "/api/2.0/preview/scim/v2/Users"
	err := a.client.Get(ctx, path, request, &listUsersResponse)
	return &listUsersResponse, err
}

func (a *usersAPI) PatchUser(ctx context.Context, request PartialUpdate) error {
	path := fmt.Sprintf("/api/2.0/preview/scim/v2/Users/%v", request.Id)
	err := a.client.Patch(ctx, path, request)
	return err
}

func (a *usersAPI) UpdateUser(ctx context.Context, request User) error {
	path := fmt.Sprintf("/api/2.0/preview/scim/v2/Users/%v", request.Id)
	err := a.client.Put(ctx, path, request)
	return err
}
