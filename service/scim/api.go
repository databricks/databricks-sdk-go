// Code generated from OpenAPI specs by Databricks SDK Generator. DO NOT EDIT.

package scim

import (
	"context"
	"fmt"

	"github.com/databricks/databricks-sdk-go/client"
	"github.com/databricks/databricks-sdk-go/useragent"
)

func NewAccountGroups(client *client.DatabricksClient) *AccountGroupsAPI {
	return &AccountGroupsAPI{
		impl: &accountGroupsImpl{
			client: client,
		},
	}
}

// Groups simplify identity management, making it easier to assign access to
// Databricks Account, data, and other securable objects.
//
// It is best practice to assign access to workspaces and access-control
// policies in Unity Catalog to groups, instead of to users individually. All
// Databricks Account identities can be assigned as members of groups, and
// members inherit permissions that are assigned to their group.
type AccountGroupsAPI struct {
	// impl contains low-level REST API interface, that could be overridden
	// through WithImpl(AccountGroupsService)
	impl AccountGroupsService
}

// WithImpl could be used to override low-level API implementations for unit
// testing purposes with [github.com/golang/mock] or other mocking frameworks.
func (a *AccountGroupsAPI) WithImpl(impl AccountGroupsService) *AccountGroupsAPI {
	a.impl = impl
	return a
}

// Impl returns low-level AccountGroups API implementation
func (a *AccountGroupsAPI) Impl() AccountGroupsService {
	return a.impl
}

// Create a new group
//
// Creates a group in the Databricks Account with a unique name, using the
// supplied group details.
func (a *AccountGroupsAPI) CreateGroup(ctx context.Context, request Group) (*Group, error) {
	return a.impl.CreateGroup(ctx, request)
}

// Delete a group
//
// Deletes a group from the Databricks Account.
func (a *AccountGroupsAPI) DeleteGroup(ctx context.Context, request DeleteGroupRequest) error {
	return a.impl.DeleteGroup(ctx, request)
}

// Delete a group
//
// Deletes a group from the Databricks Account.
func (a *AccountGroupsAPI) DeleteGroupById(ctx context.Context, id string) error {
	return a.impl.DeleteGroup(ctx, DeleteGroupRequest{
		Id: id,
	})
}

// Get group details
//
// Gets the information for a specific group in the Databricks Account.
func (a *AccountGroupsAPI) GetGroup(ctx context.Context, request GetGroupRequest) (*Group, error) {
	return a.impl.GetGroup(ctx, request)
}

// Get group details
//
// Gets the information for a specific group in the Databricks Account.
func (a *AccountGroupsAPI) GetGroupById(ctx context.Context, id string) (*Group, error) {
	return a.impl.GetGroup(ctx, GetGroupRequest{
		Id: id,
	})
}

// List group details
//
// Gets all details of the groups associated with the Databricks Account.
//
// This method is generated by Databricks SDK Code Generator.
func (a *AccountGroupsAPI) ListGroupsAll(ctx context.Context, request ListGroupsRequest) ([]Group, error) {
	response, err := a.impl.ListGroups(ctx, request)
	if err != nil {
		return nil, err
	}
	return response.Resources, nil
}

// GroupDisplayNameToIdMap calls [AccountGroupsAPI.ListGroupsAll] and creates a map of results with [Group].DisplayName as key and [Group].Id as value.
//
// Returns an error if there's more than one [Group] with the same .DisplayName.
//
// Note: All [Group] instances are loaded into memory before creating a map.
//
// This method is generated by Databricks SDK Code Generator.
func (a *AccountGroupsAPI) GroupDisplayNameToIdMap(ctx context.Context, request ListGroupsRequest) (map[string]string, error) {
	ctx = useragent.InContext(ctx, "sdk-feature", "name-to-id")
	mapping := map[string]string{}
	result, err := a.ListGroupsAll(ctx, request)
	if err != nil {
		return nil, err
	}
	for _, v := range result {
		key := v.DisplayName
		_, duplicate := mapping[key]
		if duplicate {
			return nil, fmt.Errorf("duplicate .DisplayName: %s", key)
		}
		mapping[key] = v.Id
	}
	return mapping, nil
}

// GetGroupByDisplayName calls [AccountGroupsAPI.GroupDisplayNameToIdMap] and returns a single [Group].
//
// Returns an error if there's more than one [Group] with the same .DisplayName.
//
// Note: All [Group] instances are loaded into memory before creating a map.
//
// This method is generated by Databricks SDK Code Generator.
func (a *AccountGroupsAPI) GetGroupByDisplayName(ctx context.Context, name string) (*Group, error) {
	ctx = useragent.InContext(ctx, "sdk-feature", "get-by-name")
	result, err := a.ListGroupsAll(ctx, ListGroupsRequest{})
	if err != nil {
		return nil, err
	}
	for _, v := range result {
		if v.DisplayName != name {
			continue
		}
		return &v, nil
	}
	return nil, fmt.Errorf("Group named '%s' does not exist", name)
}

// Update group details
//
// Partially updates the details of a group.
func (a *AccountGroupsAPI) PatchGroup(ctx context.Context, request PartialUpdate) error {
	return a.impl.PatchGroup(ctx, request)
}

// Replace a group
//
// Updates the details of a group by replacing the entire group entity.
func (a *AccountGroupsAPI) UpdateGroup(ctx context.Context, request Group) error {
	return a.impl.UpdateGroup(ctx, request)
}

func NewAccountServicePrincipals(client *client.DatabricksClient) *AccountServicePrincipalsAPI {
	return &AccountServicePrincipalsAPI{
		impl: &accountServicePrincipalsImpl{
			client: client,
		},
	}
}

// Identities for use with jobs, automated tools, and systems such as scripts,
// apps, and CI/CD platforms. Databricks recommends creating service principals
// to run production jobs or modify production data. If all processes that act
// on production data run with service principals, interactive users do not need
// any write, delete, or modify privileges in production. This eliminates the
// risk of a user overwriting production data by accident.
type AccountServicePrincipalsAPI struct {
	// impl contains low-level REST API interface, that could be overridden
	// through WithImpl(AccountServicePrincipalsService)
	impl AccountServicePrincipalsService
}

// WithImpl could be used to override low-level API implementations for unit
// testing purposes with [github.com/golang/mock] or other mocking frameworks.
func (a *AccountServicePrincipalsAPI) WithImpl(impl AccountServicePrincipalsService) *AccountServicePrincipalsAPI {
	a.impl = impl
	return a
}

// Impl returns low-level AccountServicePrincipals API implementation
func (a *AccountServicePrincipalsAPI) Impl() AccountServicePrincipalsService {
	return a.impl
}

// Create a service principal
//
// Creates a new service principal in the Databricks Account.
func (a *AccountServicePrincipalsAPI) CreateServicePrincipal(ctx context.Context, request ServicePrincipal) (*ServicePrincipal, error) {
	return a.impl.CreateServicePrincipal(ctx, request)
}

// Delete a service principal
//
// Delete a single service principal in the Databricks Account.
func (a *AccountServicePrincipalsAPI) DeleteServicePrincipal(ctx context.Context, request DeleteServicePrincipalRequest) error {
	return a.impl.DeleteServicePrincipal(ctx, request)
}

// Delete a service principal
//
// Delete a single service principal in the Databricks Account.
func (a *AccountServicePrincipalsAPI) DeleteServicePrincipalById(ctx context.Context, id string) error {
	return a.impl.DeleteServicePrincipal(ctx, DeleteServicePrincipalRequest{
		Id: id,
	})
}

// Get service principal details
//
// Gets the details for a single service principal define in the Databricks
// Account.
func (a *AccountServicePrincipalsAPI) GetServicePrincipal(ctx context.Context, request GetServicePrincipalRequest) (*ServicePrincipal, error) {
	return a.impl.GetServicePrincipal(ctx, request)
}

// Get service principal details
//
// Gets the details for a single service principal define in the Databricks
// Account.
func (a *AccountServicePrincipalsAPI) GetServicePrincipalById(ctx context.Context, id string) (*ServicePrincipal, error) {
	return a.impl.GetServicePrincipal(ctx, GetServicePrincipalRequest{
		Id: id,
	})
}

// List service principals
//
// Gets the set of service principals associated with a Databricks Account.
//
// This method is generated by Databricks SDK Code Generator.
func (a *AccountServicePrincipalsAPI) ListServicePrincipalsAll(ctx context.Context, request ListServicePrincipalsRequest) ([]ServicePrincipal, error) {
	response, err := a.impl.ListServicePrincipals(ctx, request)
	if err != nil {
		return nil, err
	}
	return response.Resources, nil
}

// ServicePrincipalDisplayNameToIdMap calls [AccountServicePrincipalsAPI.ListServicePrincipalsAll] and creates a map of results with [ServicePrincipal].DisplayName as key and [ServicePrincipal].Id as value.
//
// Returns an error if there's more than one [ServicePrincipal] with the same .DisplayName.
//
// Note: All [ServicePrincipal] instances are loaded into memory before creating a map.
//
// This method is generated by Databricks SDK Code Generator.
func (a *AccountServicePrincipalsAPI) ServicePrincipalDisplayNameToIdMap(ctx context.Context, request ListServicePrincipalsRequest) (map[string]string, error) {
	ctx = useragent.InContext(ctx, "sdk-feature", "name-to-id")
	mapping := map[string]string{}
	result, err := a.ListServicePrincipalsAll(ctx, request)
	if err != nil {
		return nil, err
	}
	for _, v := range result {
		key := v.DisplayName
		_, duplicate := mapping[key]
		if duplicate {
			return nil, fmt.Errorf("duplicate .DisplayName: %s", key)
		}
		mapping[key] = v.Id
	}
	return mapping, nil
}

// GetServicePrincipalByDisplayName calls [AccountServicePrincipalsAPI.ServicePrincipalDisplayNameToIdMap] and returns a single [ServicePrincipal].
//
// Returns an error if there's more than one [ServicePrincipal] with the same .DisplayName.
//
// Note: All [ServicePrincipal] instances are loaded into memory before creating a map.
//
// This method is generated by Databricks SDK Code Generator.
func (a *AccountServicePrincipalsAPI) GetServicePrincipalByDisplayName(ctx context.Context, name string) (*ServicePrincipal, error) {
	ctx = useragent.InContext(ctx, "sdk-feature", "get-by-name")
	result, err := a.ListServicePrincipalsAll(ctx, ListServicePrincipalsRequest{})
	if err != nil {
		return nil, err
	}
	for _, v := range result {
		if v.DisplayName != name {
			continue
		}
		return &v, nil
	}
	return nil, fmt.Errorf("ServicePrincipal named '%s' does not exist", name)
}

// Update service principal details
//
// Partially updates the details of a single service principal in the Databricks
// Account.
func (a *AccountServicePrincipalsAPI) PatchServicePrincipal(ctx context.Context, request PartialUpdate) error {
	return a.impl.PatchServicePrincipal(ctx, request)
}

// Replace service principal
//
// Updates the details of a single service principal.
//
// This action replaces the existing service principal with the same name.
func (a *AccountServicePrincipalsAPI) UpdateServicePrincipal(ctx context.Context, request ServicePrincipal) error {
	return a.impl.UpdateServicePrincipal(ctx, request)
}

func NewAccountUsers(client *client.DatabricksClient) *AccountUsersAPI {
	return &AccountUsersAPI{
		impl: &accountUsersImpl{
			client: client,
		},
	}
}

// User identities recognized by Databricks and represented by email addresses.
//
// Databricks recommends using SCIM provisioning to sync users and groups
// automatically from your identity provider to your Databricks Account. SCIM
// streamlines onboarding a new employee or team by using your identity provider
// to create users and groups in Databricks Account and give them the proper
// level of access. When a user leaves your organization or no longer needs
// access to Databricks Account, admins can terminate the user in your identity
// provider and that user’s account will also be removed from Databricks
// Account. This ensures a consistent offboarding process and prevents
// unauthorized users from accessing sensitive data.
type AccountUsersAPI struct {
	// impl contains low-level REST API interface, that could be overridden
	// through WithImpl(AccountUsersService)
	impl AccountUsersService
}

// WithImpl could be used to override low-level API implementations for unit
// testing purposes with [github.com/golang/mock] or other mocking frameworks.
func (a *AccountUsersAPI) WithImpl(impl AccountUsersService) *AccountUsersAPI {
	a.impl = impl
	return a
}

// Impl returns low-level AccountUsers API implementation
func (a *AccountUsersAPI) Impl() AccountUsersService {
	return a.impl
}

// Create a new user
//
// Creates a new user in the Databricks Account. This new user will also be
// added to the Databricks account.
func (a *AccountUsersAPI) CreateUser(ctx context.Context, request User) (*User, error) {
	return a.impl.CreateUser(ctx, request)
}

// Delete a user
//
// Deletes a user. Deleting a user from a Databricks Account also removes
// objects associated with the user.
func (a *AccountUsersAPI) DeleteUser(ctx context.Context, request DeleteUserRequest) error {
	return a.impl.DeleteUser(ctx, request)
}

// Delete a user
//
// Deletes a user. Deleting a user from a Databricks Account also removes
// objects associated with the user.
func (a *AccountUsersAPI) DeleteUserById(ctx context.Context, id string) error {
	return a.impl.DeleteUser(ctx, DeleteUserRequest{
		Id: id,
	})
}

// Get user details
//
// Gets information for a specific user in Databricks Account.
func (a *AccountUsersAPI) GetUser(ctx context.Context, request GetUserRequest) (*User, error) {
	return a.impl.GetUser(ctx, request)
}

// Get user details
//
// Gets information for a specific user in Databricks Account.
func (a *AccountUsersAPI) GetUserById(ctx context.Context, id string) (*User, error) {
	return a.impl.GetUser(ctx, GetUserRequest{
		Id: id,
	})
}

// List users
//
// Gets details for all the users associated with a Databricks Account.
//
// This method is generated by Databricks SDK Code Generator.
func (a *AccountUsersAPI) ListUsersAll(ctx context.Context, request ListUsersRequest) ([]User, error) {
	response, err := a.impl.ListUsers(ctx, request)
	if err != nil {
		return nil, err
	}
	return response.Resources, nil
}

// UserUserNameToIdMap calls [AccountUsersAPI.ListUsersAll] and creates a map of results with [User].UserName as key and [User].Id as value.
//
// Returns an error if there's more than one [User] with the same .UserName.
//
// Note: All [User] instances are loaded into memory before creating a map.
//
// This method is generated by Databricks SDK Code Generator.
func (a *AccountUsersAPI) UserUserNameToIdMap(ctx context.Context, request ListUsersRequest) (map[string]string, error) {
	ctx = useragent.InContext(ctx, "sdk-feature", "name-to-id")
	mapping := map[string]string{}
	result, err := a.ListUsersAll(ctx, request)
	if err != nil {
		return nil, err
	}
	for _, v := range result {
		key := v.UserName
		_, duplicate := mapping[key]
		if duplicate {
			return nil, fmt.Errorf("duplicate .UserName: %s", key)
		}
		mapping[key] = v.Id
	}
	return mapping, nil
}

// GetUserByUserName calls [AccountUsersAPI.UserUserNameToIdMap] and returns a single [User].
//
// Returns an error if there's more than one [User] with the same .UserName.
//
// Note: All [User] instances are loaded into memory before creating a map.
//
// This method is generated by Databricks SDK Code Generator.
func (a *AccountUsersAPI) GetUserByUserName(ctx context.Context, name string) (*User, error) {
	ctx = useragent.InContext(ctx, "sdk-feature", "get-by-name")
	result, err := a.ListUsersAll(ctx, ListUsersRequest{})
	if err != nil {
		return nil, err
	}
	for _, v := range result {
		if v.UserName != name {
			continue
		}
		return &v, nil
	}
	return nil, fmt.Errorf("User named '%s' does not exist", name)
}

// Update user details
//
// Partially updates a user resource by applying the supplied operations on
// specific user attributes.
func (a *AccountUsersAPI) PatchUser(ctx context.Context, request PartialUpdate) error {
	return a.impl.PatchUser(ctx, request)
}

// Replace a user
//
// Replaces a user's information with the data supplied in request.
func (a *AccountUsersAPI) UpdateUser(ctx context.Context, request User) error {
	return a.impl.UpdateUser(ctx, request)
}

func NewCurrentUser(client *client.DatabricksClient) *CurrentUserAPI {
	return &CurrentUserAPI{
		impl: &currentUserImpl{
			client: client,
		},
	}
}

// This API allows retrieving information about currently authenticated user or
// service principal.
type CurrentUserAPI struct {
	// impl contains low-level REST API interface, that could be overridden
	// through WithImpl(CurrentUserService)
	impl CurrentUserService
}

// WithImpl could be used to override low-level API implementations for unit
// testing purposes with [github.com/golang/mock] or other mocking frameworks.
func (a *CurrentUserAPI) WithImpl(impl CurrentUserService) *CurrentUserAPI {
	a.impl = impl
	return a
}

// Impl returns low-level CurrentUser API implementation
func (a *CurrentUserAPI) Impl() CurrentUserService {
	return a.impl
}

// Get current user info
//
// Get details about the current method caller's identity.
func (a *CurrentUserAPI) Me(ctx context.Context) (*User, error) {
	return a.impl.Me(ctx)
}

func NewGroups(client *client.DatabricksClient) *GroupsAPI {
	return &GroupsAPI{
		impl: &groupsImpl{
			client: client,
		},
	}
}

// Groups simplify identity management, making it easier to assign access to
// Databricks Workspace, data, and other securable objects.
//
// It is best practice to assign access to workspaces and access-control
// policies in Unity Catalog to groups, instead of to users individually. All
// Databricks Workspace identities can be assigned as members of groups, and
// members inherit permissions that are assigned to their group.
type GroupsAPI struct {
	// impl contains low-level REST API interface, that could be overridden
	// through WithImpl(GroupsService)
	impl GroupsService
}

// WithImpl could be used to override low-level API implementations for unit
// testing purposes with [github.com/golang/mock] or other mocking frameworks.
func (a *GroupsAPI) WithImpl(impl GroupsService) *GroupsAPI {
	a.impl = impl
	return a
}

// Impl returns low-level Groups API implementation
func (a *GroupsAPI) Impl() GroupsService {
	return a.impl
}

// Create a new group
//
// Creates a group in the Databricks Workspace with a unique name, using the
// supplied group details.
func (a *GroupsAPI) CreateGroup(ctx context.Context, request Group) (*Group, error) {
	return a.impl.CreateGroup(ctx, request)
}

// Delete a group
//
// Deletes a group from the Databricks Workspace.
func (a *GroupsAPI) DeleteGroup(ctx context.Context, request DeleteGroupRequest) error {
	return a.impl.DeleteGroup(ctx, request)
}

// Delete a group
//
// Deletes a group from the Databricks Workspace.
func (a *GroupsAPI) DeleteGroupById(ctx context.Context, id string) error {
	return a.impl.DeleteGroup(ctx, DeleteGroupRequest{
		Id: id,
	})
}

// Get group details
//
// Gets the information for a specific group in the Databricks Workspace.
func (a *GroupsAPI) GetGroup(ctx context.Context, request GetGroupRequest) (*Group, error) {
	return a.impl.GetGroup(ctx, request)
}

// Get group details
//
// Gets the information for a specific group in the Databricks Workspace.
func (a *GroupsAPI) GetGroupById(ctx context.Context, id string) (*Group, error) {
	return a.impl.GetGroup(ctx, GetGroupRequest{
		Id: id,
	})
}

// List group details
//
// Gets all details of the groups associated with the Databricks Workspace.
//
// This method is generated by Databricks SDK Code Generator.
func (a *GroupsAPI) ListGroupsAll(ctx context.Context, request ListGroupsRequest) ([]Group, error) {
	response, err := a.impl.ListGroups(ctx, request)
	if err != nil {
		return nil, err
	}
	return response.Resources, nil
}

// GroupDisplayNameToIdMap calls [GroupsAPI.ListGroupsAll] and creates a map of results with [Group].DisplayName as key and [Group].Id as value.
//
// Returns an error if there's more than one [Group] with the same .DisplayName.
//
// Note: All [Group] instances are loaded into memory before creating a map.
//
// This method is generated by Databricks SDK Code Generator.
func (a *GroupsAPI) GroupDisplayNameToIdMap(ctx context.Context, request ListGroupsRequest) (map[string]string, error) {
	ctx = useragent.InContext(ctx, "sdk-feature", "name-to-id")
	mapping := map[string]string{}
	result, err := a.ListGroupsAll(ctx, request)
	if err != nil {
		return nil, err
	}
	for _, v := range result {
		key := v.DisplayName
		_, duplicate := mapping[key]
		if duplicate {
			return nil, fmt.Errorf("duplicate .DisplayName: %s", key)
		}
		mapping[key] = v.Id
	}
	return mapping, nil
}

// GetGroupByDisplayName calls [GroupsAPI.GroupDisplayNameToIdMap] and returns a single [Group].
//
// Returns an error if there's more than one [Group] with the same .DisplayName.
//
// Note: All [Group] instances are loaded into memory before creating a map.
//
// This method is generated by Databricks SDK Code Generator.
func (a *GroupsAPI) GetGroupByDisplayName(ctx context.Context, name string) (*Group, error) {
	ctx = useragent.InContext(ctx, "sdk-feature", "get-by-name")
	result, err := a.ListGroupsAll(ctx, ListGroupsRequest{})
	if err != nil {
		return nil, err
	}
	for _, v := range result {
		if v.DisplayName != name {
			continue
		}
		return &v, nil
	}
	return nil, fmt.Errorf("Group named '%s' does not exist", name)
}

// Update group details
//
// Partially updates the details of a group.
func (a *GroupsAPI) PatchGroup(ctx context.Context, request PartialUpdate) error {
	return a.impl.PatchGroup(ctx, request)
}

// Replace a group
//
// Updates the details of a group by replacing the entire group entity.
func (a *GroupsAPI) UpdateGroup(ctx context.Context, request Group) error {
	return a.impl.UpdateGroup(ctx, request)
}

func NewServicePrincipals(client *client.DatabricksClient) *ServicePrincipalsAPI {
	return &ServicePrincipalsAPI{
		impl: &servicePrincipalsImpl{
			client: client,
		},
	}
}

// Identities for use with jobs, automated tools, and systems such as scripts,
// apps, and CI/CD platforms. Databricks recommends creating service principals
// to run production jobs or modify production data. If all processes that act
// on production data run with service principals, interactive users do not need
// any write, delete, or modify privileges in production. This eliminates the
// risk of a user overwriting production data by accident.
type ServicePrincipalsAPI struct {
	// impl contains low-level REST API interface, that could be overridden
	// through WithImpl(ServicePrincipalsService)
	impl ServicePrincipalsService
}

// WithImpl could be used to override low-level API implementations for unit
// testing purposes with [github.com/golang/mock] or other mocking frameworks.
func (a *ServicePrincipalsAPI) WithImpl(impl ServicePrincipalsService) *ServicePrincipalsAPI {
	a.impl = impl
	return a
}

// Impl returns low-level ServicePrincipals API implementation
func (a *ServicePrincipalsAPI) Impl() ServicePrincipalsService {
	return a.impl
}

// Create a service principal
//
// Creates a new service principal in the Databricks Workspace.
func (a *ServicePrincipalsAPI) CreateServicePrincipal(ctx context.Context, request ServicePrincipal) (*ServicePrincipal, error) {
	return a.impl.CreateServicePrincipal(ctx, request)
}

// Delete a service principal
//
// Delete a single service principal in the Databricks Workspace.
func (a *ServicePrincipalsAPI) DeleteServicePrincipal(ctx context.Context, request DeleteServicePrincipalRequest) error {
	return a.impl.DeleteServicePrincipal(ctx, request)
}

// Delete a service principal
//
// Delete a single service principal in the Databricks Workspace.
func (a *ServicePrincipalsAPI) DeleteServicePrincipalById(ctx context.Context, id string) error {
	return a.impl.DeleteServicePrincipal(ctx, DeleteServicePrincipalRequest{
		Id: id,
	})
}

// Get service principal details
//
// Gets the details for a single service principal define in the Databricks
// Workspace.
func (a *ServicePrincipalsAPI) GetServicePrincipal(ctx context.Context, request GetServicePrincipalRequest) (*ServicePrincipal, error) {
	return a.impl.GetServicePrincipal(ctx, request)
}

// Get service principal details
//
// Gets the details for a single service principal define in the Databricks
// Workspace.
func (a *ServicePrincipalsAPI) GetServicePrincipalById(ctx context.Context, id string) (*ServicePrincipal, error) {
	return a.impl.GetServicePrincipal(ctx, GetServicePrincipalRequest{
		Id: id,
	})
}

// List service principals
//
// Gets the set of service principals associated with a Databricks Workspace.
//
// This method is generated by Databricks SDK Code Generator.
func (a *ServicePrincipalsAPI) ListServicePrincipalsAll(ctx context.Context, request ListServicePrincipalsRequest) ([]ServicePrincipal, error) {
	response, err := a.impl.ListServicePrincipals(ctx, request)
	if err != nil {
		return nil, err
	}
	return response.Resources, nil
}

// ServicePrincipalDisplayNameToIdMap calls [ServicePrincipalsAPI.ListServicePrincipalsAll] and creates a map of results with [ServicePrincipal].DisplayName as key and [ServicePrincipal].Id as value.
//
// Returns an error if there's more than one [ServicePrincipal] with the same .DisplayName.
//
// Note: All [ServicePrincipal] instances are loaded into memory before creating a map.
//
// This method is generated by Databricks SDK Code Generator.
func (a *ServicePrincipalsAPI) ServicePrincipalDisplayNameToIdMap(ctx context.Context, request ListServicePrincipalsRequest) (map[string]string, error) {
	ctx = useragent.InContext(ctx, "sdk-feature", "name-to-id")
	mapping := map[string]string{}
	result, err := a.ListServicePrincipalsAll(ctx, request)
	if err != nil {
		return nil, err
	}
	for _, v := range result {
		key := v.DisplayName
		_, duplicate := mapping[key]
		if duplicate {
			return nil, fmt.Errorf("duplicate .DisplayName: %s", key)
		}
		mapping[key] = v.Id
	}
	return mapping, nil
}

// GetServicePrincipalByDisplayName calls [ServicePrincipalsAPI.ServicePrincipalDisplayNameToIdMap] and returns a single [ServicePrincipal].
//
// Returns an error if there's more than one [ServicePrincipal] with the same .DisplayName.
//
// Note: All [ServicePrincipal] instances are loaded into memory before creating a map.
//
// This method is generated by Databricks SDK Code Generator.
func (a *ServicePrincipalsAPI) GetServicePrincipalByDisplayName(ctx context.Context, name string) (*ServicePrincipal, error) {
	ctx = useragent.InContext(ctx, "sdk-feature", "get-by-name")
	result, err := a.ListServicePrincipalsAll(ctx, ListServicePrincipalsRequest{})
	if err != nil {
		return nil, err
	}
	for _, v := range result {
		if v.DisplayName != name {
			continue
		}
		return &v, nil
	}
	return nil, fmt.Errorf("ServicePrincipal named '%s' does not exist", name)
}

// Update service principal details
//
// Partially updates the details of a single service principal in the Databricks
// Workspace.
func (a *ServicePrincipalsAPI) PatchServicePrincipal(ctx context.Context, request PartialUpdate) error {
	return a.impl.PatchServicePrincipal(ctx, request)
}

// Replace service principal
//
// Updates the details of a single service principal.
//
// This action replaces the existing service principal with the same name.
func (a *ServicePrincipalsAPI) UpdateServicePrincipal(ctx context.Context, request ServicePrincipal) error {
	return a.impl.UpdateServicePrincipal(ctx, request)
}

func NewUsers(client *client.DatabricksClient) *UsersAPI {
	return &UsersAPI{
		impl: &usersImpl{
			client: client,
		},
	}
}

// User identities recognized by Databricks and represented by email addresses.
//
// Databricks recommends using SCIM provisioning to sync users and groups
// automatically from your identity provider to your Databricks Workspace. SCIM
// streamlines onboarding a new employee or team by using your identity provider
// to create users and groups in Databricks Workspace and give them the proper
// level of access. When a user leaves your organization or no longer needs
// access to Databricks Workspace, admins can terminate the user in your
// identity provider and that user’s account will also be removed from
// Databricks Workspace. This ensures a consistent offboarding process and
// prevents unauthorized users from accessing sensitive data.
type UsersAPI struct {
	// impl contains low-level REST API interface, that could be overridden
	// through WithImpl(UsersService)
	impl UsersService
}

// WithImpl could be used to override low-level API implementations for unit
// testing purposes with [github.com/golang/mock] or other mocking frameworks.
func (a *UsersAPI) WithImpl(impl UsersService) *UsersAPI {
	a.impl = impl
	return a
}

// Impl returns low-level Users API implementation
func (a *UsersAPI) Impl() UsersService {
	return a.impl
}

// Create a new user
//
// Creates a new user in the Databricks Workspace. This new user will also be
// added to the Databricks account.
func (a *UsersAPI) CreateUser(ctx context.Context, request User) (*User, error) {
	return a.impl.CreateUser(ctx, request)
}

// Delete a user
//
// Deletes a user. Deleting a user from a Databricks Workspace also removes
// objects associated with the user.
func (a *UsersAPI) DeleteUser(ctx context.Context, request DeleteUserRequest) error {
	return a.impl.DeleteUser(ctx, request)
}

// Delete a user
//
// Deletes a user. Deleting a user from a Databricks Workspace also removes
// objects associated with the user.
func (a *UsersAPI) DeleteUserById(ctx context.Context, id string) error {
	return a.impl.DeleteUser(ctx, DeleteUserRequest{
		Id: id,
	})
}

// Get user details
//
// Gets information for a specific user in Databricks Workspace.
func (a *UsersAPI) GetUser(ctx context.Context, request GetUserRequest) (*User, error) {
	return a.impl.GetUser(ctx, request)
}

// Get user details
//
// Gets information for a specific user in Databricks Workspace.
func (a *UsersAPI) GetUserById(ctx context.Context, id string) (*User, error) {
	return a.impl.GetUser(ctx, GetUserRequest{
		Id: id,
	})
}

// List users
//
// Gets details for all the users associated with a Databricks Workspace.
//
// This method is generated by Databricks SDK Code Generator.
func (a *UsersAPI) ListUsersAll(ctx context.Context, request ListUsersRequest) ([]User, error) {
	response, err := a.impl.ListUsers(ctx, request)
	if err != nil {
		return nil, err
	}
	return response.Resources, nil
}

// UserUserNameToIdMap calls [UsersAPI.ListUsersAll] and creates a map of results with [User].UserName as key and [User].Id as value.
//
// Returns an error if there's more than one [User] with the same .UserName.
//
// Note: All [User] instances are loaded into memory before creating a map.
//
// This method is generated by Databricks SDK Code Generator.
func (a *UsersAPI) UserUserNameToIdMap(ctx context.Context, request ListUsersRequest) (map[string]string, error) {
	ctx = useragent.InContext(ctx, "sdk-feature", "name-to-id")
	mapping := map[string]string{}
	result, err := a.ListUsersAll(ctx, request)
	if err != nil {
		return nil, err
	}
	for _, v := range result {
		key := v.UserName
		_, duplicate := mapping[key]
		if duplicate {
			return nil, fmt.Errorf("duplicate .UserName: %s", key)
		}
		mapping[key] = v.Id
	}
	return mapping, nil
}

// GetUserByUserName calls [UsersAPI.UserUserNameToIdMap] and returns a single [User].
//
// Returns an error if there's more than one [User] with the same .UserName.
//
// Note: All [User] instances are loaded into memory before creating a map.
//
// This method is generated by Databricks SDK Code Generator.
func (a *UsersAPI) GetUserByUserName(ctx context.Context, name string) (*User, error) {
	ctx = useragent.InContext(ctx, "sdk-feature", "get-by-name")
	result, err := a.ListUsersAll(ctx, ListUsersRequest{})
	if err != nil {
		return nil, err
	}
	for _, v := range result {
		if v.UserName != name {
			continue
		}
		return &v, nil
	}
	return nil, fmt.Errorf("User named '%s' does not exist", name)
}

// Update user details
//
// Partially updates a user resource by applying the supplied operations on
// specific user attributes.
func (a *UsersAPI) PatchUser(ctx context.Context, request PartialUpdate) error {
	return a.impl.PatchUser(ctx, request)
}

// Replace a user
//
// Replaces a user's information with the data supplied in request.
func (a *UsersAPI) UpdateUser(ctx context.Context, request User) error {
	return a.impl.UpdateUser(ctx, request)
}
