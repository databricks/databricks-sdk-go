// Code generated from OpenAPI specs by Databricks SDK Generator. DO NOT EDIT.

// These APIs allow you to manage Clean Room Assets, Clean Room Task Runs, Clean Rooms, etc.
package cleanrooms

import (
	"context"

	"github.com/databricks/databricks-sdk-go/client"
	"github.com/databricks/databricks-sdk-go/listing"
)

type CleanRoomAssetsInterface interface {

	// Create an asset.
	//
	// Create a clean room asset —share an asset like a notebook or table into the
	// clean room. For each UC asset that is added through this method, the clean
	// room owner must also have enough privilege on the asset to consume it. The
	// privilege must be maintained indefinitely for the clean room to be able to
	// access the asset. Typically, you should use a group as the clean room owner.
	Create(ctx context.Context, request CreateCleanRoomAssetRequest) (*CleanRoomAsset, error)

	// Delete an asset.
	//
	// Delete a clean room asset - unshare/remove the asset from the clean room
	Delete(ctx context.Context, request DeleteCleanRoomAssetRequest) error

	// Delete an asset.
	//
	// Delete a clean room asset - unshare/remove the asset from the clean room
	DeleteByCleanRoomNameAndAssetTypeAndAssetFullName(ctx context.Context, cleanRoomName string, assetType CleanRoomAssetAssetType, assetFullName string) error

	// Get an asset.
	//
	// Get the details of a clean room asset by its type and full name.
	Get(ctx context.Context, request GetCleanRoomAssetRequest) (*CleanRoomAsset, error)

	// Get an asset.
	//
	// Get the details of a clean room asset by its type and full name.
	GetByCleanRoomNameAndAssetTypeAndAssetFullName(ctx context.Context, cleanRoomName string, assetType CleanRoomAssetAssetType, assetFullName string) (*CleanRoomAsset, error)

	// List assets.
	//
	// This method is generated by Databricks SDK Code Generator.
	List(ctx context.Context, request ListCleanRoomAssetsRequest) listing.Iterator[CleanRoomAsset]

	// List assets.
	//
	// This method is generated by Databricks SDK Code Generator.
	ListAll(ctx context.Context, request ListCleanRoomAssetsRequest) ([]CleanRoomAsset, error)

	// List assets.
	ListByCleanRoomName(ctx context.Context, cleanRoomName string) (*ListCleanRoomAssetsResponse, error)

	// Update an asset.
	//
	// Update a clean room asset. For example, updating the content of a notebook;
	// changing the shared partitions of a table; etc.
	Update(ctx context.Context, request UpdateCleanRoomAssetRequest) (*CleanRoomAsset, error)
}

func NewCleanRoomAssets(client *client.DatabricksClient) *CleanRoomAssetsAPI {
	return &CleanRoomAssetsAPI{
		cleanRoomAssetsImpl: cleanRoomAssetsImpl{
			client: client,
		},
	}
}

// Clean room assets are data and code objects — Tables, volumes, and
// notebooks that are shared with the clean room.
type CleanRoomAssetsAPI struct {
	cleanRoomAssetsImpl
}

// Delete an asset.
//
// Delete a clean room asset - unshare/remove the asset from the clean room
func (a *CleanRoomAssetsAPI) DeleteByCleanRoomNameAndAssetTypeAndAssetFullName(ctx context.Context, cleanRoomName string, assetType CleanRoomAssetAssetType, assetFullName string) error {
	return a.cleanRoomAssetsImpl.Delete(ctx, DeleteCleanRoomAssetRequest{
		CleanRoomName: cleanRoomName,
		AssetType:     assetType,
		AssetFullName: assetFullName,
	})
}

// Get an asset.
//
// Get the details of a clean room asset by its type and full name.
func (a *CleanRoomAssetsAPI) GetByCleanRoomNameAndAssetTypeAndAssetFullName(ctx context.Context, cleanRoomName string, assetType CleanRoomAssetAssetType, assetFullName string) (*CleanRoomAsset, error) {
	return a.cleanRoomAssetsImpl.Get(ctx, GetCleanRoomAssetRequest{
		CleanRoomName: cleanRoomName,
		AssetType:     assetType,
		AssetFullName: assetFullName,
	})
}

// List assets.
func (a *CleanRoomAssetsAPI) ListByCleanRoomName(ctx context.Context, cleanRoomName string) (*ListCleanRoomAssetsResponse, error) {
	return a.cleanRoomAssetsImpl.internalList(ctx, ListCleanRoomAssetsRequest{
		CleanRoomName: cleanRoomName,
	})
}

type CleanRoomTaskRunsInterface interface {

	// List notebook task runs.
	//
	// List all the historical notebook task runs in a clean room.
	//
	// This method is generated by Databricks SDK Code Generator.
	List(ctx context.Context, request ListCleanRoomNotebookTaskRunsRequest) listing.Iterator[CleanRoomNotebookTaskRun]

	// List notebook task runs.
	//
	// List all the historical notebook task runs in a clean room.
	//
	// This method is generated by Databricks SDK Code Generator.
	ListAll(ctx context.Context, request ListCleanRoomNotebookTaskRunsRequest) ([]CleanRoomNotebookTaskRun, error)

	// List notebook task runs.
	//
	// List all the historical notebook task runs in a clean room.
	ListByCleanRoomName(ctx context.Context, cleanRoomName string) (*ListCleanRoomNotebookTaskRunsResponse, error)
}

func NewCleanRoomTaskRuns(client *client.DatabricksClient) *CleanRoomTaskRunsAPI {
	return &CleanRoomTaskRunsAPI{
		cleanRoomTaskRunsImpl: cleanRoomTaskRunsImpl{
			client: client,
		},
	}
}

// Clean room task runs are the executions of notebooks in a clean room.
type CleanRoomTaskRunsAPI struct {
	cleanRoomTaskRunsImpl
}

// List notebook task runs.
//
// List all the historical notebook task runs in a clean room.
func (a *CleanRoomTaskRunsAPI) ListByCleanRoomName(ctx context.Context, cleanRoomName string) (*ListCleanRoomNotebookTaskRunsResponse, error) {
	return a.cleanRoomTaskRunsImpl.internalList(ctx, ListCleanRoomNotebookTaskRunsRequest{
		CleanRoomName: cleanRoomName,
	})
}

type CleanRoomsInterface interface {

	// Create a clean room.
	//
	// Create a new clean room with the specified collaborators. This method is
	// asynchronous; the returned name field inside the clean_room field can be used
	// to poll the clean room status, using the :method:cleanrooms/get method. When
	// this method returns, the clean room will be in a PROVISIONING state, with
	// only name, owner, comment, created_at and status populated. The clean room
	// will be usable once it enters an ACTIVE state.
	//
	// The caller must be a metastore admin or have the **CREATE_CLEAN_ROOM**
	// privilege on the metastore.
	Create(ctx context.Context, request CreateCleanRoomRequest) (*CleanRoom, error)

	// Create an output catalog.
	//
	// Create the output catalog of the clean room.
	CreateOutputCatalog(ctx context.Context, request CreateCleanRoomOutputCatalogRequest) (*CreateCleanRoomOutputCatalogResponse, error)

	// Delete a clean room.
	//
	// Delete a clean room. After deletion, the clean room will be removed from the
	// metastore. If the other collaborators have not deleted the clean room, they
	// will still have the clean room in their metastore, but it will be in a
	// DELETED state and no operations other than deletion can be performed on it.
	Delete(ctx context.Context, request DeleteCleanRoomRequest) error

	// Delete a clean room.
	//
	// Delete a clean room. After deletion, the clean room will be removed from the
	// metastore. If the other collaborators have not deleted the clean room, they
	// will still have the clean room in their metastore, but it will be in a
	// DELETED state and no operations other than deletion can be performed on it.
	DeleteByName(ctx context.Context, name string) error

	// Get a clean room.
	//
	// Get the details of a clean room given its name.
	Get(ctx context.Context, request GetCleanRoomRequest) (*CleanRoom, error)

	// Get a clean room.
	//
	// Get the details of a clean room given its name.
	GetByName(ctx context.Context, name string) (*CleanRoom, error)

	// List clean rooms.
	//
	// Get a list of all clean rooms of the metastore. Only clean rooms the caller
	// has access to are returned.
	//
	// This method is generated by Databricks SDK Code Generator.
	List(ctx context.Context, request ListCleanRoomsRequest) listing.Iterator[CleanRoom]

	// List clean rooms.
	//
	// Get a list of all clean rooms of the metastore. Only clean rooms the caller
	// has access to are returned.
	//
	// This method is generated by Databricks SDK Code Generator.
	ListAll(ctx context.Context, request ListCleanRoomsRequest) ([]CleanRoom, error)

	// Update a clean room.
	//
	// Update a clean room. The caller must be the owner of the clean room, have
	// **MODIFY_CLEAN_ROOM** privilege, or be metastore admin.
	//
	// When the caller is a metastore admin, only the __owner__ field can be
	// updated.
	Update(ctx context.Context, request UpdateCleanRoomRequest) (*CleanRoom, error)
}

func NewCleanRooms(client *client.DatabricksClient) *CleanRoomsAPI {
	return &CleanRoomsAPI{
		cleanRoomsImpl: cleanRoomsImpl{
			client: client,
		},
	}
}

// A clean room uses Delta Sharing and serverless compute to provide a secure
// and privacy-protecting environment where multiple parties can work together
// on sensitive enterprise data without direct access to each other’s data.
type CleanRoomsAPI struct {
	cleanRoomsImpl
}

// Delete a clean room.
//
// Delete a clean room. After deletion, the clean room will be removed from the
// metastore. If the other collaborators have not deleted the clean room, they
// will still have the clean room in their metastore, but it will be in a
// DELETED state and no operations other than deletion can be performed on it.
func (a *CleanRoomsAPI) DeleteByName(ctx context.Context, name string) error {
	return a.cleanRoomsImpl.Delete(ctx, DeleteCleanRoomRequest{
		Name: name,
	})
}

// Get a clean room.
//
// Get the details of a clean room given its name.
func (a *CleanRoomsAPI) GetByName(ctx context.Context, name string) (*CleanRoom, error) {
	return a.cleanRoomsImpl.Get(ctx, GetCleanRoomRequest{
		Name: name,
	})
}
