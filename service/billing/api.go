// Code generated from OpenAPI specs by Databricks SDK Generator. DO NOT EDIT.

package billing

import (
	"context"
	"fmt"

	"github.com/databricks/databricks-sdk-go/databricks/client"
)

func NewBillableUsageDownload(client *client.DatabricksClient) *BillableUsageDownloadAPI {
	return &BillableUsageDownloadAPI{
		BillableUsageDownloadService: &billableUsageDownloadAPI{
			client: client,
		},
	}
}

// This API allows you to download billable usage logs for the specified account
// and date range. This feature works with all account types.
type BillableUsageDownloadAPI struct {
	// BillableUsageDownloadService contains low-level REST API interface.
	BillableUsageDownloadService
}

// Return billable usage logs
//
// Returns billable usage logs in CSV format for the specified account and date
// range. For the data schema, see [CSV file
// schema](https://docs.databricks.com/administration-guide/account-settings/usage-analysis.html#schema).
// Note that this method might take multiple seconds to complete.
func (a *BillableUsageDownloadAPI) DownloadBillableUsage(ctx context.Context, request DownloadBillableUsageRequest) error {
	return a.BillableUsageDownloadService.DownloadBillableUsage(ctx, request)
}

// unexported type that holds implementations of just BillableUsageDownload API methods
type billableUsageDownloadAPI struct {
	client *client.DatabricksClient
}

func (a *billableUsageDownloadAPI) DownloadBillableUsage(ctx context.Context, request DownloadBillableUsageRequest) error {
	path := fmt.Sprintf("/api/2.0/accounts/%v/usage/download", a.client.Config.AccountID)
	err := a.client.Get(ctx, path, request, nil)
	return err
}

func NewBudgets(client *client.DatabricksClient) *BudgetsAPI {
	return &BudgetsAPI{
		BudgetsService: &budgetsAPI{
			client: client,
		},
	}
}

// These APIs manage budget configuration including notifications for exceeding
// a budget for a period. They can also retrieve the status of each budget.
type BudgetsAPI struct {
	// BudgetsService contains low-level REST API interface.
	BudgetsService
}

// Create a new budget
//
// Creates a new budget in the specified account.
func (a *BudgetsAPI) CreateBudget(ctx context.Context, request CreateBudgetRequest) (*BudgetWithStatus, error) {
	return a.BudgetsService.CreateBudget(ctx, request)
}

// Delete budget
//
// Deletes the budget specified by its UUID.
func (a *BudgetsAPI) DeleteBudget(ctx context.Context, request DeleteBudgetRequest) error {
	return a.BudgetsService.DeleteBudget(ctx, request)
}

// Delete budget
//
// Deletes the budget specified by its UUID.
func (a *BudgetsAPI) DeleteBudgetByBudgetId(ctx context.Context, budgetId string) error {
	return a.DeleteBudget(ctx, DeleteBudgetRequest{
		BudgetId: budgetId,
	})
}

// Get budget and its status
//
// Gets the budget specified by its UUID, including noncumulative status for
// each day that the budget is configured to include.
func (a *BudgetsAPI) GetBudget(ctx context.Context, request GetBudgetRequest) (*BudgetWithStatus, error) {
	return a.BudgetsService.GetBudget(ctx, request)
}

// Get budget and its status
//
// Gets the budget specified by its UUID, including noncumulative status for
// each day that the budget is configured to include.
func (a *BudgetsAPI) GetBudgetByBudgetId(ctx context.Context, budgetId string) (*BudgetWithStatus, error) {
	return a.GetBudget(ctx, GetBudgetRequest{
		BudgetId: budgetId,
	})
}

// Get all budgets
//
// Gets all budgets associated with this account, including noncumulative status
// for each day that the budget is configured to include.
//
// This method is generated by Databricks SDK Code Generator.
func (a *BudgetsAPI) ListBudgetsAll(ctx context.Context) ([]BudgetWithStatus, error) {
	response, err := a.ListBudgets(ctx)
	if err != nil {
		return nil, err
	}
	return response.Budgets, nil
}

// Modify budget
//
// Modifies a budget in this account. Budget properties are completely
// overwritten.
func (a *BudgetsAPI) UpdateBudget(ctx context.Context, request UpdateBudgetRequest) error {
	return a.BudgetsService.UpdateBudget(ctx, request)
}

// unexported type that holds implementations of just Budgets API methods
type budgetsAPI struct {
	client *client.DatabricksClient
}

func (a *budgetsAPI) CreateBudget(ctx context.Context, request CreateBudgetRequest) (*BudgetWithStatus, error) {
	var budgetWithStatus BudgetWithStatus
	path := fmt.Sprintf("/api/2.0/accounts/%v/budget", a.client.Config.AccountID)
	err := a.client.Post(ctx, path, request, &budgetWithStatus)
	return &budgetWithStatus, err
}

func (a *budgetsAPI) DeleteBudget(ctx context.Context, request DeleteBudgetRequest) error {
	path := fmt.Sprintf("/api/2.0/accounts/%v/budget/%v", a.client.Config.AccountID, request.BudgetId)
	err := a.client.Delete(ctx, path, request)
	return err
}

func (a *budgetsAPI) GetBudget(ctx context.Context, request GetBudgetRequest) (*BudgetWithStatus, error) {
	var budgetWithStatus BudgetWithStatus
	path := fmt.Sprintf("/api/2.0/accounts/%v/budget/%v", a.client.Config.AccountID, request.BudgetId)
	err := a.client.Get(ctx, path, request, &budgetWithStatus)
	return &budgetWithStatus, err
}

func (a *budgetsAPI) ListBudgets(ctx context.Context) (*BudgetList, error) {
	var budgetList BudgetList
	path := fmt.Sprintf("/api/2.0/accounts/%v/budget", a.client.Config.AccountID)
	err := a.client.Get(ctx, path, nil, &budgetList)
	return &budgetList, err
}

func (a *budgetsAPI) UpdateBudget(ctx context.Context, request UpdateBudgetRequest) error {
	path := fmt.Sprintf("/api/2.0/accounts/%v/budget/%v", a.client.Config.AccountID, request.BudgetId)
	err := a.client.Patch(ctx, path, request)
	return err
}

func NewLogDelivery(client *client.DatabricksClient) *LogDeliveryAPI {
	return &LogDeliveryAPI{
		LogDeliveryService: &logDeliveryAPI{
			client: client,
		},
	}
}

// These APIs manage log delivery configurations for this account. The two
// supported log types for this API are _billable usage logs_ and _audit logs_.
// This feature is in Public Preview. This feature works with all account ID
// types.
//
// Log delivery works with all account types. However, if your account is on the
// E2 version of the platform or on a select custom plan that allows multiple
// workspaces per account, you can optionally configure different storage
// destinations for each workspace. Log delivery status is also provided to know
// the latest status of log delivery attempts. The high-level flow of billable
// usage delivery:
//
// 1. **Create storage**: In AWS, [create a new AWS S3
// bucket](https://docs.databricks.com/administration-guide/account-api/aws-storage.html)
// with a specific bucket policy. Using Databricks APIs, call the Account API to
// create a [storage configuration object](#operation/create-storage-config)
// that uses the bucket name. 2. **Create credentials**: In AWS, create the
// appropriate AWS IAM role. For full details, including the required IAM role
// policies and trust relationship, see [Billable usage log
// delivery](https://docs.databricks.com/administration-guide/account-settings/billable-usage-delivery.html).
// Using Databricks APIs, call the Account API to create a [credential
// configuration object](#operation/create-credential-config) that uses the IAM
// role's ARN. 3. **Create log delivery configuration**: Using Databricks APIs,
// call the Account API to [create a log delivery
// configuration](#operation/create-log-delivery-config) that uses the
// credential and storage configuration objects from previous steps. You can
// specify if the logs should include all events of that log type in your
// account (_Account level_ delivery) or only events for a specific set of
// workspaces (_workspace level_ delivery). Account level log delivery applies
// to all current and future workspaces plus account level logs, while workspace
// level log delivery solely delivers logs related to the specified workspaces.
// You can create multiple types of delivery configurations per account.
//
// For billable usage delivery: * For more information about billable usage
// logs, see [Billable usage log
// delivery](https://docs.databricks.com/administration-guide/account-settings/billable-usage-delivery.html).
// For the CSV schema, see the [Usage
// page](https://docs.databricks.com/administration-guide/account-settings/usage.html).
// * The delivery location is `<bucket-name>/<prefix>/billable-usage/csv/`,
// where `<prefix>` is the name of the optional delivery path prefix you set up
// during log delivery configuration. Files are named
// `workspaceId=<workspace-id>-usageMonth=<month>.csv`. * All billable usage
// logs apply to specific workspaces (_workspace level_ logs). You can aggregate
// usage for your entire account by creating an _account level_ delivery
// configuration that delivers logs for all current and future workspaces in
// your account. * The files are delivered daily by overwriting the month's CSV
// file for each workspace.
//
// For audit log delivery: * For more information about about audit log
// delivery, see [Audit log
// delivery](https://docs.databricks.com/administration-guide/account-settings/audit-logs.html),
// which includes information about the used JSON schema. * The delivery
// location is
// `<bucket-name>/<delivery-path-prefix>/workspaceId=<workspaceId>/date=<yyyy-mm-dd>/auditlogs_<internal-id>.json`.
// Files may get overwritten with the same content multiple times to achieve
// exactly-once delivery. * If the audit log delivery configuration included
// specific workspace IDs, only _workspace-level_ audit logs for those
// workspaces are delivered. If the log delivery configuration applies to the
// entire account (_account level_ delivery configuration), the audit log
// delivery includes workspace-level audit logs for all workspaces in the
// account as well as account-level audit logs. See [Audit log
// delivery](https://docs.databricks.com/administration-guide/account-settings/audit-logs.html)
// for details. * Auditable events are typically available in logs within 15
// minutes.
type LogDeliveryAPI struct {
	// LogDeliveryService contains low-level REST API interface.
	LogDeliveryService
}

// Create a new log delivery configuration
//
// Creates a new Databricks log delivery configuration to enable delivery of the
// specified type of logs to your storage location. This requires that you
// already created a [credential object](#operation/create-credential-config)
// (which encapsulates a cross-account service IAM role) and a [storage
// configuration object](#operation/create-storage-config) (which encapsulates
// an S3 bucket).
//
// For full details, including the required IAM role policies and bucket
// policies, see [Deliver and access billable usage
// logs](https://docs.databricks.com/administration-guide/account-settings/billable-usage-delivery.html)
// or [Configure audit
// logging](https://docs.databricks.com/administration-guide/account-settings/audit-logs.html).
//
// **Note**: There is a limit on the number of log delivery configurations
// available per account (each limit applies separately to each log type
// including billable usage and audit logs). You can create a maximum of two
// enabled account-level delivery configurations (configurations without a
// workspace filter) per type. Additionally, you can create two enabled
// workspace-level delivery configurations per workspace for each log type,
// which means that the same workspace ID can occur in the workspace filter for
// no more than two delivery configurations per log type.
//
// You cannot delete a log delivery configuration, but you can disable it (see
// [Enable or disable log delivery
// configuration](#operation/patch-log-delivery-config-status)).
func (a *LogDeliveryAPI) CreateLogDeliveryConfig(ctx context.Context, request WrappedCreateLogDeliveryConfiguration) (*WrappedLogDeliveryConfiguration, error) {
	return a.LogDeliveryService.CreateLogDeliveryConfig(ctx, request)
}

// Get log delivery configuration
//
// Gets a Databricks log delivery configuration object for an account, both
// specified by ID.
func (a *LogDeliveryAPI) GetLogDeliveryConfig(ctx context.Context, request GetLogDeliveryConfigRequest) (*WrappedLogDeliveryConfiguration, error) {
	return a.LogDeliveryService.GetLogDeliveryConfig(ctx, request)
}

// Get log delivery configuration
//
// Gets a Databricks log delivery configuration object for an account, both
// specified by ID.
func (a *LogDeliveryAPI) GetLogDeliveryConfigByLogDeliveryConfigurationId(ctx context.Context, logDeliveryConfigurationId string) (*WrappedLogDeliveryConfiguration, error) {
	return a.GetLogDeliveryConfig(ctx, GetLogDeliveryConfigRequest{
		LogDeliveryConfigurationId: logDeliveryConfigurationId,
	})
}

// Get all log delivery configurations
//
// Gets all Databricks log delivery configurations associated with an account
// specified by ID.
//
// This method is generated by Databricks SDK Code Generator.
func (a *LogDeliveryAPI) ListLogDeliveryConfigsAll(ctx context.Context, request ListLogDeliveryConfigsRequest) ([]LogDeliveryConfiguration, error) {
	response, err := a.ListLogDeliveryConfigs(ctx, request)
	if err != nil {
		return nil, err
	}
	return response.LogDeliveryConfigurations, nil
}

// Enable or disable log delivery configuration
//
// Enables or disables a log delivery configuration. Deletion of delivery
// configurations is not supported, so disable log delivery configurations that
// are no longer needed. Note that you can't re-enable a delivery configuration
// if this would violate the delivery configuration limits described under
// [Create log delivery](#operation/create-log-delivery-config).
func (a *LogDeliveryAPI) PatchLogDeliveryConfigStatus(ctx context.Context, request UpdateLogDeliveryConfigurationStatusRequest) error {
	return a.LogDeliveryService.PatchLogDeliveryConfigStatus(ctx, request)
}

// unexported type that holds implementations of just LogDelivery API methods
type logDeliveryAPI struct {
	client *client.DatabricksClient
}

func (a *logDeliveryAPI) CreateLogDeliveryConfig(ctx context.Context, request WrappedCreateLogDeliveryConfiguration) (*WrappedLogDeliveryConfiguration, error) {
	var wrappedLogDeliveryConfiguration WrappedLogDeliveryConfiguration
	path := fmt.Sprintf("/api/2.0/accounts/%v/log-delivery", a.client.Config.AccountID)
	err := a.client.Post(ctx, path, request, &wrappedLogDeliveryConfiguration)
	return &wrappedLogDeliveryConfiguration, err
}

func (a *logDeliveryAPI) GetLogDeliveryConfig(ctx context.Context, request GetLogDeliveryConfigRequest) (*WrappedLogDeliveryConfiguration, error) {
	var wrappedLogDeliveryConfiguration WrappedLogDeliveryConfiguration
	path := fmt.Sprintf("/api/2.0/accounts/%v/log-delivery/%v", a.client.Config.AccountID, request.LogDeliveryConfigurationId)
	err := a.client.Get(ctx, path, request, &wrappedLogDeliveryConfiguration)
	return &wrappedLogDeliveryConfiguration, err
}

func (a *logDeliveryAPI) ListLogDeliveryConfigs(ctx context.Context, request ListLogDeliveryConfigsRequest) (*WrappedLogDeliveryConfigurations, error) {
	var wrappedLogDeliveryConfigurations WrappedLogDeliveryConfigurations
	path := fmt.Sprintf("/api/2.0/accounts/%v/log-delivery", a.client.Config.AccountID)
	err := a.client.Get(ctx, path, request, &wrappedLogDeliveryConfigurations)
	return &wrappedLogDeliveryConfigurations, err
}

func (a *logDeliveryAPI) PatchLogDeliveryConfigStatus(ctx context.Context, request UpdateLogDeliveryConfigurationStatusRequest) error {
	path := fmt.Sprintf("/api/2.0/accounts/%v/log-delivery/%v", a.client.Config.AccountID, request.LogDeliveryConfigurationId)
	err := a.client.Patch(ctx, path, request)
	return err
}
