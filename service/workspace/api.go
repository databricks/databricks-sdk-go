// Code generated from OpenAPI specs by Databricks SDK Generator. DO NOT EDIT.

package workspace

import (
	"context"

	"github.com/databricks/databricks-sdk-go/databricks/client"
)

func NewWorkspace(client *client.DatabricksClient) WorkspaceService {
	return &WorkspaceAPI{
		client: client,
	}
}

type WorkspaceAPI struct {
	client *client.DatabricksClient
}

// Delete a workspace object
//
// Deletes an object or a directory (and optionally recursively deletes all
// objects in the directory). * If “path“ does not exist, this call returns an
// error “RESOURCE_DOES_NOT_EXIST“. * If “path“ is a non-empty directory and
// “recursive“ is set to “false“, this call returns an error
// “DIRECTORY_NOT_EMPTY“.
//
// Object deletion cannot be undone and deleting a directory recursively is not
// atomic.
func (a *WorkspaceAPI) Delete(ctx context.Context, request Delete) error {
	path := "/api/2.0/workspace/delete"
	err := a.client.Post(ctx, path, request, nil)
	return err
}

// Export a notebook
//
// Exports a notebook or the contents of an entire directory.
//
// If “path“ does not exist, this call returns an error
// “RESOURCE_DOES_NOT_EXIST“.
//
// One can only export a directory in “DBC“ format. If the exported data would
// exceed size limit, this call returns “MAX_NOTEBOOK_SIZE_EXCEEDED“.
// Currently, this API does not support exporting a library.
//
// Alternatively, one can download the exported file by enabling
// “direct_download“. Example: `curl -n -o example.scala
// 'https://XX.cloud.databricks.com/api/2.0/workspace/export?path=/Users/user@example.com/ScalaExampleNotebook&direct_download=true'`
func (a *WorkspaceAPI) Export(ctx context.Context, request ExportRequest) (*ExportResponse, error) {
	var exportResponse ExportResponse
	path := "/api/2.0/workspace/export"
	err := a.client.Get(ctx, path, request, &exportResponse)
	return &exportResponse, err
}

// Get status
//
// Gets the status of an object or a directory. If “path“ does not exist, this
// call returns an error “RESOURCE_DOES_NOT_EXIST“.
func (a *WorkspaceAPI) GetStatus(ctx context.Context, request GetStatusRequest) (*ObjectInfo, error) {
	var objectInfo ObjectInfo
	path := "/api/2.0/workspace/get-status"
	err := a.client.Get(ctx, path, request, &objectInfo)
	return &objectInfo, err
}

// Get status
//
// Gets the status of an object or a directory. If “path“ does not exist, this
// call returns an error “RESOURCE_DOES_NOT_EXIST“.
func (a *WorkspaceAPI) GetStatusByPath(ctx context.Context, path string) (*ObjectInfo, error) {
	return a.GetStatus(ctx, GetStatusRequest{
		Path: path,
	})
}

// Import a notebook
//
// Imports a notebook or the contents of an entire directory. If “path“
// already exists and “overwrite“ is set to “false“, this call returns an
// error “RESOURCE_ALREADY_EXISTS“. One can only use “DBC“ format to import
// a directory.
func (a *WorkspaceAPI) Import(ctx context.Context, request Import) error {
	path := "/api/2.0/workspace/import"
	err := a.client.Post(ctx, path, request, nil)
	return err
}

// List contents
//
// Lists the contents of a directory, or the object if it is not a directory.If
// the input path does not exist, this call returns an error
// “RESOURCE_DOES_NOT_EXIST“.
//
// Use ListAll() to get all ObjectInfo instances
func (a *WorkspaceAPI) List(ctx context.Context, request ListRequest) (*ListResponse, error) {
	var listResponse ListResponse
	path := "/api/2.0/workspace/list"
	err := a.client.Get(ctx, path, request, &listResponse)
	return &listResponse, err
}

// ListAll returns all ObjectInfo instances. This method exists for consistency purposes.
//
// This method is generated by Databricks SDK Code Generator.
func (a *WorkspaceAPI) ListAll(ctx context.Context, request ListRequest) ([]ObjectInfo, error) {
	response, err := a.List(ctx, request)
	if err != nil {
		return nil, err
	}
	return response.Objects, nil
}

// Create a directory
//
// Creates the specified directory (and necessary parent directories if they do
// not exist). If there is an object (not a directory) at any prefix of the
// input path, this call returns an error “RESOURCE_ALREADY_EXISTS“.
//
// Note that if this operation fails it may have succeeded in creating some of
// the necessary\nparrent directories.
func (a *WorkspaceAPI) Mkdirs(ctx context.Context, request Mkdirs) error {
	path := "/api/2.0/workspace/mkdirs"
	err := a.client.Post(ctx, path, request, nil)
	return err
}

// Create a directory
//
// Creates the specified directory (and necessary parent directories if they do
// not exist). If there is an object (not a directory) at any prefix of the
// input path, this call returns an error “RESOURCE_ALREADY_EXISTS“.
//
// Note that if this operation fails it may have succeeded in creating some of
// the necessary\nparrent directories.
func (a *WorkspaceAPI) MkdirsByPath(ctx context.Context, path string) error {
	return a.Mkdirs(ctx, Mkdirs{
		Path: path,
	})
}
