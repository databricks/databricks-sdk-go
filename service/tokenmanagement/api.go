// Code generated from OpenAPI specs by Databricks SDK Generator. DO NOT EDIT.

package tokenmanagement

import (
	"context"
	"fmt"

	"github.com/databricks/databricks-sdk-go/databricks/client"
	"github.com/databricks/databricks-sdk-go/databricks/useragent"
)

func NewTokenManagement(client *client.DatabricksClient) *TokenManagementAPI {
	return &TokenManagementAPI{
		impl: &tokenManagementImpl{
			client: client,
		},
	}
}

// Enables administrators to get all tokens and delete tokens for other users.
// Admins can either get every token, get a specific token by ID, or get all
// tokens for a particular user.
type TokenManagementAPI struct {
	// impl contains low-level REST API interface, that could be overridden
	// through WithImpl(TokenManagementService)
	impl TokenManagementService
}

// WithImpl could be used to override low-level API implementations for unit
// testing purposes with [github.com/golang/mock] or other mocking frameworks.
func (a *TokenManagementAPI) WithImpl(impl TokenManagementService) *TokenManagementAPI {
	a.impl = impl
	return a
}

// Impl returns low-level TokenManagement API implementation
func (a *TokenManagementAPI) Impl() TokenManagementService {
	return a.impl
}

// Create on-behalf token
//
// Creates a token on behalf of a service principal.
func (a *TokenManagementAPI) CreateOboToken(ctx context.Context, request CreateOboTokenRequest) (*CreateOboTokenResponse, error) {
	return a.impl.CreateOboToken(ctx, request)
}

// Delete a token
//
// Deletes a token, specified by its ID.
func (a *TokenManagementAPI) DeleteToken(ctx context.Context, request DeleteTokenRequest) error {
	return a.impl.DeleteToken(ctx, request)
}

// Delete a token
//
// Deletes a token, specified by its ID.
func (a *TokenManagementAPI) DeleteTokenByTokenId(ctx context.Context, tokenId string) error {
	return a.impl.DeleteToken(ctx, DeleteTokenRequest{
		TokenId: tokenId,
	})
}

// Get token info
//
// Gets information about a token, specified by its ID.
func (a *TokenManagementAPI) GetTokenInfo(ctx context.Context, request GetTokenInfoRequest) (*TokenInfo, error) {
	return a.impl.GetTokenInfo(ctx, request)
}

// Get token info
//
// Gets information about a token, specified by its ID.
func (a *TokenManagementAPI) GetTokenInfoByTokenId(ctx context.Context, tokenId string) (*TokenInfo, error) {
	return a.impl.GetTokenInfo(ctx, GetTokenInfoRequest{
		TokenId: tokenId,
	})
}

// List all tokens
//
// Lists all tokens associated with the specified workspace or user.
//
// This method is generated by Databricks SDK Code Generator.
func (a *TokenManagementAPI) ListTokensAll(ctx context.Context, request ListTokensRequest) ([]TokenInfo, error) {
	response, err := a.impl.ListTokens(ctx, request)
	if err != nil {
		return nil, err
	}
	return response.TokenInfos, nil
}

// TokenInfoCommentToTokenIdMap calls [TokenManagementAPI.ListTokensAll] and creates a map of results with [TokenInfo].Comment as key and [TokenInfo].TokenId as value.
//
// Returns an error if there's more than one [TokenInfo] with the same .Comment.
//
// Note: All [TokenInfo] instances are loaded into memory before creating a map.
//
// This method is generated by Databricks SDK Code Generator.
func (a *TokenManagementAPI) TokenInfoCommentToTokenIdMap(ctx context.Context, request ListTokensRequest) (map[string]string, error) {
	ctx = useragent.InContext(ctx, "sdk-feature", "name-to-id")
	mapping := map[string]string{}
	result, err := a.ListTokensAll(ctx, request)
	if err != nil {
		return nil, err
	}
	for _, v := range result {
		key := v.Comment
		_, duplicate := mapping[key]
		if duplicate {
			return nil, fmt.Errorf("duplicate .Comment: %s", key)
		}
		mapping[key] = v.TokenId
	}
	return mapping, nil
}

// GetTokenInfoByComment calls [TokenManagementAPI.TokenInfoCommentToTokenIdMap] and returns a single [TokenInfo].
//
// Returns an error if there's more than one [TokenInfo] with the same .Comment.
//
// Note: All [TokenInfo] instances are loaded into memory before creating a map.
//
// This method is generated by Databricks SDK Code Generator.
func (a *TokenManagementAPI) GetTokenInfoByComment(ctx context.Context, name string) (*TokenInfo, error) {
	ctx = useragent.InContext(ctx, "sdk-feature", "get-by-name")
	result, err := a.ListTokensAll(ctx, ListTokensRequest{})
	if err != nil {
		return nil, err
	}
	for _, v := range result {
		if v.Comment != name {
			continue
		}
		return &v, nil
	}
	return nil, fmt.Errorf("TokenInfo named '%s' does not exist", name)
}
