// Code generated from OpenAPI specs by Databricks SDK Generator. DO NOT EDIT.

package unitycatalog

import (
	"context"
	"fmt"

	"github.com/databricks/databricks-sdk-go/databricks/client"
)

func NewCatalogs(client *client.DatabricksClient) *CatalogsAPI {
	return &CatalogsAPI{
		CatalogsService: &catalogsAPI{
			client: client,
		},
	}
}

// A catalog is the first layer of Unity Catalog’s three-level namespace.
// It’s used to organize your data assets. Users can see all catalogs on which
// they have been assigned the USAGE data permission.
//
// In Unity Catalog, admins and data stewards manage users and their access to
// data centrally across all of the workspaces in a Databricks account. Users in
// different workspaces can share access to the same data, depending on
// privileges granted centrally in Unity Catalog.
type CatalogsAPI struct {
	// CatalogsService contains low-level REST API interface.
	CatalogsService
}

// Create a catalog
//
// Creates a new catalog instance in the parent Metastore if the caller is a
// Metastore admin or has the CREATE CATALOG privilege.
func (a *CatalogsAPI) Create(ctx context.Context, request CreateCatalog) (*CreateCatalogResponse, error) {
	return a.CatalogsService.Create(ctx, request)
}

// Delete a catalog
//
// Deletes the catalog that matches the supplied name. The caller must be a
// Metastore admin or the owner of the catalog.
func (a *CatalogsAPI) DeleteCatalog(ctx context.Context, request DeleteCatalogRequest) error {
	return a.CatalogsService.DeleteCatalog(ctx, request)
}

// Delete a catalog
//
// Deletes the catalog that matches the supplied name. The caller must be a
// Metastore admin or the owner of the catalog.
func (a *CatalogsAPI) DeleteCatalogByName(ctx context.Context, name string) error {
	return a.DeleteCatalog(ctx, DeleteCatalogRequest{
		Name: name,
	})
}

// Get a catalog
//
// Gets an array of all catalogs in the current Metastore for which the user is
// an admin or Catalog owner, or has the USAGE privilege set for their account.
func (a *CatalogsAPI) GetCatalog(ctx context.Context, request GetCatalogRequest) (*GetCatalogResponse, error) {
	return a.CatalogsService.GetCatalog(ctx, request)
}

// Get a catalog
//
// Gets an array of all catalogs in the current Metastore for which the user is
// an admin or Catalog owner, or has the USAGE privilege set for their account.
func (a *CatalogsAPI) GetCatalogByName(ctx context.Context, name string) (*GetCatalogResponse, error) {
	return a.GetCatalog(ctx, GetCatalogRequest{
		Name: name,
	})
}

// List catalogs
//
// Gets an array of External Locations (ExternalLocationInfo objects) from the
// Metastore. The caller must be a Metastore admin, is the owner of the External
// Location, or has privileges to access the External Location.
//
// This method is generated by Databricks SDK Code Generator.
func (a *CatalogsAPI) ListCatalogsAll(ctx context.Context) ([]CatalogInfo, error) {
	response, err := a.ListCatalogs(ctx)
	if err != nil {
		return nil, err
	}
	return response.Catalogs, nil
}

// Update a catalog
//
// Updates the catalog that matches the supplied name. The caller must be either
// the owner of the catalog, or a Metastore admin (when changing the owner field
// of the catalog).
func (a *CatalogsAPI) Update(ctx context.Context, request UpdateCatalog) error {
	return a.CatalogsService.Update(ctx, request)
}

// unexported type that holds implementations of just Catalogs API methods
type catalogsAPI struct {
	client *client.DatabricksClient
}

func (a *catalogsAPI) Create(ctx context.Context, request CreateCatalog) (*CreateCatalogResponse, error) {
	var createCatalogResponse CreateCatalogResponse
	path := "/api/2.1/unity-catalog/catalogs"
	err := a.client.Post(ctx, path, request, &createCatalogResponse)
	return &createCatalogResponse, err
}

func (a *catalogsAPI) DeleteCatalog(ctx context.Context, request DeleteCatalogRequest) error {
	path := fmt.Sprintf("/api/2.1/unity-catalog/catalogs/%v", request.Name)
	err := a.client.Delete(ctx, path, request)
	return err
}

func (a *catalogsAPI) GetCatalog(ctx context.Context, request GetCatalogRequest) (*GetCatalogResponse, error) {
	var getCatalogResponse GetCatalogResponse
	path := fmt.Sprintf("/api/2.1/unity-catalog/catalogs/%v", request.Name)
	err := a.client.Get(ctx, path, request, &getCatalogResponse)
	return &getCatalogResponse, err
}

func (a *catalogsAPI) ListCatalogs(ctx context.Context) (*ListCatalogsResponse, error) {
	var listCatalogsResponse ListCatalogsResponse
	path := "/api/2.1/unity-catalog/catalogs"
	err := a.client.Get(ctx, path, nil, &listCatalogsResponse)
	return &listCatalogsResponse, err
}

func (a *catalogsAPI) Update(ctx context.Context, request UpdateCatalog) error {
	path := fmt.Sprintf("/api/2.1/unity-catalog/catalogs/%v", request.Name)
	err := a.client.Patch(ctx, path, request)
	return err
}

func NewExternalLocations(client *client.DatabricksClient) *ExternalLocationsAPI {
	return &ExternalLocationsAPI{
		ExternalLocationsService: &externalLocationsAPI{
			client: client,
		},
	}
}

// An external location is an object that combines a cloud storage path with a
// storage credential that authorizes access to the cloud storage path. Each
// storage location is subject to Unity Catalog access-control policies that
// control which users and groups can access the credential. If a user does not
// have access to a storage location in Unity Catalog, the request fails and
// Unity Catalog does not attempt to authenticate to your cloud tenant on the
// user’s behalf.
//
// Databricks recommends using external locations rather than using storage
// credentials directly.
//
// To create external locations, you must be a metastore admin or a user with
// the CREATE EXTERNAL LOCATION privilege.
type ExternalLocationsAPI struct {
	// ExternalLocationsService contains low-level REST API interface.
	ExternalLocationsService
}

// Create an external location
//
// Creates a new External Location entry in the Metastore. The caller must be a
// Metastore admin or have the CREATE EXTERNAL LOCATION privilege on the
// Metastore.
func (a *ExternalLocationsAPI) Create(ctx context.Context, request CreateExternalLocation) (*CreateExternalLocationResponse, error) {
	return a.ExternalLocationsService.Create(ctx, request)
}

// Delete an external location
//
// Deletes the specified external location from the Metastore. The caller must
// be the owner of the external location.
func (a *ExternalLocationsAPI) DeleteExternalLocation(ctx context.Context, request DeleteExternalLocationRequest) error {
	return a.ExternalLocationsService.DeleteExternalLocation(ctx, request)
}

// Delete an external location
//
// Deletes the specified external location from the Metastore. The caller must
// be the owner of the external location.
func (a *ExternalLocationsAPI) DeleteExternalLocationByName(ctx context.Context, name string) error {
	return a.DeleteExternalLocation(ctx, DeleteExternalLocationRequest{
		Name: name,
	})
}

// Get an external location
//
// Gets an external location from the Metastore. The caller must be either a
// Metastore admin, the owner of the external location, or has an appropriate
// privilege level on the Metastore.
func (a *ExternalLocationsAPI) GetExternalLocation(ctx context.Context, request GetExternalLocationRequest) (*GetExternalLocationResponse, error) {
	return a.ExternalLocationsService.GetExternalLocation(ctx, request)
}

// Get an external location
//
// Gets an external location from the Metastore. The caller must be either a
// Metastore admin, the owner of the external location, or has an appropriate
// privilege level on the Metastore.
func (a *ExternalLocationsAPI) GetExternalLocationByName(ctx context.Context, name string) (*GetExternalLocationResponse, error) {
	return a.GetExternalLocation(ctx, GetExternalLocationRequest{
		Name: name,
	})
}

// List external locations
//
// Gets an array of External Locations (ExternalLocationInfo objects) from the
// Metastore. The caller must be a Metastore admin, is the owner of the external
// location, or has privileges to access the external location.
//
// This method is generated by Databricks SDK Code Generator.
func (a *ExternalLocationsAPI) ListExternalLocationsAll(ctx context.Context) ([]ExternalLocationInfo, error) {
	response, err := a.ListExternalLocations(ctx)
	if err != nil {
		return nil, err
	}
	return response.ExternalLocations, nil
}

// Update an external location
//
// Updates an external location in the Metastore. The caller must be the owner
// of the externa location, or be a Metastore admin. In the second case, the
// admin can only update the name of the external location.
func (a *ExternalLocationsAPI) Update(ctx context.Context, request UpdateExternalLocation) error {
	return a.ExternalLocationsService.Update(ctx, request)
}

// unexported type that holds implementations of just ExternalLocations API methods
type externalLocationsAPI struct {
	client *client.DatabricksClient
}

func (a *externalLocationsAPI) Create(ctx context.Context, request CreateExternalLocation) (*CreateExternalLocationResponse, error) {
	var createExternalLocationResponse CreateExternalLocationResponse
	path := "/api/2.1/unity-catalog/external-locations"
	err := a.client.Post(ctx, path, request, &createExternalLocationResponse)
	return &createExternalLocationResponse, err
}

func (a *externalLocationsAPI) DeleteExternalLocation(ctx context.Context, request DeleteExternalLocationRequest) error {
	path := fmt.Sprintf("/api/2.1/unity-catalog/external-locations/%v", request.Name)
	err := a.client.Delete(ctx, path, request)
	return err
}

func (a *externalLocationsAPI) GetExternalLocation(ctx context.Context, request GetExternalLocationRequest) (*GetExternalLocationResponse, error) {
	var getExternalLocationResponse GetExternalLocationResponse
	path := fmt.Sprintf("/api/2.1/unity-catalog/external-locations/%v", request.Name)
	err := a.client.Get(ctx, path, request, &getExternalLocationResponse)
	return &getExternalLocationResponse, err
}

func (a *externalLocationsAPI) ListExternalLocations(ctx context.Context) (*ListExternalLocationsResponse, error) {
	var listExternalLocationsResponse ListExternalLocationsResponse
	path := "/api/2.1/unity-catalog/external-locations"
	err := a.client.Get(ctx, path, nil, &listExternalLocationsResponse)
	return &listExternalLocationsResponse, err
}

func (a *externalLocationsAPI) Update(ctx context.Context, request UpdateExternalLocation) error {
	path := fmt.Sprintf("/api/2.1/unity-catalog/external-locations/%v", request.Name)
	err := a.client.Patch(ctx, path, request)
	return err
}

func NewGrants(client *client.DatabricksClient) *GrantsAPI {
	return &GrantsAPI{
		GrantsService: &grantsAPI{
			client: client,
		},
	}
}

// In Unity Catalog, data is secure by default. Initially, users have no access
// to data in a metastore. Access can be granted by either a metastore admin,
// the owner of an object, or the owner of the catalog or schema that contains
// the object. Securable objects in Unity Catalog are hierarchical and
// privileges are inherited downward.
//
// Initially, users have no access to data in a metastore. Access can be granted
// by either a metastore admin, the owner of an object, or the owner of the
// catalog or schema that contains the object.
//
// Securable objects in Unity Catalog are hierarchical and privileges are
// inherited downward. This means that granting a privilege on the catalog
// automatically grants the privilege to all current and future objects within
// the catalog. Similarly, privileges granted on a schema are inherited by all
// current and future objects within that schema.
type GrantsAPI struct {
	// GrantsService contains low-level REST API interface.
	GrantsService
}

// Get permissions
//
// Gets the permissions for a Securable type.
func (a *GrantsAPI) GetPermissions(ctx context.Context, request GetPermissionsRequest) (*GetPermissionsResponse, error) {
	return a.GrantsService.GetPermissions(ctx, request)
}

// Get permissions
//
// Gets the permissions for a Securable type.
func (a *GrantsAPI) GetPermissionsBySecurableTypeAndFullName(ctx context.Context, securableType string, fullName string) (*GetPermissionsResponse, error) {
	return a.GetPermissions(ctx, GetPermissionsRequest{
		SecurableType: securableType,
		FullName:      fullName,
	})
}

// Update permissions
//
// Updates the permissions for a Securable type.
func (a *GrantsAPI) UpdatePermissions(ctx context.Context, request UpdatePermissions) error {
	return a.GrantsService.UpdatePermissions(ctx, request)
}

// unexported type that holds implementations of just Grants API methods
type grantsAPI struct {
	client *client.DatabricksClient
}

func (a *grantsAPI) GetPermissions(ctx context.Context, request GetPermissionsRequest) (*GetPermissionsResponse, error) {
	var getPermissionsResponse GetPermissionsResponse
	path := fmt.Sprintf("/api/2.1/unity-catalog/permissions/%v/%v", request.SecurableType, request.FullName)
	err := a.client.Get(ctx, path, request, &getPermissionsResponse)
	return &getPermissionsResponse, err
}

func (a *grantsAPI) UpdatePermissions(ctx context.Context, request UpdatePermissions) error {
	path := fmt.Sprintf("/api/2.1/unity-catalog/permissions/%v/%v", request.SecurableType, request.FullName)
	err := a.client.Patch(ctx, path, request)
	return err
}

func NewMetastores(client *client.DatabricksClient) *MetastoresAPI {
	return &MetastoresAPI{
		MetastoresService: &metastoresAPI{
			client: client,
		},
	}
}

// A metastore is the top-level container of objects in Unity Catalog. It stores
// data assets (tables and views) and the permissions that govern access to
// them. Databricks account admins can create metastores and assign them to
// Databricks workspaces to control which workloads use each metastore. For a
// workspace to use Unity Catalog, it must have a Unity Catalog metastore
// attached.
//
// Each metastore is configured with a root storage location in a cloud storage
// account. This storage location is used for metadata and managed tables data.
//
// NOTE: This metastore is distinct from the metastore included in Databricks
// workspaces created before Unity Catalog was released. If your workspace
// includes a legacy Hive metastore, the data in that metastore is available in
// Unity Catalog in a catalog named hive_metastore.
type MetastoresAPI struct {
	// MetastoresService contains low-level REST API interface.
	MetastoresService
}

// Create a Metastore
//
// Creates a new Metastore based on a provided name and storage root path.
func (a *MetastoresAPI) Create(ctx context.Context, request CreateMetastore) (*CreateMetastoreResponse, error) {
	return a.MetastoresService.Create(ctx, request)
}

// Create an assignment
//
// Creates a new Metastore assignment. If an assignment for the same
// __workspace_id__ exists, it will be overwritten by the new __metastore_id__
// and __default_catalog_name__. The caller must be an account admin.
func (a *MetastoresAPI) CreateMetastoreAssignment(ctx context.Context, request CreateMetastoreAssignment) error {
	return a.MetastoresService.CreateMetastoreAssignment(ctx, request)
}

// Delete a Metastore
//
// Deletes a Metastore. The caller must be a Metastore admin.
func (a *MetastoresAPI) DeleteMetastore(ctx context.Context, request DeleteMetastoreRequest) error {
	return a.MetastoresService.DeleteMetastore(ctx, request)
}

// Delete a Metastore
//
// Deletes a Metastore. The caller must be a Metastore admin.
func (a *MetastoresAPI) DeleteMetastoreById(ctx context.Context, id string) error {
	return a.DeleteMetastore(ctx, DeleteMetastoreRequest{
		Id: id,
	})
}

// Delete an assignment
//
// Deletes a Metastore assignment. The caller must be an account administrator.
func (a *MetastoresAPI) DeleteMetastoreAssignment(ctx context.Context, request DeleteMetastoreAssignmentRequest) error {
	return a.MetastoresService.DeleteMetastoreAssignment(ctx, request)
}

// Delete an assignment
//
// Deletes a Metastore assignment. The caller must be an account administrator.
func (a *MetastoresAPI) DeleteMetastoreAssignmentByWorkspaceId(ctx context.Context, workspaceId int) error {
	return a.DeleteMetastoreAssignment(ctx, DeleteMetastoreAssignmentRequest{
		WorkspaceId: workspaceId,
	})
}

// Get a Metastore
//
// Gets a Metastore that matches the supplied ID. The caller must be a Metastore
// admin to retrieve this info.
func (a *MetastoresAPI) GetMetastore(ctx context.Context, request GetMetastoreRequest) (*GetMetastoreResponse, error) {
	return a.MetastoresService.GetMetastore(ctx, request)
}

// Get a Metastore
//
// Gets a Metastore that matches the supplied ID. The caller must be a Metastore
// admin to retrieve this info.
func (a *MetastoresAPI) GetMetastoreById(ctx context.Context, id string) (*GetMetastoreResponse, error) {
	return a.GetMetastore(ctx, GetMetastoreRequest{
		Id: id,
	})
}

// Get a summary
//
// Gets information about a Metastore. This summary includes the storage
// credential, the cloud vendor, the cloud region, and the global Metastore ID.
func (a *MetastoresAPI) GetMetastoreSummary(ctx context.Context) (*GetMetastoreSummaryResponse, error) {
	return a.MetastoresService.GetMetastoreSummary(ctx)
}

// List Metastores
//
// Gets an array of the available Metastores (as MetastoreInfo objects). The
// caller must be an admin to retrieve this info.
//
// This method is generated by Databricks SDK Code Generator.
func (a *MetastoresAPI) ListMetastoresAll(ctx context.Context) ([]MetastoreInfo, error) {
	response, err := a.ListMetastores(ctx)
	if err != nil {
		return nil, err
	}
	return response.Metastores, nil
}

// Update a Metastore
//
// Updates information for a specific Metastore. The caller must be a Metastore
// admin.
func (a *MetastoresAPI) Update(ctx context.Context, request UpdateMetastore) error {
	return a.MetastoresService.Update(ctx, request)
}

// Update an assignment
//
// Updates a Metastore assignment. This operation can be used to update
// __metastore_id__ or __default_catalog_name__ for a specified Workspace, if
// the Workspace is already assigned a Metastore. The caller must be an account
// admin to update __metastore_id__; otherwise, the caller can be a Workspace
// admin.
func (a *MetastoresAPI) UpdateMetastoreAssignment(ctx context.Context, request UpdateMetastoreAssignment) error {
	return a.MetastoresService.UpdateMetastoreAssignment(ctx, request)
}

// unexported type that holds implementations of just Metastores API methods
type metastoresAPI struct {
	client *client.DatabricksClient
}

func (a *metastoresAPI) Create(ctx context.Context, request CreateMetastore) (*CreateMetastoreResponse, error) {
	var createMetastoreResponse CreateMetastoreResponse
	path := "/api/2.1/unity-catalog/metastores"
	err := a.client.Post(ctx, path, request, &createMetastoreResponse)
	return &createMetastoreResponse, err
}

func (a *metastoresAPI) CreateMetastoreAssignment(ctx context.Context, request CreateMetastoreAssignment) error {
	path := fmt.Sprintf("/api/2.1/unity-catalog/workspaces/%v/metastore", request.WorkspaceId)
	err := a.client.Put(ctx, path, request)
	return err
}

func (a *metastoresAPI) DeleteMetastore(ctx context.Context, request DeleteMetastoreRequest) error {
	path := fmt.Sprintf("/api/2.1/unity-catalog/metastores/%v", request.Id)
	err := a.client.Delete(ctx, path, request)
	return err
}

func (a *metastoresAPI) DeleteMetastoreAssignment(ctx context.Context, request DeleteMetastoreAssignmentRequest) error {
	path := fmt.Sprintf("/api/2.1/unity-catalog/workspaces/%v/metastore", request.WorkspaceId)
	err := a.client.Delete(ctx, path, request)
	return err
}

func (a *metastoresAPI) GetMetastore(ctx context.Context, request GetMetastoreRequest) (*GetMetastoreResponse, error) {
	var getMetastoreResponse GetMetastoreResponse
	path := fmt.Sprintf("/api/2.1/unity-catalog/metastores/%v", request.Id)
	err := a.client.Get(ctx, path, request, &getMetastoreResponse)
	return &getMetastoreResponse, err
}

func (a *metastoresAPI) GetMetastoreSummary(ctx context.Context) (*GetMetastoreSummaryResponse, error) {
	var getMetastoreSummaryResponse GetMetastoreSummaryResponse
	path := "/api/2.1/unity-catalog/metastore_summary"
	err := a.client.Get(ctx, path, nil, &getMetastoreSummaryResponse)
	return &getMetastoreSummaryResponse, err
}

func (a *metastoresAPI) ListMetastores(ctx context.Context) (*ListMetastoresResponse, error) {
	var listMetastoresResponse ListMetastoresResponse
	path := "/api/2.1/unity-catalog/metastores"
	err := a.client.Get(ctx, path, nil, &listMetastoresResponse)
	return &listMetastoresResponse, err
}

func (a *metastoresAPI) Update(ctx context.Context, request UpdateMetastore) error {
	path := fmt.Sprintf("/api/2.1/unity-catalog/metastores/%v", request.Id)
	err := a.client.Patch(ctx, path, request)
	return err
}

func (a *metastoresAPI) UpdateMetastoreAssignment(ctx context.Context, request UpdateMetastoreAssignment) error {
	path := fmt.Sprintf("/api/2.1/unity-catalog/workspaces/%v/metastore", request.WorkspaceId)
	err := a.client.Patch(ctx, path, request)
	return err
}

func NewProviders(client *client.DatabricksClient) *ProvidersAPI {
	return &ProvidersAPI{
		ProvidersService: &providersAPI{
			client: client,
		},
	}
}

// Databricks Delta Sharing: Providers REST API
type ProvidersAPI struct {
	// ProvidersService contains low-level REST API interface.
	ProvidersService
}

// Create an auth provider
//
// Creates a new authentication provider minimally based on a name and
// authentication type. The caller must be an admin on the Metastore.
func (a *ProvidersAPI) Create(ctx context.Context, request CreateProvider) (*CreateProviderResponse, error) {
	return a.ProvidersService.Create(ctx, request)
}

// Delete a provider
//
// Deletes an authentication provider, if the caller is a Metastore admin or is
// the owner of the provider.
func (a *ProvidersAPI) DeleteProvider(ctx context.Context, request DeleteProviderRequest) error {
	return a.ProvidersService.DeleteProvider(ctx, request)
}

// Delete a provider
//
// Deletes an authentication provider, if the caller is a Metastore admin or is
// the owner of the provider.
func (a *ProvidersAPI) DeleteProviderByName(ctx context.Context, name string) error {
	return a.DeleteProvider(ctx, DeleteProviderRequest{
		Name: name,
	})
}

// Get a provider
//
// Gets a specific authentication provider. The caller must supply the name of
// the provider, and must either be a Metastore admin or the owner of the
// provider.
func (a *ProvidersAPI) GetProvider(ctx context.Context, request GetProviderRequest) (*GetProviderResponse, error) {
	return a.ProvidersService.GetProvider(ctx, request)
}

// Get a provider
//
// Gets a specific authentication provider. The caller must supply the name of
// the provider, and must either be a Metastore admin or the owner of the
// provider.
func (a *ProvidersAPI) GetProviderByName(ctx context.Context, name string) (*GetProviderResponse, error) {
	return a.GetProvider(ctx, GetProviderRequest{
		Name: name,
	})
}

// List providers
//
// Gets an array of available authentication providers. The caller must either
// be a Metastore admin or the owner of the providers. Providers not owned by
// the caller are not included in the response.
//
// This method is generated by Databricks SDK Code Generator.
func (a *ProvidersAPI) ListProvidersAll(ctx context.Context, request ListProvidersRequest) ([]ProviderInfo, error) {
	response, err := a.ListProviders(ctx, request)
	if err != nil {
		return nil, err
	}
	return response.Providers, nil
}

// List shares
//
// Gets an array of all shares within the Metastore where:
//
// * the caller is a Metastore admin, or * the caller is the owner.
func (a *ProvidersAPI) ListShares(ctx context.Context, request ListSharesRequest) (*ListProviderSharesResponse, error) {
	return a.ProvidersService.ListShares(ctx, request)
}

// List shares
//
// Gets an array of all shares within the Metastore where:
//
// * the caller is a Metastore admin, or * the caller is the owner.
func (a *ProvidersAPI) ListSharesByName(ctx context.Context, name string) (*ListProviderSharesResponse, error) {
	return a.ListShares(ctx, ListSharesRequest{
		Name: name,
	})
}

// Update a provider
//
// Updates the information for an authentication provider, if the caller is a
// Metastore admin or is the owner of the provider. If the update changes the
// provider name, the caller must be both a Metastore admin and the owner of the
// provider.
func (a *ProvidersAPI) Update(ctx context.Context, request UpdateProvider) error {
	return a.ProvidersService.Update(ctx, request)
}

// unexported type that holds implementations of just Providers API methods
type providersAPI struct {
	client *client.DatabricksClient
}

func (a *providersAPI) Create(ctx context.Context, request CreateProvider) (*CreateProviderResponse, error) {
	var createProviderResponse CreateProviderResponse
	path := "/api/2.1/unity-catalog/providers"
	err := a.client.Post(ctx, path, request, &createProviderResponse)
	return &createProviderResponse, err
}

func (a *providersAPI) DeleteProvider(ctx context.Context, request DeleteProviderRequest) error {
	path := fmt.Sprintf("/api/2.1/unity-catalog/providers/%v", request.Name)
	err := a.client.Delete(ctx, path, request)
	return err
}

func (a *providersAPI) GetProvider(ctx context.Context, request GetProviderRequest) (*GetProviderResponse, error) {
	var getProviderResponse GetProviderResponse
	path := fmt.Sprintf("/api/2.1/unity-catalog/providers/%v", request.Name)
	err := a.client.Get(ctx, path, request, &getProviderResponse)
	return &getProviderResponse, err
}

func (a *providersAPI) ListProviders(ctx context.Context, request ListProvidersRequest) (*ListProvidersResponse, error) {
	var listProvidersResponse ListProvidersResponse
	path := "/api/2.1/unity-catalog/providers"
	err := a.client.Get(ctx, path, request, &listProvidersResponse)
	return &listProvidersResponse, err
}

func (a *providersAPI) ListShares(ctx context.Context, request ListSharesRequest) (*ListProviderSharesResponse, error) {
	var listProviderSharesResponse ListProviderSharesResponse
	path := fmt.Sprintf("/api/2.1/unity-catalog/providers/%v/shares", request.Name)
	err := a.client.Get(ctx, path, request, &listProviderSharesResponse)
	return &listProviderSharesResponse, err
}

func (a *providersAPI) Update(ctx context.Context, request UpdateProvider) error {
	path := fmt.Sprintf("/api/2.1/unity-catalog/providers/%v", request.Name)
	err := a.client.Patch(ctx, path, request)
	return err
}

func NewRecipientActivation(client *client.DatabricksClient) *RecipientActivationAPI {
	return &RecipientActivationAPI{
		RecipientActivationService: &recipientActivationAPI{
			client: client,
		},
	}
}

// Databricks Delta Sharing: Recipient Activation REST API
type RecipientActivationAPI struct {
	// RecipientActivationService contains low-level REST API interface.
	RecipientActivationService
}

// Get a share activation URL
//
// Gets information about an Activation URL.
func (a *RecipientActivationAPI) GetActivationUrlInfo(ctx context.Context, request GetActivationUrlInfoRequest) error {
	return a.RecipientActivationService.GetActivationUrlInfo(ctx, request)
}

// Get a share activation URL
//
// Gets information about an Activation URL.
func (a *RecipientActivationAPI) GetActivationUrlInfoByActivationUrl(ctx context.Context, activationUrl string) error {
	return a.GetActivationUrlInfo(ctx, GetActivationUrlInfoRequest{
		ActivationUrl: activationUrl,
	})
}

// Get an access token
//
// RPC to retrieve access token with an activation token. This is a public API
// without any authentication.
func (a *RecipientActivationAPI) RetrieveToken(ctx context.Context, request RetrieveTokenRequest) (*RetrieveTokenResponse, error) {
	return a.RecipientActivationService.RetrieveToken(ctx, request)
}

// Get an access token
//
// RPC to retrieve access token with an activation token. This is a public API
// without any authentication.
func (a *RecipientActivationAPI) RetrieveTokenByActivationUrl(ctx context.Context, activationUrl string) (*RetrieveTokenResponse, error) {
	return a.RetrieveToken(ctx, RetrieveTokenRequest{
		ActivationUrl: activationUrl,
	})
}

// unexported type that holds implementations of just RecipientActivation API methods
type recipientActivationAPI struct {
	client *client.DatabricksClient
}

func (a *recipientActivationAPI) GetActivationUrlInfo(ctx context.Context, request GetActivationUrlInfoRequest) error {
	path := fmt.Sprintf("/api/2.1/unity-catalog/public/data_sharing_activation_info/%v", request.ActivationUrl)
	err := a.client.Get(ctx, path, request, nil)
	return err
}

func (a *recipientActivationAPI) RetrieveToken(ctx context.Context, request RetrieveTokenRequest) (*RetrieveTokenResponse, error) {
	var retrieveTokenResponse RetrieveTokenResponse
	path := fmt.Sprintf("/api/2.1/unity-catalog/public/data_sharing_activation/%v", request.ActivationUrl)
	err := a.client.Get(ctx, path, request, &retrieveTokenResponse)
	return &retrieveTokenResponse, err
}

func NewRecipients(client *client.DatabricksClient) *RecipientsAPI {
	return &RecipientsAPI{
		RecipientsService: &recipientsAPI{
			client: client,
		},
	}
}

// Databricks Delta Sharing: Recipients REST API
type RecipientsAPI struct {
	// RecipientsService contains low-level REST API interface.
	RecipientsService
}

// Create a share recipient
//
// Creates a new recipient with the delta sharing authentication type in the
// Metastore. The caller must be a Metastore admin or has the CREATE RECIPIENT
// privilege on the Metastore.
func (a *RecipientsAPI) Create(ctx context.Context, request CreateRecipient) (*CreateRecipientResponse, error) {
	return a.RecipientsService.Create(ctx, request)
}

// Delete a share recipient
//
// Deletes the specified recipient from the Metastore. The caller must be the
// owner of the recipient.
func (a *RecipientsAPI) DeleteRecipient(ctx context.Context, request DeleteRecipientRequest) error {
	return a.RecipientsService.DeleteRecipient(ctx, request)
}

// Delete a share recipient
//
// Deletes the specified recipient from the Metastore. The caller must be the
// owner of the recipient.
func (a *RecipientsAPI) DeleteRecipientByName(ctx context.Context, name string) error {
	return a.DeleteRecipient(ctx, DeleteRecipientRequest{
		Name: name,
	})
}

// Get a share recipient
//
// Gets a share recipient from the Metastore if:
//
// * the caller is the owner of the share recipient, or: * is a Metastore admin
func (a *RecipientsAPI) GetRecipient(ctx context.Context, request GetRecipientRequest) (*GetRecipientResponse, error) {
	return a.RecipientsService.GetRecipient(ctx, request)
}

// Get a share recipient
//
// Gets a share recipient from the Metastore if:
//
// * the caller is the owner of the share recipient, or: * is a Metastore admin
func (a *RecipientsAPI) GetRecipientByName(ctx context.Context, name string) (*GetRecipientResponse, error) {
	return a.GetRecipient(ctx, GetRecipientRequest{
		Name: name,
	})
}

// Get share permissions
//
// Gets the share permissions for the specified Recipient. The caller must be a
// Metastore admin or the owner of the Recipient.
func (a *RecipientsAPI) GetRecipientSharePermissions(ctx context.Context, request GetRecipientSharePermissionsRequest) (*GetRecipientSharePermissionsResponse, error) {
	return a.RecipientsService.GetRecipientSharePermissions(ctx, request)
}

// Get share permissions
//
// Gets the share permissions for the specified Recipient. The caller must be a
// Metastore admin or the owner of the Recipient.
func (a *RecipientsAPI) GetRecipientSharePermissionsByName(ctx context.Context, name string) (*GetRecipientSharePermissionsResponse, error) {
	return a.GetRecipientSharePermissions(ctx, GetRecipientSharePermissionsRequest{
		Name: name,
	})
}

// List share recipients
//
// Gets an array of all share recipients within the current Metastore where:
//
// * the caller is a Metastore admin, or * the caller is the owner.
//
// This method is generated by Databricks SDK Code Generator.
func (a *RecipientsAPI) ListRecipientsAll(ctx context.Context, request ListRecipientsRequest) ([]RecipientInfo, error) {
	response, err := a.ListRecipients(ctx, request)
	if err != nil {
		return nil, err
	}
	return response.Recipients, nil
}

// Rotate a token
//
// Refreshes the specified recipient's delta sharing authentication token with
// the provided token info. The caller must be the owner of the recipient.
func (a *RecipientsAPI) RotateRecipientToken(ctx context.Context, request RotateRecipientToken) (*RotateRecipientTokenResponse, error) {
	return a.RecipientsService.RotateRecipientToken(ctx, request)
}

// Update a share recipient
//
// Updates an existing recipient in the Metastore. The caller must be a
// Metastore admin or the owner of the recipient. If the recipient name will be
// updated, the user must be both a Metastore admin and the owner of the
// recipient.
func (a *RecipientsAPI) Update(ctx context.Context, request UpdateRecipient) error {
	return a.RecipientsService.Update(ctx, request)
}

// unexported type that holds implementations of just Recipients API methods
type recipientsAPI struct {
	client *client.DatabricksClient
}

func (a *recipientsAPI) Create(ctx context.Context, request CreateRecipient) (*CreateRecipientResponse, error) {
	var createRecipientResponse CreateRecipientResponse
	path := "/api/2.1/unity-catalog/recipients"
	err := a.client.Post(ctx, path, request, &createRecipientResponse)
	return &createRecipientResponse, err
}

func (a *recipientsAPI) DeleteRecipient(ctx context.Context, request DeleteRecipientRequest) error {
	path := fmt.Sprintf("/api/2.1/unity-catalog/recipients/%v", request.Name)
	err := a.client.Delete(ctx, path, request)
	return err
}

func (a *recipientsAPI) GetRecipient(ctx context.Context, request GetRecipientRequest) (*GetRecipientResponse, error) {
	var getRecipientResponse GetRecipientResponse
	path := fmt.Sprintf("/api/2.1/unity-catalog/recipients/%v", request.Name)
	err := a.client.Get(ctx, path, request, &getRecipientResponse)
	return &getRecipientResponse, err
}

func (a *recipientsAPI) GetRecipientSharePermissions(ctx context.Context, request GetRecipientSharePermissionsRequest) (*GetRecipientSharePermissionsResponse, error) {
	var getRecipientSharePermissionsResponse GetRecipientSharePermissionsResponse
	path := fmt.Sprintf("/api/2.1/unity-catalog/recipients/%v/share-permissions", request.Name)
	err := a.client.Get(ctx, path, request, &getRecipientSharePermissionsResponse)
	return &getRecipientSharePermissionsResponse, err
}

func (a *recipientsAPI) ListRecipients(ctx context.Context, request ListRecipientsRequest) (*ListRecipientsResponse, error) {
	var listRecipientsResponse ListRecipientsResponse
	path := "/api/2.1/unity-catalog/recipients"
	err := a.client.Get(ctx, path, request, &listRecipientsResponse)
	return &listRecipientsResponse, err
}

func (a *recipientsAPI) RotateRecipientToken(ctx context.Context, request RotateRecipientToken) (*RotateRecipientTokenResponse, error) {
	var rotateRecipientTokenResponse RotateRecipientTokenResponse
	path := fmt.Sprintf("/api/2.1/unity-catalog/recipients/%v/rotate-token", request.Name)
	err := a.client.Post(ctx, path, request, &rotateRecipientTokenResponse)
	return &rotateRecipientTokenResponse, err
}

func (a *recipientsAPI) Update(ctx context.Context, request UpdateRecipient) error {
	path := fmt.Sprintf("/api/2.1/unity-catalog/recipients/%v", request.Name)
	err := a.client.Patch(ctx, path, request)
	return err
}

func NewSchemas(client *client.DatabricksClient) *SchemasAPI {
	return &SchemasAPI{
		SchemasService: &schemasAPI{
			client: client,
		},
	}
}

// A schema (also called a database) is the second layer of Unity Catalog’s
// three-level namespace. A schema organizes tables and views. To access (or
// list) a table or view in a schema, users must have the USAGE data permission
// on the schema and its parent catalog, and they must have the SELECT
// permission on the table or view.
type SchemasAPI struct {
	// SchemasService contains low-level REST API interface.
	SchemasService
}

// Create a schema
//
// Creates a new schema for catalog in the Metatastore. The caller must be a
// Metastore admin, or have the CREATE privilege in the parentcatalog.
func (a *SchemasAPI) Create(ctx context.Context, request CreateSchema) (*CreateSchemaResponse, error) {
	return a.SchemasService.Create(ctx, request)
}

// Delete a schema
//
// Deletes the specified schema from the parent catalog. The caller must be the
// owner of the schema or an owner of the parent catalog.
func (a *SchemasAPI) DeleteSchema(ctx context.Context, request DeleteSchemaRequest) error {
	return a.SchemasService.DeleteSchema(ctx, request)
}

// Delete a schema
//
// Deletes the specified schema from the parent catalog. The caller must be the
// owner of the schema or an owner of the parent catalog.
func (a *SchemasAPI) DeleteSchemaByFullName(ctx context.Context, fullName string) error {
	return a.DeleteSchema(ctx, DeleteSchemaRequest{
		FullName: fullName,
	})
}

// Get a schema
//
// Gets the specified schema for a catalog in the Metastore. The caller must be
// a Metastore admin, the owner of the schema, or a user that has the USAGE
// privilege on the schema.
func (a *SchemasAPI) GetSchema(ctx context.Context, request GetSchemaRequest) (*GetSchemaResponse, error) {
	return a.SchemasService.GetSchema(ctx, request)
}

// Get a schema
//
// Gets the specified schema for a catalog in the Metastore. The caller must be
// a Metastore admin, the owner of the schema, or a user that has the USAGE
// privilege on the schema.
func (a *SchemasAPI) GetSchemaByFullName(ctx context.Context, fullName string) (*GetSchemaResponse, error) {
	return a.GetSchema(ctx, GetSchemaRequest{
		FullName: fullName,
	})
}

// List schemas
//
// Gets an array of schemas for catalog in the Metastore. If the caller is the
// Metastore admin or the owner of the parent catalog, all schemas for the
// catalog will be retrieved. Otherwise, only schemas owned by the caller (or
// for which the caller has the USAGE privilege) will be retrieved.
//
// This method is generated by Databricks SDK Code Generator.
func (a *SchemasAPI) ListSchemasAll(ctx context.Context, request ListSchemasRequest) ([]SchemaInfo, error) {
	response, err := a.ListSchemas(ctx, request)
	if err != nil {
		return nil, err
	}
	return response.Schemas, nil
}

// Update a schema
//
// Updates a schema for a catalog. The caller must be the owner of the schema.
// If the caller is a Metastore admin, only the __owner__ field can be changed
// in the update. If the __name__ field must be updated, the caller must be a
// Metastore admin or have the CREATE privilege on the parent catalog.
func (a *SchemasAPI) Update(ctx context.Context, request UpdateSchema) error {
	return a.SchemasService.Update(ctx, request)
}

// unexported type that holds implementations of just Schemas API methods
type schemasAPI struct {
	client *client.DatabricksClient
}

func (a *schemasAPI) Create(ctx context.Context, request CreateSchema) (*CreateSchemaResponse, error) {
	var createSchemaResponse CreateSchemaResponse
	path := "/api/2.1/unity-catalog/schemas"
	err := a.client.Post(ctx, path, request, &createSchemaResponse)
	return &createSchemaResponse, err
}

func (a *schemasAPI) DeleteSchema(ctx context.Context, request DeleteSchemaRequest) error {
	path := fmt.Sprintf("/api/2.1/unity-catalog/schemas/%v", request.FullName)
	err := a.client.Delete(ctx, path, request)
	return err
}

func (a *schemasAPI) GetSchema(ctx context.Context, request GetSchemaRequest) (*GetSchemaResponse, error) {
	var getSchemaResponse GetSchemaResponse
	path := fmt.Sprintf("/api/2.1/unity-catalog/schemas/%v", request.FullName)
	err := a.client.Get(ctx, path, request, &getSchemaResponse)
	return &getSchemaResponse, err
}

func (a *schemasAPI) ListSchemas(ctx context.Context, request ListSchemasRequest) (*ListSchemasResponse, error) {
	var listSchemasResponse ListSchemasResponse
	path := "/api/2.1/unity-catalog/schemas"
	err := a.client.Get(ctx, path, request, &listSchemasResponse)
	return &listSchemasResponse, err
}

func (a *schemasAPI) Update(ctx context.Context, request UpdateSchema) error {
	path := fmt.Sprintf("/api/2.1/unity-catalog/schemas/%v", request.FullName)
	err := a.client.Patch(ctx, path, request)
	return err
}

func NewShares(client *client.DatabricksClient) *SharesAPI {
	return &SharesAPI{
		SharesService: &sharesAPI{
			client: client,
		},
	}
}

// Databricks Delta Sharing: Shares REST API
type SharesAPI struct {
	// SharesService contains low-level REST API interface.
	SharesService
}

// Create a share
//
// Creates a new share for data objects. Data objects can be added at this time
// or after creation with **update**. The caller must be a Metastore admin or
// have the CREATE SHARE privilege on the Metastore.
func (a *SharesAPI) Create(ctx context.Context, request CreateShare) (*CreateShareResponse, error) {
	return a.SharesService.Create(ctx, request)
}

// Delete a share
//
// Deletes a data object share from the Metastore. The caller must be an owner
// of the share.
func (a *SharesAPI) DeleteShare(ctx context.Context, request DeleteShareRequest) error {
	return a.SharesService.DeleteShare(ctx, request)
}

// Delete a share
//
// Deletes a data object share from the Metastore. The caller must be an owner
// of the share.
func (a *SharesAPI) DeleteShareByName(ctx context.Context, name string) error {
	return a.DeleteShare(ctx, DeleteShareRequest{
		Name: name,
	})
}

// Get a share
//
// Gets a data object share from the Metastore. The caller must be a Metastore
// admin or the owner of the share.
func (a *SharesAPI) GetShare(ctx context.Context, request GetShareRequest) (*GetShareResponse, error) {
	return a.SharesService.GetShare(ctx, request)
}

// Get a share
//
// Gets a data object share from the Metastore. The caller must be a Metastore
// admin or the owner of the share.
func (a *SharesAPI) GetShareByName(ctx context.Context, name string) (*GetShareResponse, error) {
	return a.GetShare(ctx, GetShareRequest{
		Name: name,
	})
}

// Get permissions
//
// Gets the permissions for a data share from the Metastore. The caller must be
// a Metastore admin or the owner of the share.
func (a *SharesAPI) GetSharePermissions(ctx context.Context, request GetSharePermissionsRequest) (*GetSharePermissionsResponse, error) {
	return a.SharesService.GetSharePermissions(ctx, request)
}

// Get permissions
//
// Gets the permissions for a data share from the Metastore. The caller must be
// a Metastore admin or the owner of the share.
func (a *SharesAPI) GetSharePermissionsByName(ctx context.Context, name string) (*GetSharePermissionsResponse, error) {
	return a.GetSharePermissions(ctx, GetSharePermissionsRequest{
		Name: name,
	})
}

// List shares
//
// Gets an array of data object shares from the Metastore. The caller must be a
// Metastore admin or the owner of the share.
//
// This method is generated by Databricks SDK Code Generator.
func (a *SharesAPI) ListSharesAll(ctx context.Context) ([]ShareInfo, error) {
	response, err := a.ListShares(ctx)
	if err != nil {
		return nil, err
	}
	return response.Shares, nil
}

// Update a share
//
// Updates the share with the changes and data objects in the request. The
// caller must be the owner of the share or a Metastore admin.
//
// When the caller is a Metastore admin, only the __owner__ field can be
// updated.
//
// In the case that the Share name is changed, **updateShare** requires that the
// caller is both the share owner and a Metastore admin.
//
// For each table that is added through this method, the share owner must also
// have SELECT privilege on the table. This privilege must be maintained
// indefinitely for recipients to be able to access the table. Typically, you
// should use a group as the share owner.
//
// Table removals through **update** do not require additional privileges.
func (a *SharesAPI) Update(ctx context.Context, request UpdateShare) error {
	return a.SharesService.Update(ctx, request)
}

// Update permissions
//
// Updates the permissions for a data share in the Metastore. The caller must be
// a Metastore admin or an owner of the share.
//
// For new recipient grants, the user must also be the owner of the recipients.
// recipient revocations do not require additional privileges.
func (a *SharesAPI) UpdateSharePermissions(ctx context.Context, request UpdateSharePermissions) error {
	return a.SharesService.UpdateSharePermissions(ctx, request)
}

// unexported type that holds implementations of just Shares API methods
type sharesAPI struct {
	client *client.DatabricksClient
}

func (a *sharesAPI) Create(ctx context.Context, request CreateShare) (*CreateShareResponse, error) {
	var createShareResponse CreateShareResponse
	path := "/api/2.1/unity-catalog/shares"
	err := a.client.Post(ctx, path, request, &createShareResponse)
	return &createShareResponse, err
}

func (a *sharesAPI) DeleteShare(ctx context.Context, request DeleteShareRequest) error {
	path := fmt.Sprintf("/api/2.1/unity-catalog/shares/%v", request.Name)
	err := a.client.Delete(ctx, path, request)
	return err
}

func (a *sharesAPI) GetShare(ctx context.Context, request GetShareRequest) (*GetShareResponse, error) {
	var getShareResponse GetShareResponse
	path := fmt.Sprintf("/api/2.1/unity-catalog/shares/%v", request.Name)
	err := a.client.Get(ctx, path, request, &getShareResponse)
	return &getShareResponse, err
}

func (a *sharesAPI) GetSharePermissions(ctx context.Context, request GetSharePermissionsRequest) (*GetSharePermissionsResponse, error) {
	var getSharePermissionsResponse GetSharePermissionsResponse
	path := fmt.Sprintf("/api/2.1/unity-catalog/shares/%v/permissions", request.Name)
	err := a.client.Get(ctx, path, request, &getSharePermissionsResponse)
	return &getSharePermissionsResponse, err
}

func (a *sharesAPI) ListShares(ctx context.Context) (*ListSharesResponse, error) {
	var listSharesResponse ListSharesResponse
	path := "/api/2.1/unity-catalog/shares"
	err := a.client.Get(ctx, path, nil, &listSharesResponse)
	return &listSharesResponse, err
}

func (a *sharesAPI) Update(ctx context.Context, request UpdateShare) error {
	path := fmt.Sprintf("/api/2.1/unity-catalog/shares/%v", request.Name)
	err := a.client.Patch(ctx, path, request)
	return err
}

func (a *sharesAPI) UpdateSharePermissions(ctx context.Context, request UpdateSharePermissions) error {
	path := fmt.Sprintf("/api/2.1/unity-catalog/shares/%v/permissions", request.Name)
	err := a.client.Patch(ctx, path, request)
	return err
}

func NewStorageCredentials(client *client.DatabricksClient) *StorageCredentialsAPI {
	return &StorageCredentialsAPI{
		StorageCredentialsService: &storageCredentialsAPI{
			client: client,
		},
	}
}

// A storage credential represents an authentication and authorization mechanism
// for accessing data stored on your cloud tenant, using an IAM role. Each
// storage credential is subject to Unity Catalog access-control policies that
// control which users and groups can access the credential. If a user does not
// have access to a storage credential in Unity Catalog, the request fails and
// Unity Catalog does not attempt to authenticate to your cloud tenant on the
// user’s behalf.
//
// Databricks recommends using external locations rather than using storage
// credentials directly.
//
// To create storage credentials, you must be a Databricks account admin. The
// account admin who creates the storage credential can delegate ownership to
// another user or group to manage permissions on it.
type StorageCredentialsAPI struct {
	// StorageCredentialsService contains low-level REST API interface.
	StorageCredentialsService
}

// Create credentials
//
// Creates a new storage credential. The request object is specific to the
// cloud:
//
// * **AwsIamRole** for AWS credentials * **AzureServicePrincipal** for Azure
// credentials * **GcpServiceAcountKey** for GCP credentials.
//
// The caller must be a Metastore admin and have the CREATE STORAGE CREDENTIAL
// privilege on the Metastore.
func (a *StorageCredentialsAPI) Create(ctx context.Context, request CreateStorageCredential) (*CreateStorageCredentialResponse, error) {
	return a.StorageCredentialsService.Create(ctx, request)
}

// Delete a credential
//
// Deletes a storage credential from the Metastore. The caller must be an owner
// of the storage credential.
func (a *StorageCredentialsAPI) DeleteStorageCredential(ctx context.Context, request DeleteStorageCredentialRequest) error {
	return a.StorageCredentialsService.DeleteStorageCredential(ctx, request)
}

// Delete a credential
//
// Deletes a storage credential from the Metastore. The caller must be an owner
// of the storage credential.
func (a *StorageCredentialsAPI) DeleteStorageCredentialByName(ctx context.Context, name string) error {
	return a.DeleteStorageCredential(ctx, DeleteStorageCredentialRequest{
		Name: name,
	})
}

// Get a credential
//
// Gets a storage credential from the Metastore. The caller must be a Metastore
// admin, the owner of the storage credential, or have a level of privilege on
// the storage credential.
func (a *StorageCredentialsAPI) GetStorageCredentials(ctx context.Context, request GetStorageCredentialsRequest) (*GetStorageCredentialResponse, error) {
	return a.StorageCredentialsService.GetStorageCredentials(ctx, request)
}

// Get a credential
//
// Gets a storage credential from the Metastore. The caller must be a Metastore
// admin, the owner of the storage credential, or have a level of privilege on
// the storage credential.
func (a *StorageCredentialsAPI) GetStorageCredentialsByName(ctx context.Context, name string) (*GetStorageCredentialResponse, error) {
	return a.GetStorageCredentials(ctx, GetStorageCredentialsRequest{
		Name: name,
	})
}

// List credentials
//
// Gets an array of storage credentials (as StorageCredentialInfo objects). The
// array is limited to only those storage credentials the caller has the
// privilege level to access. If the caller is a Metastore admin, all storage
// credentials will be retrieved.
//
// This method is generated by Databricks SDK Code Generator.
func (a *StorageCredentialsAPI) ListStorageCredentialsAll(ctx context.Context) ([]StorageCredentialInfo, error) {
	response, err := a.ListStorageCredentials(ctx)
	if err != nil {
		return nil, err
	}
	return response.StorageCredentials, nil
}

// Update a credential
//
// Updates a storage credential on the Metastore. The caller must be the owner
// of the storage credential. If the caller is a Metastore admin, only the
// __owner__ credential can be changed.
func (a *StorageCredentialsAPI) Update(ctx context.Context, request UpdateStorageCredential) error {
	return a.StorageCredentialsService.Update(ctx, request)
}

// unexported type that holds implementations of just StorageCredentials API methods
type storageCredentialsAPI struct {
	client *client.DatabricksClient
}

func (a *storageCredentialsAPI) Create(ctx context.Context, request CreateStorageCredential) (*CreateStorageCredentialResponse, error) {
	var createStorageCredentialResponse CreateStorageCredentialResponse
	path := "/api/2.1/unity-catalog/storage-credentials"
	err := a.client.Post(ctx, path, request, &createStorageCredentialResponse)
	return &createStorageCredentialResponse, err
}

func (a *storageCredentialsAPI) DeleteStorageCredential(ctx context.Context, request DeleteStorageCredentialRequest) error {
	path := fmt.Sprintf("/api/2.1/unity-catalog/storage-credentials/%v", request.Name)
	err := a.client.Delete(ctx, path, request)
	return err
}

func (a *storageCredentialsAPI) GetStorageCredentials(ctx context.Context, request GetStorageCredentialsRequest) (*GetStorageCredentialResponse, error) {
	var getStorageCredentialResponse GetStorageCredentialResponse
	path := fmt.Sprintf("/api/2.1/unity-catalog/storage-credentials/%v", request.Name)
	err := a.client.Get(ctx, path, request, &getStorageCredentialResponse)
	return &getStorageCredentialResponse, err
}

func (a *storageCredentialsAPI) ListStorageCredentials(ctx context.Context) (*ListStorageCredentialsResponse, error) {
	var listStorageCredentialsResponse ListStorageCredentialsResponse
	path := "/api/2.1/unity-catalog/storage-credentials"
	err := a.client.Get(ctx, path, nil, &listStorageCredentialsResponse)
	return &listStorageCredentialsResponse, err
}

func (a *storageCredentialsAPI) Update(ctx context.Context, request UpdateStorageCredential) error {
	path := fmt.Sprintf("/api/2.1/unity-catalog/storage-credentials/%v", request.Name)
	err := a.client.Patch(ctx, path, request)
	return err
}

func NewTables(client *client.DatabricksClient) *TablesAPI {
	return &TablesAPI{
		TablesService: &tablesAPI{
			client: client,
		},
	}
}

// A table resides in the third layer of Unity Catalog’s three-level
// namespace. It contains rows of data. To create a table, users must have
// CREATE and USAGE permissions on the schema, and they must have the USAGE
// permission on its parent catalog. To query a table, users must have the
// SELECT permission on the table, and they must have the USAGE permission on
// its parent schema and catalog.
//
// A table can be managed or external.
type TablesAPI struct {
	// TablesService contains low-level REST API interface.
	TablesService
}

// Create a table
//
// Creates a new table in the Metastore for a specific catalog and schema.
// **WARNING**: Do not use this API at this time.
//
// The caller must be the owner of or have the USAGE privilege for both the
// parent catalog and schema, or be the owner of the parent schema (or have the
// CREATE privilege on it).
//
// If the new table has a __table_type__ of EXTERNAL specified, the user must be
// a Metastore admin or meet the permissions requirements of the storage
// credential or the external location.
func (a *TablesAPI) Create(ctx context.Context, request CreateTable) (*CreateTableResponse, error) {
	return a.TablesService.Create(ctx, request)
}

// Create a staging table
//
// Creates a new staging table for a schema. The caller must have both the USAGE
// privilege on the parent Catalog and the USAGE and CREATE privileges on the
// parent schema.
func (a *TablesAPI) CreateStagingTable(ctx context.Context, request CreateStagingTable) (*CreateStagingTableResponse, error) {
	return a.TablesService.CreateStagingTable(ctx, request)
}

// Delete a table
//
// Deletes a table from the specified parent catalog and schema. The caller must
// be the owner of the parent catalog, have the USAGE privilege on the parent
// catalog and be the owner of the parent schema, or be the owner of the table
// and have the USAGE privilege on both the parent catalog and schema.
func (a *TablesAPI) DeleteTable(ctx context.Context, request DeleteTableRequest) error {
	return a.TablesService.DeleteTable(ctx, request)
}

// Delete a table
//
// Deletes a table from the specified parent catalog and schema. The caller must
// be the owner of the parent catalog, have the USAGE privilege on the parent
// catalog and be the owner of the parent schema, or be the owner of the table
// and have the USAGE privilege on both the parent catalog and schema.
func (a *TablesAPI) DeleteTableByFullName(ctx context.Context, fullName string) error {
	return a.DeleteTable(ctx, DeleteTableRequest{
		FullName: fullName,
	})
}

// Get a table
//
// Gets a table from the Metastore for a specific catalog and schema. The caller
// must be a Metastore admin, be the owner of the table and have the USAGE
// privilege on both the parent catalog and schema, or be the owner of the table
// and have the SELECT privilege on it as well.
func (a *TablesAPI) GetTable(ctx context.Context, request GetTableRequest) (*GetTableResponse, error) {
	return a.TablesService.GetTable(ctx, request)
}

// Get a table
//
// Gets a table from the Metastore for a specific catalog and schema. The caller
// must be a Metastore admin, be the owner of the table and have the USAGE
// privilege on both the parent catalog and schema, or be the owner of the table
// and have the SELECT privilege on it as well.
func (a *TablesAPI) GetTableByFullName(ctx context.Context, fullName string) (*GetTableResponse, error) {
	return a.GetTable(ctx, GetTableRequest{
		FullName: fullName,
	})
}

// List table summaries
//
// Gets an array of summaries for tables for a schema and catalog within the
// Metastore. The table summaries returned are either:
//
// * summaries for all tables (within the current Metastore and parent catalog
// and schema), when the user is a Metastore admin, or: * summaries for all
// tables and schemas (within the current Metastore and parent catalog) for
// which the user has ownership or the SELECT privilege on the Table and
// ownership or USAGE privilege on the Schema, provided that the user also has
// ownership or the USAGE privilege on the parent Catalog
func (a *TablesAPI) ListTableSummaries(ctx context.Context, request ListTableSummariesRequest) (*ListTableSummariesResponse, error) {
	return a.TablesService.ListTableSummaries(ctx, request)
}

// List tables
//
// Gets an array of all tables for the current Metastore under the parent
// catalog and schema. The caller must be a Metastore admin or an owner of (or
// have the SELECT privilege on) the table. For the latter case, the caller must
// also be the owner or have the USAGE privilege on the parent catalog and
// schema.
//
// This method is generated by Databricks SDK Code Generator.
func (a *TablesAPI) ListTablesAll(ctx context.Context, request ListTablesRequest) ([]TableInfo, error) {
	response, err := a.ListTables(ctx, request)
	if err != nil {
		return nil, err
	}
	return response.Tables, nil
}

// Update a table
//
// Updates a table in the specified catalog and schema. The caller must be the
// owner of have the USAGE privilege on the parent catalog and schema, or, if
// changing the owner, be a Metastore admin as well.
func (a *TablesAPI) Update(ctx context.Context, request UpdateTable) error {
	return a.TablesService.Update(ctx, request)
}

// unexported type that holds implementations of just Tables API methods
type tablesAPI struct {
	client *client.DatabricksClient
}

func (a *tablesAPI) Create(ctx context.Context, request CreateTable) (*CreateTableResponse, error) {
	var createTableResponse CreateTableResponse
	path := "/api/2.1/unity-catalog/tables"
	err := a.client.Post(ctx, path, request, &createTableResponse)
	return &createTableResponse, err
}

func (a *tablesAPI) CreateStagingTable(ctx context.Context, request CreateStagingTable) (*CreateStagingTableResponse, error) {
	var createStagingTableResponse CreateStagingTableResponse
	path := "/api/2.1/unity-catalog/staging-tables"
	err := a.client.Post(ctx, path, request, &createStagingTableResponse)
	return &createStagingTableResponse, err
}

func (a *tablesAPI) DeleteTable(ctx context.Context, request DeleteTableRequest) error {
	path := fmt.Sprintf("/api/2.1/unity-catalog/tables/%v", request.FullName)
	err := a.client.Delete(ctx, path, request)
	return err
}

func (a *tablesAPI) GetTable(ctx context.Context, request GetTableRequest) (*GetTableResponse, error) {
	var getTableResponse GetTableResponse
	path := fmt.Sprintf("/api/2.1/unity-catalog/tables/%v", request.FullName)
	err := a.client.Get(ctx, path, request, &getTableResponse)
	return &getTableResponse, err
}

func (a *tablesAPI) ListTableSummaries(ctx context.Context, request ListTableSummariesRequest) (*ListTableSummariesResponse, error) {
	var listTableSummariesResponse ListTableSummariesResponse
	path := "/api/2.1/unity-catalog/table-summaries"
	err := a.client.Get(ctx, path, request, &listTableSummariesResponse)
	return &listTableSummariesResponse, err
}

func (a *tablesAPI) ListTables(ctx context.Context, request ListTablesRequest) (*ListTablesResponse, error) {
	var listTablesResponse ListTablesResponse
	path := "/api/2.1/unity-catalog/tables"
	err := a.client.Get(ctx, path, request, &listTablesResponse)
	return &listTablesResponse, err
}

func (a *tablesAPI) Update(ctx context.Context, request UpdateTable) error {
	path := fmt.Sprintf("/api/2.1/unity-catalog/tables/%v", request.FullName)
	err := a.client.Patch(ctx, path, request)
	return err
}

func NewUnityFiles(client *client.DatabricksClient) *UnityFilesAPI {
	return &UnityFilesAPI{
		UnityFilesService: &unityFilesAPI{
			client: client,
		},
	}
}

// Databricks Unity Catalog: Files REST API
type UnityFilesAPI struct {
	// UnityFilesService contains low-level REST API interface.
	UnityFilesService
}

// List files
//
// List the files sound at the supplied URL.
func (a *UnityFilesAPI) ListFiles(ctx context.Context, request ListFilesRequest) (*ListFilesResponse, error) {
	return a.UnityFilesService.ListFiles(ctx, request)
}

// unexported type that holds implementations of just UnityFiles API methods
type unityFilesAPI struct {
	client *client.DatabricksClient
}

func (a *unityFilesAPI) ListFiles(ctx context.Context, request ListFilesRequest) (*ListFilesResponse, error) {
	var listFilesResponse ListFilesResponse
	path := "/api/2.1/unity-catalog/files"
	err := a.client.Get(ctx, path, request, &listFilesResponse)
	return &listFilesResponse, err
}
