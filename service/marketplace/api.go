// Code generated from OpenAPI specs by Databricks SDK Generator. DO NOT EDIT.

// These APIs allow you to manage Consumer Fulfillments, Consumer Installations, Consumer Listings, Consumer Personalization Requests, Consumer Providers, Provider Exchange Filters, Provider Exchanges, Provider Files, Provider Listings, Provider Personalization Requests, Provider Provider Analytics Dashboards, Provider Providers, etc.
package marketplace

import (
	"context"
	"fmt"

	"github.com/databricks/databricks-sdk-go/client"
	"github.com/databricks/databricks-sdk-go/listing"
	"github.com/databricks/databricks-sdk-go/useragent"
)

type ConsumerFulfillmentsInterface interface {
	// WithImpl could be used to override low-level API implementations for unit
	// testing purposes with [github.com/golang/mock] or other mocking frameworks.
	// Deprecated: use MockConsumerFulfillmentsInterface instead.
	WithImpl(impl ConsumerFulfillmentsService) ConsumerFulfillmentsInterface

	// Impl returns low-level ConsumerFulfillments API implementation
	// Deprecated: use MockConsumerFulfillmentsInterface instead.
	Impl() ConsumerFulfillmentsService

	// Get listing content metadata.
	//
	// Get a high level preview of the metadata of listing installable content.
	//
	// This method is generated by Databricks SDK Code Generator.
	Get(ctx context.Context, request GetListingContentMetadataRequest) listing.Iterator[SharedDataObject]

	// Get listing content metadata.
	//
	// Get a high level preview of the metadata of listing installable content.
	//
	// This method is generated by Databricks SDK Code Generator.
	GetAll(ctx context.Context, request GetListingContentMetadataRequest) ([]SharedDataObject, error)

	// Get listing content metadata.
	//
	// Get a high level preview of the metadata of listing installable content.
	GetByListingId(ctx context.Context, listingId string) (*GetListingContentMetadataResponse, error)

	// List all listing fulfillments.
	//
	// Get all listings fulfillments associated with a listing. A _fulfillment_ is a
	// potential installation. Standard installations contain metadata about the
	// attached share or git repo. Only one of these fields will be present.
	// Personalized installations contain metadata about the attached share or git
	// repo, as well as the Delta Sharing recipient type.
	//
	// This method is generated by Databricks SDK Code Generator.
	List(ctx context.Context, request ListFulfillmentsRequest) listing.Iterator[ListingFulfillment]

	// List all listing fulfillments.
	//
	// Get all listings fulfillments associated with a listing. A _fulfillment_ is a
	// potential installation. Standard installations contain metadata about the
	// attached share or git repo. Only one of these fields will be present.
	// Personalized installations contain metadata about the attached share or git
	// repo, as well as the Delta Sharing recipient type.
	//
	// This method is generated by Databricks SDK Code Generator.
	ListAll(ctx context.Context, request ListFulfillmentsRequest) ([]ListingFulfillment, error)

	// List all listing fulfillments.
	//
	// Get all listings fulfillments associated with a listing. A _fulfillment_ is a
	// potential installation. Standard installations contain metadata about the
	// attached share or git repo. Only one of these fields will be present.
	// Personalized installations contain metadata about the attached share or git
	// repo, as well as the Delta Sharing recipient type.
	ListByListingId(ctx context.Context, listingId string) (*ListFulfillmentsResponse, error)
}

func NewConsumerFulfillments(client *client.DatabricksClient) *ConsumerFulfillmentsAPI {
	return &ConsumerFulfillmentsAPI{
		impl: &consumerFulfillmentsImpl{
			client: client,
		},
	}
}

// Fulfillments are entities that allow consumers to preview installations.
type ConsumerFulfillmentsAPI struct {
	// impl contains low-level REST API interface, that could be overridden
	// through WithImpl(ConsumerFulfillmentsService)
	impl ConsumerFulfillmentsService
}

// WithImpl could be used to override low-level API implementations for unit
// testing purposes with [github.com/golang/mock] or other mocking frameworks.
// Deprecated: use MockConsumerFulfillmentsInterface instead.
func (a *ConsumerFulfillmentsAPI) WithImpl(impl ConsumerFulfillmentsService) ConsumerFulfillmentsInterface {
	a.impl = impl
	return a
}

// Impl returns low-level ConsumerFulfillments API implementation
// Deprecated: use MockConsumerFulfillmentsInterface instead.
func (a *ConsumerFulfillmentsAPI) Impl() ConsumerFulfillmentsService {
	return a.impl
}

// Get listing content metadata.
//
// Get a high level preview of the metadata of listing installable content.
//
// This method is generated by Databricks SDK Code Generator.
func (a *ConsumerFulfillmentsAPI) Get(ctx context.Context, request GetListingContentMetadataRequest) listing.Iterator[SharedDataObject] {

	getNextPage := func(ctx context.Context, req GetListingContentMetadataRequest) (*GetListingContentMetadataResponse, error) {
		ctx = useragent.InContext(ctx, "sdk-feature", "pagination")
		return a.impl.Get(ctx, req)
	}
	getItems := func(resp *GetListingContentMetadataResponse) []SharedDataObject {
		return resp.SharedDataObjects
	}
	getNextReq := func(resp *GetListingContentMetadataResponse) *GetListingContentMetadataRequest {
		if resp.NextPageToken == "" {
			return nil
		}
		request.PageToken = resp.NextPageToken
		return &request
	}
	iterator := listing.NewIterator(
		&request,
		getNextPage,
		getItems,
		getNextReq)
	return iterator
}

// Get listing content metadata.
//
// Get a high level preview of the metadata of listing installable content.
//
// This method is generated by Databricks SDK Code Generator.
func (a *ConsumerFulfillmentsAPI) GetAll(ctx context.Context, request GetListingContentMetadataRequest) ([]SharedDataObject, error) {
	iterator := a.Get(ctx, request)
	return listing.ToSlice[SharedDataObject](ctx, iterator)
}

// Get listing content metadata.
//
// Get a high level preview of the metadata of listing installable content.
func (a *ConsumerFulfillmentsAPI) GetByListingId(ctx context.Context, listingId string) (*GetListingContentMetadataResponse, error) {
	return a.impl.Get(ctx, GetListingContentMetadataRequest{
		ListingId: listingId,
	})
}

// List all listing fulfillments.
//
// Get all listings fulfillments associated with a listing. A _fulfillment_ is a
// potential installation. Standard installations contain metadata about the
// attached share or git repo. Only one of these fields will be present.
// Personalized installations contain metadata about the attached share or git
// repo, as well as the Delta Sharing recipient type.
//
// This method is generated by Databricks SDK Code Generator.
func (a *ConsumerFulfillmentsAPI) List(ctx context.Context, request ListFulfillmentsRequest) listing.Iterator[ListingFulfillment] {

	getNextPage := func(ctx context.Context, req ListFulfillmentsRequest) (*ListFulfillmentsResponse, error) {
		ctx = useragent.InContext(ctx, "sdk-feature", "pagination")
		return a.impl.List(ctx, req)
	}
	getItems := func(resp *ListFulfillmentsResponse) []ListingFulfillment {
		return resp.Fulfillments
	}
	getNextReq := func(resp *ListFulfillmentsResponse) *ListFulfillmentsRequest {
		if resp.NextPageToken == "" {
			return nil
		}
		request.PageToken = resp.NextPageToken
		return &request
	}
	iterator := listing.NewIterator(
		&request,
		getNextPage,
		getItems,
		getNextReq)
	return iterator
}

// List all listing fulfillments.
//
// Get all listings fulfillments associated with a listing. A _fulfillment_ is a
// potential installation. Standard installations contain metadata about the
// attached share or git repo. Only one of these fields will be present.
// Personalized installations contain metadata about the attached share or git
// repo, as well as the Delta Sharing recipient type.
//
// This method is generated by Databricks SDK Code Generator.
func (a *ConsumerFulfillmentsAPI) ListAll(ctx context.Context, request ListFulfillmentsRequest) ([]ListingFulfillment, error) {
	iterator := a.List(ctx, request)
	return listing.ToSlice[ListingFulfillment](ctx, iterator)
}

// List all listing fulfillments.
//
// Get all listings fulfillments associated with a listing. A _fulfillment_ is a
// potential installation. Standard installations contain metadata about the
// attached share or git repo. Only one of these fields will be present.
// Personalized installations contain metadata about the attached share or git
// repo, as well as the Delta Sharing recipient type.
func (a *ConsumerFulfillmentsAPI) ListByListingId(ctx context.Context, listingId string) (*ListFulfillmentsResponse, error) {
	return a.impl.List(ctx, ListFulfillmentsRequest{
		ListingId: listingId,
	})
}

type ConsumerInstallationsInterface interface {
	// WithImpl could be used to override low-level API implementations for unit
	// testing purposes with [github.com/golang/mock] or other mocking frameworks.
	// Deprecated: use MockConsumerInstallationsInterface instead.
	WithImpl(impl ConsumerInstallationsService) ConsumerInstallationsInterface

	// Impl returns low-level ConsumerInstallations API implementation
	// Deprecated: use MockConsumerInstallationsInterface instead.
	Impl() ConsumerInstallationsService

	// Install from a listing.
	//
	// Install payload associated with a Databricks Marketplace listing.
	Create(ctx context.Context, request CreateInstallationRequest) (*Installation, error)

	// Uninstall from a listing.
	//
	// Uninstall an installation associated with a Databricks Marketplace listing.
	Delete(ctx context.Context, request DeleteInstallationRequest) error

	// Uninstall from a listing.
	//
	// Uninstall an installation associated with a Databricks Marketplace listing.
	DeleteByListingIdAndInstallationId(ctx context.Context, listingId string, installationId string) error

	// List all installations.
	//
	// List all installations across all listings.
	//
	// This method is generated by Databricks SDK Code Generator.
	List(ctx context.Context, request ListAllInstallationsRequest) listing.Iterator[InstallationDetail]

	// List all installations.
	//
	// List all installations across all listings.
	//
	// This method is generated by Databricks SDK Code Generator.
	ListAll(ctx context.Context, request ListAllInstallationsRequest) ([]InstallationDetail, error)

	// List installations for a listing.
	//
	// List all installations for a particular listing.
	//
	// This method is generated by Databricks SDK Code Generator.
	ListListingInstallations(ctx context.Context, request ListInstallationsRequest) listing.Iterator[InstallationDetail]

	// List installations for a listing.
	//
	// List all installations for a particular listing.
	//
	// This method is generated by Databricks SDK Code Generator.
	ListListingInstallationsAll(ctx context.Context, request ListInstallationsRequest) ([]InstallationDetail, error)

	// List installations for a listing.
	//
	// List all installations for a particular listing.
	ListListingInstallationsByListingId(ctx context.Context, listingId string) (*ListInstallationsResponse, error)

	// Update an installation.
	//
	// This is a update API that will update the part of the fields defined in the
	// installation table as well as interact with external services according to
	// the fields not included in the installation table 1. the token will be rotate
	// if the rotateToken flag is true 2. the token will be forcibly rotate if the
	// rotateToken flag is true and the tokenInfo field is empty
	Update(ctx context.Context, request UpdateInstallationRequest) (*UpdateInstallationResponse, error)
}

func NewConsumerInstallations(client *client.DatabricksClient) *ConsumerInstallationsAPI {
	return &ConsumerInstallationsAPI{
		impl: &consumerInstallationsImpl{
			client: client,
		},
	}
}

// Installations are entities that allow consumers to interact with Databricks
// Marketplace listings.
type ConsumerInstallationsAPI struct {
	// impl contains low-level REST API interface, that could be overridden
	// through WithImpl(ConsumerInstallationsService)
	impl ConsumerInstallationsService
}

// WithImpl could be used to override low-level API implementations for unit
// testing purposes with [github.com/golang/mock] or other mocking frameworks.
// Deprecated: use MockConsumerInstallationsInterface instead.
func (a *ConsumerInstallationsAPI) WithImpl(impl ConsumerInstallationsService) ConsumerInstallationsInterface {
	a.impl = impl
	return a
}

// Impl returns low-level ConsumerInstallations API implementation
// Deprecated: use MockConsumerInstallationsInterface instead.
func (a *ConsumerInstallationsAPI) Impl() ConsumerInstallationsService {
	return a.impl
}

// Install from a listing.
//
// Install payload associated with a Databricks Marketplace listing.
func (a *ConsumerInstallationsAPI) Create(ctx context.Context, request CreateInstallationRequest) (*Installation, error) {
	return a.impl.Create(ctx, request)
}

// Uninstall from a listing.
//
// Uninstall an installation associated with a Databricks Marketplace listing.
func (a *ConsumerInstallationsAPI) Delete(ctx context.Context, request DeleteInstallationRequest) error {
	return a.impl.Delete(ctx, request)
}

// Uninstall from a listing.
//
// Uninstall an installation associated with a Databricks Marketplace listing.
func (a *ConsumerInstallationsAPI) DeleteByListingIdAndInstallationId(ctx context.Context, listingId string, installationId string) error {
	return a.impl.Delete(ctx, DeleteInstallationRequest{
		ListingId:      listingId,
		InstallationId: installationId,
	})
}

// List all installations.
//
// List all installations across all listings.
//
// This method is generated by Databricks SDK Code Generator.
func (a *ConsumerInstallationsAPI) List(ctx context.Context, request ListAllInstallationsRequest) listing.Iterator[InstallationDetail] {

	getNextPage := func(ctx context.Context, req ListAllInstallationsRequest) (*ListAllInstallationsResponse, error) {
		ctx = useragent.InContext(ctx, "sdk-feature", "pagination")
		return a.impl.List(ctx, req)
	}
	getItems := func(resp *ListAllInstallationsResponse) []InstallationDetail {
		return resp.Installations
	}
	getNextReq := func(resp *ListAllInstallationsResponse) *ListAllInstallationsRequest {
		if resp.NextPageToken == "" {
			return nil
		}
		request.PageToken = resp.NextPageToken
		return &request
	}
	iterator := listing.NewIterator(
		&request,
		getNextPage,
		getItems,
		getNextReq)
	return iterator
}

// List all installations.
//
// List all installations across all listings.
//
// This method is generated by Databricks SDK Code Generator.
func (a *ConsumerInstallationsAPI) ListAll(ctx context.Context, request ListAllInstallationsRequest) ([]InstallationDetail, error) {
	iterator := a.List(ctx, request)
	return listing.ToSlice[InstallationDetail](ctx, iterator)
}

// List installations for a listing.
//
// List all installations for a particular listing.
//
// This method is generated by Databricks SDK Code Generator.
func (a *ConsumerInstallationsAPI) ListListingInstallations(ctx context.Context, request ListInstallationsRequest) listing.Iterator[InstallationDetail] {

	getNextPage := func(ctx context.Context, req ListInstallationsRequest) (*ListInstallationsResponse, error) {
		ctx = useragent.InContext(ctx, "sdk-feature", "pagination")
		return a.impl.ListListingInstallations(ctx, req)
	}
	getItems := func(resp *ListInstallationsResponse) []InstallationDetail {
		return resp.Installations
	}
	getNextReq := func(resp *ListInstallationsResponse) *ListInstallationsRequest {
		if resp.NextPageToken == "" {
			return nil
		}
		request.PageToken = resp.NextPageToken
		return &request
	}
	iterator := listing.NewIterator(
		&request,
		getNextPage,
		getItems,
		getNextReq)
	return iterator
}

// List installations for a listing.
//
// List all installations for a particular listing.
//
// This method is generated by Databricks SDK Code Generator.
func (a *ConsumerInstallationsAPI) ListListingInstallationsAll(ctx context.Context, request ListInstallationsRequest) ([]InstallationDetail, error) {
	iterator := a.ListListingInstallations(ctx, request)
	return listing.ToSlice[InstallationDetail](ctx, iterator)
}

// List installations for a listing.
//
// List all installations for a particular listing.
func (a *ConsumerInstallationsAPI) ListListingInstallationsByListingId(ctx context.Context, listingId string) (*ListInstallationsResponse, error) {
	return a.impl.ListListingInstallations(ctx, ListInstallationsRequest{
		ListingId: listingId,
	})
}

// Update an installation.
//
// This is a update API that will update the part of the fields defined in the
// installation table as well as interact with external services according to
// the fields not included in the installation table 1. the token will be rotate
// if the rotateToken flag is true 2. the token will be forcibly rotate if the
// rotateToken flag is true and the tokenInfo field is empty
func (a *ConsumerInstallationsAPI) Update(ctx context.Context, request UpdateInstallationRequest) (*UpdateInstallationResponse, error) {
	return a.impl.Update(ctx, request)
}

type ConsumerListingsInterface interface {
	// WithImpl could be used to override low-level API implementations for unit
	// testing purposes with [github.com/golang/mock] or other mocking frameworks.
	// Deprecated: use MockConsumerListingsInterface instead.
	WithImpl(impl ConsumerListingsService) ConsumerListingsInterface

	// Impl returns low-level ConsumerListings API implementation
	// Deprecated: use MockConsumerListingsInterface instead.
	Impl() ConsumerListingsService

	// Get one batch of listings. One may specify up to 50 IDs per request.
	//
	// Batch get a published listing in the Databricks Marketplace that the consumer
	// has access to.
	BatchGet(ctx context.Context, request BatchGetListingsRequest) (*BatchGetListingsResponse, error)

	// Get listing.
	//
	// Get a published listing in the Databricks Marketplace that the consumer has
	// access to.
	Get(ctx context.Context, request GetListingRequest) (*GetListingResponse, error)

	// Get listing.
	//
	// Get a published listing in the Databricks Marketplace that the consumer has
	// access to.
	GetById(ctx context.Context, id string) (*GetListingResponse, error)

	// List listings.
	//
	// List all published listings in the Databricks Marketplace that the consumer
	// has access to.
	//
	// This method is generated by Databricks SDK Code Generator.
	List(ctx context.Context, request ListListingsRequest) listing.Iterator[Listing]

	// List listings.
	//
	// List all published listings in the Databricks Marketplace that the consumer
	// has access to.
	//
	// This method is generated by Databricks SDK Code Generator.
	ListAll(ctx context.Context, request ListListingsRequest) ([]Listing, error)

	// ListingSummaryNameToIdMap calls [ConsumerListingsAPI.ListAll] and creates a map of results with [Listing].Summary.Name as key and [Listing].Id as value.
	//
	// Returns an error if there's more than one [Listing] with the same .Summary.Name.
	//
	// Note: All [Listing] instances are loaded into memory before creating a map.
	//
	// This method is generated by Databricks SDK Code Generator.
	ListingSummaryNameToIdMap(ctx context.Context, request ListListingsRequest) (map[string]string, error)

	// GetBySummaryName calls [ConsumerListingsAPI.ListingSummaryNameToIdMap] and returns a single [Listing].
	//
	// Returns an error if there's more than one [Listing] with the same .Summary.Name.
	//
	// Note: All [Listing] instances are loaded into memory before returning matching by name.
	//
	// This method is generated by Databricks SDK Code Generator.
	GetBySummaryName(ctx context.Context, name string) (*Listing, error)

	// Search listings.
	//
	// Search published listings in the Databricks Marketplace that the consumer has
	// access to. This query supports a variety of different search parameters and
	// performs fuzzy matching.
	//
	// This method is generated by Databricks SDK Code Generator.
	Search(ctx context.Context, request SearchListingsRequest) listing.Iterator[Listing]

	// Search listings.
	//
	// Search published listings in the Databricks Marketplace that the consumer has
	// access to. This query supports a variety of different search parameters and
	// performs fuzzy matching.
	//
	// This method is generated by Databricks SDK Code Generator.
	SearchAll(ctx context.Context, request SearchListingsRequest) ([]Listing, error)
}

func NewConsumerListings(client *client.DatabricksClient) *ConsumerListingsAPI {
	return &ConsumerListingsAPI{
		impl: &consumerListingsImpl{
			client: client,
		},
	}
}

// Listings are the core entities in the Marketplace. They represent the
// products that are available for consumption.
type ConsumerListingsAPI struct {
	// impl contains low-level REST API interface, that could be overridden
	// through WithImpl(ConsumerListingsService)
	impl ConsumerListingsService
}

// WithImpl could be used to override low-level API implementations for unit
// testing purposes with [github.com/golang/mock] or other mocking frameworks.
// Deprecated: use MockConsumerListingsInterface instead.
func (a *ConsumerListingsAPI) WithImpl(impl ConsumerListingsService) ConsumerListingsInterface {
	a.impl = impl
	return a
}

// Impl returns low-level ConsumerListings API implementation
// Deprecated: use MockConsumerListingsInterface instead.
func (a *ConsumerListingsAPI) Impl() ConsumerListingsService {
	return a.impl
}

// Get one batch of listings. One may specify up to 50 IDs per request.
//
// Batch get a published listing in the Databricks Marketplace that the consumer
// has access to.
func (a *ConsumerListingsAPI) BatchGet(ctx context.Context, request BatchGetListingsRequest) (*BatchGetListingsResponse, error) {
	return a.impl.BatchGet(ctx, request)
}

// Get listing.
//
// Get a published listing in the Databricks Marketplace that the consumer has
// access to.
func (a *ConsumerListingsAPI) Get(ctx context.Context, request GetListingRequest) (*GetListingResponse, error) {
	return a.impl.Get(ctx, request)
}

// Get listing.
//
// Get a published listing in the Databricks Marketplace that the consumer has
// access to.
func (a *ConsumerListingsAPI) GetById(ctx context.Context, id string) (*GetListingResponse, error) {
	return a.impl.Get(ctx, GetListingRequest{
		Id: id,
	})
}

// List listings.
//
// List all published listings in the Databricks Marketplace that the consumer
// has access to.
//
// This method is generated by Databricks SDK Code Generator.
func (a *ConsumerListingsAPI) List(ctx context.Context, request ListListingsRequest) listing.Iterator[Listing] {

	getNextPage := func(ctx context.Context, req ListListingsRequest) (*ListListingsResponse, error) {
		ctx = useragent.InContext(ctx, "sdk-feature", "pagination")
		return a.impl.List(ctx, req)
	}
	getItems := func(resp *ListListingsResponse) []Listing {
		return resp.Listings
	}
	getNextReq := func(resp *ListListingsResponse) *ListListingsRequest {
		if resp.NextPageToken == "" {
			return nil
		}
		request.PageToken = resp.NextPageToken
		return &request
	}
	iterator := listing.NewIterator(
		&request,
		getNextPage,
		getItems,
		getNextReq)
	return iterator
}

// List listings.
//
// List all published listings in the Databricks Marketplace that the consumer
// has access to.
//
// This method is generated by Databricks SDK Code Generator.
func (a *ConsumerListingsAPI) ListAll(ctx context.Context, request ListListingsRequest) ([]Listing, error) {
	iterator := a.List(ctx, request)
	return listing.ToSlice[Listing](ctx, iterator)
}

// ListingSummaryNameToIdMap calls [ConsumerListingsAPI.ListAll] and creates a map of results with [Listing].Summary.Name as key and [Listing].Id as value.
//
// Returns an error if there's more than one [Listing] with the same .Summary.Name.
//
// Note: All [Listing] instances are loaded into memory before creating a map.
//
// This method is generated by Databricks SDK Code Generator.
func (a *ConsumerListingsAPI) ListingSummaryNameToIdMap(ctx context.Context, request ListListingsRequest) (map[string]string, error) {
	ctx = useragent.InContext(ctx, "sdk-feature", "name-to-id")
	mapping := map[string]string{}
	result, err := a.ListAll(ctx, request)
	if err != nil {
		return nil, err
	}
	for _, v := range result {
		key := v.Summary.Name
		_, duplicate := mapping[key]
		if duplicate {
			return nil, fmt.Errorf("duplicate .Summary.Name: %s", key)
		}
		mapping[key] = v.Id
	}
	return mapping, nil
}

// GetBySummaryName calls [ConsumerListingsAPI.ListingSummaryNameToIdMap] and returns a single [Listing].
//
// Returns an error if there's more than one [Listing] with the same .Summary.Name.
//
// Note: All [Listing] instances are loaded into memory before returning matching by name.
//
// This method is generated by Databricks SDK Code Generator.
func (a *ConsumerListingsAPI) GetBySummaryName(ctx context.Context, name string) (*Listing, error) {
	ctx = useragent.InContext(ctx, "sdk-feature", "get-by-name")
	result, err := a.ListAll(ctx, ListListingsRequest{})
	if err != nil {
		return nil, err
	}
	tmp := map[string][]Listing{}
	for _, v := range result {
		key := v.Summary.Name
		tmp[key] = append(tmp[key], v)
	}
	alternatives, ok := tmp[name]
	if !ok || len(alternatives) == 0 {
		return nil, fmt.Errorf("Listing named '%s' does not exist", name)
	}
	if len(alternatives) > 1 {
		return nil, fmt.Errorf("there are %d instances of Listing named '%s'", len(alternatives), name)
	}
	return &alternatives[0], nil
}

// Search listings.
//
// Search published listings in the Databricks Marketplace that the consumer has
// access to. This query supports a variety of different search parameters and
// performs fuzzy matching.
//
// This method is generated by Databricks SDK Code Generator.
func (a *ConsumerListingsAPI) Search(ctx context.Context, request SearchListingsRequest) listing.Iterator[Listing] {

	getNextPage := func(ctx context.Context, req SearchListingsRequest) (*SearchListingsResponse, error) {
		ctx = useragent.InContext(ctx, "sdk-feature", "pagination")
		return a.impl.Search(ctx, req)
	}
	getItems := func(resp *SearchListingsResponse) []Listing {
		return resp.Listings
	}
	getNextReq := func(resp *SearchListingsResponse) *SearchListingsRequest {
		if resp.NextPageToken == "" {
			return nil
		}
		request.PageToken = resp.NextPageToken
		return &request
	}
	iterator := listing.NewIterator(
		&request,
		getNextPage,
		getItems,
		getNextReq)
	return iterator
}

// Search listings.
//
// Search published listings in the Databricks Marketplace that the consumer has
// access to. This query supports a variety of different search parameters and
// performs fuzzy matching.
//
// This method is generated by Databricks SDK Code Generator.
func (a *ConsumerListingsAPI) SearchAll(ctx context.Context, request SearchListingsRequest) ([]Listing, error) {
	iterator := a.Search(ctx, request)
	return listing.ToSlice[Listing](ctx, iterator)
}

type ConsumerPersonalizationRequestsInterface interface {
	// WithImpl could be used to override low-level API implementations for unit
	// testing purposes with [github.com/golang/mock] or other mocking frameworks.
	// Deprecated: use MockConsumerPersonalizationRequestsInterface instead.
	WithImpl(impl ConsumerPersonalizationRequestsService) ConsumerPersonalizationRequestsInterface

	// Impl returns low-level ConsumerPersonalizationRequests API implementation
	// Deprecated: use MockConsumerPersonalizationRequestsInterface instead.
	Impl() ConsumerPersonalizationRequestsService

	// Create a personalization request.
	//
	// Create a personalization request for a listing.
	Create(ctx context.Context, request CreatePersonalizationRequest) (*CreatePersonalizationRequestResponse, error)

	// Get the personalization request for a listing.
	//
	// Get the personalization request for a listing. Each consumer can make at
	// *most* one personalization request for a listing.
	Get(ctx context.Context, request GetPersonalizationRequestRequest) (*GetPersonalizationRequestResponse, error)

	// Get the personalization request for a listing.
	//
	// Get the personalization request for a listing. Each consumer can make at
	// *most* one personalization request for a listing.
	GetByListingId(ctx context.Context, listingId string) (*GetPersonalizationRequestResponse, error)

	// List all personalization requests.
	//
	// List personalization requests for a consumer across all listings.
	//
	// This method is generated by Databricks SDK Code Generator.
	List(ctx context.Context, request ListAllPersonalizationRequestsRequest) listing.Iterator[PersonalizationRequest]

	// List all personalization requests.
	//
	// List personalization requests for a consumer across all listings.
	//
	// This method is generated by Databricks SDK Code Generator.
	ListAll(ctx context.Context, request ListAllPersonalizationRequestsRequest) ([]PersonalizationRequest, error)
}

func NewConsumerPersonalizationRequests(client *client.DatabricksClient) *ConsumerPersonalizationRequestsAPI {
	return &ConsumerPersonalizationRequestsAPI{
		impl: &consumerPersonalizationRequestsImpl{
			client: client,
		},
	}
}

// Personalization Requests allow customers to interact with the individualized
// Marketplace listing flow.
type ConsumerPersonalizationRequestsAPI struct {
	// impl contains low-level REST API interface, that could be overridden
	// through WithImpl(ConsumerPersonalizationRequestsService)
	impl ConsumerPersonalizationRequestsService
}

// WithImpl could be used to override low-level API implementations for unit
// testing purposes with [github.com/golang/mock] or other mocking frameworks.
// Deprecated: use MockConsumerPersonalizationRequestsInterface instead.
func (a *ConsumerPersonalizationRequestsAPI) WithImpl(impl ConsumerPersonalizationRequestsService) ConsumerPersonalizationRequestsInterface {
	a.impl = impl
	return a
}

// Impl returns low-level ConsumerPersonalizationRequests API implementation
// Deprecated: use MockConsumerPersonalizationRequestsInterface instead.
func (a *ConsumerPersonalizationRequestsAPI) Impl() ConsumerPersonalizationRequestsService {
	return a.impl
}

// Create a personalization request.
//
// Create a personalization request for a listing.
func (a *ConsumerPersonalizationRequestsAPI) Create(ctx context.Context, request CreatePersonalizationRequest) (*CreatePersonalizationRequestResponse, error) {
	return a.impl.Create(ctx, request)
}

// Get the personalization request for a listing.
//
// Get the personalization request for a listing. Each consumer can make at
// *most* one personalization request for a listing.
func (a *ConsumerPersonalizationRequestsAPI) Get(ctx context.Context, request GetPersonalizationRequestRequest) (*GetPersonalizationRequestResponse, error) {
	return a.impl.Get(ctx, request)
}

// Get the personalization request for a listing.
//
// Get the personalization request for a listing. Each consumer can make at
// *most* one personalization request for a listing.
func (a *ConsumerPersonalizationRequestsAPI) GetByListingId(ctx context.Context, listingId string) (*GetPersonalizationRequestResponse, error) {
	return a.impl.Get(ctx, GetPersonalizationRequestRequest{
		ListingId: listingId,
	})
}

// List all personalization requests.
//
// List personalization requests for a consumer across all listings.
//
// This method is generated by Databricks SDK Code Generator.
func (a *ConsumerPersonalizationRequestsAPI) List(ctx context.Context, request ListAllPersonalizationRequestsRequest) listing.Iterator[PersonalizationRequest] {

	getNextPage := func(ctx context.Context, req ListAllPersonalizationRequestsRequest) (*ListAllPersonalizationRequestsResponse, error) {
		ctx = useragent.InContext(ctx, "sdk-feature", "pagination")
		return a.impl.List(ctx, req)
	}
	getItems := func(resp *ListAllPersonalizationRequestsResponse) []PersonalizationRequest {
		return resp.PersonalizationRequests
	}
	getNextReq := func(resp *ListAllPersonalizationRequestsResponse) *ListAllPersonalizationRequestsRequest {
		if resp.NextPageToken == "" {
			return nil
		}
		request.PageToken = resp.NextPageToken
		return &request
	}
	iterator := listing.NewIterator(
		&request,
		getNextPage,
		getItems,
		getNextReq)
	return iterator
}

// List all personalization requests.
//
// List personalization requests for a consumer across all listings.
//
// This method is generated by Databricks SDK Code Generator.
func (a *ConsumerPersonalizationRequestsAPI) ListAll(ctx context.Context, request ListAllPersonalizationRequestsRequest) ([]PersonalizationRequest, error) {
	iterator := a.List(ctx, request)
	return listing.ToSlice[PersonalizationRequest](ctx, iterator)
}

type ConsumerProvidersInterface interface {
	// WithImpl could be used to override low-level API implementations for unit
	// testing purposes with [github.com/golang/mock] or other mocking frameworks.
	// Deprecated: use MockConsumerProvidersInterface instead.
	WithImpl(impl ConsumerProvidersService) ConsumerProvidersInterface

	// Impl returns low-level ConsumerProviders API implementation
	// Deprecated: use MockConsumerProvidersInterface instead.
	Impl() ConsumerProvidersService

	// Get one batch of providers. One may specify up to 50 IDs per request.
	//
	// Batch get a provider in the Databricks Marketplace with at least one visible
	// listing.
	BatchGet(ctx context.Context, request BatchGetProvidersRequest) (*BatchGetProvidersResponse, error)

	// Get a provider.
	//
	// Get a provider in the Databricks Marketplace with at least one visible
	// listing.
	Get(ctx context.Context, request GetProviderRequest) (*GetProviderResponse, error)

	// Get a provider.
	//
	// Get a provider in the Databricks Marketplace with at least one visible
	// listing.
	GetById(ctx context.Context, id string) (*GetProviderResponse, error)

	// List providers.
	//
	// List all providers in the Databricks Marketplace with at least one visible
	// listing.
	//
	// This method is generated by Databricks SDK Code Generator.
	List(ctx context.Context, request ListProvidersRequest) listing.Iterator[ProviderInfo]

	// List providers.
	//
	// List all providers in the Databricks Marketplace with at least one visible
	// listing.
	//
	// This method is generated by Databricks SDK Code Generator.
	ListAll(ctx context.Context, request ListProvidersRequest) ([]ProviderInfo, error)

	// ProviderInfoNameToIdMap calls [ConsumerProvidersAPI.ListAll] and creates a map of results with [ProviderInfo].Name as key and [ProviderInfo].Id as value.
	//
	// Returns an error if there's more than one [ProviderInfo] with the same .Name.
	//
	// Note: All [ProviderInfo] instances are loaded into memory before creating a map.
	//
	// This method is generated by Databricks SDK Code Generator.
	ProviderInfoNameToIdMap(ctx context.Context, request ListProvidersRequest) (map[string]string, error)

	// GetByName calls [ConsumerProvidersAPI.ProviderInfoNameToIdMap] and returns a single [ProviderInfo].
	//
	// Returns an error if there's more than one [ProviderInfo] with the same .Name.
	//
	// Note: All [ProviderInfo] instances are loaded into memory before returning matching by name.
	//
	// This method is generated by Databricks SDK Code Generator.
	GetByName(ctx context.Context, name string) (*ProviderInfo, error)
}

func NewConsumerProviders(client *client.DatabricksClient) *ConsumerProvidersAPI {
	return &ConsumerProvidersAPI{
		impl: &consumerProvidersImpl{
			client: client,
		},
	}
}

// Providers are the entities that publish listings to the Marketplace.
type ConsumerProvidersAPI struct {
	// impl contains low-level REST API interface, that could be overridden
	// through WithImpl(ConsumerProvidersService)
	impl ConsumerProvidersService
}

// WithImpl could be used to override low-level API implementations for unit
// testing purposes with [github.com/golang/mock] or other mocking frameworks.
// Deprecated: use MockConsumerProvidersInterface instead.
func (a *ConsumerProvidersAPI) WithImpl(impl ConsumerProvidersService) ConsumerProvidersInterface {
	a.impl = impl
	return a
}

// Impl returns low-level ConsumerProviders API implementation
// Deprecated: use MockConsumerProvidersInterface instead.
func (a *ConsumerProvidersAPI) Impl() ConsumerProvidersService {
	return a.impl
}

// Get one batch of providers. One may specify up to 50 IDs per request.
//
// Batch get a provider in the Databricks Marketplace with at least one visible
// listing.
func (a *ConsumerProvidersAPI) BatchGet(ctx context.Context, request BatchGetProvidersRequest) (*BatchGetProvidersResponse, error) {
	return a.impl.BatchGet(ctx, request)
}

// Get a provider.
//
// Get a provider in the Databricks Marketplace with at least one visible
// listing.
func (a *ConsumerProvidersAPI) Get(ctx context.Context, request GetProviderRequest) (*GetProviderResponse, error) {
	return a.impl.Get(ctx, request)
}

// Get a provider.
//
// Get a provider in the Databricks Marketplace with at least one visible
// listing.
func (a *ConsumerProvidersAPI) GetById(ctx context.Context, id string) (*GetProviderResponse, error) {
	return a.impl.Get(ctx, GetProviderRequest{
		Id: id,
	})
}

// List providers.
//
// List all providers in the Databricks Marketplace with at least one visible
// listing.
//
// This method is generated by Databricks SDK Code Generator.
func (a *ConsumerProvidersAPI) List(ctx context.Context, request ListProvidersRequest) listing.Iterator[ProviderInfo] {

	getNextPage := func(ctx context.Context, req ListProvidersRequest) (*ListProvidersResponse, error) {
		ctx = useragent.InContext(ctx, "sdk-feature", "pagination")
		return a.impl.List(ctx, req)
	}
	getItems := func(resp *ListProvidersResponse) []ProviderInfo {
		return resp.Providers
	}
	getNextReq := func(resp *ListProvidersResponse) *ListProvidersRequest {
		if resp.NextPageToken == "" {
			return nil
		}
		request.PageToken = resp.NextPageToken
		return &request
	}
	iterator := listing.NewIterator(
		&request,
		getNextPage,
		getItems,
		getNextReq)
	return iterator
}

// List providers.
//
// List all providers in the Databricks Marketplace with at least one visible
// listing.
//
// This method is generated by Databricks SDK Code Generator.
func (a *ConsumerProvidersAPI) ListAll(ctx context.Context, request ListProvidersRequest) ([]ProviderInfo, error) {
	iterator := a.List(ctx, request)
	return listing.ToSlice[ProviderInfo](ctx, iterator)
}

// ProviderInfoNameToIdMap calls [ConsumerProvidersAPI.ListAll] and creates a map of results with [ProviderInfo].Name as key and [ProviderInfo].Id as value.
//
// Returns an error if there's more than one [ProviderInfo] with the same .Name.
//
// Note: All [ProviderInfo] instances are loaded into memory before creating a map.
//
// This method is generated by Databricks SDK Code Generator.
func (a *ConsumerProvidersAPI) ProviderInfoNameToIdMap(ctx context.Context, request ListProvidersRequest) (map[string]string, error) {
	ctx = useragent.InContext(ctx, "sdk-feature", "name-to-id")
	mapping := map[string]string{}
	result, err := a.ListAll(ctx, request)
	if err != nil {
		return nil, err
	}
	for _, v := range result {
		key := v.Name
		_, duplicate := mapping[key]
		if duplicate {
			return nil, fmt.Errorf("duplicate .Name: %s", key)
		}
		mapping[key] = v.Id
	}
	return mapping, nil
}

// GetByName calls [ConsumerProvidersAPI.ProviderInfoNameToIdMap] and returns a single [ProviderInfo].
//
// Returns an error if there's more than one [ProviderInfo] with the same .Name.
//
// Note: All [ProviderInfo] instances are loaded into memory before returning matching by name.
//
// This method is generated by Databricks SDK Code Generator.
func (a *ConsumerProvidersAPI) GetByName(ctx context.Context, name string) (*ProviderInfo, error) {
	ctx = useragent.InContext(ctx, "sdk-feature", "get-by-name")
	result, err := a.ListAll(ctx, ListProvidersRequest{})
	if err != nil {
		return nil, err
	}
	tmp := map[string][]ProviderInfo{}
	for _, v := range result {
		key := v.Name
		tmp[key] = append(tmp[key], v)
	}
	alternatives, ok := tmp[name]
	if !ok || len(alternatives) == 0 {
		return nil, fmt.Errorf("ProviderInfo named '%s' does not exist", name)
	}
	if len(alternatives) > 1 {
		return nil, fmt.Errorf("there are %d instances of ProviderInfo named '%s'", len(alternatives), name)
	}
	return &alternatives[0], nil
}

type ProviderExchangeFiltersInterface interface {
	// WithImpl could be used to override low-level API implementations for unit
	// testing purposes with [github.com/golang/mock] or other mocking frameworks.
	// Deprecated: use MockProviderExchangeFiltersInterface instead.
	WithImpl(impl ProviderExchangeFiltersService) ProviderExchangeFiltersInterface

	// Impl returns low-level ProviderExchangeFilters API implementation
	// Deprecated: use MockProviderExchangeFiltersInterface instead.
	Impl() ProviderExchangeFiltersService

	// Create a new exchange filter.
	//
	// Add an exchange filter.
	Create(ctx context.Context, request CreateExchangeFilterRequest) (*CreateExchangeFilterResponse, error)

	// Delete an exchange filter.
	//
	// Delete an exchange filter
	Delete(ctx context.Context, request DeleteExchangeFilterRequest) error

	// Delete an exchange filter.
	//
	// Delete an exchange filter
	DeleteById(ctx context.Context, id string) error

	// List exchange filters.
	//
	// List exchange filter
	//
	// This method is generated by Databricks SDK Code Generator.
	List(ctx context.Context, request ListExchangeFiltersRequest) listing.Iterator[ExchangeFilter]

	// List exchange filters.
	//
	// List exchange filter
	//
	// This method is generated by Databricks SDK Code Generator.
	ListAll(ctx context.Context, request ListExchangeFiltersRequest) ([]ExchangeFilter, error)

	// ExchangeFilterNameToIdMap calls [ProviderExchangeFiltersAPI.ListAll] and creates a map of results with [ExchangeFilter].Name as key and [ExchangeFilter].Id as value.
	//
	// Returns an error if there's more than one [ExchangeFilter] with the same .Name.
	//
	// Note: All [ExchangeFilter] instances are loaded into memory before creating a map.
	//
	// This method is generated by Databricks SDK Code Generator.
	ExchangeFilterNameToIdMap(ctx context.Context, request ListExchangeFiltersRequest) (map[string]string, error)

	// GetByName calls [ProviderExchangeFiltersAPI.ExchangeFilterNameToIdMap] and returns a single [ExchangeFilter].
	//
	// Returns an error if there's more than one [ExchangeFilter] with the same .Name.
	//
	// Note: All [ExchangeFilter] instances are loaded into memory before returning matching by name.
	//
	// This method is generated by Databricks SDK Code Generator.
	GetByName(ctx context.Context, name string) (*ExchangeFilter, error)

	// Update exchange filter.
	//
	// Update an exchange filter.
	Update(ctx context.Context, request UpdateExchangeFilterRequest) (*UpdateExchangeFilterResponse, error)
}

func NewProviderExchangeFilters(client *client.DatabricksClient) *ProviderExchangeFiltersAPI {
	return &ProviderExchangeFiltersAPI{
		impl: &providerExchangeFiltersImpl{
			client: client,
		},
	}
}

// Marketplace exchanges filters curate which groups can access an exchange.
type ProviderExchangeFiltersAPI struct {
	// impl contains low-level REST API interface, that could be overridden
	// through WithImpl(ProviderExchangeFiltersService)
	impl ProviderExchangeFiltersService
}

// WithImpl could be used to override low-level API implementations for unit
// testing purposes with [github.com/golang/mock] or other mocking frameworks.
// Deprecated: use MockProviderExchangeFiltersInterface instead.
func (a *ProviderExchangeFiltersAPI) WithImpl(impl ProviderExchangeFiltersService) ProviderExchangeFiltersInterface {
	a.impl = impl
	return a
}

// Impl returns low-level ProviderExchangeFilters API implementation
// Deprecated: use MockProviderExchangeFiltersInterface instead.
func (a *ProviderExchangeFiltersAPI) Impl() ProviderExchangeFiltersService {
	return a.impl
}

// Create a new exchange filter.
//
// Add an exchange filter.
func (a *ProviderExchangeFiltersAPI) Create(ctx context.Context, request CreateExchangeFilterRequest) (*CreateExchangeFilterResponse, error) {
	return a.impl.Create(ctx, request)
}

// Delete an exchange filter.
//
// Delete an exchange filter
func (a *ProviderExchangeFiltersAPI) Delete(ctx context.Context, request DeleteExchangeFilterRequest) error {
	return a.impl.Delete(ctx, request)
}

// Delete an exchange filter.
//
// Delete an exchange filter
func (a *ProviderExchangeFiltersAPI) DeleteById(ctx context.Context, id string) error {
	return a.impl.Delete(ctx, DeleteExchangeFilterRequest{
		Id: id,
	})
}

// List exchange filters.
//
// # List exchange filter
//
// This method is generated by Databricks SDK Code Generator.
func (a *ProviderExchangeFiltersAPI) List(ctx context.Context, request ListExchangeFiltersRequest) listing.Iterator[ExchangeFilter] {

	getNextPage := func(ctx context.Context, req ListExchangeFiltersRequest) (*ListExchangeFiltersResponse, error) {
		ctx = useragent.InContext(ctx, "sdk-feature", "pagination")
		return a.impl.List(ctx, req)
	}
	getItems := func(resp *ListExchangeFiltersResponse) []ExchangeFilter {
		return resp.Filters
	}
	getNextReq := func(resp *ListExchangeFiltersResponse) *ListExchangeFiltersRequest {
		if resp.NextPageToken == "" {
			return nil
		}
		request.PageToken = resp.NextPageToken
		return &request
	}
	iterator := listing.NewIterator(
		&request,
		getNextPage,
		getItems,
		getNextReq)
	return iterator
}

// List exchange filters.
//
// # List exchange filter
//
// This method is generated by Databricks SDK Code Generator.
func (a *ProviderExchangeFiltersAPI) ListAll(ctx context.Context, request ListExchangeFiltersRequest) ([]ExchangeFilter, error) {
	iterator := a.List(ctx, request)
	return listing.ToSlice[ExchangeFilter](ctx, iterator)
}

// ExchangeFilterNameToIdMap calls [ProviderExchangeFiltersAPI.ListAll] and creates a map of results with [ExchangeFilter].Name as key and [ExchangeFilter].Id as value.
//
// Returns an error if there's more than one [ExchangeFilter] with the same .Name.
//
// Note: All [ExchangeFilter] instances are loaded into memory before creating a map.
//
// This method is generated by Databricks SDK Code Generator.
func (a *ProviderExchangeFiltersAPI) ExchangeFilterNameToIdMap(ctx context.Context, request ListExchangeFiltersRequest) (map[string]string, error) {
	ctx = useragent.InContext(ctx, "sdk-feature", "name-to-id")
	mapping := map[string]string{}
	result, err := a.ListAll(ctx, request)
	if err != nil {
		return nil, err
	}
	for _, v := range result {
		key := v.Name
		_, duplicate := mapping[key]
		if duplicate {
			return nil, fmt.Errorf("duplicate .Name: %s", key)
		}
		mapping[key] = v.Id
	}
	return mapping, nil
}

// GetByName calls [ProviderExchangeFiltersAPI.ExchangeFilterNameToIdMap] and returns a single [ExchangeFilter].
//
// Returns an error if there's more than one [ExchangeFilter] with the same .Name.
//
// Note: All [ExchangeFilter] instances are loaded into memory before returning matching by name.
//
// This method is generated by Databricks SDK Code Generator.
func (a *ProviderExchangeFiltersAPI) GetByName(ctx context.Context, name string) (*ExchangeFilter, error) {
	ctx = useragent.InContext(ctx, "sdk-feature", "get-by-name")
	result, err := a.ListAll(ctx, ListExchangeFiltersRequest{})
	if err != nil {
		return nil, err
	}
	tmp := map[string][]ExchangeFilter{}
	for _, v := range result {
		key := v.Name
		tmp[key] = append(tmp[key], v)
	}
	alternatives, ok := tmp[name]
	if !ok || len(alternatives) == 0 {
		return nil, fmt.Errorf("ExchangeFilter named '%s' does not exist", name)
	}
	if len(alternatives) > 1 {
		return nil, fmt.Errorf("there are %d instances of ExchangeFilter named '%s'", len(alternatives), name)
	}
	return &alternatives[0], nil
}

// Update exchange filter.
//
// Update an exchange filter.
func (a *ProviderExchangeFiltersAPI) Update(ctx context.Context, request UpdateExchangeFilterRequest) (*UpdateExchangeFilterResponse, error) {
	return a.impl.Update(ctx, request)
}

type ProviderExchangesInterface interface {
	// WithImpl could be used to override low-level API implementations for unit
	// testing purposes with [github.com/golang/mock] or other mocking frameworks.
	// Deprecated: use MockProviderExchangesInterface instead.
	WithImpl(impl ProviderExchangesService) ProviderExchangesInterface

	// Impl returns low-level ProviderExchanges API implementation
	// Deprecated: use MockProviderExchangesInterface instead.
	Impl() ProviderExchangesService

	// Add an exchange for listing.
	//
	// Associate an exchange with a listing
	AddListingToExchange(ctx context.Context, request AddExchangeForListingRequest) (*AddExchangeForListingResponse, error)

	// Create an exchange.
	//
	// Create an exchange
	Create(ctx context.Context, request CreateExchangeRequest) (*CreateExchangeResponse, error)

	// Delete an exchange.
	//
	// This removes a listing from marketplace.
	Delete(ctx context.Context, request DeleteExchangeRequest) error

	// Delete an exchange.
	//
	// This removes a listing from marketplace.
	DeleteById(ctx context.Context, id string) error

	// Remove an exchange for listing.
	//
	// Disassociate an exchange with a listing
	DeleteListingFromExchange(ctx context.Context, request RemoveExchangeForListingRequest) error

	// Remove an exchange for listing.
	//
	// Disassociate an exchange with a listing
	DeleteListingFromExchangeById(ctx context.Context, id string) error

	// Get an exchange.
	//
	// Get an exchange.
	Get(ctx context.Context, request GetExchangeRequest) (*GetExchangeResponse, error)

	// Get an exchange.
	//
	// Get an exchange.
	GetById(ctx context.Context, id string) (*GetExchangeResponse, error)

	// List exchanges.
	//
	// List exchanges visible to provider
	//
	// This method is generated by Databricks SDK Code Generator.
	List(ctx context.Context, request ListExchangesRequest) listing.Iterator[Exchange]

	// List exchanges.
	//
	// List exchanges visible to provider
	//
	// This method is generated by Databricks SDK Code Generator.
	ListAll(ctx context.Context, request ListExchangesRequest) ([]Exchange, error)

	// ExchangeNameToIdMap calls [ProviderExchangesAPI.ListAll] and creates a map of results with [Exchange].Name as key and [Exchange].Id as value.
	//
	// Returns an error if there's more than one [Exchange] with the same .Name.
	//
	// Note: All [Exchange] instances are loaded into memory before creating a map.
	//
	// This method is generated by Databricks SDK Code Generator.
	ExchangeNameToIdMap(ctx context.Context, request ListExchangesRequest) (map[string]string, error)

	// GetByName calls [ProviderExchangesAPI.ExchangeNameToIdMap] and returns a single [Exchange].
	//
	// Returns an error if there's more than one [Exchange] with the same .Name.
	//
	// Note: All [Exchange] instances are loaded into memory before returning matching by name.
	//
	// This method is generated by Databricks SDK Code Generator.
	GetByName(ctx context.Context, name string) (*Exchange, error)

	// List exchanges for listing.
	//
	// List exchanges associated with a listing
	//
	// This method is generated by Databricks SDK Code Generator.
	ListExchangesForListing(ctx context.Context, request ListExchangesForListingRequest) listing.Iterator[ExchangeListing]

	// List exchanges for listing.
	//
	// List exchanges associated with a listing
	//
	// This method is generated by Databricks SDK Code Generator.
	ListExchangesForListingAll(ctx context.Context, request ListExchangesForListingRequest) ([]ExchangeListing, error)

	// ExchangeListingExchangeNameToExchangeIdMap calls [ProviderExchangesAPI.ListExchangesForListingAll] and creates a map of results with [ExchangeListing].ExchangeName as key and [ExchangeListing].ExchangeId as value.
	//
	// Returns an error if there's more than one [ExchangeListing] with the same .ExchangeName.
	//
	// Note: All [ExchangeListing] instances are loaded into memory before creating a map.
	//
	// This method is generated by Databricks SDK Code Generator.
	ExchangeListingExchangeNameToExchangeIdMap(ctx context.Context, request ListExchangesForListingRequest) (map[string]string, error)

	// GetByExchangeName calls [ProviderExchangesAPI.ExchangeListingExchangeNameToExchangeIdMap] and returns a single [ExchangeListing].
	//
	// Returns an error if there's more than one [ExchangeListing] with the same .ExchangeName.
	//
	// Note: All [ExchangeListing] instances are loaded into memory before returning matching by name.
	//
	// This method is generated by Databricks SDK Code Generator.
	GetByExchangeName(ctx context.Context, name string) (*ExchangeListing, error)

	// List listings for exchange.
	//
	// List listings associated with an exchange
	//
	// This method is generated by Databricks SDK Code Generator.
	ListListingsForExchange(ctx context.Context, request ListListingsForExchangeRequest) listing.Iterator[ExchangeListing]

	// List listings for exchange.
	//
	// List listings associated with an exchange
	//
	// This method is generated by Databricks SDK Code Generator.
	ListListingsForExchangeAll(ctx context.Context, request ListListingsForExchangeRequest) ([]ExchangeListing, error)

	// ExchangeListingListingNameToListingIdMap calls [ProviderExchangesAPI.ListListingsForExchangeAll] and creates a map of results with [ExchangeListing].ListingName as key and [ExchangeListing].ListingId as value.
	//
	// Returns an error if there's more than one [ExchangeListing] with the same .ListingName.
	//
	// Note: All [ExchangeListing] instances are loaded into memory before creating a map.
	//
	// This method is generated by Databricks SDK Code Generator.
	ExchangeListingListingNameToListingIdMap(ctx context.Context, request ListListingsForExchangeRequest) (map[string]string, error)

	// GetByListingName calls [ProviderExchangesAPI.ExchangeListingListingNameToListingIdMap] and returns a single [ExchangeListing].
	//
	// Returns an error if there's more than one [ExchangeListing] with the same .ListingName.
	//
	// Note: All [ExchangeListing] instances are loaded into memory before returning matching by name.
	//
	// This method is generated by Databricks SDK Code Generator.
	GetByListingName(ctx context.Context, name string) (*ExchangeListing, error)

	// Update exchange.
	//
	// Update an exchange
	Update(ctx context.Context, request UpdateExchangeRequest) (*UpdateExchangeResponse, error)
}

func NewProviderExchanges(client *client.DatabricksClient) *ProviderExchangesAPI {
	return &ProviderExchangesAPI{
		impl: &providerExchangesImpl{
			client: client,
		},
	}
}

// Marketplace exchanges allow providers to share their listings with a curated
// set of customers.
type ProviderExchangesAPI struct {
	// impl contains low-level REST API interface, that could be overridden
	// through WithImpl(ProviderExchangesService)
	impl ProviderExchangesService
}

// WithImpl could be used to override low-level API implementations for unit
// testing purposes with [github.com/golang/mock] or other mocking frameworks.
// Deprecated: use MockProviderExchangesInterface instead.
func (a *ProviderExchangesAPI) WithImpl(impl ProviderExchangesService) ProviderExchangesInterface {
	a.impl = impl
	return a
}

// Impl returns low-level ProviderExchanges API implementation
// Deprecated: use MockProviderExchangesInterface instead.
func (a *ProviderExchangesAPI) Impl() ProviderExchangesService {
	return a.impl
}

// Add an exchange for listing.
//
// Associate an exchange with a listing
func (a *ProviderExchangesAPI) AddListingToExchange(ctx context.Context, request AddExchangeForListingRequest) (*AddExchangeForListingResponse, error) {
	return a.impl.AddListingToExchange(ctx, request)
}

// Create an exchange.
//
// Create an exchange
func (a *ProviderExchangesAPI) Create(ctx context.Context, request CreateExchangeRequest) (*CreateExchangeResponse, error) {
	return a.impl.Create(ctx, request)
}

// Delete an exchange.
//
// This removes a listing from marketplace.
func (a *ProviderExchangesAPI) Delete(ctx context.Context, request DeleteExchangeRequest) error {
	return a.impl.Delete(ctx, request)
}

// Delete an exchange.
//
// This removes a listing from marketplace.
func (a *ProviderExchangesAPI) DeleteById(ctx context.Context, id string) error {
	return a.impl.Delete(ctx, DeleteExchangeRequest{
		Id: id,
	})
}

// Remove an exchange for listing.
//
// Disassociate an exchange with a listing
func (a *ProviderExchangesAPI) DeleteListingFromExchange(ctx context.Context, request RemoveExchangeForListingRequest) error {
	return a.impl.DeleteListingFromExchange(ctx, request)
}

// Remove an exchange for listing.
//
// Disassociate an exchange with a listing
func (a *ProviderExchangesAPI) DeleteListingFromExchangeById(ctx context.Context, id string) error {
	return a.impl.DeleteListingFromExchange(ctx, RemoveExchangeForListingRequest{
		Id: id,
	})
}

// Get an exchange.
//
// Get an exchange.
func (a *ProviderExchangesAPI) Get(ctx context.Context, request GetExchangeRequest) (*GetExchangeResponse, error) {
	return a.impl.Get(ctx, request)
}

// Get an exchange.
//
// Get an exchange.
func (a *ProviderExchangesAPI) GetById(ctx context.Context, id string) (*GetExchangeResponse, error) {
	return a.impl.Get(ctx, GetExchangeRequest{
		Id: id,
	})
}

// List exchanges.
//
// # List exchanges visible to provider
//
// This method is generated by Databricks SDK Code Generator.
func (a *ProviderExchangesAPI) List(ctx context.Context, request ListExchangesRequest) listing.Iterator[Exchange] {

	getNextPage := func(ctx context.Context, req ListExchangesRequest) (*ListExchangesResponse, error) {
		ctx = useragent.InContext(ctx, "sdk-feature", "pagination")
		return a.impl.List(ctx, req)
	}
	getItems := func(resp *ListExchangesResponse) []Exchange {
		return resp.Exchanges
	}
	getNextReq := func(resp *ListExchangesResponse) *ListExchangesRequest {
		if resp.NextPageToken == "" {
			return nil
		}
		request.PageToken = resp.NextPageToken
		return &request
	}
	iterator := listing.NewIterator(
		&request,
		getNextPage,
		getItems,
		getNextReq)
	return iterator
}

// List exchanges.
//
// # List exchanges visible to provider
//
// This method is generated by Databricks SDK Code Generator.
func (a *ProviderExchangesAPI) ListAll(ctx context.Context, request ListExchangesRequest) ([]Exchange, error) {
	iterator := a.List(ctx, request)
	return listing.ToSlice[Exchange](ctx, iterator)
}

// ExchangeNameToIdMap calls [ProviderExchangesAPI.ListAll] and creates a map of results with [Exchange].Name as key and [Exchange].Id as value.
//
// Returns an error if there's more than one [Exchange] with the same .Name.
//
// Note: All [Exchange] instances are loaded into memory before creating a map.
//
// This method is generated by Databricks SDK Code Generator.
func (a *ProviderExchangesAPI) ExchangeNameToIdMap(ctx context.Context, request ListExchangesRequest) (map[string]string, error) {
	ctx = useragent.InContext(ctx, "sdk-feature", "name-to-id")
	mapping := map[string]string{}
	result, err := a.ListAll(ctx, request)
	if err != nil {
		return nil, err
	}
	for _, v := range result {
		key := v.Name
		_, duplicate := mapping[key]
		if duplicate {
			return nil, fmt.Errorf("duplicate .Name: %s", key)
		}
		mapping[key] = v.Id
	}
	return mapping, nil
}

// GetByName calls [ProviderExchangesAPI.ExchangeNameToIdMap] and returns a single [Exchange].
//
// Returns an error if there's more than one [Exchange] with the same .Name.
//
// Note: All [Exchange] instances are loaded into memory before returning matching by name.
//
// This method is generated by Databricks SDK Code Generator.
func (a *ProviderExchangesAPI) GetByName(ctx context.Context, name string) (*Exchange, error) {
	ctx = useragent.InContext(ctx, "sdk-feature", "get-by-name")
	result, err := a.ListAll(ctx, ListExchangesRequest{})
	if err != nil {
		return nil, err
	}
	tmp := map[string][]Exchange{}
	for _, v := range result {
		key := v.Name
		tmp[key] = append(tmp[key], v)
	}
	alternatives, ok := tmp[name]
	if !ok || len(alternatives) == 0 {
		return nil, fmt.Errorf("Exchange named '%s' does not exist", name)
	}
	if len(alternatives) > 1 {
		return nil, fmt.Errorf("there are %d instances of Exchange named '%s'", len(alternatives), name)
	}
	return &alternatives[0], nil
}

// List exchanges for listing.
//
// # List exchanges associated with a listing
//
// This method is generated by Databricks SDK Code Generator.
func (a *ProviderExchangesAPI) ListExchangesForListing(ctx context.Context, request ListExchangesForListingRequest) listing.Iterator[ExchangeListing] {

	getNextPage := func(ctx context.Context, req ListExchangesForListingRequest) (*ListExchangesForListingResponse, error) {
		ctx = useragent.InContext(ctx, "sdk-feature", "pagination")
		return a.impl.ListExchangesForListing(ctx, req)
	}
	getItems := func(resp *ListExchangesForListingResponse) []ExchangeListing {
		return resp.ExchangeListing
	}
	getNextReq := func(resp *ListExchangesForListingResponse) *ListExchangesForListingRequest {
		if resp.NextPageToken == "" {
			return nil
		}
		request.PageToken = resp.NextPageToken
		return &request
	}
	iterator := listing.NewIterator(
		&request,
		getNextPage,
		getItems,
		getNextReq)
	return iterator
}

// List exchanges for listing.
//
// # List exchanges associated with a listing
//
// This method is generated by Databricks SDK Code Generator.
func (a *ProviderExchangesAPI) ListExchangesForListingAll(ctx context.Context, request ListExchangesForListingRequest) ([]ExchangeListing, error) {
	iterator := a.ListExchangesForListing(ctx, request)
	return listing.ToSlice[ExchangeListing](ctx, iterator)
}

// ExchangeListingExchangeNameToExchangeIdMap calls [ProviderExchangesAPI.ListExchangesForListingAll] and creates a map of results with [ExchangeListing].ExchangeName as key and [ExchangeListing].ExchangeId as value.
//
// Returns an error if there's more than one [ExchangeListing] with the same .ExchangeName.
//
// Note: All [ExchangeListing] instances are loaded into memory before creating a map.
//
// This method is generated by Databricks SDK Code Generator.
func (a *ProviderExchangesAPI) ExchangeListingExchangeNameToExchangeIdMap(ctx context.Context, request ListExchangesForListingRequest) (map[string]string, error) {
	ctx = useragent.InContext(ctx, "sdk-feature", "name-to-id")
	mapping := map[string]string{}
	result, err := a.ListExchangesForListingAll(ctx, request)
	if err != nil {
		return nil, err
	}
	for _, v := range result {
		key := v.ExchangeName
		_, duplicate := mapping[key]
		if duplicate {
			return nil, fmt.Errorf("duplicate .ExchangeName: %s", key)
		}
		mapping[key] = v.ExchangeId
	}
	return mapping, nil
}

// GetByExchangeName calls [ProviderExchangesAPI.ExchangeListingExchangeNameToExchangeIdMap] and returns a single [ExchangeListing].
//
// Returns an error if there's more than one [ExchangeListing] with the same .ExchangeName.
//
// Note: All [ExchangeListing] instances are loaded into memory before returning matching by name.
//
// This method is generated by Databricks SDK Code Generator.
func (a *ProviderExchangesAPI) GetByExchangeName(ctx context.Context, name string) (*ExchangeListing, error) {
	ctx = useragent.InContext(ctx, "sdk-feature", "get-by-name")
	result, err := a.ListExchangesForListingAll(ctx, ListExchangesForListingRequest{})
	if err != nil {
		return nil, err
	}
	tmp := map[string][]ExchangeListing{}
	for _, v := range result {
		key := v.ExchangeName
		tmp[key] = append(tmp[key], v)
	}
	alternatives, ok := tmp[name]
	if !ok || len(alternatives) == 0 {
		return nil, fmt.Errorf("ExchangeListing named '%s' does not exist", name)
	}
	if len(alternatives) > 1 {
		return nil, fmt.Errorf("there are %d instances of ExchangeListing named '%s'", len(alternatives), name)
	}
	return &alternatives[0], nil
}

// List listings for exchange.
//
// # List listings associated with an exchange
//
// This method is generated by Databricks SDK Code Generator.
func (a *ProviderExchangesAPI) ListListingsForExchange(ctx context.Context, request ListListingsForExchangeRequest) listing.Iterator[ExchangeListing] {

	getNextPage := func(ctx context.Context, req ListListingsForExchangeRequest) (*ListListingsForExchangeResponse, error) {
		ctx = useragent.InContext(ctx, "sdk-feature", "pagination")
		return a.impl.ListListingsForExchange(ctx, req)
	}
	getItems := func(resp *ListListingsForExchangeResponse) []ExchangeListing {
		return resp.ExchangeListings
	}
	getNextReq := func(resp *ListListingsForExchangeResponse) *ListListingsForExchangeRequest {
		if resp.NextPageToken == "" {
			return nil
		}
		request.PageToken = resp.NextPageToken
		return &request
	}
	iterator := listing.NewIterator(
		&request,
		getNextPage,
		getItems,
		getNextReq)
	return iterator
}

// List listings for exchange.
//
// # List listings associated with an exchange
//
// This method is generated by Databricks SDK Code Generator.
func (a *ProviderExchangesAPI) ListListingsForExchangeAll(ctx context.Context, request ListListingsForExchangeRequest) ([]ExchangeListing, error) {
	iterator := a.ListListingsForExchange(ctx, request)
	return listing.ToSlice[ExchangeListing](ctx, iterator)
}

// ExchangeListingListingNameToListingIdMap calls [ProviderExchangesAPI.ListListingsForExchangeAll] and creates a map of results with [ExchangeListing].ListingName as key and [ExchangeListing].ListingId as value.
//
// Returns an error if there's more than one [ExchangeListing] with the same .ListingName.
//
// Note: All [ExchangeListing] instances are loaded into memory before creating a map.
//
// This method is generated by Databricks SDK Code Generator.
func (a *ProviderExchangesAPI) ExchangeListingListingNameToListingIdMap(ctx context.Context, request ListListingsForExchangeRequest) (map[string]string, error) {
	ctx = useragent.InContext(ctx, "sdk-feature", "name-to-id")
	mapping := map[string]string{}
	result, err := a.ListListingsForExchangeAll(ctx, request)
	if err != nil {
		return nil, err
	}
	for _, v := range result {
		key := v.ListingName
		_, duplicate := mapping[key]
		if duplicate {
			return nil, fmt.Errorf("duplicate .ListingName: %s", key)
		}
		mapping[key] = v.ListingId
	}
	return mapping, nil
}

// GetByListingName calls [ProviderExchangesAPI.ExchangeListingListingNameToListingIdMap] and returns a single [ExchangeListing].
//
// Returns an error if there's more than one [ExchangeListing] with the same .ListingName.
//
// Note: All [ExchangeListing] instances are loaded into memory before returning matching by name.
//
// This method is generated by Databricks SDK Code Generator.
func (a *ProviderExchangesAPI) GetByListingName(ctx context.Context, name string) (*ExchangeListing, error) {
	ctx = useragent.InContext(ctx, "sdk-feature", "get-by-name")
	result, err := a.ListListingsForExchangeAll(ctx, ListListingsForExchangeRequest{})
	if err != nil {
		return nil, err
	}
	tmp := map[string][]ExchangeListing{}
	for _, v := range result {
		key := v.ListingName
		tmp[key] = append(tmp[key], v)
	}
	alternatives, ok := tmp[name]
	if !ok || len(alternatives) == 0 {
		return nil, fmt.Errorf("ExchangeListing named '%s' does not exist", name)
	}
	if len(alternatives) > 1 {
		return nil, fmt.Errorf("there are %d instances of ExchangeListing named '%s'", len(alternatives), name)
	}
	return &alternatives[0], nil
}

// Update exchange.
//
// Update an exchange
func (a *ProviderExchangesAPI) Update(ctx context.Context, request UpdateExchangeRequest) (*UpdateExchangeResponse, error) {
	return a.impl.Update(ctx, request)
}

type ProviderFilesInterface interface {
	// WithImpl could be used to override low-level API implementations for unit
	// testing purposes with [github.com/golang/mock] or other mocking frameworks.
	// Deprecated: use MockProviderFilesInterface instead.
	WithImpl(impl ProviderFilesService) ProviderFilesInterface

	// Impl returns low-level ProviderFiles API implementation
	// Deprecated: use MockProviderFilesInterface instead.
	Impl() ProviderFilesService

	// Create a file.
	//
	// Create a file. Currently, only provider icons and attached notebooks are
	// supported.
	Create(ctx context.Context, request CreateFileRequest) (*CreateFileResponse, error)

	// Delete a file.
	//
	// Delete a file
	Delete(ctx context.Context, request DeleteFileRequest) error

	// Delete a file.
	//
	// Delete a file
	DeleteByFileId(ctx context.Context, fileId string) error

	// Get a file.
	//
	// Get a file
	Get(ctx context.Context, request GetFileRequest) (*GetFileResponse, error)

	// Get a file.
	//
	// Get a file
	GetByFileId(ctx context.Context, fileId string) (*GetFileResponse, error)

	// List files.
	//
	// List files attached to a parent entity.
	//
	// This method is generated by Databricks SDK Code Generator.
	List(ctx context.Context, request ListFilesRequest) listing.Iterator[FileInfo]

	// List files.
	//
	// List files attached to a parent entity.
	//
	// This method is generated by Databricks SDK Code Generator.
	ListAll(ctx context.Context, request ListFilesRequest) ([]FileInfo, error)

	// FileInfoDisplayNameToIdMap calls [ProviderFilesAPI.ListAll] and creates a map of results with [FileInfo].DisplayName as key and [FileInfo].Id as value.
	//
	// Returns an error if there's more than one [FileInfo] with the same .DisplayName.
	//
	// Note: All [FileInfo] instances are loaded into memory before creating a map.
	//
	// This method is generated by Databricks SDK Code Generator.
	FileInfoDisplayNameToIdMap(ctx context.Context, request ListFilesRequest) (map[string]string, error)

	// GetByDisplayName calls [ProviderFilesAPI.FileInfoDisplayNameToIdMap] and returns a single [FileInfo].
	//
	// Returns an error if there's more than one [FileInfo] with the same .DisplayName.
	//
	// Note: All [FileInfo] instances are loaded into memory before returning matching by name.
	//
	// This method is generated by Databricks SDK Code Generator.
	GetByDisplayName(ctx context.Context, name string) (*FileInfo, error)
}

func NewProviderFiles(client *client.DatabricksClient) *ProviderFilesAPI {
	return &ProviderFilesAPI{
		impl: &providerFilesImpl{
			client: client,
		},
	}
}

// Marketplace offers a set of file APIs for various purposes such as preview
// notebooks and provider icons.
type ProviderFilesAPI struct {
	// impl contains low-level REST API interface, that could be overridden
	// through WithImpl(ProviderFilesService)
	impl ProviderFilesService
}

// WithImpl could be used to override low-level API implementations for unit
// testing purposes with [github.com/golang/mock] or other mocking frameworks.
// Deprecated: use MockProviderFilesInterface instead.
func (a *ProviderFilesAPI) WithImpl(impl ProviderFilesService) ProviderFilesInterface {
	a.impl = impl
	return a
}

// Impl returns low-level ProviderFiles API implementation
// Deprecated: use MockProviderFilesInterface instead.
func (a *ProviderFilesAPI) Impl() ProviderFilesService {
	return a.impl
}

// Create a file.
//
// Create a file. Currently, only provider icons and attached notebooks are
// supported.
func (a *ProviderFilesAPI) Create(ctx context.Context, request CreateFileRequest) (*CreateFileResponse, error) {
	return a.impl.Create(ctx, request)
}

// Delete a file.
//
// Delete a file
func (a *ProviderFilesAPI) Delete(ctx context.Context, request DeleteFileRequest) error {
	return a.impl.Delete(ctx, request)
}

// Delete a file.
//
// Delete a file
func (a *ProviderFilesAPI) DeleteByFileId(ctx context.Context, fileId string) error {
	return a.impl.Delete(ctx, DeleteFileRequest{
		FileId: fileId,
	})
}

// Get a file.
//
// Get a file
func (a *ProviderFilesAPI) Get(ctx context.Context, request GetFileRequest) (*GetFileResponse, error) {
	return a.impl.Get(ctx, request)
}

// Get a file.
//
// Get a file
func (a *ProviderFilesAPI) GetByFileId(ctx context.Context, fileId string) (*GetFileResponse, error) {
	return a.impl.Get(ctx, GetFileRequest{
		FileId: fileId,
	})
}

// List files.
//
// List files attached to a parent entity.
//
// This method is generated by Databricks SDK Code Generator.
func (a *ProviderFilesAPI) List(ctx context.Context, request ListFilesRequest) listing.Iterator[FileInfo] {

	getNextPage := func(ctx context.Context, req ListFilesRequest) (*ListFilesResponse, error) {
		ctx = useragent.InContext(ctx, "sdk-feature", "pagination")
		return a.impl.List(ctx, req)
	}
	getItems := func(resp *ListFilesResponse) []FileInfo {
		return resp.FileInfos
	}
	getNextReq := func(resp *ListFilesResponse) *ListFilesRequest {
		if resp.NextPageToken == "" {
			return nil
		}
		request.PageToken = resp.NextPageToken
		return &request
	}
	iterator := listing.NewIterator(
		&request,
		getNextPage,
		getItems,
		getNextReq)
	return iterator
}

// List files.
//
// List files attached to a parent entity.
//
// This method is generated by Databricks SDK Code Generator.
func (a *ProviderFilesAPI) ListAll(ctx context.Context, request ListFilesRequest) ([]FileInfo, error) {
	iterator := a.List(ctx, request)
	return listing.ToSlice[FileInfo](ctx, iterator)
}

// FileInfoDisplayNameToIdMap calls [ProviderFilesAPI.ListAll] and creates a map of results with [FileInfo].DisplayName as key and [FileInfo].Id as value.
//
// Returns an error if there's more than one [FileInfo] with the same .DisplayName.
//
// Note: All [FileInfo] instances are loaded into memory before creating a map.
//
// This method is generated by Databricks SDK Code Generator.
func (a *ProviderFilesAPI) FileInfoDisplayNameToIdMap(ctx context.Context, request ListFilesRequest) (map[string]string, error) {
	ctx = useragent.InContext(ctx, "sdk-feature", "name-to-id")
	mapping := map[string]string{}
	result, err := a.ListAll(ctx, request)
	if err != nil {
		return nil, err
	}
	for _, v := range result {
		key := v.DisplayName
		_, duplicate := mapping[key]
		if duplicate {
			return nil, fmt.Errorf("duplicate .DisplayName: %s", key)
		}
		mapping[key] = v.Id
	}
	return mapping, nil
}

// GetByDisplayName calls [ProviderFilesAPI.FileInfoDisplayNameToIdMap] and returns a single [FileInfo].
//
// Returns an error if there's more than one [FileInfo] with the same .DisplayName.
//
// Note: All [FileInfo] instances are loaded into memory before returning matching by name.
//
// This method is generated by Databricks SDK Code Generator.
func (a *ProviderFilesAPI) GetByDisplayName(ctx context.Context, name string) (*FileInfo, error) {
	ctx = useragent.InContext(ctx, "sdk-feature", "get-by-name")
	result, err := a.ListAll(ctx, ListFilesRequest{})
	if err != nil {
		return nil, err
	}
	tmp := map[string][]FileInfo{}
	for _, v := range result {
		key := v.DisplayName
		tmp[key] = append(tmp[key], v)
	}
	alternatives, ok := tmp[name]
	if !ok || len(alternatives) == 0 {
		return nil, fmt.Errorf("FileInfo named '%s' does not exist", name)
	}
	if len(alternatives) > 1 {
		return nil, fmt.Errorf("there are %d instances of FileInfo named '%s'", len(alternatives), name)
	}
	return &alternatives[0], nil
}

type ProviderListingsInterface interface {
	// WithImpl could be used to override low-level API implementations for unit
	// testing purposes with [github.com/golang/mock] or other mocking frameworks.
	// Deprecated: use MockProviderListingsInterface instead.
	WithImpl(impl ProviderListingsService) ProviderListingsInterface

	// Impl returns low-level ProviderListings API implementation
	// Deprecated: use MockProviderListingsInterface instead.
	Impl() ProviderListingsService

	// Create a listing.
	//
	// Create a new listing
	Create(ctx context.Context, request CreateListingRequest) (*CreateListingResponse, error)

	// Delete a listing.
	//
	// Delete a listing
	Delete(ctx context.Context, request DeleteListingRequest) error

	// Delete a listing.
	//
	// Delete a listing
	DeleteById(ctx context.Context, id string) error

	// Get a listing.
	//
	// Get a listing
	Get(ctx context.Context, request GetListingRequest) (*GetListingResponse, error)

	// Get a listing.
	//
	// Get a listing
	GetById(ctx context.Context, id string) (*GetListingResponse, error)

	// List listings.
	//
	// List listings owned by this provider
	//
	// This method is generated by Databricks SDK Code Generator.
	List(ctx context.Context, request GetListingsRequest) listing.Iterator[Listing]

	// List listings.
	//
	// List listings owned by this provider
	//
	// This method is generated by Databricks SDK Code Generator.
	ListAll(ctx context.Context, request GetListingsRequest) ([]Listing, error)

	// ListingSummaryNameToIdMap calls [ProviderListingsAPI.ListAll] and creates a map of results with [Listing].Summary.Name as key and [Listing].Id as value.
	//
	// Returns an error if there's more than one [Listing] with the same .Summary.Name.
	//
	// Note: All [Listing] instances are loaded into memory before creating a map.
	//
	// This method is generated by Databricks SDK Code Generator.
	ListingSummaryNameToIdMap(ctx context.Context, request GetListingsRequest) (map[string]string, error)

	// GetBySummaryName calls [ProviderListingsAPI.ListingSummaryNameToIdMap] and returns a single [Listing].
	//
	// Returns an error if there's more than one [Listing] with the same .Summary.Name.
	//
	// Note: All [Listing] instances are loaded into memory before returning matching by name.
	//
	// This method is generated by Databricks SDK Code Generator.
	GetBySummaryName(ctx context.Context, name string) (*Listing, error)

	// Update listing.
	//
	// Update a listing
	Update(ctx context.Context, request UpdateListingRequest) (*UpdateListingResponse, error)
}

func NewProviderListings(client *client.DatabricksClient) *ProviderListingsAPI {
	return &ProviderListingsAPI{
		impl: &providerListingsImpl{
			client: client,
		},
	}
}

// Listings are the core entities in the Marketplace. They represent the
// products that are available for consumption.
type ProviderListingsAPI struct {
	// impl contains low-level REST API interface, that could be overridden
	// through WithImpl(ProviderListingsService)
	impl ProviderListingsService
}

// WithImpl could be used to override low-level API implementations for unit
// testing purposes with [github.com/golang/mock] or other mocking frameworks.
// Deprecated: use MockProviderListingsInterface instead.
func (a *ProviderListingsAPI) WithImpl(impl ProviderListingsService) ProviderListingsInterface {
	a.impl = impl
	return a
}

// Impl returns low-level ProviderListings API implementation
// Deprecated: use MockProviderListingsInterface instead.
func (a *ProviderListingsAPI) Impl() ProviderListingsService {
	return a.impl
}

// Create a listing.
//
// Create a new listing
func (a *ProviderListingsAPI) Create(ctx context.Context, request CreateListingRequest) (*CreateListingResponse, error) {
	return a.impl.Create(ctx, request)
}

// Delete a listing.
//
// Delete a listing
func (a *ProviderListingsAPI) Delete(ctx context.Context, request DeleteListingRequest) error {
	return a.impl.Delete(ctx, request)
}

// Delete a listing.
//
// Delete a listing
func (a *ProviderListingsAPI) DeleteById(ctx context.Context, id string) error {
	return a.impl.Delete(ctx, DeleteListingRequest{
		Id: id,
	})
}

// Get a listing.
//
// Get a listing
func (a *ProviderListingsAPI) Get(ctx context.Context, request GetListingRequest) (*GetListingResponse, error) {
	return a.impl.Get(ctx, request)
}

// Get a listing.
//
// Get a listing
func (a *ProviderListingsAPI) GetById(ctx context.Context, id string) (*GetListingResponse, error) {
	return a.impl.Get(ctx, GetListingRequest{
		Id: id,
	})
}

// List listings.
//
// # List listings owned by this provider
//
// This method is generated by Databricks SDK Code Generator.
func (a *ProviderListingsAPI) List(ctx context.Context, request GetListingsRequest) listing.Iterator[Listing] {

	getNextPage := func(ctx context.Context, req GetListingsRequest) (*GetListingsResponse, error) {
		ctx = useragent.InContext(ctx, "sdk-feature", "pagination")
		return a.impl.List(ctx, req)
	}
	getItems := func(resp *GetListingsResponse) []Listing {
		return resp.Listings
	}
	getNextReq := func(resp *GetListingsResponse) *GetListingsRequest {
		if resp.NextPageToken == "" {
			return nil
		}
		request.PageToken = resp.NextPageToken
		return &request
	}
	iterator := listing.NewIterator(
		&request,
		getNextPage,
		getItems,
		getNextReq)
	return iterator
}

// List listings.
//
// # List listings owned by this provider
//
// This method is generated by Databricks SDK Code Generator.
func (a *ProviderListingsAPI) ListAll(ctx context.Context, request GetListingsRequest) ([]Listing, error) {
	iterator := a.List(ctx, request)
	return listing.ToSlice[Listing](ctx, iterator)
}

// ListingSummaryNameToIdMap calls [ProviderListingsAPI.ListAll] and creates a map of results with [Listing].Summary.Name as key and [Listing].Id as value.
//
// Returns an error if there's more than one [Listing] with the same .Summary.Name.
//
// Note: All [Listing] instances are loaded into memory before creating a map.
//
// This method is generated by Databricks SDK Code Generator.
func (a *ProviderListingsAPI) ListingSummaryNameToIdMap(ctx context.Context, request GetListingsRequest) (map[string]string, error) {
	ctx = useragent.InContext(ctx, "sdk-feature", "name-to-id")
	mapping := map[string]string{}
	result, err := a.ListAll(ctx, request)
	if err != nil {
		return nil, err
	}
	for _, v := range result {
		key := v.Summary.Name
		_, duplicate := mapping[key]
		if duplicate {
			return nil, fmt.Errorf("duplicate .Summary.Name: %s", key)
		}
		mapping[key] = v.Id
	}
	return mapping, nil
}

// GetBySummaryName calls [ProviderListingsAPI.ListingSummaryNameToIdMap] and returns a single [Listing].
//
// Returns an error if there's more than one [Listing] with the same .Summary.Name.
//
// Note: All [Listing] instances are loaded into memory before returning matching by name.
//
// This method is generated by Databricks SDK Code Generator.
func (a *ProviderListingsAPI) GetBySummaryName(ctx context.Context, name string) (*Listing, error) {
	ctx = useragent.InContext(ctx, "sdk-feature", "get-by-name")
	result, err := a.ListAll(ctx, GetListingsRequest{})
	if err != nil {
		return nil, err
	}
	tmp := map[string][]Listing{}
	for _, v := range result {
		key := v.Summary.Name
		tmp[key] = append(tmp[key], v)
	}
	alternatives, ok := tmp[name]
	if !ok || len(alternatives) == 0 {
		return nil, fmt.Errorf("Listing named '%s' does not exist", name)
	}
	if len(alternatives) > 1 {
		return nil, fmt.Errorf("there are %d instances of Listing named '%s'", len(alternatives), name)
	}
	return &alternatives[0], nil
}

// Update listing.
//
// Update a listing
func (a *ProviderListingsAPI) Update(ctx context.Context, request UpdateListingRequest) (*UpdateListingResponse, error) {
	return a.impl.Update(ctx, request)
}

type ProviderPersonalizationRequestsInterface interface {
	// WithImpl could be used to override low-level API implementations for unit
	// testing purposes with [github.com/golang/mock] or other mocking frameworks.
	// Deprecated: use MockProviderPersonalizationRequestsInterface instead.
	WithImpl(impl ProviderPersonalizationRequestsService) ProviderPersonalizationRequestsInterface

	// Impl returns low-level ProviderPersonalizationRequests API implementation
	// Deprecated: use MockProviderPersonalizationRequestsInterface instead.
	Impl() ProviderPersonalizationRequestsService

	// All personalization requests across all listings.
	//
	// List personalization requests to this provider. This will return all
	// personalization requests, regardless of which listing they are for.
	//
	// This method is generated by Databricks SDK Code Generator.
	List(ctx context.Context, request ListAllPersonalizationRequestsRequest) listing.Iterator[PersonalizationRequest]

	// All personalization requests across all listings.
	//
	// List personalization requests to this provider. This will return all
	// personalization requests, regardless of which listing they are for.
	//
	// This method is generated by Databricks SDK Code Generator.
	ListAll(ctx context.Context, request ListAllPersonalizationRequestsRequest) ([]PersonalizationRequest, error)

	// Update personalization request status.
	//
	// Update personalization request. This method only permits updating the status
	// of the request.
	Update(ctx context.Context, request UpdatePersonalizationRequestRequest) (*UpdatePersonalizationRequestResponse, error)
}

func NewProviderPersonalizationRequests(client *client.DatabricksClient) *ProviderPersonalizationRequestsAPI {
	return &ProviderPersonalizationRequestsAPI{
		impl: &providerPersonalizationRequestsImpl{
			client: client,
		},
	}
}

// Personalization requests are an alternate to instantly available listings.
// Control the lifecycle of personalized solutions.
type ProviderPersonalizationRequestsAPI struct {
	// impl contains low-level REST API interface, that could be overridden
	// through WithImpl(ProviderPersonalizationRequestsService)
	impl ProviderPersonalizationRequestsService
}

// WithImpl could be used to override low-level API implementations for unit
// testing purposes with [github.com/golang/mock] or other mocking frameworks.
// Deprecated: use MockProviderPersonalizationRequestsInterface instead.
func (a *ProviderPersonalizationRequestsAPI) WithImpl(impl ProviderPersonalizationRequestsService) ProviderPersonalizationRequestsInterface {
	a.impl = impl
	return a
}

// Impl returns low-level ProviderPersonalizationRequests API implementation
// Deprecated: use MockProviderPersonalizationRequestsInterface instead.
func (a *ProviderPersonalizationRequestsAPI) Impl() ProviderPersonalizationRequestsService {
	return a.impl
}

// All personalization requests across all listings.
//
// List personalization requests to this provider. This will return all
// personalization requests, regardless of which listing they are for.
//
// This method is generated by Databricks SDK Code Generator.
func (a *ProviderPersonalizationRequestsAPI) List(ctx context.Context, request ListAllPersonalizationRequestsRequest) listing.Iterator[PersonalizationRequest] {

	getNextPage := func(ctx context.Context, req ListAllPersonalizationRequestsRequest) (*ListAllPersonalizationRequestsResponse, error) {
		ctx = useragent.InContext(ctx, "sdk-feature", "pagination")
		return a.impl.List(ctx, req)
	}
	getItems := func(resp *ListAllPersonalizationRequestsResponse) []PersonalizationRequest {
		return resp.PersonalizationRequests
	}
	getNextReq := func(resp *ListAllPersonalizationRequestsResponse) *ListAllPersonalizationRequestsRequest {
		if resp.NextPageToken == "" {
			return nil
		}
		request.PageToken = resp.NextPageToken
		return &request
	}
	iterator := listing.NewIterator(
		&request,
		getNextPage,
		getItems,
		getNextReq)
	return iterator
}

// All personalization requests across all listings.
//
// List personalization requests to this provider. This will return all
// personalization requests, regardless of which listing they are for.
//
// This method is generated by Databricks SDK Code Generator.
func (a *ProviderPersonalizationRequestsAPI) ListAll(ctx context.Context, request ListAllPersonalizationRequestsRequest) ([]PersonalizationRequest, error) {
	iterator := a.List(ctx, request)
	return listing.ToSlice[PersonalizationRequest](ctx, iterator)
}

// Update personalization request status.
//
// Update personalization request. This method only permits updating the status
// of the request.
func (a *ProviderPersonalizationRequestsAPI) Update(ctx context.Context, request UpdatePersonalizationRequestRequest) (*UpdatePersonalizationRequestResponse, error) {
	return a.impl.Update(ctx, request)
}

type ProviderProviderAnalyticsDashboardsInterface interface {
	// WithImpl could be used to override low-level API implementations for unit
	// testing purposes with [github.com/golang/mock] or other mocking frameworks.
	// Deprecated: use MockProviderProviderAnalyticsDashboardsInterface instead.
	WithImpl(impl ProviderProviderAnalyticsDashboardsService) ProviderProviderAnalyticsDashboardsInterface

	// Impl returns low-level ProviderProviderAnalyticsDashboards API implementation
	// Deprecated: use MockProviderProviderAnalyticsDashboardsInterface instead.
	Impl() ProviderProviderAnalyticsDashboardsService

	// Create provider analytics dashboard.
	//
	// Create provider analytics dashboard. Returns Marketplace specific `id`. Not
	// to be confused with the Lakeview dashboard id.
	Create(ctx context.Context) (*ProviderAnalyticsDashboard, error)

	// Get provider analytics dashboard.
	//
	// Get provider analytics dashboard.
	Get(ctx context.Context) (*ListProviderAnalyticsDashboardResponse, error)

	// Get latest version of provider analytics dashboard.
	//
	// Get latest version of provider analytics dashboard.
	GetLatestVersion(ctx context.Context) (*GetLatestVersionProviderAnalyticsDashboardResponse, error)

	// Update provider analytics dashboard.
	//
	// Update provider analytics dashboard.
	Update(ctx context.Context, request UpdateProviderAnalyticsDashboardRequest) (*UpdateProviderAnalyticsDashboardResponse, error)
}

func NewProviderProviderAnalyticsDashboards(client *client.DatabricksClient) *ProviderProviderAnalyticsDashboardsAPI {
	return &ProviderProviderAnalyticsDashboardsAPI{
		impl: &providerProviderAnalyticsDashboardsImpl{
			client: client,
		},
	}
}

// Manage templated analytics solution for providers.
type ProviderProviderAnalyticsDashboardsAPI struct {
	// impl contains low-level REST API interface, that could be overridden
	// through WithImpl(ProviderProviderAnalyticsDashboardsService)
	impl ProviderProviderAnalyticsDashboardsService
}

// WithImpl could be used to override low-level API implementations for unit
// testing purposes with [github.com/golang/mock] or other mocking frameworks.
// Deprecated: use MockProviderProviderAnalyticsDashboardsInterface instead.
func (a *ProviderProviderAnalyticsDashboardsAPI) WithImpl(impl ProviderProviderAnalyticsDashboardsService) ProviderProviderAnalyticsDashboardsInterface {
	a.impl = impl
	return a
}

// Impl returns low-level ProviderProviderAnalyticsDashboards API implementation
// Deprecated: use MockProviderProviderAnalyticsDashboardsInterface instead.
func (a *ProviderProviderAnalyticsDashboardsAPI) Impl() ProviderProviderAnalyticsDashboardsService {
	return a.impl
}

// Create provider analytics dashboard.
//
// Create provider analytics dashboard. Returns Marketplace specific `id`. Not
// to be confused with the Lakeview dashboard id.
func (a *ProviderProviderAnalyticsDashboardsAPI) Create(ctx context.Context) (*ProviderAnalyticsDashboard, error) {
	return a.impl.Create(ctx)
}

// Get provider analytics dashboard.
//
// Get provider analytics dashboard.
func (a *ProviderProviderAnalyticsDashboardsAPI) Get(ctx context.Context) (*ListProviderAnalyticsDashboardResponse, error) {
	return a.impl.Get(ctx)
}

// Get latest version of provider analytics dashboard.
//
// Get latest version of provider analytics dashboard.
func (a *ProviderProviderAnalyticsDashboardsAPI) GetLatestVersion(ctx context.Context) (*GetLatestVersionProviderAnalyticsDashboardResponse, error) {
	return a.impl.GetLatestVersion(ctx)
}

// Update provider analytics dashboard.
//
// Update provider analytics dashboard.
func (a *ProviderProviderAnalyticsDashboardsAPI) Update(ctx context.Context, request UpdateProviderAnalyticsDashboardRequest) (*UpdateProviderAnalyticsDashboardResponse, error) {
	return a.impl.Update(ctx, request)
}

type ProviderProvidersInterface interface {
	// WithImpl could be used to override low-level API implementations for unit
	// testing purposes with [github.com/golang/mock] or other mocking frameworks.
	// Deprecated: use MockProviderProvidersInterface instead.
	WithImpl(impl ProviderProvidersService) ProviderProvidersInterface

	// Impl returns low-level ProviderProviders API implementation
	// Deprecated: use MockProviderProvidersInterface instead.
	Impl() ProviderProvidersService

	// Create a provider.
	//
	// Create a provider
	Create(ctx context.Context, request CreateProviderRequest) (*CreateProviderResponse, error)

	// Delete provider.
	//
	// Delete provider
	Delete(ctx context.Context, request DeleteProviderRequest) error

	// Delete provider.
	//
	// Delete provider
	DeleteById(ctx context.Context, id string) error

	// Get provider.
	//
	// Get provider profile
	Get(ctx context.Context, request GetProviderRequest) (*GetProviderResponse, error)

	// Get provider.
	//
	// Get provider profile
	GetById(ctx context.Context, id string) (*GetProviderResponse, error)

	// List providers.
	//
	// List provider profiles for account.
	//
	// This method is generated by Databricks SDK Code Generator.
	List(ctx context.Context, request ListProvidersRequest) listing.Iterator[ProviderInfo]

	// List providers.
	//
	// List provider profiles for account.
	//
	// This method is generated by Databricks SDK Code Generator.
	ListAll(ctx context.Context, request ListProvidersRequest) ([]ProviderInfo, error)

	// ProviderInfoNameToIdMap calls [ProviderProvidersAPI.ListAll] and creates a map of results with [ProviderInfo].Name as key and [ProviderInfo].Id as value.
	//
	// Returns an error if there's more than one [ProviderInfo] with the same .Name.
	//
	// Note: All [ProviderInfo] instances are loaded into memory before creating a map.
	//
	// This method is generated by Databricks SDK Code Generator.
	ProviderInfoNameToIdMap(ctx context.Context, request ListProvidersRequest) (map[string]string, error)

	// GetByName calls [ProviderProvidersAPI.ProviderInfoNameToIdMap] and returns a single [ProviderInfo].
	//
	// Returns an error if there's more than one [ProviderInfo] with the same .Name.
	//
	// Note: All [ProviderInfo] instances are loaded into memory before returning matching by name.
	//
	// This method is generated by Databricks SDK Code Generator.
	GetByName(ctx context.Context, name string) (*ProviderInfo, error)

	// Update provider.
	//
	// Update provider profile
	Update(ctx context.Context, request UpdateProviderRequest) (*UpdateProviderResponse, error)
}

func NewProviderProviders(client *client.DatabricksClient) *ProviderProvidersAPI {
	return &ProviderProvidersAPI{
		impl: &providerProvidersImpl{
			client: client,
		},
	}
}

// Providers are entities that manage assets in Marketplace.
type ProviderProvidersAPI struct {
	// impl contains low-level REST API interface, that could be overridden
	// through WithImpl(ProviderProvidersService)
	impl ProviderProvidersService
}

// WithImpl could be used to override low-level API implementations for unit
// testing purposes with [github.com/golang/mock] or other mocking frameworks.
// Deprecated: use MockProviderProvidersInterface instead.
func (a *ProviderProvidersAPI) WithImpl(impl ProviderProvidersService) ProviderProvidersInterface {
	a.impl = impl
	return a
}

// Impl returns low-level ProviderProviders API implementation
// Deprecated: use MockProviderProvidersInterface instead.
func (a *ProviderProvidersAPI) Impl() ProviderProvidersService {
	return a.impl
}

// Create a provider.
//
// Create a provider
func (a *ProviderProvidersAPI) Create(ctx context.Context, request CreateProviderRequest) (*CreateProviderResponse, error) {
	return a.impl.Create(ctx, request)
}

// Delete provider.
//
// Delete provider
func (a *ProviderProvidersAPI) Delete(ctx context.Context, request DeleteProviderRequest) error {
	return a.impl.Delete(ctx, request)
}

// Delete provider.
//
// Delete provider
func (a *ProviderProvidersAPI) DeleteById(ctx context.Context, id string) error {
	return a.impl.Delete(ctx, DeleteProviderRequest{
		Id: id,
	})
}

// Get provider.
//
// Get provider profile
func (a *ProviderProvidersAPI) Get(ctx context.Context, request GetProviderRequest) (*GetProviderResponse, error) {
	return a.impl.Get(ctx, request)
}

// Get provider.
//
// Get provider profile
func (a *ProviderProvidersAPI) GetById(ctx context.Context, id string) (*GetProviderResponse, error) {
	return a.impl.Get(ctx, GetProviderRequest{
		Id: id,
	})
}

// List providers.
//
// List provider profiles for account.
//
// This method is generated by Databricks SDK Code Generator.
func (a *ProviderProvidersAPI) List(ctx context.Context, request ListProvidersRequest) listing.Iterator[ProviderInfo] {

	getNextPage := func(ctx context.Context, req ListProvidersRequest) (*ListProvidersResponse, error) {
		ctx = useragent.InContext(ctx, "sdk-feature", "pagination")
		return a.impl.List(ctx, req)
	}
	getItems := func(resp *ListProvidersResponse) []ProviderInfo {
		return resp.Providers
	}
	getNextReq := func(resp *ListProvidersResponse) *ListProvidersRequest {
		if resp.NextPageToken == "" {
			return nil
		}
		request.PageToken = resp.NextPageToken
		return &request
	}
	iterator := listing.NewIterator(
		&request,
		getNextPage,
		getItems,
		getNextReq)
	return iterator
}

// List providers.
//
// List provider profiles for account.
//
// This method is generated by Databricks SDK Code Generator.
func (a *ProviderProvidersAPI) ListAll(ctx context.Context, request ListProvidersRequest) ([]ProviderInfo, error) {
	iterator := a.List(ctx, request)
	return listing.ToSlice[ProviderInfo](ctx, iterator)
}

// ProviderInfoNameToIdMap calls [ProviderProvidersAPI.ListAll] and creates a map of results with [ProviderInfo].Name as key and [ProviderInfo].Id as value.
//
// Returns an error if there's more than one [ProviderInfo] with the same .Name.
//
// Note: All [ProviderInfo] instances are loaded into memory before creating a map.
//
// This method is generated by Databricks SDK Code Generator.
func (a *ProviderProvidersAPI) ProviderInfoNameToIdMap(ctx context.Context, request ListProvidersRequest) (map[string]string, error) {
	ctx = useragent.InContext(ctx, "sdk-feature", "name-to-id")
	mapping := map[string]string{}
	result, err := a.ListAll(ctx, request)
	if err != nil {
		return nil, err
	}
	for _, v := range result {
		key := v.Name
		_, duplicate := mapping[key]
		if duplicate {
			return nil, fmt.Errorf("duplicate .Name: %s", key)
		}
		mapping[key] = v.Id
	}
	return mapping, nil
}

// GetByName calls [ProviderProvidersAPI.ProviderInfoNameToIdMap] and returns a single [ProviderInfo].
//
// Returns an error if there's more than one [ProviderInfo] with the same .Name.
//
// Note: All [ProviderInfo] instances are loaded into memory before returning matching by name.
//
// This method is generated by Databricks SDK Code Generator.
func (a *ProviderProvidersAPI) GetByName(ctx context.Context, name string) (*ProviderInfo, error) {
	ctx = useragent.InContext(ctx, "sdk-feature", "get-by-name")
	result, err := a.ListAll(ctx, ListProvidersRequest{})
	if err != nil {
		return nil, err
	}
	tmp := map[string][]ProviderInfo{}
	for _, v := range result {
		key := v.Name
		tmp[key] = append(tmp[key], v)
	}
	alternatives, ok := tmp[name]
	if !ok || len(alternatives) == 0 {
		return nil, fmt.Errorf("ProviderInfo named '%s' does not exist", name)
	}
	if len(alternatives) > 1 {
		return nil, fmt.Errorf("there are %d instances of ProviderInfo named '%s'", len(alternatives), name)
	}
	return &alternatives[0], nil
}

// Update provider.
//
// Update provider profile
func (a *ProviderProvidersAPI) Update(ctx context.Context, request UpdateProviderRequest) (*UpdateProviderResponse, error) {
	return a.impl.Update(ctx, request)
}
