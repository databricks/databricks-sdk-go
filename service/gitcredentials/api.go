// Code generated from OpenAPI specs by Databricks SDK Generator. DO NOT EDIT.

// Registers personal access token for Databricks to do operations on behalf of the user.
package gitcredentials

import (
	"context"
	"fmt"

	"github.com/databricks/databricks-sdk-go/client"
	"github.com/databricks/databricks-sdk-go/useragent"
)

func NewGitCredentials(client *client.DatabricksClient) *GitCredentialsAPI {
	return &GitCredentialsAPI{
		impl: &gitCredentialsImpl{
			client: client,
		},
	}
}

// Registers personal access token for Databricks to do operations on behalf of
// the user.
//
// See [more
// info](https://docs.databricks.com/repos/get-access-tokens-from-git-provider.html).
type GitCredentialsAPI struct {
	// impl contains low-level REST API interface, that could be overridden
	// through WithImpl(GitCredentialsService)
	impl GitCredentialsService
}

// WithImpl could be used to override low-level API implementations for unit
// testing purposes with [github.com/golang/mock] or other mocking frameworks.
func (a *GitCredentialsAPI) WithImpl(impl GitCredentialsService) *GitCredentialsAPI {
	a.impl = impl
	return a
}

// Impl returns low-level GitCredentials API implementation
func (a *GitCredentialsAPI) Impl() GitCredentialsService {
	return a.impl
}

// Create a credential entry.
//
// Creates a Git credential entry for the user. Only one Git credential per user
// is supported, so any attempts to create credentials if an entry already
// exists will fail. Use the PATCH endpoint to update existing credentials, or
// the DELETE endpoint to delete existing credentials.
func (a *GitCredentialsAPI) Create(ctx context.Context, request CreateCredentials) (*CreateCredentialsResponse, error) {
	return a.impl.Create(ctx, request)
}

// Delete a credential.
//
// Deletes the specified Git credential.
func (a *GitCredentialsAPI) Delete(ctx context.Context, request Delete) error {
	return a.impl.Delete(ctx, request)
}

// Delete a credential.
//
// Deletes the specified Git credential.
func (a *GitCredentialsAPI) DeleteByCredentialId(ctx context.Context, credentialId int64) error {
	return a.impl.Delete(ctx, Delete{
		CredentialId: credentialId,
	})
}

// Get a credential entry.
//
// Gets the Git credential with the specified credential ID.
func (a *GitCredentialsAPI) Get(ctx context.Context, request Get) (*CredentialInfo, error) {
	return a.impl.Get(ctx, request)
}

// Get a credential entry.
//
// Gets the Git credential with the specified credential ID.
func (a *GitCredentialsAPI) GetByCredentialId(ctx context.Context, credentialId int64) (*CredentialInfo, error) {
	return a.impl.Get(ctx, Get{
		CredentialId: credentialId,
	})
}

// Get Git credentials.
//
// Lists the calling user's Git credentials. One credential per user is
// supported.
//
// This method is generated by Databricks SDK Code Generator.
func (a *GitCredentialsAPI) ListAll(ctx context.Context) ([]CredentialInfo, error) {
	response, err := a.impl.List(ctx)
	if err != nil {
		return nil, err
	}
	return response.Credentials, nil
}

// CredentialInfoGitProviderToCredentialIdMap calls [GitCredentialsAPI.ListAll] and creates a map of results with [CredentialInfo].GitProvider as key and [CredentialInfo].CredentialId as value.
//
// Returns an error if there's more than one [CredentialInfo] with the same .GitProvider.
//
// Note: All [CredentialInfo] instances are loaded into memory before creating a map.
//
// This method is generated by Databricks SDK Code Generator.
func (a *GitCredentialsAPI) CredentialInfoGitProviderToCredentialIdMap(ctx context.Context) (map[string]int64, error) {
	ctx = useragent.InContext(ctx, "sdk-feature", "name-to-id")
	mapping := map[string]int64{}
	result, err := a.ListAll(ctx)
	if err != nil {
		return nil, err
	}
	for _, v := range result {
		key := v.GitProvider
		_, duplicate := mapping[key]
		if duplicate {
			return nil, fmt.Errorf("duplicate .GitProvider: %s", key)
		}
		mapping[key] = v.CredentialId
	}
	return mapping, nil
}

// GetByGitProvider calls [GitCredentialsAPI.CredentialInfoGitProviderToCredentialIdMap] and returns a single [CredentialInfo].
//
// Returns an error if there's more than one [CredentialInfo] with the same .GitProvider.
//
// Note: All [CredentialInfo] instances are loaded into memory before returning matching by name.
//
// This method is generated by Databricks SDK Code Generator.
func (a *GitCredentialsAPI) GetByGitProvider(ctx context.Context, name string) (*CredentialInfo, error) {
	ctx = useragent.InContext(ctx, "sdk-feature", "get-by-name")
	result, err := a.ListAll(ctx)
	if err != nil {
		return nil, err
	}
	tmp := map[string][]CredentialInfo{}
	for _, v := range result {
		key := v.GitProvider
		tmp[key] = append(tmp[key], v)
	}
	alternatives, ok := tmp[name]
	if !ok || len(alternatives) == 0 {
		return nil, fmt.Errorf("CredentialInfo named '%s' does not exist", name)
	}
	if len(alternatives) > 1 {
		return nil, fmt.Errorf("there are %d instances of CredentialInfo named '%s'", len(alternatives), name)
	}
	return &alternatives[0], nil
}

// Update a credential.
//
// Updates the specified Git credential.
func (a *GitCredentialsAPI) Update(ctx context.Context, request UpdateCredentials) error {
	return a.impl.Update(ctx, request)
}
