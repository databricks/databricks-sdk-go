// Code generated by mockery v2.39.1. DO NOT EDIT.

package settings

import (
	context "context"

	settings "github.com/databricks/databricks-sdk-go/service/settings"
	mock "github.com/stretchr/testify/mock"
)

// MockEsmEnablementAccountInterface is an autogenerated mock type for the EsmEnablementAccountInterface type
type MockEsmEnablementAccountInterface struct {
	mock.Mock
}

type MockEsmEnablementAccountInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEsmEnablementAccountInterface) EXPECT() *MockEsmEnablementAccountInterface_Expecter {
	return &MockEsmEnablementAccountInterface_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: ctx, request
func (_m *MockEsmEnablementAccountInterface) Get(ctx context.Context, request settings.GetEsmEnablementAccountSettingRequest) (*settings.EsmEnablementAccountSetting, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *settings.EsmEnablementAccountSetting
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, settings.GetEsmEnablementAccountSettingRequest) (*settings.EsmEnablementAccountSetting, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, settings.GetEsmEnablementAccountSettingRequest) *settings.EsmEnablementAccountSetting); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*settings.EsmEnablementAccountSetting)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, settings.GetEsmEnablementAccountSettingRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEsmEnablementAccountInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockEsmEnablementAccountInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - request settings.GetEsmEnablementAccountSettingRequest
func (_e *MockEsmEnablementAccountInterface_Expecter) Get(ctx interface{}, request interface{}) *MockEsmEnablementAccountInterface_Get_Call {
	return &MockEsmEnablementAccountInterface_Get_Call{Call: _e.mock.On("Get", ctx, request)}
}

func (_c *MockEsmEnablementAccountInterface_Get_Call) Run(run func(ctx context.Context, request settings.GetEsmEnablementAccountSettingRequest)) *MockEsmEnablementAccountInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(settings.GetEsmEnablementAccountSettingRequest))
	})
	return _c
}

func (_c *MockEsmEnablementAccountInterface_Get_Call) Return(_a0 *settings.EsmEnablementAccountSetting, _a1 error) *MockEsmEnablementAccountInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEsmEnablementAccountInterface_Get_Call) RunAndReturn(run func(context.Context, settings.GetEsmEnablementAccountSettingRequest) (*settings.EsmEnablementAccountSetting, error)) *MockEsmEnablementAccountInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Impl provides a mock function with given fields:
func (_m *MockEsmEnablementAccountInterface) Impl() settings.EsmEnablementAccountService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 settings.EsmEnablementAccountService
	if rf, ok := ret.Get(0).(func() settings.EsmEnablementAccountService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(settings.EsmEnablementAccountService)
		}
	}

	return r0
}

// MockEsmEnablementAccountInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockEsmEnablementAccountInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockEsmEnablementAccountInterface_Expecter) Impl() *MockEsmEnablementAccountInterface_Impl_Call {
	return &MockEsmEnablementAccountInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockEsmEnablementAccountInterface_Impl_Call) Run(run func()) *MockEsmEnablementAccountInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEsmEnablementAccountInterface_Impl_Call) Return(_a0 settings.EsmEnablementAccountService) *MockEsmEnablementAccountInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEsmEnablementAccountInterface_Impl_Call) RunAndReturn(run func() settings.EsmEnablementAccountService) *MockEsmEnablementAccountInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, request
func (_m *MockEsmEnablementAccountInterface) Update(ctx context.Context, request settings.UpdateEsmEnablementAccountSettingRequest) (*settings.EsmEnablementAccountSetting, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *settings.EsmEnablementAccountSetting
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, settings.UpdateEsmEnablementAccountSettingRequest) (*settings.EsmEnablementAccountSetting, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, settings.UpdateEsmEnablementAccountSettingRequest) *settings.EsmEnablementAccountSetting); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*settings.EsmEnablementAccountSetting)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, settings.UpdateEsmEnablementAccountSettingRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEsmEnablementAccountInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockEsmEnablementAccountInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - request settings.UpdateEsmEnablementAccountSettingRequest
func (_e *MockEsmEnablementAccountInterface_Expecter) Update(ctx interface{}, request interface{}) *MockEsmEnablementAccountInterface_Update_Call {
	return &MockEsmEnablementAccountInterface_Update_Call{Call: _e.mock.On("Update", ctx, request)}
}

func (_c *MockEsmEnablementAccountInterface_Update_Call) Run(run func(ctx context.Context, request settings.UpdateEsmEnablementAccountSettingRequest)) *MockEsmEnablementAccountInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(settings.UpdateEsmEnablementAccountSettingRequest))
	})
	return _c
}

func (_c *MockEsmEnablementAccountInterface_Update_Call) Return(_a0 *settings.EsmEnablementAccountSetting, _a1 error) *MockEsmEnablementAccountInterface_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEsmEnablementAccountInterface_Update_Call) RunAndReturn(run func(context.Context, settings.UpdateEsmEnablementAccountSettingRequest) (*settings.EsmEnablementAccountSetting, error)) *MockEsmEnablementAccountInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockEsmEnablementAccountInterface) WithImpl(impl settings.EsmEnablementAccountService) settings.EsmEnablementAccountInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 settings.EsmEnablementAccountInterface
	if rf, ok := ret.Get(0).(func(settings.EsmEnablementAccountService) settings.EsmEnablementAccountInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(settings.EsmEnablementAccountInterface)
		}
	}

	return r0
}

// MockEsmEnablementAccountInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockEsmEnablementAccountInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl settings.EsmEnablementAccountService
func (_e *MockEsmEnablementAccountInterface_Expecter) WithImpl(impl interface{}) *MockEsmEnablementAccountInterface_WithImpl_Call {
	return &MockEsmEnablementAccountInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockEsmEnablementAccountInterface_WithImpl_Call) Run(run func(impl settings.EsmEnablementAccountService)) *MockEsmEnablementAccountInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(settings.EsmEnablementAccountService))
	})
	return _c
}

func (_c *MockEsmEnablementAccountInterface_WithImpl_Call) Return(_a0 settings.EsmEnablementAccountInterface) *MockEsmEnablementAccountInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEsmEnablementAccountInterface_WithImpl_Call) RunAndReturn(run func(settings.EsmEnablementAccountService) settings.EsmEnablementAccountInterface) *MockEsmEnablementAccountInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEsmEnablementAccountInterface creates a new instance of MockEsmEnablementAccountInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEsmEnablementAccountInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEsmEnablementAccountInterface {
	mock := &MockEsmEnablementAccountInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
