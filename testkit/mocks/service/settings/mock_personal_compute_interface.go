// Code generated by mockery v2.39.1. DO NOT EDIT.

package settings

import (
	context "context"

	settings "github.com/databricks/databricks-sdk-go/service/settings"
	mock "github.com/stretchr/testify/mock"
)

// MockPersonalComputeInterface is an autogenerated mock type for the PersonalComputeInterface type
type MockPersonalComputeInterface struct {
	mock.Mock
}

type MockPersonalComputeInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPersonalComputeInterface) EXPECT() *MockPersonalComputeInterface_Expecter {
	return &MockPersonalComputeInterface_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: ctx, request
func (_m *MockPersonalComputeInterface) Delete(ctx context.Context, request settings.DeletePersonalComputeSettingRequest) (*settings.DeletePersonalComputeSettingResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *settings.DeletePersonalComputeSettingResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, settings.DeletePersonalComputeSettingRequest) (*settings.DeletePersonalComputeSettingResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, settings.DeletePersonalComputeSettingRequest) *settings.DeletePersonalComputeSettingResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*settings.DeletePersonalComputeSettingResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, settings.DeletePersonalComputeSettingRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPersonalComputeInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockPersonalComputeInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - request settings.DeletePersonalComputeSettingRequest
func (_e *MockPersonalComputeInterface_Expecter) Delete(ctx interface{}, request interface{}) *MockPersonalComputeInterface_Delete_Call {
	return &MockPersonalComputeInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, request)}
}

func (_c *MockPersonalComputeInterface_Delete_Call) Run(run func(ctx context.Context, request settings.DeletePersonalComputeSettingRequest)) *MockPersonalComputeInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(settings.DeletePersonalComputeSettingRequest))
	})
	return _c
}

func (_c *MockPersonalComputeInterface_Delete_Call) Return(_a0 *settings.DeletePersonalComputeSettingResponse, _a1 error) *MockPersonalComputeInterface_Delete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPersonalComputeInterface_Delete_Call) RunAndReturn(run func(context.Context, settings.DeletePersonalComputeSettingRequest) (*settings.DeletePersonalComputeSettingResponse, error)) *MockPersonalComputeInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, request
func (_m *MockPersonalComputeInterface) Get(ctx context.Context, request settings.GetPersonalComputeSettingRequest) (*settings.PersonalComputeSetting, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *settings.PersonalComputeSetting
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, settings.GetPersonalComputeSettingRequest) (*settings.PersonalComputeSetting, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, settings.GetPersonalComputeSettingRequest) *settings.PersonalComputeSetting); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*settings.PersonalComputeSetting)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, settings.GetPersonalComputeSettingRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPersonalComputeInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockPersonalComputeInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - request settings.GetPersonalComputeSettingRequest
func (_e *MockPersonalComputeInterface_Expecter) Get(ctx interface{}, request interface{}) *MockPersonalComputeInterface_Get_Call {
	return &MockPersonalComputeInterface_Get_Call{Call: _e.mock.On("Get", ctx, request)}
}

func (_c *MockPersonalComputeInterface_Get_Call) Run(run func(ctx context.Context, request settings.GetPersonalComputeSettingRequest)) *MockPersonalComputeInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(settings.GetPersonalComputeSettingRequest))
	})
	return _c
}

func (_c *MockPersonalComputeInterface_Get_Call) Return(_a0 *settings.PersonalComputeSetting, _a1 error) *MockPersonalComputeInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPersonalComputeInterface_Get_Call) RunAndReturn(run func(context.Context, settings.GetPersonalComputeSettingRequest) (*settings.PersonalComputeSetting, error)) *MockPersonalComputeInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Impl provides a mock function with given fields:
func (_m *MockPersonalComputeInterface) Impl() settings.PersonalComputeService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 settings.PersonalComputeService
	if rf, ok := ret.Get(0).(func() settings.PersonalComputeService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(settings.PersonalComputeService)
		}
	}

	return r0
}

// MockPersonalComputeInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockPersonalComputeInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockPersonalComputeInterface_Expecter) Impl() *MockPersonalComputeInterface_Impl_Call {
	return &MockPersonalComputeInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockPersonalComputeInterface_Impl_Call) Run(run func()) *MockPersonalComputeInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPersonalComputeInterface_Impl_Call) Return(_a0 settings.PersonalComputeService) *MockPersonalComputeInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPersonalComputeInterface_Impl_Call) RunAndReturn(run func() settings.PersonalComputeService) *MockPersonalComputeInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, request
func (_m *MockPersonalComputeInterface) Update(ctx context.Context, request settings.UpdatePersonalComputeSettingRequest) (*settings.PersonalComputeSetting, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *settings.PersonalComputeSetting
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, settings.UpdatePersonalComputeSettingRequest) (*settings.PersonalComputeSetting, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, settings.UpdatePersonalComputeSettingRequest) *settings.PersonalComputeSetting); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*settings.PersonalComputeSetting)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, settings.UpdatePersonalComputeSettingRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPersonalComputeInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockPersonalComputeInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - request settings.UpdatePersonalComputeSettingRequest
func (_e *MockPersonalComputeInterface_Expecter) Update(ctx interface{}, request interface{}) *MockPersonalComputeInterface_Update_Call {
	return &MockPersonalComputeInterface_Update_Call{Call: _e.mock.On("Update", ctx, request)}
}

func (_c *MockPersonalComputeInterface_Update_Call) Run(run func(ctx context.Context, request settings.UpdatePersonalComputeSettingRequest)) *MockPersonalComputeInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(settings.UpdatePersonalComputeSettingRequest))
	})
	return _c
}

func (_c *MockPersonalComputeInterface_Update_Call) Return(_a0 *settings.PersonalComputeSetting, _a1 error) *MockPersonalComputeInterface_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPersonalComputeInterface_Update_Call) RunAndReturn(run func(context.Context, settings.UpdatePersonalComputeSettingRequest) (*settings.PersonalComputeSetting, error)) *MockPersonalComputeInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockPersonalComputeInterface) WithImpl(impl settings.PersonalComputeService) settings.PersonalComputeInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 settings.PersonalComputeInterface
	if rf, ok := ret.Get(0).(func(settings.PersonalComputeService) settings.PersonalComputeInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(settings.PersonalComputeInterface)
		}
	}

	return r0
}

// MockPersonalComputeInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockPersonalComputeInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl settings.PersonalComputeService
func (_e *MockPersonalComputeInterface_Expecter) WithImpl(impl interface{}) *MockPersonalComputeInterface_WithImpl_Call {
	return &MockPersonalComputeInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockPersonalComputeInterface_WithImpl_Call) Run(run func(impl settings.PersonalComputeService)) *MockPersonalComputeInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(settings.PersonalComputeService))
	})
	return _c
}

func (_c *MockPersonalComputeInterface_WithImpl_Call) Return(_a0 settings.PersonalComputeInterface) *MockPersonalComputeInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPersonalComputeInterface_WithImpl_Call) RunAndReturn(run func(settings.PersonalComputeService) settings.PersonalComputeInterface) *MockPersonalComputeInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPersonalComputeInterface creates a new instance of MockPersonalComputeInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPersonalComputeInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPersonalComputeInterface {
	mock := &MockPersonalComputeInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
