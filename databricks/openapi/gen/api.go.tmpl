// Code generated from OpenAPI specs by Databricks SDK Generator. DO NOT EDIT.

package {{.Name}}

import (
	"context"

	"github.com/databricks/databricks-sdk-go/databricks/client"
)

{{.Comment "// " 80}}
type {{.PascalName}}Service interface {
	{{- range .Methods}}
    {{.Comment "    // " 80}}
    {{.PascalName}}(ctx context.Context{{if .Request}}, {{.Request.CamelName}} {{.Request.PascalName}}{{end}}) {{if .Response}}(*{{.Response.PascalName}}, error){{else}}error{{end}}{{end}}
	{{- range .ByPathParamsMethods}}{{.Comment "// " 80}}
	{{.PascalName}}(ctx context.Context{{range .Params}}, {{.CamelName}} {{template "type" .Entity}}{{end}}) {{if .Method.Response}}(*{{.Method.Response.PascalName}}, error){{else}}error{{end}}{{end}}
}

func New(client *client.DatabricksClient) {{.PascalName}}Service {
	return &{{.PascalName}}API{
		client: client,
	}
}

type {{.PascalName}}API struct {
	client *client.DatabricksClient
}

{{range .Methods}}{{.Comment "// " 80}}
func (a *{{.Service.PascalName}}API) {{.PascalName}}(ctx context.Context{{if .Request}}, request {{.Request.PascalName}}{{end}}) {{if .Response}}(*{{.Response.PascalName}}, error){{else}}error{{end}} {
	{{if .Response}}var {{.Response.CamelName}} {{.Response.PascalName}}
	{{end -}}
	path := {{if .PathParts -}}
		{{ range  $i, $e := .PathParts }}{{ if $i }}+{{ end }}"{{$e.Prefix}}"+request.{{$e.Field.PascalName}}{{ end }}
	{{- else}}"{{.Path}}"{{end}}
	err := a.client.{{.TitleVerb}}(ctx, path, {{if .Request}}request{{else}}nil{{end}}{{if .Response}}, &{{.Response.CamelName}}{{else if .CanHaveResponseBody}}, nil{{end}})
	return {{if .Response}}&{{.Response.CamelName}}, {{end}}err
}

{{end -}}

{{range .ByPathParamsMethods}}{{.Comment "// " 80}}
func (a *{{.Method.Service.PascalName}}API) {{.PascalName}}(ctx context.Context{{range .Params}}, {{.CamelName}} {{template "type" .Entity}}{{end}}) {{if .Method.Response}}(*{{.Method.Response.PascalName}}, error){{else}}error{{end}} {
	return a.{{.Method.PascalName}}(ctx, {{.Method.Request.PascalName}}{
		{{- range .Params}}
		{{.PascalName}}: {{.CamelName}},{{end}}
	})
}
{{end}}