// Code generated by mockery v2.38.0. DO NOT EDIT.

package catalog

import (
	context "context"

	catalog "github.com/databricks/databricks-sdk-go/service/catalog"

	listing "github.com/databricks/databricks-sdk-go/listing"

	mock "github.com/stretchr/testify/mock"
)

// MockCatalogsAPIInterface is an autogenerated mock type for the CatalogsAPIInterface type
type MockCatalogsAPIInterface struct {
	mock.Mock
}

type MockCatalogsAPIInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCatalogsAPIInterface) EXPECT() *MockCatalogsAPIInterface_Expecter {
	return &MockCatalogsAPIInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, request
func (_m *MockCatalogsAPIInterface) Create(ctx context.Context, request catalog.CreateCatalog) (*catalog.CatalogInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *catalog.CatalogInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.CreateCatalog) (*catalog.CatalogInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.CreateCatalog) *catalog.CatalogInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.CatalogInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.CreateCatalog) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCatalogsAPIInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockCatalogsAPIInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.CreateCatalog
func (_e *MockCatalogsAPIInterface_Expecter) Create(ctx interface{}, request interface{}) *MockCatalogsAPIInterface_Create_Call {
	return &MockCatalogsAPIInterface_Create_Call{Call: _e.mock.On("Create", ctx, request)}
}

func (_c *MockCatalogsAPIInterface_Create_Call) Run(run func(ctx context.Context, request catalog.CreateCatalog)) *MockCatalogsAPIInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.CreateCatalog))
	})
	return _c
}

func (_c *MockCatalogsAPIInterface_Create_Call) Return(_a0 *catalog.CatalogInfo, _a1 error) *MockCatalogsAPIInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCatalogsAPIInterface_Create_Call) RunAndReturn(run func(context.Context, catalog.CreateCatalog) (*catalog.CatalogInfo, error)) *MockCatalogsAPIInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, request
func (_m *MockCatalogsAPIInterface) Delete(ctx context.Context, request catalog.DeleteCatalogRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.DeleteCatalogRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCatalogsAPIInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockCatalogsAPIInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.DeleteCatalogRequest
func (_e *MockCatalogsAPIInterface_Expecter) Delete(ctx interface{}, request interface{}) *MockCatalogsAPIInterface_Delete_Call {
	return &MockCatalogsAPIInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, request)}
}

func (_c *MockCatalogsAPIInterface_Delete_Call) Run(run func(ctx context.Context, request catalog.DeleteCatalogRequest)) *MockCatalogsAPIInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.DeleteCatalogRequest))
	})
	return _c
}

func (_c *MockCatalogsAPIInterface_Delete_Call) Return(_a0 error) *MockCatalogsAPIInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCatalogsAPIInterface_Delete_Call) RunAndReturn(run func(context.Context, catalog.DeleteCatalogRequest) error) *MockCatalogsAPIInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByName provides a mock function with given fields: ctx, name
func (_m *MockCatalogsAPIInterface) DeleteByName(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByName")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCatalogsAPIInterface_DeleteByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByName'
type MockCatalogsAPIInterface_DeleteByName_Call struct {
	*mock.Call
}

// DeleteByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockCatalogsAPIInterface_Expecter) DeleteByName(ctx interface{}, name interface{}) *MockCatalogsAPIInterface_DeleteByName_Call {
	return &MockCatalogsAPIInterface_DeleteByName_Call{Call: _e.mock.On("DeleteByName", ctx, name)}
}

func (_c *MockCatalogsAPIInterface_DeleteByName_Call) Run(run func(ctx context.Context, name string)) *MockCatalogsAPIInterface_DeleteByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockCatalogsAPIInterface_DeleteByName_Call) Return(_a0 error) *MockCatalogsAPIInterface_DeleteByName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCatalogsAPIInterface_DeleteByName_Call) RunAndReturn(run func(context.Context, string) error) *MockCatalogsAPIInterface_DeleteByName_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, request
func (_m *MockCatalogsAPIInterface) Get(ctx context.Context, request catalog.GetCatalogRequest) (*catalog.CatalogInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *catalog.CatalogInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.GetCatalogRequest) (*catalog.CatalogInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.GetCatalogRequest) *catalog.CatalogInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.CatalogInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.GetCatalogRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCatalogsAPIInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockCatalogsAPIInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.GetCatalogRequest
func (_e *MockCatalogsAPIInterface_Expecter) Get(ctx interface{}, request interface{}) *MockCatalogsAPIInterface_Get_Call {
	return &MockCatalogsAPIInterface_Get_Call{Call: _e.mock.On("Get", ctx, request)}
}

func (_c *MockCatalogsAPIInterface_Get_Call) Run(run func(ctx context.Context, request catalog.GetCatalogRequest)) *MockCatalogsAPIInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.GetCatalogRequest))
	})
	return _c
}

func (_c *MockCatalogsAPIInterface_Get_Call) Return(_a0 *catalog.CatalogInfo, _a1 error) *MockCatalogsAPIInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCatalogsAPIInterface_Get_Call) RunAndReturn(run func(context.Context, catalog.GetCatalogRequest) (*catalog.CatalogInfo, error)) *MockCatalogsAPIInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByName provides a mock function with given fields: ctx, name
func (_m *MockCatalogsAPIInterface) GetByName(ctx context.Context, name string) (*catalog.CatalogInfo, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetByName")
	}

	var r0 *catalog.CatalogInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*catalog.CatalogInfo, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *catalog.CatalogInfo); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.CatalogInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCatalogsAPIInterface_GetByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByName'
type MockCatalogsAPIInterface_GetByName_Call struct {
	*mock.Call
}

// GetByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockCatalogsAPIInterface_Expecter) GetByName(ctx interface{}, name interface{}) *MockCatalogsAPIInterface_GetByName_Call {
	return &MockCatalogsAPIInterface_GetByName_Call{Call: _e.mock.On("GetByName", ctx, name)}
}

func (_c *MockCatalogsAPIInterface_GetByName_Call) Run(run func(ctx context.Context, name string)) *MockCatalogsAPIInterface_GetByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockCatalogsAPIInterface_GetByName_Call) Return(_a0 *catalog.CatalogInfo, _a1 error) *MockCatalogsAPIInterface_GetByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCatalogsAPIInterface_GetByName_Call) RunAndReturn(run func(context.Context, string) (*catalog.CatalogInfo, error)) *MockCatalogsAPIInterface_GetByName_Call {
	_c.Call.Return(run)
	return _c
}

// Impl provides a mock function with given fields:
func (_m *MockCatalogsAPIInterface) Impl() catalog.CatalogsService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 catalog.CatalogsService
	if rf, ok := ret.Get(0).(func() catalog.CatalogsService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(catalog.CatalogsService)
		}
	}

	return r0
}

// MockCatalogsAPIInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockCatalogsAPIInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockCatalogsAPIInterface_Expecter) Impl() *MockCatalogsAPIInterface_Impl_Call {
	return &MockCatalogsAPIInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockCatalogsAPIInterface_Impl_Call) Run(run func()) *MockCatalogsAPIInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCatalogsAPIInterface_Impl_Call) Return(_a0 catalog.CatalogsService) *MockCatalogsAPIInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCatalogsAPIInterface_Impl_Call) RunAndReturn(run func() catalog.CatalogsService) *MockCatalogsAPIInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx
func (_m *MockCatalogsAPIInterface) List(ctx context.Context) *listing.PaginatingIterator[struct{}, *catalog.ListCatalogsResponse, catalog.CatalogInfo] {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *listing.PaginatingIterator[struct{}, *catalog.ListCatalogsResponse, catalog.CatalogInfo]
	if rf, ok := ret.Get(0).(func(context.Context) *listing.PaginatingIterator[struct{}, *catalog.ListCatalogsResponse, catalog.CatalogInfo]); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*listing.PaginatingIterator[struct{}, *catalog.ListCatalogsResponse, catalog.CatalogInfo])
		}
	}

	return r0
}

// MockCatalogsAPIInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockCatalogsAPIInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockCatalogsAPIInterface_Expecter) List(ctx interface{}) *MockCatalogsAPIInterface_List_Call {
	return &MockCatalogsAPIInterface_List_Call{Call: _e.mock.On("List", ctx)}
}

func (_c *MockCatalogsAPIInterface_List_Call) Run(run func(ctx context.Context)) *MockCatalogsAPIInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockCatalogsAPIInterface_List_Call) Return(_a0 *listing.PaginatingIterator[struct{}, *catalog.ListCatalogsResponse, catalog.CatalogInfo]) *MockCatalogsAPIInterface_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCatalogsAPIInterface_List_Call) RunAndReturn(run func(context.Context) *listing.PaginatingIterator[struct{}, *catalog.ListCatalogsResponse, catalog.CatalogInfo]) *MockCatalogsAPIInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListAll provides a mock function with given fields: ctx
func (_m *MockCatalogsAPIInterface) ListAll(ctx context.Context) ([]catalog.CatalogInfo, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListAll")
	}

	var r0 []catalog.CatalogInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]catalog.CatalogInfo, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []catalog.CatalogInfo); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]catalog.CatalogInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCatalogsAPIInterface_ListAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAll'
type MockCatalogsAPIInterface_ListAll_Call struct {
	*mock.Call
}

// ListAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockCatalogsAPIInterface_Expecter) ListAll(ctx interface{}) *MockCatalogsAPIInterface_ListAll_Call {
	return &MockCatalogsAPIInterface_ListAll_Call{Call: _e.mock.On("ListAll", ctx)}
}

func (_c *MockCatalogsAPIInterface_ListAll_Call) Run(run func(ctx context.Context)) *MockCatalogsAPIInterface_ListAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockCatalogsAPIInterface_ListAll_Call) Return(_a0 []catalog.CatalogInfo, _a1 error) *MockCatalogsAPIInterface_ListAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCatalogsAPIInterface_ListAll_Call) RunAndReturn(run func(context.Context) ([]catalog.CatalogInfo, error)) *MockCatalogsAPIInterface_ListAll_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, request
func (_m *MockCatalogsAPIInterface) Update(ctx context.Context, request catalog.UpdateCatalog) (*catalog.CatalogInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *catalog.CatalogInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.UpdateCatalog) (*catalog.CatalogInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.UpdateCatalog) *catalog.CatalogInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.CatalogInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.UpdateCatalog) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCatalogsAPIInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockCatalogsAPIInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.UpdateCatalog
func (_e *MockCatalogsAPIInterface_Expecter) Update(ctx interface{}, request interface{}) *MockCatalogsAPIInterface_Update_Call {
	return &MockCatalogsAPIInterface_Update_Call{Call: _e.mock.On("Update", ctx, request)}
}

func (_c *MockCatalogsAPIInterface_Update_Call) Run(run func(ctx context.Context, request catalog.UpdateCatalog)) *MockCatalogsAPIInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.UpdateCatalog))
	})
	return _c
}

func (_c *MockCatalogsAPIInterface_Update_Call) Return(_a0 *catalog.CatalogInfo, _a1 error) *MockCatalogsAPIInterface_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCatalogsAPIInterface_Update_Call) RunAndReturn(run func(context.Context, catalog.UpdateCatalog) (*catalog.CatalogInfo, error)) *MockCatalogsAPIInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockCatalogsAPIInterface) WithImpl(impl catalog.CatalogsService) catalog.CatalogsAPIInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 catalog.CatalogsAPIInterface
	if rf, ok := ret.Get(0).(func(catalog.CatalogsService) catalog.CatalogsAPIInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(catalog.CatalogsAPIInterface)
		}
	}

	return r0
}

// MockCatalogsAPIInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockCatalogsAPIInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl catalog.CatalogsService
func (_e *MockCatalogsAPIInterface_Expecter) WithImpl(impl interface{}) *MockCatalogsAPIInterface_WithImpl_Call {
	return &MockCatalogsAPIInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockCatalogsAPIInterface_WithImpl_Call) Run(run func(impl catalog.CatalogsService)) *MockCatalogsAPIInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(catalog.CatalogsService))
	})
	return _c
}

func (_c *MockCatalogsAPIInterface_WithImpl_Call) Return(_a0 catalog.CatalogsAPIInterface) *MockCatalogsAPIInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCatalogsAPIInterface_WithImpl_Call) RunAndReturn(run func(catalog.CatalogsService) catalog.CatalogsAPIInterface) *MockCatalogsAPIInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCatalogsAPIInterface creates a new instance of MockCatalogsAPIInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCatalogsAPIInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCatalogsAPIInterface {
	mock := &MockCatalogsAPIInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
