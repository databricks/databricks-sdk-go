// Code generated by mockery v2.38.0. DO NOT EDIT.

package catalog

import (
	context "context"

	catalog "github.com/databricks/databricks-sdk-go/service/catalog"

	mock "github.com/stretchr/testify/mock"
)

// MockWorkspaceBindingsAPIInterface is an autogenerated mock type for the WorkspaceBindingsAPIInterface type
type MockWorkspaceBindingsAPIInterface struct {
	mock.Mock
}

type MockWorkspaceBindingsAPIInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWorkspaceBindingsAPIInterface) EXPECT() *MockWorkspaceBindingsAPIInterface_Expecter {
	return &MockWorkspaceBindingsAPIInterface_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: ctx, request
func (_m *MockWorkspaceBindingsAPIInterface) Get(ctx context.Context, request catalog.GetWorkspaceBindingRequest) (*catalog.CurrentWorkspaceBindings, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *catalog.CurrentWorkspaceBindings
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.GetWorkspaceBindingRequest) (*catalog.CurrentWorkspaceBindings, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.GetWorkspaceBindingRequest) *catalog.CurrentWorkspaceBindings); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.CurrentWorkspaceBindings)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.GetWorkspaceBindingRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWorkspaceBindingsAPIInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockWorkspaceBindingsAPIInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.GetWorkspaceBindingRequest
func (_e *MockWorkspaceBindingsAPIInterface_Expecter) Get(ctx interface{}, request interface{}) *MockWorkspaceBindingsAPIInterface_Get_Call {
	return &MockWorkspaceBindingsAPIInterface_Get_Call{Call: _e.mock.On("Get", ctx, request)}
}

func (_c *MockWorkspaceBindingsAPIInterface_Get_Call) Run(run func(ctx context.Context, request catalog.GetWorkspaceBindingRequest)) *MockWorkspaceBindingsAPIInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.GetWorkspaceBindingRequest))
	})
	return _c
}

func (_c *MockWorkspaceBindingsAPIInterface_Get_Call) Return(_a0 *catalog.CurrentWorkspaceBindings, _a1 error) *MockWorkspaceBindingsAPIInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWorkspaceBindingsAPIInterface_Get_Call) RunAndReturn(run func(context.Context, catalog.GetWorkspaceBindingRequest) (*catalog.CurrentWorkspaceBindings, error)) *MockWorkspaceBindingsAPIInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetBindings provides a mock function with given fields: ctx, request
func (_m *MockWorkspaceBindingsAPIInterface) GetBindings(ctx context.Context, request catalog.GetBindingsRequest) (*catalog.WorkspaceBindingsResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetBindings")
	}

	var r0 *catalog.WorkspaceBindingsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.GetBindingsRequest) (*catalog.WorkspaceBindingsResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.GetBindingsRequest) *catalog.WorkspaceBindingsResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.WorkspaceBindingsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.GetBindingsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWorkspaceBindingsAPIInterface_GetBindings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBindings'
type MockWorkspaceBindingsAPIInterface_GetBindings_Call struct {
	*mock.Call
}

// GetBindings is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.GetBindingsRequest
func (_e *MockWorkspaceBindingsAPIInterface_Expecter) GetBindings(ctx interface{}, request interface{}) *MockWorkspaceBindingsAPIInterface_GetBindings_Call {
	return &MockWorkspaceBindingsAPIInterface_GetBindings_Call{Call: _e.mock.On("GetBindings", ctx, request)}
}

func (_c *MockWorkspaceBindingsAPIInterface_GetBindings_Call) Run(run func(ctx context.Context, request catalog.GetBindingsRequest)) *MockWorkspaceBindingsAPIInterface_GetBindings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.GetBindingsRequest))
	})
	return _c
}

func (_c *MockWorkspaceBindingsAPIInterface_GetBindings_Call) Return(_a0 *catalog.WorkspaceBindingsResponse, _a1 error) *MockWorkspaceBindingsAPIInterface_GetBindings_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWorkspaceBindingsAPIInterface_GetBindings_Call) RunAndReturn(run func(context.Context, catalog.GetBindingsRequest) (*catalog.WorkspaceBindingsResponse, error)) *MockWorkspaceBindingsAPIInterface_GetBindings_Call {
	_c.Call.Return(run)
	return _c
}

// GetBindingsBySecurableTypeAndSecurableName provides a mock function with given fields: ctx, securableType, securableName
func (_m *MockWorkspaceBindingsAPIInterface) GetBindingsBySecurableTypeAndSecurableName(ctx context.Context, securableType string, securableName string) (*catalog.WorkspaceBindingsResponse, error) {
	ret := _m.Called(ctx, securableType, securableName)

	if len(ret) == 0 {
		panic("no return value specified for GetBindingsBySecurableTypeAndSecurableName")
	}

	var r0 *catalog.WorkspaceBindingsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*catalog.WorkspaceBindingsResponse, error)); ok {
		return rf(ctx, securableType, securableName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *catalog.WorkspaceBindingsResponse); ok {
		r0 = rf(ctx, securableType, securableName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.WorkspaceBindingsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, securableType, securableName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWorkspaceBindingsAPIInterface_GetBindingsBySecurableTypeAndSecurableName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBindingsBySecurableTypeAndSecurableName'
type MockWorkspaceBindingsAPIInterface_GetBindingsBySecurableTypeAndSecurableName_Call struct {
	*mock.Call
}

// GetBindingsBySecurableTypeAndSecurableName is a helper method to define mock.On call
//   - ctx context.Context
//   - securableType string
//   - securableName string
func (_e *MockWorkspaceBindingsAPIInterface_Expecter) GetBindingsBySecurableTypeAndSecurableName(ctx interface{}, securableType interface{}, securableName interface{}) *MockWorkspaceBindingsAPIInterface_GetBindingsBySecurableTypeAndSecurableName_Call {
	return &MockWorkspaceBindingsAPIInterface_GetBindingsBySecurableTypeAndSecurableName_Call{Call: _e.mock.On("GetBindingsBySecurableTypeAndSecurableName", ctx, securableType, securableName)}
}

func (_c *MockWorkspaceBindingsAPIInterface_GetBindingsBySecurableTypeAndSecurableName_Call) Run(run func(ctx context.Context, securableType string, securableName string)) *MockWorkspaceBindingsAPIInterface_GetBindingsBySecurableTypeAndSecurableName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockWorkspaceBindingsAPIInterface_GetBindingsBySecurableTypeAndSecurableName_Call) Return(_a0 *catalog.WorkspaceBindingsResponse, _a1 error) *MockWorkspaceBindingsAPIInterface_GetBindingsBySecurableTypeAndSecurableName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWorkspaceBindingsAPIInterface_GetBindingsBySecurableTypeAndSecurableName_Call) RunAndReturn(run func(context.Context, string, string) (*catalog.WorkspaceBindingsResponse, error)) *MockWorkspaceBindingsAPIInterface_GetBindingsBySecurableTypeAndSecurableName_Call {
	_c.Call.Return(run)
	return _c
}

// GetByName provides a mock function with given fields: ctx, name
func (_m *MockWorkspaceBindingsAPIInterface) GetByName(ctx context.Context, name string) (*catalog.CurrentWorkspaceBindings, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetByName")
	}

	var r0 *catalog.CurrentWorkspaceBindings
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*catalog.CurrentWorkspaceBindings, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *catalog.CurrentWorkspaceBindings); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.CurrentWorkspaceBindings)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWorkspaceBindingsAPIInterface_GetByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByName'
type MockWorkspaceBindingsAPIInterface_GetByName_Call struct {
	*mock.Call
}

// GetByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockWorkspaceBindingsAPIInterface_Expecter) GetByName(ctx interface{}, name interface{}) *MockWorkspaceBindingsAPIInterface_GetByName_Call {
	return &MockWorkspaceBindingsAPIInterface_GetByName_Call{Call: _e.mock.On("GetByName", ctx, name)}
}

func (_c *MockWorkspaceBindingsAPIInterface_GetByName_Call) Run(run func(ctx context.Context, name string)) *MockWorkspaceBindingsAPIInterface_GetByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockWorkspaceBindingsAPIInterface_GetByName_Call) Return(_a0 *catalog.CurrentWorkspaceBindings, _a1 error) *MockWorkspaceBindingsAPIInterface_GetByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWorkspaceBindingsAPIInterface_GetByName_Call) RunAndReturn(run func(context.Context, string) (*catalog.CurrentWorkspaceBindings, error)) *MockWorkspaceBindingsAPIInterface_GetByName_Call {
	_c.Call.Return(run)
	return _c
}

// Impl provides a mock function with given fields:
func (_m *MockWorkspaceBindingsAPIInterface) Impl() catalog.WorkspaceBindingsService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 catalog.WorkspaceBindingsService
	if rf, ok := ret.Get(0).(func() catalog.WorkspaceBindingsService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(catalog.WorkspaceBindingsService)
		}
	}

	return r0
}

// MockWorkspaceBindingsAPIInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockWorkspaceBindingsAPIInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockWorkspaceBindingsAPIInterface_Expecter) Impl() *MockWorkspaceBindingsAPIInterface_Impl_Call {
	return &MockWorkspaceBindingsAPIInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockWorkspaceBindingsAPIInterface_Impl_Call) Run(run func()) *MockWorkspaceBindingsAPIInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockWorkspaceBindingsAPIInterface_Impl_Call) Return(_a0 catalog.WorkspaceBindingsService) *MockWorkspaceBindingsAPIInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWorkspaceBindingsAPIInterface_Impl_Call) RunAndReturn(run func() catalog.WorkspaceBindingsService) *MockWorkspaceBindingsAPIInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, request
func (_m *MockWorkspaceBindingsAPIInterface) Update(ctx context.Context, request catalog.UpdateWorkspaceBindings) (*catalog.CurrentWorkspaceBindings, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *catalog.CurrentWorkspaceBindings
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.UpdateWorkspaceBindings) (*catalog.CurrentWorkspaceBindings, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.UpdateWorkspaceBindings) *catalog.CurrentWorkspaceBindings); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.CurrentWorkspaceBindings)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.UpdateWorkspaceBindings) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWorkspaceBindingsAPIInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockWorkspaceBindingsAPIInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.UpdateWorkspaceBindings
func (_e *MockWorkspaceBindingsAPIInterface_Expecter) Update(ctx interface{}, request interface{}) *MockWorkspaceBindingsAPIInterface_Update_Call {
	return &MockWorkspaceBindingsAPIInterface_Update_Call{Call: _e.mock.On("Update", ctx, request)}
}

func (_c *MockWorkspaceBindingsAPIInterface_Update_Call) Run(run func(ctx context.Context, request catalog.UpdateWorkspaceBindings)) *MockWorkspaceBindingsAPIInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.UpdateWorkspaceBindings))
	})
	return _c
}

func (_c *MockWorkspaceBindingsAPIInterface_Update_Call) Return(_a0 *catalog.CurrentWorkspaceBindings, _a1 error) *MockWorkspaceBindingsAPIInterface_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWorkspaceBindingsAPIInterface_Update_Call) RunAndReturn(run func(context.Context, catalog.UpdateWorkspaceBindings) (*catalog.CurrentWorkspaceBindings, error)) *MockWorkspaceBindingsAPIInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBindings provides a mock function with given fields: ctx, request
func (_m *MockWorkspaceBindingsAPIInterface) UpdateBindings(ctx context.Context, request catalog.UpdateWorkspaceBindingsParameters) (*catalog.WorkspaceBindingsResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBindings")
	}

	var r0 *catalog.WorkspaceBindingsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.UpdateWorkspaceBindingsParameters) (*catalog.WorkspaceBindingsResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.UpdateWorkspaceBindingsParameters) *catalog.WorkspaceBindingsResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.WorkspaceBindingsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.UpdateWorkspaceBindingsParameters) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWorkspaceBindingsAPIInterface_UpdateBindings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBindings'
type MockWorkspaceBindingsAPIInterface_UpdateBindings_Call struct {
	*mock.Call
}

// UpdateBindings is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.UpdateWorkspaceBindingsParameters
func (_e *MockWorkspaceBindingsAPIInterface_Expecter) UpdateBindings(ctx interface{}, request interface{}) *MockWorkspaceBindingsAPIInterface_UpdateBindings_Call {
	return &MockWorkspaceBindingsAPIInterface_UpdateBindings_Call{Call: _e.mock.On("UpdateBindings", ctx, request)}
}

func (_c *MockWorkspaceBindingsAPIInterface_UpdateBindings_Call) Run(run func(ctx context.Context, request catalog.UpdateWorkspaceBindingsParameters)) *MockWorkspaceBindingsAPIInterface_UpdateBindings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.UpdateWorkspaceBindingsParameters))
	})
	return _c
}

func (_c *MockWorkspaceBindingsAPIInterface_UpdateBindings_Call) Return(_a0 *catalog.WorkspaceBindingsResponse, _a1 error) *MockWorkspaceBindingsAPIInterface_UpdateBindings_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWorkspaceBindingsAPIInterface_UpdateBindings_Call) RunAndReturn(run func(context.Context, catalog.UpdateWorkspaceBindingsParameters) (*catalog.WorkspaceBindingsResponse, error)) *MockWorkspaceBindingsAPIInterface_UpdateBindings_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockWorkspaceBindingsAPIInterface) WithImpl(impl catalog.WorkspaceBindingsService) catalog.WorkspaceBindingsAPIInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 catalog.WorkspaceBindingsAPIInterface
	if rf, ok := ret.Get(0).(func(catalog.WorkspaceBindingsService) catalog.WorkspaceBindingsAPIInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(catalog.WorkspaceBindingsAPIInterface)
		}
	}

	return r0
}

// MockWorkspaceBindingsAPIInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockWorkspaceBindingsAPIInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl catalog.WorkspaceBindingsService
func (_e *MockWorkspaceBindingsAPIInterface_Expecter) WithImpl(impl interface{}) *MockWorkspaceBindingsAPIInterface_WithImpl_Call {
	return &MockWorkspaceBindingsAPIInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockWorkspaceBindingsAPIInterface_WithImpl_Call) Run(run func(impl catalog.WorkspaceBindingsService)) *MockWorkspaceBindingsAPIInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(catalog.WorkspaceBindingsService))
	})
	return _c
}

func (_c *MockWorkspaceBindingsAPIInterface_WithImpl_Call) Return(_a0 catalog.WorkspaceBindingsAPIInterface) *MockWorkspaceBindingsAPIInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWorkspaceBindingsAPIInterface_WithImpl_Call) RunAndReturn(run func(catalog.WorkspaceBindingsService) catalog.WorkspaceBindingsAPIInterface) *MockWorkspaceBindingsAPIInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWorkspaceBindingsAPIInterface creates a new instance of MockWorkspaceBindingsAPIInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWorkspaceBindingsAPIInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWorkspaceBindingsAPIInterface {
	mock := &MockWorkspaceBindingsAPIInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
