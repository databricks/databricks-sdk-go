// Code generated by mockery v2.38.0. DO NOT EDIT.

package catalog

import (
	context "context"

	catalog "github.com/databricks/databricks-sdk-go/service/catalog"

	listing "github.com/databricks/databricks-sdk-go/listing"

	mock "github.com/stretchr/testify/mock"
)

// MockExternalLocationsAPIInterface is an autogenerated mock type for the ExternalLocationsAPIInterface type
type MockExternalLocationsAPIInterface struct {
	mock.Mock
}

type MockExternalLocationsAPIInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExternalLocationsAPIInterface) EXPECT() *MockExternalLocationsAPIInterface_Expecter {
	return &MockExternalLocationsAPIInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, request
func (_m *MockExternalLocationsAPIInterface) Create(ctx context.Context, request catalog.CreateExternalLocation) (*catalog.ExternalLocationInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *catalog.ExternalLocationInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.CreateExternalLocation) (*catalog.ExternalLocationInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.CreateExternalLocation) *catalog.ExternalLocationInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.ExternalLocationInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.CreateExternalLocation) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExternalLocationsAPIInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockExternalLocationsAPIInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.CreateExternalLocation
func (_e *MockExternalLocationsAPIInterface_Expecter) Create(ctx interface{}, request interface{}) *MockExternalLocationsAPIInterface_Create_Call {
	return &MockExternalLocationsAPIInterface_Create_Call{Call: _e.mock.On("Create", ctx, request)}
}

func (_c *MockExternalLocationsAPIInterface_Create_Call) Run(run func(ctx context.Context, request catalog.CreateExternalLocation)) *MockExternalLocationsAPIInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.CreateExternalLocation))
	})
	return _c
}

func (_c *MockExternalLocationsAPIInterface_Create_Call) Return(_a0 *catalog.ExternalLocationInfo, _a1 error) *MockExternalLocationsAPIInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExternalLocationsAPIInterface_Create_Call) RunAndReturn(run func(context.Context, catalog.CreateExternalLocation) (*catalog.ExternalLocationInfo, error)) *MockExternalLocationsAPIInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, request
func (_m *MockExternalLocationsAPIInterface) Delete(ctx context.Context, request catalog.DeleteExternalLocationRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.DeleteExternalLocationRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockExternalLocationsAPIInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockExternalLocationsAPIInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.DeleteExternalLocationRequest
func (_e *MockExternalLocationsAPIInterface_Expecter) Delete(ctx interface{}, request interface{}) *MockExternalLocationsAPIInterface_Delete_Call {
	return &MockExternalLocationsAPIInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, request)}
}

func (_c *MockExternalLocationsAPIInterface_Delete_Call) Run(run func(ctx context.Context, request catalog.DeleteExternalLocationRequest)) *MockExternalLocationsAPIInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.DeleteExternalLocationRequest))
	})
	return _c
}

func (_c *MockExternalLocationsAPIInterface_Delete_Call) Return(_a0 error) *MockExternalLocationsAPIInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExternalLocationsAPIInterface_Delete_Call) RunAndReturn(run func(context.Context, catalog.DeleteExternalLocationRequest) error) *MockExternalLocationsAPIInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByName provides a mock function with given fields: ctx, name
func (_m *MockExternalLocationsAPIInterface) DeleteByName(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByName")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockExternalLocationsAPIInterface_DeleteByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByName'
type MockExternalLocationsAPIInterface_DeleteByName_Call struct {
	*mock.Call
}

// DeleteByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockExternalLocationsAPIInterface_Expecter) DeleteByName(ctx interface{}, name interface{}) *MockExternalLocationsAPIInterface_DeleteByName_Call {
	return &MockExternalLocationsAPIInterface_DeleteByName_Call{Call: _e.mock.On("DeleteByName", ctx, name)}
}

func (_c *MockExternalLocationsAPIInterface_DeleteByName_Call) Run(run func(ctx context.Context, name string)) *MockExternalLocationsAPIInterface_DeleteByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockExternalLocationsAPIInterface_DeleteByName_Call) Return(_a0 error) *MockExternalLocationsAPIInterface_DeleteByName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExternalLocationsAPIInterface_DeleteByName_Call) RunAndReturn(run func(context.Context, string) error) *MockExternalLocationsAPIInterface_DeleteByName_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, request
func (_m *MockExternalLocationsAPIInterface) Get(ctx context.Context, request catalog.GetExternalLocationRequest) (*catalog.ExternalLocationInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *catalog.ExternalLocationInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.GetExternalLocationRequest) (*catalog.ExternalLocationInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.GetExternalLocationRequest) *catalog.ExternalLocationInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.ExternalLocationInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.GetExternalLocationRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExternalLocationsAPIInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockExternalLocationsAPIInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.GetExternalLocationRequest
func (_e *MockExternalLocationsAPIInterface_Expecter) Get(ctx interface{}, request interface{}) *MockExternalLocationsAPIInterface_Get_Call {
	return &MockExternalLocationsAPIInterface_Get_Call{Call: _e.mock.On("Get", ctx, request)}
}

func (_c *MockExternalLocationsAPIInterface_Get_Call) Run(run func(ctx context.Context, request catalog.GetExternalLocationRequest)) *MockExternalLocationsAPIInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.GetExternalLocationRequest))
	})
	return _c
}

func (_c *MockExternalLocationsAPIInterface_Get_Call) Return(_a0 *catalog.ExternalLocationInfo, _a1 error) *MockExternalLocationsAPIInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExternalLocationsAPIInterface_Get_Call) RunAndReturn(run func(context.Context, catalog.GetExternalLocationRequest) (*catalog.ExternalLocationInfo, error)) *MockExternalLocationsAPIInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByName provides a mock function with given fields: ctx, name
func (_m *MockExternalLocationsAPIInterface) GetByName(ctx context.Context, name string) (*catalog.ExternalLocationInfo, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetByName")
	}

	var r0 *catalog.ExternalLocationInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*catalog.ExternalLocationInfo, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *catalog.ExternalLocationInfo); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.ExternalLocationInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExternalLocationsAPIInterface_GetByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByName'
type MockExternalLocationsAPIInterface_GetByName_Call struct {
	*mock.Call
}

// GetByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockExternalLocationsAPIInterface_Expecter) GetByName(ctx interface{}, name interface{}) *MockExternalLocationsAPIInterface_GetByName_Call {
	return &MockExternalLocationsAPIInterface_GetByName_Call{Call: _e.mock.On("GetByName", ctx, name)}
}

func (_c *MockExternalLocationsAPIInterface_GetByName_Call) Run(run func(ctx context.Context, name string)) *MockExternalLocationsAPIInterface_GetByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockExternalLocationsAPIInterface_GetByName_Call) Return(_a0 *catalog.ExternalLocationInfo, _a1 error) *MockExternalLocationsAPIInterface_GetByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExternalLocationsAPIInterface_GetByName_Call) RunAndReturn(run func(context.Context, string) (*catalog.ExternalLocationInfo, error)) *MockExternalLocationsAPIInterface_GetByName_Call {
	_c.Call.Return(run)
	return _c
}

// Impl provides a mock function with given fields:
func (_m *MockExternalLocationsAPIInterface) Impl() catalog.ExternalLocationsService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 catalog.ExternalLocationsService
	if rf, ok := ret.Get(0).(func() catalog.ExternalLocationsService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(catalog.ExternalLocationsService)
		}
	}

	return r0
}

// MockExternalLocationsAPIInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockExternalLocationsAPIInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockExternalLocationsAPIInterface_Expecter) Impl() *MockExternalLocationsAPIInterface_Impl_Call {
	return &MockExternalLocationsAPIInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockExternalLocationsAPIInterface_Impl_Call) Run(run func()) *MockExternalLocationsAPIInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockExternalLocationsAPIInterface_Impl_Call) Return(_a0 catalog.ExternalLocationsService) *MockExternalLocationsAPIInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExternalLocationsAPIInterface_Impl_Call) RunAndReturn(run func() catalog.ExternalLocationsService) *MockExternalLocationsAPIInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx
func (_m *MockExternalLocationsAPIInterface) List(ctx context.Context) *listing.PaginatingIterator[struct{}, *catalog.ListExternalLocationsResponse, catalog.ExternalLocationInfo] {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *listing.PaginatingIterator[struct{}, *catalog.ListExternalLocationsResponse, catalog.ExternalLocationInfo]
	if rf, ok := ret.Get(0).(func(context.Context) *listing.PaginatingIterator[struct{}, *catalog.ListExternalLocationsResponse, catalog.ExternalLocationInfo]); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*listing.PaginatingIterator[struct{}, *catalog.ListExternalLocationsResponse, catalog.ExternalLocationInfo])
		}
	}

	return r0
}

// MockExternalLocationsAPIInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockExternalLocationsAPIInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockExternalLocationsAPIInterface_Expecter) List(ctx interface{}) *MockExternalLocationsAPIInterface_List_Call {
	return &MockExternalLocationsAPIInterface_List_Call{Call: _e.mock.On("List", ctx)}
}

func (_c *MockExternalLocationsAPIInterface_List_Call) Run(run func(ctx context.Context)) *MockExternalLocationsAPIInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockExternalLocationsAPIInterface_List_Call) Return(_a0 *listing.PaginatingIterator[struct{}, *catalog.ListExternalLocationsResponse, catalog.ExternalLocationInfo]) *MockExternalLocationsAPIInterface_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExternalLocationsAPIInterface_List_Call) RunAndReturn(run func(context.Context) *listing.PaginatingIterator[struct{}, *catalog.ListExternalLocationsResponse, catalog.ExternalLocationInfo]) *MockExternalLocationsAPIInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListAll provides a mock function with given fields: ctx
func (_m *MockExternalLocationsAPIInterface) ListAll(ctx context.Context) ([]catalog.ExternalLocationInfo, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListAll")
	}

	var r0 []catalog.ExternalLocationInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]catalog.ExternalLocationInfo, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []catalog.ExternalLocationInfo); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]catalog.ExternalLocationInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExternalLocationsAPIInterface_ListAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAll'
type MockExternalLocationsAPIInterface_ListAll_Call struct {
	*mock.Call
}

// ListAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockExternalLocationsAPIInterface_Expecter) ListAll(ctx interface{}) *MockExternalLocationsAPIInterface_ListAll_Call {
	return &MockExternalLocationsAPIInterface_ListAll_Call{Call: _e.mock.On("ListAll", ctx)}
}

func (_c *MockExternalLocationsAPIInterface_ListAll_Call) Run(run func(ctx context.Context)) *MockExternalLocationsAPIInterface_ListAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockExternalLocationsAPIInterface_ListAll_Call) Return(_a0 []catalog.ExternalLocationInfo, _a1 error) *MockExternalLocationsAPIInterface_ListAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExternalLocationsAPIInterface_ListAll_Call) RunAndReturn(run func(context.Context) ([]catalog.ExternalLocationInfo, error)) *MockExternalLocationsAPIInterface_ListAll_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, request
func (_m *MockExternalLocationsAPIInterface) Update(ctx context.Context, request catalog.UpdateExternalLocation) (*catalog.ExternalLocationInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *catalog.ExternalLocationInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.UpdateExternalLocation) (*catalog.ExternalLocationInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.UpdateExternalLocation) *catalog.ExternalLocationInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.ExternalLocationInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.UpdateExternalLocation) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExternalLocationsAPIInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockExternalLocationsAPIInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.UpdateExternalLocation
func (_e *MockExternalLocationsAPIInterface_Expecter) Update(ctx interface{}, request interface{}) *MockExternalLocationsAPIInterface_Update_Call {
	return &MockExternalLocationsAPIInterface_Update_Call{Call: _e.mock.On("Update", ctx, request)}
}

func (_c *MockExternalLocationsAPIInterface_Update_Call) Run(run func(ctx context.Context, request catalog.UpdateExternalLocation)) *MockExternalLocationsAPIInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.UpdateExternalLocation))
	})
	return _c
}

func (_c *MockExternalLocationsAPIInterface_Update_Call) Return(_a0 *catalog.ExternalLocationInfo, _a1 error) *MockExternalLocationsAPIInterface_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExternalLocationsAPIInterface_Update_Call) RunAndReturn(run func(context.Context, catalog.UpdateExternalLocation) (*catalog.ExternalLocationInfo, error)) *MockExternalLocationsAPIInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockExternalLocationsAPIInterface) WithImpl(impl catalog.ExternalLocationsService) catalog.ExternalLocationsAPIInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 catalog.ExternalLocationsAPIInterface
	if rf, ok := ret.Get(0).(func(catalog.ExternalLocationsService) catalog.ExternalLocationsAPIInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(catalog.ExternalLocationsAPIInterface)
		}
	}

	return r0
}

// MockExternalLocationsAPIInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockExternalLocationsAPIInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl catalog.ExternalLocationsService
func (_e *MockExternalLocationsAPIInterface_Expecter) WithImpl(impl interface{}) *MockExternalLocationsAPIInterface_WithImpl_Call {
	return &MockExternalLocationsAPIInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockExternalLocationsAPIInterface_WithImpl_Call) Run(run func(impl catalog.ExternalLocationsService)) *MockExternalLocationsAPIInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(catalog.ExternalLocationsService))
	})
	return _c
}

func (_c *MockExternalLocationsAPIInterface_WithImpl_Call) Return(_a0 catalog.ExternalLocationsAPIInterface) *MockExternalLocationsAPIInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExternalLocationsAPIInterface_WithImpl_Call) RunAndReturn(run func(catalog.ExternalLocationsService) catalog.ExternalLocationsAPIInterface) *MockExternalLocationsAPIInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockExternalLocationsAPIInterface creates a new instance of MockExternalLocationsAPIInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExternalLocationsAPIInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExternalLocationsAPIInterface {
	mock := &MockExternalLocationsAPIInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
