// Code generated by mockery v2.38.0. DO NOT EDIT.

package catalog

import (
	context "context"

	catalog "github.com/databricks/databricks-sdk-go/service/catalog"

	listing "github.com/databricks/databricks-sdk-go/listing"

	mock "github.com/stretchr/testify/mock"
)

// MockTablesAPIInterface is an autogenerated mock type for the TablesAPIInterface type
type MockTablesAPIInterface struct {
	mock.Mock
}

type MockTablesAPIInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTablesAPIInterface) EXPECT() *MockTablesAPIInterface_Expecter {
	return &MockTablesAPIInterface_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: ctx, request
func (_m *MockTablesAPIInterface) Delete(ctx context.Context, request catalog.DeleteTableRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.DeleteTableRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTablesAPIInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockTablesAPIInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.DeleteTableRequest
func (_e *MockTablesAPIInterface_Expecter) Delete(ctx interface{}, request interface{}) *MockTablesAPIInterface_Delete_Call {
	return &MockTablesAPIInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, request)}
}

func (_c *MockTablesAPIInterface_Delete_Call) Run(run func(ctx context.Context, request catalog.DeleteTableRequest)) *MockTablesAPIInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.DeleteTableRequest))
	})
	return _c
}

func (_c *MockTablesAPIInterface_Delete_Call) Return(_a0 error) *MockTablesAPIInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTablesAPIInterface_Delete_Call) RunAndReturn(run func(context.Context, catalog.DeleteTableRequest) error) *MockTablesAPIInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByFullName provides a mock function with given fields: ctx, fullName
func (_m *MockTablesAPIInterface) DeleteByFullName(ctx context.Context, fullName string) error {
	ret := _m.Called(ctx, fullName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByFullName")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, fullName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTablesAPIInterface_DeleteByFullName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByFullName'
type MockTablesAPIInterface_DeleteByFullName_Call struct {
	*mock.Call
}

// DeleteByFullName is a helper method to define mock.On call
//   - ctx context.Context
//   - fullName string
func (_e *MockTablesAPIInterface_Expecter) DeleteByFullName(ctx interface{}, fullName interface{}) *MockTablesAPIInterface_DeleteByFullName_Call {
	return &MockTablesAPIInterface_DeleteByFullName_Call{Call: _e.mock.On("DeleteByFullName", ctx, fullName)}
}

func (_c *MockTablesAPIInterface_DeleteByFullName_Call) Run(run func(ctx context.Context, fullName string)) *MockTablesAPIInterface_DeleteByFullName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTablesAPIInterface_DeleteByFullName_Call) Return(_a0 error) *MockTablesAPIInterface_DeleteByFullName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTablesAPIInterface_DeleteByFullName_Call) RunAndReturn(run func(context.Context, string) error) *MockTablesAPIInterface_DeleteByFullName_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, request
func (_m *MockTablesAPIInterface) Get(ctx context.Context, request catalog.GetTableRequest) (*catalog.TableInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *catalog.TableInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.GetTableRequest) (*catalog.TableInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.GetTableRequest) *catalog.TableInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.TableInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.GetTableRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTablesAPIInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockTablesAPIInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.GetTableRequest
func (_e *MockTablesAPIInterface_Expecter) Get(ctx interface{}, request interface{}) *MockTablesAPIInterface_Get_Call {
	return &MockTablesAPIInterface_Get_Call{Call: _e.mock.On("Get", ctx, request)}
}

func (_c *MockTablesAPIInterface_Get_Call) Run(run func(ctx context.Context, request catalog.GetTableRequest)) *MockTablesAPIInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.GetTableRequest))
	})
	return _c
}

func (_c *MockTablesAPIInterface_Get_Call) Return(_a0 *catalog.TableInfo, _a1 error) *MockTablesAPIInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTablesAPIInterface_Get_Call) RunAndReturn(run func(context.Context, catalog.GetTableRequest) (*catalog.TableInfo, error)) *MockTablesAPIInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByFullName provides a mock function with given fields: ctx, fullName
func (_m *MockTablesAPIInterface) GetByFullName(ctx context.Context, fullName string) (*catalog.TableInfo, error) {
	ret := _m.Called(ctx, fullName)

	if len(ret) == 0 {
		panic("no return value specified for GetByFullName")
	}

	var r0 *catalog.TableInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*catalog.TableInfo, error)); ok {
		return rf(ctx, fullName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *catalog.TableInfo); ok {
		r0 = rf(ctx, fullName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.TableInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, fullName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTablesAPIInterface_GetByFullName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByFullName'
type MockTablesAPIInterface_GetByFullName_Call struct {
	*mock.Call
}

// GetByFullName is a helper method to define mock.On call
//   - ctx context.Context
//   - fullName string
func (_e *MockTablesAPIInterface_Expecter) GetByFullName(ctx interface{}, fullName interface{}) *MockTablesAPIInterface_GetByFullName_Call {
	return &MockTablesAPIInterface_GetByFullName_Call{Call: _e.mock.On("GetByFullName", ctx, fullName)}
}

func (_c *MockTablesAPIInterface_GetByFullName_Call) Run(run func(ctx context.Context, fullName string)) *MockTablesAPIInterface_GetByFullName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTablesAPIInterface_GetByFullName_Call) Return(_a0 *catalog.TableInfo, _a1 error) *MockTablesAPIInterface_GetByFullName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTablesAPIInterface_GetByFullName_Call) RunAndReturn(run func(context.Context, string) (*catalog.TableInfo, error)) *MockTablesAPIInterface_GetByFullName_Call {
	_c.Call.Return(run)
	return _c
}

// GetByName provides a mock function with given fields: ctx, name
func (_m *MockTablesAPIInterface) GetByName(ctx context.Context, name string) (*catalog.TableInfo, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetByName")
	}

	var r0 *catalog.TableInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*catalog.TableInfo, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *catalog.TableInfo); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.TableInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTablesAPIInterface_GetByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByName'
type MockTablesAPIInterface_GetByName_Call struct {
	*mock.Call
}

// GetByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockTablesAPIInterface_Expecter) GetByName(ctx interface{}, name interface{}) *MockTablesAPIInterface_GetByName_Call {
	return &MockTablesAPIInterface_GetByName_Call{Call: _e.mock.On("GetByName", ctx, name)}
}

func (_c *MockTablesAPIInterface_GetByName_Call) Run(run func(ctx context.Context, name string)) *MockTablesAPIInterface_GetByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTablesAPIInterface_GetByName_Call) Return(_a0 *catalog.TableInfo, _a1 error) *MockTablesAPIInterface_GetByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTablesAPIInterface_GetByName_Call) RunAndReturn(run func(context.Context, string) (*catalog.TableInfo, error)) *MockTablesAPIInterface_GetByName_Call {
	_c.Call.Return(run)
	return _c
}

// Impl provides a mock function with given fields:
func (_m *MockTablesAPIInterface) Impl() catalog.TablesService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 catalog.TablesService
	if rf, ok := ret.Get(0).(func() catalog.TablesService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(catalog.TablesService)
		}
	}

	return r0
}

// MockTablesAPIInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockTablesAPIInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockTablesAPIInterface_Expecter) Impl() *MockTablesAPIInterface_Impl_Call {
	return &MockTablesAPIInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockTablesAPIInterface_Impl_Call) Run(run func()) *MockTablesAPIInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTablesAPIInterface_Impl_Call) Return(_a0 catalog.TablesService) *MockTablesAPIInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTablesAPIInterface_Impl_Call) RunAndReturn(run func() catalog.TablesService) *MockTablesAPIInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, request
func (_m *MockTablesAPIInterface) List(ctx context.Context, request catalog.ListTablesRequest) *listing.PaginatingIterator[catalog.ListTablesRequest, *catalog.ListTablesResponse, catalog.TableInfo] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *listing.PaginatingIterator[catalog.ListTablesRequest, *catalog.ListTablesResponse, catalog.TableInfo]
	if rf, ok := ret.Get(0).(func(context.Context, catalog.ListTablesRequest) *listing.PaginatingIterator[catalog.ListTablesRequest, *catalog.ListTablesResponse, catalog.TableInfo]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*listing.PaginatingIterator[catalog.ListTablesRequest, *catalog.ListTablesResponse, catalog.TableInfo])
		}
	}

	return r0
}

// MockTablesAPIInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockTablesAPIInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.ListTablesRequest
func (_e *MockTablesAPIInterface_Expecter) List(ctx interface{}, request interface{}) *MockTablesAPIInterface_List_Call {
	return &MockTablesAPIInterface_List_Call{Call: _e.mock.On("List", ctx, request)}
}

func (_c *MockTablesAPIInterface_List_Call) Run(run func(ctx context.Context, request catalog.ListTablesRequest)) *MockTablesAPIInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.ListTablesRequest))
	})
	return _c
}

func (_c *MockTablesAPIInterface_List_Call) Return(_a0 *listing.PaginatingIterator[catalog.ListTablesRequest, *catalog.ListTablesResponse, catalog.TableInfo]) *MockTablesAPIInterface_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTablesAPIInterface_List_Call) RunAndReturn(run func(context.Context, catalog.ListTablesRequest) *listing.PaginatingIterator[catalog.ListTablesRequest, *catalog.ListTablesResponse, catalog.TableInfo]) *MockTablesAPIInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListAll provides a mock function with given fields: ctx, request
func (_m *MockTablesAPIInterface) ListAll(ctx context.Context, request catalog.ListTablesRequest) ([]catalog.TableInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListAll")
	}

	var r0 []catalog.TableInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.ListTablesRequest) ([]catalog.TableInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.ListTablesRequest) []catalog.TableInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]catalog.TableInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.ListTablesRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTablesAPIInterface_ListAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAll'
type MockTablesAPIInterface_ListAll_Call struct {
	*mock.Call
}

// ListAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.ListTablesRequest
func (_e *MockTablesAPIInterface_Expecter) ListAll(ctx interface{}, request interface{}) *MockTablesAPIInterface_ListAll_Call {
	return &MockTablesAPIInterface_ListAll_Call{Call: _e.mock.On("ListAll", ctx, request)}
}

func (_c *MockTablesAPIInterface_ListAll_Call) Run(run func(ctx context.Context, request catalog.ListTablesRequest)) *MockTablesAPIInterface_ListAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.ListTablesRequest))
	})
	return _c
}

func (_c *MockTablesAPIInterface_ListAll_Call) Return(_a0 []catalog.TableInfo, _a1 error) *MockTablesAPIInterface_ListAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTablesAPIInterface_ListAll_Call) RunAndReturn(run func(context.Context, catalog.ListTablesRequest) ([]catalog.TableInfo, error)) *MockTablesAPIInterface_ListAll_Call {
	_c.Call.Return(run)
	return _c
}

// ListSummaries provides a mock function with given fields: ctx, request
func (_m *MockTablesAPIInterface) ListSummaries(ctx context.Context, request catalog.ListSummariesRequest) *listing.PaginatingIterator[catalog.ListSummariesRequest, *catalog.ListTableSummariesResponse, catalog.TableSummary] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListSummaries")
	}

	var r0 *listing.PaginatingIterator[catalog.ListSummariesRequest, *catalog.ListTableSummariesResponse, catalog.TableSummary]
	if rf, ok := ret.Get(0).(func(context.Context, catalog.ListSummariesRequest) *listing.PaginatingIterator[catalog.ListSummariesRequest, *catalog.ListTableSummariesResponse, catalog.TableSummary]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*listing.PaginatingIterator[catalog.ListSummariesRequest, *catalog.ListTableSummariesResponse, catalog.TableSummary])
		}
	}

	return r0
}

// MockTablesAPIInterface_ListSummaries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSummaries'
type MockTablesAPIInterface_ListSummaries_Call struct {
	*mock.Call
}

// ListSummaries is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.ListSummariesRequest
func (_e *MockTablesAPIInterface_Expecter) ListSummaries(ctx interface{}, request interface{}) *MockTablesAPIInterface_ListSummaries_Call {
	return &MockTablesAPIInterface_ListSummaries_Call{Call: _e.mock.On("ListSummaries", ctx, request)}
}

func (_c *MockTablesAPIInterface_ListSummaries_Call) Run(run func(ctx context.Context, request catalog.ListSummariesRequest)) *MockTablesAPIInterface_ListSummaries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.ListSummariesRequest))
	})
	return _c
}

func (_c *MockTablesAPIInterface_ListSummaries_Call) Return(_a0 *listing.PaginatingIterator[catalog.ListSummariesRequest, *catalog.ListTableSummariesResponse, catalog.TableSummary]) *MockTablesAPIInterface_ListSummaries_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTablesAPIInterface_ListSummaries_Call) RunAndReturn(run func(context.Context, catalog.ListSummariesRequest) *listing.PaginatingIterator[catalog.ListSummariesRequest, *catalog.ListTableSummariesResponse, catalog.TableSummary]) *MockTablesAPIInterface_ListSummaries_Call {
	_c.Call.Return(run)
	return _c
}

// ListSummariesAll provides a mock function with given fields: ctx, request
func (_m *MockTablesAPIInterface) ListSummariesAll(ctx context.Context, request catalog.ListSummariesRequest) ([]catalog.TableSummary, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListSummariesAll")
	}

	var r0 []catalog.TableSummary
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.ListSummariesRequest) ([]catalog.TableSummary, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.ListSummariesRequest) []catalog.TableSummary); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]catalog.TableSummary)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.ListSummariesRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTablesAPIInterface_ListSummariesAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSummariesAll'
type MockTablesAPIInterface_ListSummariesAll_Call struct {
	*mock.Call
}

// ListSummariesAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.ListSummariesRequest
func (_e *MockTablesAPIInterface_Expecter) ListSummariesAll(ctx interface{}, request interface{}) *MockTablesAPIInterface_ListSummariesAll_Call {
	return &MockTablesAPIInterface_ListSummariesAll_Call{Call: _e.mock.On("ListSummariesAll", ctx, request)}
}

func (_c *MockTablesAPIInterface_ListSummariesAll_Call) Run(run func(ctx context.Context, request catalog.ListSummariesRequest)) *MockTablesAPIInterface_ListSummariesAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.ListSummariesRequest))
	})
	return _c
}

func (_c *MockTablesAPIInterface_ListSummariesAll_Call) Return(_a0 []catalog.TableSummary, _a1 error) *MockTablesAPIInterface_ListSummariesAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTablesAPIInterface_ListSummariesAll_Call) RunAndReturn(run func(context.Context, catalog.ListSummariesRequest) ([]catalog.TableSummary, error)) *MockTablesAPIInterface_ListSummariesAll_Call {
	_c.Call.Return(run)
	return _c
}

// TableInfoNameToTableIdMap provides a mock function with given fields: ctx, request
func (_m *MockTablesAPIInterface) TableInfoNameToTableIdMap(ctx context.Context, request catalog.ListTablesRequest) (map[string]string, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for TableInfoNameToTableIdMap")
	}

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.ListTablesRequest) (map[string]string, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.ListTablesRequest) map[string]string); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.ListTablesRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTablesAPIInterface_TableInfoNameToTableIdMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TableInfoNameToTableIdMap'
type MockTablesAPIInterface_TableInfoNameToTableIdMap_Call struct {
	*mock.Call
}

// TableInfoNameToTableIdMap is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.ListTablesRequest
func (_e *MockTablesAPIInterface_Expecter) TableInfoNameToTableIdMap(ctx interface{}, request interface{}) *MockTablesAPIInterface_TableInfoNameToTableIdMap_Call {
	return &MockTablesAPIInterface_TableInfoNameToTableIdMap_Call{Call: _e.mock.On("TableInfoNameToTableIdMap", ctx, request)}
}

func (_c *MockTablesAPIInterface_TableInfoNameToTableIdMap_Call) Run(run func(ctx context.Context, request catalog.ListTablesRequest)) *MockTablesAPIInterface_TableInfoNameToTableIdMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.ListTablesRequest))
	})
	return _c
}

func (_c *MockTablesAPIInterface_TableInfoNameToTableIdMap_Call) Return(_a0 map[string]string, _a1 error) *MockTablesAPIInterface_TableInfoNameToTableIdMap_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTablesAPIInterface_TableInfoNameToTableIdMap_Call) RunAndReturn(run func(context.Context, catalog.ListTablesRequest) (map[string]string, error)) *MockTablesAPIInterface_TableInfoNameToTableIdMap_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, request
func (_m *MockTablesAPIInterface) Update(ctx context.Context, request catalog.UpdateTableRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.UpdateTableRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTablesAPIInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockTablesAPIInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.UpdateTableRequest
func (_e *MockTablesAPIInterface_Expecter) Update(ctx interface{}, request interface{}) *MockTablesAPIInterface_Update_Call {
	return &MockTablesAPIInterface_Update_Call{Call: _e.mock.On("Update", ctx, request)}
}

func (_c *MockTablesAPIInterface_Update_Call) Run(run func(ctx context.Context, request catalog.UpdateTableRequest)) *MockTablesAPIInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.UpdateTableRequest))
	})
	return _c
}

func (_c *MockTablesAPIInterface_Update_Call) Return(_a0 error) *MockTablesAPIInterface_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTablesAPIInterface_Update_Call) RunAndReturn(run func(context.Context, catalog.UpdateTableRequest) error) *MockTablesAPIInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockTablesAPIInterface) WithImpl(impl catalog.TablesService) catalog.TablesAPIInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 catalog.TablesAPIInterface
	if rf, ok := ret.Get(0).(func(catalog.TablesService) catalog.TablesAPIInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(catalog.TablesAPIInterface)
		}
	}

	return r0
}

// MockTablesAPIInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockTablesAPIInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl catalog.TablesService
func (_e *MockTablesAPIInterface_Expecter) WithImpl(impl interface{}) *MockTablesAPIInterface_WithImpl_Call {
	return &MockTablesAPIInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockTablesAPIInterface_WithImpl_Call) Run(run func(impl catalog.TablesService)) *MockTablesAPIInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(catalog.TablesService))
	})
	return _c
}

func (_c *MockTablesAPIInterface_WithImpl_Call) Return(_a0 catalog.TablesAPIInterface) *MockTablesAPIInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTablesAPIInterface_WithImpl_Call) RunAndReturn(run func(catalog.TablesService) catalog.TablesAPIInterface) *MockTablesAPIInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTablesAPIInterface creates a new instance of MockTablesAPIInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTablesAPIInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTablesAPIInterface {
	mock := &MockTablesAPIInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
