// Code generated by mockery v2.38.0. DO NOT EDIT.

package catalog

import (
	context "context"

	catalog "github.com/databricks/databricks-sdk-go/service/catalog"

	listing "github.com/databricks/databricks-sdk-go/listing"

	mock "github.com/stretchr/testify/mock"
)

// MockConnectionsAPIInterface is an autogenerated mock type for the ConnectionsAPIInterface type
type MockConnectionsAPIInterface struct {
	mock.Mock
}

type MockConnectionsAPIInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConnectionsAPIInterface) EXPECT() *MockConnectionsAPIInterface_Expecter {
	return &MockConnectionsAPIInterface_Expecter{mock: &_m.Mock}
}

// ConnectionInfoNameToFullNameMap provides a mock function with given fields: ctx
func (_m *MockConnectionsAPIInterface) ConnectionInfoNameToFullNameMap(ctx context.Context) (map[string]string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ConnectionInfoNameToFullNameMap")
	}

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (map[string]string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) map[string]string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConnectionsAPIInterface_ConnectionInfoNameToFullNameMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConnectionInfoNameToFullNameMap'
type MockConnectionsAPIInterface_ConnectionInfoNameToFullNameMap_Call struct {
	*mock.Call
}

// ConnectionInfoNameToFullNameMap is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockConnectionsAPIInterface_Expecter) ConnectionInfoNameToFullNameMap(ctx interface{}) *MockConnectionsAPIInterface_ConnectionInfoNameToFullNameMap_Call {
	return &MockConnectionsAPIInterface_ConnectionInfoNameToFullNameMap_Call{Call: _e.mock.On("ConnectionInfoNameToFullNameMap", ctx)}
}

func (_c *MockConnectionsAPIInterface_ConnectionInfoNameToFullNameMap_Call) Run(run func(ctx context.Context)) *MockConnectionsAPIInterface_ConnectionInfoNameToFullNameMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockConnectionsAPIInterface_ConnectionInfoNameToFullNameMap_Call) Return(_a0 map[string]string, _a1 error) *MockConnectionsAPIInterface_ConnectionInfoNameToFullNameMap_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConnectionsAPIInterface_ConnectionInfoNameToFullNameMap_Call) RunAndReturn(run func(context.Context) (map[string]string, error)) *MockConnectionsAPIInterface_ConnectionInfoNameToFullNameMap_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, request
func (_m *MockConnectionsAPIInterface) Create(ctx context.Context, request catalog.CreateConnection) (*catalog.ConnectionInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *catalog.ConnectionInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.CreateConnection) (*catalog.ConnectionInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.CreateConnection) *catalog.ConnectionInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.ConnectionInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.CreateConnection) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConnectionsAPIInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockConnectionsAPIInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.CreateConnection
func (_e *MockConnectionsAPIInterface_Expecter) Create(ctx interface{}, request interface{}) *MockConnectionsAPIInterface_Create_Call {
	return &MockConnectionsAPIInterface_Create_Call{Call: _e.mock.On("Create", ctx, request)}
}

func (_c *MockConnectionsAPIInterface_Create_Call) Run(run func(ctx context.Context, request catalog.CreateConnection)) *MockConnectionsAPIInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.CreateConnection))
	})
	return _c
}

func (_c *MockConnectionsAPIInterface_Create_Call) Return(_a0 *catalog.ConnectionInfo, _a1 error) *MockConnectionsAPIInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConnectionsAPIInterface_Create_Call) RunAndReturn(run func(context.Context, catalog.CreateConnection) (*catalog.ConnectionInfo, error)) *MockConnectionsAPIInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, request
func (_m *MockConnectionsAPIInterface) Delete(ctx context.Context, request catalog.DeleteConnectionRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.DeleteConnectionRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConnectionsAPIInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockConnectionsAPIInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.DeleteConnectionRequest
func (_e *MockConnectionsAPIInterface_Expecter) Delete(ctx interface{}, request interface{}) *MockConnectionsAPIInterface_Delete_Call {
	return &MockConnectionsAPIInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, request)}
}

func (_c *MockConnectionsAPIInterface_Delete_Call) Run(run func(ctx context.Context, request catalog.DeleteConnectionRequest)) *MockConnectionsAPIInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.DeleteConnectionRequest))
	})
	return _c
}

func (_c *MockConnectionsAPIInterface_Delete_Call) Return(_a0 error) *MockConnectionsAPIInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConnectionsAPIInterface_Delete_Call) RunAndReturn(run func(context.Context, catalog.DeleteConnectionRequest) error) *MockConnectionsAPIInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByNameArg provides a mock function with given fields: ctx, nameArg
func (_m *MockConnectionsAPIInterface) DeleteByNameArg(ctx context.Context, nameArg string) error {
	ret := _m.Called(ctx, nameArg)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByNameArg")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, nameArg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConnectionsAPIInterface_DeleteByNameArg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByNameArg'
type MockConnectionsAPIInterface_DeleteByNameArg_Call struct {
	*mock.Call
}

// DeleteByNameArg is a helper method to define mock.On call
//   - ctx context.Context
//   - nameArg string
func (_e *MockConnectionsAPIInterface_Expecter) DeleteByNameArg(ctx interface{}, nameArg interface{}) *MockConnectionsAPIInterface_DeleteByNameArg_Call {
	return &MockConnectionsAPIInterface_DeleteByNameArg_Call{Call: _e.mock.On("DeleteByNameArg", ctx, nameArg)}
}

func (_c *MockConnectionsAPIInterface_DeleteByNameArg_Call) Run(run func(ctx context.Context, nameArg string)) *MockConnectionsAPIInterface_DeleteByNameArg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockConnectionsAPIInterface_DeleteByNameArg_Call) Return(_a0 error) *MockConnectionsAPIInterface_DeleteByNameArg_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConnectionsAPIInterface_DeleteByNameArg_Call) RunAndReturn(run func(context.Context, string) error) *MockConnectionsAPIInterface_DeleteByNameArg_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, request
func (_m *MockConnectionsAPIInterface) Get(ctx context.Context, request catalog.GetConnectionRequest) (*catalog.ConnectionInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *catalog.ConnectionInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.GetConnectionRequest) (*catalog.ConnectionInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.GetConnectionRequest) *catalog.ConnectionInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.ConnectionInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.GetConnectionRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConnectionsAPIInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockConnectionsAPIInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.GetConnectionRequest
func (_e *MockConnectionsAPIInterface_Expecter) Get(ctx interface{}, request interface{}) *MockConnectionsAPIInterface_Get_Call {
	return &MockConnectionsAPIInterface_Get_Call{Call: _e.mock.On("Get", ctx, request)}
}

func (_c *MockConnectionsAPIInterface_Get_Call) Run(run func(ctx context.Context, request catalog.GetConnectionRequest)) *MockConnectionsAPIInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.GetConnectionRequest))
	})
	return _c
}

func (_c *MockConnectionsAPIInterface_Get_Call) Return(_a0 *catalog.ConnectionInfo, _a1 error) *MockConnectionsAPIInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConnectionsAPIInterface_Get_Call) RunAndReturn(run func(context.Context, catalog.GetConnectionRequest) (*catalog.ConnectionInfo, error)) *MockConnectionsAPIInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByName provides a mock function with given fields: ctx, name
func (_m *MockConnectionsAPIInterface) GetByName(ctx context.Context, name string) (*catalog.ConnectionInfo, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetByName")
	}

	var r0 *catalog.ConnectionInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*catalog.ConnectionInfo, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *catalog.ConnectionInfo); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.ConnectionInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConnectionsAPIInterface_GetByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByName'
type MockConnectionsAPIInterface_GetByName_Call struct {
	*mock.Call
}

// GetByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockConnectionsAPIInterface_Expecter) GetByName(ctx interface{}, name interface{}) *MockConnectionsAPIInterface_GetByName_Call {
	return &MockConnectionsAPIInterface_GetByName_Call{Call: _e.mock.On("GetByName", ctx, name)}
}

func (_c *MockConnectionsAPIInterface_GetByName_Call) Run(run func(ctx context.Context, name string)) *MockConnectionsAPIInterface_GetByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockConnectionsAPIInterface_GetByName_Call) Return(_a0 *catalog.ConnectionInfo, _a1 error) *MockConnectionsAPIInterface_GetByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConnectionsAPIInterface_GetByName_Call) RunAndReturn(run func(context.Context, string) (*catalog.ConnectionInfo, error)) *MockConnectionsAPIInterface_GetByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetByNameArg provides a mock function with given fields: ctx, nameArg
func (_m *MockConnectionsAPIInterface) GetByNameArg(ctx context.Context, nameArg string) (*catalog.ConnectionInfo, error) {
	ret := _m.Called(ctx, nameArg)

	if len(ret) == 0 {
		panic("no return value specified for GetByNameArg")
	}

	var r0 *catalog.ConnectionInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*catalog.ConnectionInfo, error)); ok {
		return rf(ctx, nameArg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *catalog.ConnectionInfo); ok {
		r0 = rf(ctx, nameArg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.ConnectionInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, nameArg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConnectionsAPIInterface_GetByNameArg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByNameArg'
type MockConnectionsAPIInterface_GetByNameArg_Call struct {
	*mock.Call
}

// GetByNameArg is a helper method to define mock.On call
//   - ctx context.Context
//   - nameArg string
func (_e *MockConnectionsAPIInterface_Expecter) GetByNameArg(ctx interface{}, nameArg interface{}) *MockConnectionsAPIInterface_GetByNameArg_Call {
	return &MockConnectionsAPIInterface_GetByNameArg_Call{Call: _e.mock.On("GetByNameArg", ctx, nameArg)}
}

func (_c *MockConnectionsAPIInterface_GetByNameArg_Call) Run(run func(ctx context.Context, nameArg string)) *MockConnectionsAPIInterface_GetByNameArg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockConnectionsAPIInterface_GetByNameArg_Call) Return(_a0 *catalog.ConnectionInfo, _a1 error) *MockConnectionsAPIInterface_GetByNameArg_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConnectionsAPIInterface_GetByNameArg_Call) RunAndReturn(run func(context.Context, string) (*catalog.ConnectionInfo, error)) *MockConnectionsAPIInterface_GetByNameArg_Call {
	_c.Call.Return(run)
	return _c
}

// Impl provides a mock function with given fields:
func (_m *MockConnectionsAPIInterface) Impl() catalog.ConnectionsService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 catalog.ConnectionsService
	if rf, ok := ret.Get(0).(func() catalog.ConnectionsService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(catalog.ConnectionsService)
		}
	}

	return r0
}

// MockConnectionsAPIInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockConnectionsAPIInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockConnectionsAPIInterface_Expecter) Impl() *MockConnectionsAPIInterface_Impl_Call {
	return &MockConnectionsAPIInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockConnectionsAPIInterface_Impl_Call) Run(run func()) *MockConnectionsAPIInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConnectionsAPIInterface_Impl_Call) Return(_a0 catalog.ConnectionsService) *MockConnectionsAPIInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConnectionsAPIInterface_Impl_Call) RunAndReturn(run func() catalog.ConnectionsService) *MockConnectionsAPIInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx
func (_m *MockConnectionsAPIInterface) List(ctx context.Context) *listing.PaginatingIterator[struct{}, *catalog.ListConnectionsResponse, catalog.ConnectionInfo] {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *listing.PaginatingIterator[struct{}, *catalog.ListConnectionsResponse, catalog.ConnectionInfo]
	if rf, ok := ret.Get(0).(func(context.Context) *listing.PaginatingIterator[struct{}, *catalog.ListConnectionsResponse, catalog.ConnectionInfo]); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*listing.PaginatingIterator[struct{}, *catalog.ListConnectionsResponse, catalog.ConnectionInfo])
		}
	}

	return r0
}

// MockConnectionsAPIInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockConnectionsAPIInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockConnectionsAPIInterface_Expecter) List(ctx interface{}) *MockConnectionsAPIInterface_List_Call {
	return &MockConnectionsAPIInterface_List_Call{Call: _e.mock.On("List", ctx)}
}

func (_c *MockConnectionsAPIInterface_List_Call) Run(run func(ctx context.Context)) *MockConnectionsAPIInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockConnectionsAPIInterface_List_Call) Return(_a0 *listing.PaginatingIterator[struct{}, *catalog.ListConnectionsResponse, catalog.ConnectionInfo]) *MockConnectionsAPIInterface_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConnectionsAPIInterface_List_Call) RunAndReturn(run func(context.Context) *listing.PaginatingIterator[struct{}, *catalog.ListConnectionsResponse, catalog.ConnectionInfo]) *MockConnectionsAPIInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListAll provides a mock function with given fields: ctx
func (_m *MockConnectionsAPIInterface) ListAll(ctx context.Context) ([]catalog.ConnectionInfo, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListAll")
	}

	var r0 []catalog.ConnectionInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]catalog.ConnectionInfo, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []catalog.ConnectionInfo); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]catalog.ConnectionInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConnectionsAPIInterface_ListAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAll'
type MockConnectionsAPIInterface_ListAll_Call struct {
	*mock.Call
}

// ListAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockConnectionsAPIInterface_Expecter) ListAll(ctx interface{}) *MockConnectionsAPIInterface_ListAll_Call {
	return &MockConnectionsAPIInterface_ListAll_Call{Call: _e.mock.On("ListAll", ctx)}
}

func (_c *MockConnectionsAPIInterface_ListAll_Call) Run(run func(ctx context.Context)) *MockConnectionsAPIInterface_ListAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockConnectionsAPIInterface_ListAll_Call) Return(_a0 []catalog.ConnectionInfo, _a1 error) *MockConnectionsAPIInterface_ListAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConnectionsAPIInterface_ListAll_Call) RunAndReturn(run func(context.Context) ([]catalog.ConnectionInfo, error)) *MockConnectionsAPIInterface_ListAll_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, request
func (_m *MockConnectionsAPIInterface) Update(ctx context.Context, request catalog.UpdateConnection) (*catalog.ConnectionInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *catalog.ConnectionInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.UpdateConnection) (*catalog.ConnectionInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.UpdateConnection) *catalog.ConnectionInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.ConnectionInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.UpdateConnection) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConnectionsAPIInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockConnectionsAPIInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.UpdateConnection
func (_e *MockConnectionsAPIInterface_Expecter) Update(ctx interface{}, request interface{}) *MockConnectionsAPIInterface_Update_Call {
	return &MockConnectionsAPIInterface_Update_Call{Call: _e.mock.On("Update", ctx, request)}
}

func (_c *MockConnectionsAPIInterface_Update_Call) Run(run func(ctx context.Context, request catalog.UpdateConnection)) *MockConnectionsAPIInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.UpdateConnection))
	})
	return _c
}

func (_c *MockConnectionsAPIInterface_Update_Call) Return(_a0 *catalog.ConnectionInfo, _a1 error) *MockConnectionsAPIInterface_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConnectionsAPIInterface_Update_Call) RunAndReturn(run func(context.Context, catalog.UpdateConnection) (*catalog.ConnectionInfo, error)) *MockConnectionsAPIInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockConnectionsAPIInterface) WithImpl(impl catalog.ConnectionsService) catalog.ConnectionsAPIInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 catalog.ConnectionsAPIInterface
	if rf, ok := ret.Get(0).(func(catalog.ConnectionsService) catalog.ConnectionsAPIInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(catalog.ConnectionsAPIInterface)
		}
	}

	return r0
}

// MockConnectionsAPIInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockConnectionsAPIInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl catalog.ConnectionsService
func (_e *MockConnectionsAPIInterface_Expecter) WithImpl(impl interface{}) *MockConnectionsAPIInterface_WithImpl_Call {
	return &MockConnectionsAPIInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockConnectionsAPIInterface_WithImpl_Call) Run(run func(impl catalog.ConnectionsService)) *MockConnectionsAPIInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(catalog.ConnectionsService))
	})
	return _c
}

func (_c *MockConnectionsAPIInterface_WithImpl_Call) Return(_a0 catalog.ConnectionsAPIInterface) *MockConnectionsAPIInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConnectionsAPIInterface_WithImpl_Call) RunAndReturn(run func(catalog.ConnectionsService) catalog.ConnectionsAPIInterface) *MockConnectionsAPIInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConnectionsAPIInterface creates a new instance of MockConnectionsAPIInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConnectionsAPIInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConnectionsAPIInterface {
	mock := &MockConnectionsAPIInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
