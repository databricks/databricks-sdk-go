// Code generated by mockery v2.38.0. DO NOT EDIT.

package catalog

import (
	context "context"

	catalog "github.com/databricks/databricks-sdk-go/service/catalog"

	mock "github.com/stretchr/testify/mock"
)

// MockAccountStorageCredentialsAPIInterface is an autogenerated mock type for the AccountStorageCredentialsAPIInterface type
type MockAccountStorageCredentialsAPIInterface struct {
	mock.Mock
}

type MockAccountStorageCredentialsAPIInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccountStorageCredentialsAPIInterface) EXPECT() *MockAccountStorageCredentialsAPIInterface_Expecter {
	return &MockAccountStorageCredentialsAPIInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, request
func (_m *MockAccountStorageCredentialsAPIInterface) Create(ctx context.Context, request catalog.AccountsCreateStorageCredential) (*catalog.AccountsStorageCredentialInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *catalog.AccountsStorageCredentialInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.AccountsCreateStorageCredential) (*catalog.AccountsStorageCredentialInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.AccountsCreateStorageCredential) *catalog.AccountsStorageCredentialInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.AccountsStorageCredentialInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.AccountsCreateStorageCredential) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountStorageCredentialsAPIInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockAccountStorageCredentialsAPIInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.AccountsCreateStorageCredential
func (_e *MockAccountStorageCredentialsAPIInterface_Expecter) Create(ctx interface{}, request interface{}) *MockAccountStorageCredentialsAPIInterface_Create_Call {
	return &MockAccountStorageCredentialsAPIInterface_Create_Call{Call: _e.mock.On("Create", ctx, request)}
}

func (_c *MockAccountStorageCredentialsAPIInterface_Create_Call) Run(run func(ctx context.Context, request catalog.AccountsCreateStorageCredential)) *MockAccountStorageCredentialsAPIInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.AccountsCreateStorageCredential))
	})
	return _c
}

func (_c *MockAccountStorageCredentialsAPIInterface_Create_Call) Return(_a0 *catalog.AccountsStorageCredentialInfo, _a1 error) *MockAccountStorageCredentialsAPIInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountStorageCredentialsAPIInterface_Create_Call) RunAndReturn(run func(context.Context, catalog.AccountsCreateStorageCredential) (*catalog.AccountsStorageCredentialInfo, error)) *MockAccountStorageCredentialsAPIInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, request
func (_m *MockAccountStorageCredentialsAPIInterface) Delete(ctx context.Context, request catalog.DeleteAccountStorageCredentialRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.DeleteAccountStorageCredentialRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccountStorageCredentialsAPIInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockAccountStorageCredentialsAPIInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.DeleteAccountStorageCredentialRequest
func (_e *MockAccountStorageCredentialsAPIInterface_Expecter) Delete(ctx interface{}, request interface{}) *MockAccountStorageCredentialsAPIInterface_Delete_Call {
	return &MockAccountStorageCredentialsAPIInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, request)}
}

func (_c *MockAccountStorageCredentialsAPIInterface_Delete_Call) Run(run func(ctx context.Context, request catalog.DeleteAccountStorageCredentialRequest)) *MockAccountStorageCredentialsAPIInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.DeleteAccountStorageCredentialRequest))
	})
	return _c
}

func (_c *MockAccountStorageCredentialsAPIInterface_Delete_Call) Return(_a0 error) *MockAccountStorageCredentialsAPIInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountStorageCredentialsAPIInterface_Delete_Call) RunAndReturn(run func(context.Context, catalog.DeleteAccountStorageCredentialRequest) error) *MockAccountStorageCredentialsAPIInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByMetastoreIdAndStorageCredentialName provides a mock function with given fields: ctx, metastoreId, storageCredentialName
func (_m *MockAccountStorageCredentialsAPIInterface) DeleteByMetastoreIdAndStorageCredentialName(ctx context.Context, metastoreId string, storageCredentialName string) error {
	ret := _m.Called(ctx, metastoreId, storageCredentialName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByMetastoreIdAndStorageCredentialName")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, metastoreId, storageCredentialName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccountStorageCredentialsAPIInterface_DeleteByMetastoreIdAndStorageCredentialName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByMetastoreIdAndStorageCredentialName'
type MockAccountStorageCredentialsAPIInterface_DeleteByMetastoreIdAndStorageCredentialName_Call struct {
	*mock.Call
}

// DeleteByMetastoreIdAndStorageCredentialName is a helper method to define mock.On call
//   - ctx context.Context
//   - metastoreId string
//   - storageCredentialName string
func (_e *MockAccountStorageCredentialsAPIInterface_Expecter) DeleteByMetastoreIdAndStorageCredentialName(ctx interface{}, metastoreId interface{}, storageCredentialName interface{}) *MockAccountStorageCredentialsAPIInterface_DeleteByMetastoreIdAndStorageCredentialName_Call {
	return &MockAccountStorageCredentialsAPIInterface_DeleteByMetastoreIdAndStorageCredentialName_Call{Call: _e.mock.On("DeleteByMetastoreIdAndStorageCredentialName", ctx, metastoreId, storageCredentialName)}
}

func (_c *MockAccountStorageCredentialsAPIInterface_DeleteByMetastoreIdAndStorageCredentialName_Call) Run(run func(ctx context.Context, metastoreId string, storageCredentialName string)) *MockAccountStorageCredentialsAPIInterface_DeleteByMetastoreIdAndStorageCredentialName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockAccountStorageCredentialsAPIInterface_DeleteByMetastoreIdAndStorageCredentialName_Call) Return(_a0 error) *MockAccountStorageCredentialsAPIInterface_DeleteByMetastoreIdAndStorageCredentialName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountStorageCredentialsAPIInterface_DeleteByMetastoreIdAndStorageCredentialName_Call) RunAndReturn(run func(context.Context, string, string) error) *MockAccountStorageCredentialsAPIInterface_DeleteByMetastoreIdAndStorageCredentialName_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, request
func (_m *MockAccountStorageCredentialsAPIInterface) Get(ctx context.Context, request catalog.GetAccountStorageCredentialRequest) (*catalog.AccountsStorageCredentialInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *catalog.AccountsStorageCredentialInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.GetAccountStorageCredentialRequest) (*catalog.AccountsStorageCredentialInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.GetAccountStorageCredentialRequest) *catalog.AccountsStorageCredentialInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.AccountsStorageCredentialInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.GetAccountStorageCredentialRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountStorageCredentialsAPIInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockAccountStorageCredentialsAPIInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.GetAccountStorageCredentialRequest
func (_e *MockAccountStorageCredentialsAPIInterface_Expecter) Get(ctx interface{}, request interface{}) *MockAccountStorageCredentialsAPIInterface_Get_Call {
	return &MockAccountStorageCredentialsAPIInterface_Get_Call{Call: _e.mock.On("Get", ctx, request)}
}

func (_c *MockAccountStorageCredentialsAPIInterface_Get_Call) Run(run func(ctx context.Context, request catalog.GetAccountStorageCredentialRequest)) *MockAccountStorageCredentialsAPIInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.GetAccountStorageCredentialRequest))
	})
	return _c
}

func (_c *MockAccountStorageCredentialsAPIInterface_Get_Call) Return(_a0 *catalog.AccountsStorageCredentialInfo, _a1 error) *MockAccountStorageCredentialsAPIInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountStorageCredentialsAPIInterface_Get_Call) RunAndReturn(run func(context.Context, catalog.GetAccountStorageCredentialRequest) (*catalog.AccountsStorageCredentialInfo, error)) *MockAccountStorageCredentialsAPIInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByMetastoreIdAndStorageCredentialName provides a mock function with given fields: ctx, metastoreId, storageCredentialName
func (_m *MockAccountStorageCredentialsAPIInterface) GetByMetastoreIdAndStorageCredentialName(ctx context.Context, metastoreId string, storageCredentialName string) (*catalog.AccountsStorageCredentialInfo, error) {
	ret := _m.Called(ctx, metastoreId, storageCredentialName)

	if len(ret) == 0 {
		panic("no return value specified for GetByMetastoreIdAndStorageCredentialName")
	}

	var r0 *catalog.AccountsStorageCredentialInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*catalog.AccountsStorageCredentialInfo, error)); ok {
		return rf(ctx, metastoreId, storageCredentialName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *catalog.AccountsStorageCredentialInfo); ok {
		r0 = rf(ctx, metastoreId, storageCredentialName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.AccountsStorageCredentialInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, metastoreId, storageCredentialName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountStorageCredentialsAPIInterface_GetByMetastoreIdAndStorageCredentialName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByMetastoreIdAndStorageCredentialName'
type MockAccountStorageCredentialsAPIInterface_GetByMetastoreIdAndStorageCredentialName_Call struct {
	*mock.Call
}

// GetByMetastoreIdAndStorageCredentialName is a helper method to define mock.On call
//   - ctx context.Context
//   - metastoreId string
//   - storageCredentialName string
func (_e *MockAccountStorageCredentialsAPIInterface_Expecter) GetByMetastoreIdAndStorageCredentialName(ctx interface{}, metastoreId interface{}, storageCredentialName interface{}) *MockAccountStorageCredentialsAPIInterface_GetByMetastoreIdAndStorageCredentialName_Call {
	return &MockAccountStorageCredentialsAPIInterface_GetByMetastoreIdAndStorageCredentialName_Call{Call: _e.mock.On("GetByMetastoreIdAndStorageCredentialName", ctx, metastoreId, storageCredentialName)}
}

func (_c *MockAccountStorageCredentialsAPIInterface_GetByMetastoreIdAndStorageCredentialName_Call) Run(run func(ctx context.Context, metastoreId string, storageCredentialName string)) *MockAccountStorageCredentialsAPIInterface_GetByMetastoreIdAndStorageCredentialName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockAccountStorageCredentialsAPIInterface_GetByMetastoreIdAndStorageCredentialName_Call) Return(_a0 *catalog.AccountsStorageCredentialInfo, _a1 error) *MockAccountStorageCredentialsAPIInterface_GetByMetastoreIdAndStorageCredentialName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountStorageCredentialsAPIInterface_GetByMetastoreIdAndStorageCredentialName_Call) RunAndReturn(run func(context.Context, string, string) (*catalog.AccountsStorageCredentialInfo, error)) *MockAccountStorageCredentialsAPIInterface_GetByMetastoreIdAndStorageCredentialName_Call {
	_c.Call.Return(run)
	return _c
}

// GetByName provides a mock function with given fields: ctx, name
func (_m *MockAccountStorageCredentialsAPIInterface) GetByName(ctx context.Context, name string) (*catalog.StorageCredentialInfo, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetByName")
	}

	var r0 *catalog.StorageCredentialInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*catalog.StorageCredentialInfo, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *catalog.StorageCredentialInfo); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.StorageCredentialInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountStorageCredentialsAPIInterface_GetByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByName'
type MockAccountStorageCredentialsAPIInterface_GetByName_Call struct {
	*mock.Call
}

// GetByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockAccountStorageCredentialsAPIInterface_Expecter) GetByName(ctx interface{}, name interface{}) *MockAccountStorageCredentialsAPIInterface_GetByName_Call {
	return &MockAccountStorageCredentialsAPIInterface_GetByName_Call{Call: _e.mock.On("GetByName", ctx, name)}
}

func (_c *MockAccountStorageCredentialsAPIInterface_GetByName_Call) Run(run func(ctx context.Context, name string)) *MockAccountStorageCredentialsAPIInterface_GetByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAccountStorageCredentialsAPIInterface_GetByName_Call) Return(_a0 *catalog.StorageCredentialInfo, _a1 error) *MockAccountStorageCredentialsAPIInterface_GetByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountStorageCredentialsAPIInterface_GetByName_Call) RunAndReturn(run func(context.Context, string) (*catalog.StorageCredentialInfo, error)) *MockAccountStorageCredentialsAPIInterface_GetByName_Call {
	_c.Call.Return(run)
	return _c
}

// Impl provides a mock function with given fields:
func (_m *MockAccountStorageCredentialsAPIInterface) Impl() catalog.AccountStorageCredentialsService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 catalog.AccountStorageCredentialsService
	if rf, ok := ret.Get(0).(func() catalog.AccountStorageCredentialsService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(catalog.AccountStorageCredentialsService)
		}
	}

	return r0
}

// MockAccountStorageCredentialsAPIInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockAccountStorageCredentialsAPIInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockAccountStorageCredentialsAPIInterface_Expecter) Impl() *MockAccountStorageCredentialsAPIInterface_Impl_Call {
	return &MockAccountStorageCredentialsAPIInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockAccountStorageCredentialsAPIInterface_Impl_Call) Run(run func()) *MockAccountStorageCredentialsAPIInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAccountStorageCredentialsAPIInterface_Impl_Call) Return(_a0 catalog.AccountStorageCredentialsService) *MockAccountStorageCredentialsAPIInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountStorageCredentialsAPIInterface_Impl_Call) RunAndReturn(run func() catalog.AccountStorageCredentialsService) *MockAccountStorageCredentialsAPIInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, request
func (_m *MockAccountStorageCredentialsAPIInterface) List(ctx context.Context, request catalog.ListAccountStorageCredentialsRequest) ([]catalog.StorageCredentialInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []catalog.StorageCredentialInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.ListAccountStorageCredentialsRequest) ([]catalog.StorageCredentialInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.ListAccountStorageCredentialsRequest) []catalog.StorageCredentialInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]catalog.StorageCredentialInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.ListAccountStorageCredentialsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountStorageCredentialsAPIInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockAccountStorageCredentialsAPIInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.ListAccountStorageCredentialsRequest
func (_e *MockAccountStorageCredentialsAPIInterface_Expecter) List(ctx interface{}, request interface{}) *MockAccountStorageCredentialsAPIInterface_List_Call {
	return &MockAccountStorageCredentialsAPIInterface_List_Call{Call: _e.mock.On("List", ctx, request)}
}

func (_c *MockAccountStorageCredentialsAPIInterface_List_Call) Run(run func(ctx context.Context, request catalog.ListAccountStorageCredentialsRequest)) *MockAccountStorageCredentialsAPIInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.ListAccountStorageCredentialsRequest))
	})
	return _c
}

func (_c *MockAccountStorageCredentialsAPIInterface_List_Call) Return(_a0 []catalog.StorageCredentialInfo, _a1 error) *MockAccountStorageCredentialsAPIInterface_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountStorageCredentialsAPIInterface_List_Call) RunAndReturn(run func(context.Context, catalog.ListAccountStorageCredentialsRequest) ([]catalog.StorageCredentialInfo, error)) *MockAccountStorageCredentialsAPIInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListByMetastoreId provides a mock function with given fields: ctx, metastoreId
func (_m *MockAccountStorageCredentialsAPIInterface) ListByMetastoreId(ctx context.Context, metastoreId string) ([]catalog.StorageCredentialInfo, error) {
	ret := _m.Called(ctx, metastoreId)

	if len(ret) == 0 {
		panic("no return value specified for ListByMetastoreId")
	}

	var r0 []catalog.StorageCredentialInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]catalog.StorageCredentialInfo, error)); ok {
		return rf(ctx, metastoreId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []catalog.StorageCredentialInfo); ok {
		r0 = rf(ctx, metastoreId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]catalog.StorageCredentialInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, metastoreId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountStorageCredentialsAPIInterface_ListByMetastoreId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByMetastoreId'
type MockAccountStorageCredentialsAPIInterface_ListByMetastoreId_Call struct {
	*mock.Call
}

// ListByMetastoreId is a helper method to define mock.On call
//   - ctx context.Context
//   - metastoreId string
func (_e *MockAccountStorageCredentialsAPIInterface_Expecter) ListByMetastoreId(ctx interface{}, metastoreId interface{}) *MockAccountStorageCredentialsAPIInterface_ListByMetastoreId_Call {
	return &MockAccountStorageCredentialsAPIInterface_ListByMetastoreId_Call{Call: _e.mock.On("ListByMetastoreId", ctx, metastoreId)}
}

func (_c *MockAccountStorageCredentialsAPIInterface_ListByMetastoreId_Call) Run(run func(ctx context.Context, metastoreId string)) *MockAccountStorageCredentialsAPIInterface_ListByMetastoreId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAccountStorageCredentialsAPIInterface_ListByMetastoreId_Call) Return(_a0 []catalog.StorageCredentialInfo, _a1 error) *MockAccountStorageCredentialsAPIInterface_ListByMetastoreId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountStorageCredentialsAPIInterface_ListByMetastoreId_Call) RunAndReturn(run func(context.Context, string) ([]catalog.StorageCredentialInfo, error)) *MockAccountStorageCredentialsAPIInterface_ListByMetastoreId_Call {
	_c.Call.Return(run)
	return _c
}

// StorageCredentialInfoNameToIdMap provides a mock function with given fields: ctx, request
func (_m *MockAccountStorageCredentialsAPIInterface) StorageCredentialInfoNameToIdMap(ctx context.Context, request catalog.ListAccountStorageCredentialsRequest) (map[string]string, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for StorageCredentialInfoNameToIdMap")
	}

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.ListAccountStorageCredentialsRequest) (map[string]string, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.ListAccountStorageCredentialsRequest) map[string]string); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.ListAccountStorageCredentialsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountStorageCredentialsAPIInterface_StorageCredentialInfoNameToIdMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StorageCredentialInfoNameToIdMap'
type MockAccountStorageCredentialsAPIInterface_StorageCredentialInfoNameToIdMap_Call struct {
	*mock.Call
}

// StorageCredentialInfoNameToIdMap is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.ListAccountStorageCredentialsRequest
func (_e *MockAccountStorageCredentialsAPIInterface_Expecter) StorageCredentialInfoNameToIdMap(ctx interface{}, request interface{}) *MockAccountStorageCredentialsAPIInterface_StorageCredentialInfoNameToIdMap_Call {
	return &MockAccountStorageCredentialsAPIInterface_StorageCredentialInfoNameToIdMap_Call{Call: _e.mock.On("StorageCredentialInfoNameToIdMap", ctx, request)}
}

func (_c *MockAccountStorageCredentialsAPIInterface_StorageCredentialInfoNameToIdMap_Call) Run(run func(ctx context.Context, request catalog.ListAccountStorageCredentialsRequest)) *MockAccountStorageCredentialsAPIInterface_StorageCredentialInfoNameToIdMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.ListAccountStorageCredentialsRequest))
	})
	return _c
}

func (_c *MockAccountStorageCredentialsAPIInterface_StorageCredentialInfoNameToIdMap_Call) Return(_a0 map[string]string, _a1 error) *MockAccountStorageCredentialsAPIInterface_StorageCredentialInfoNameToIdMap_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountStorageCredentialsAPIInterface_StorageCredentialInfoNameToIdMap_Call) RunAndReturn(run func(context.Context, catalog.ListAccountStorageCredentialsRequest) (map[string]string, error)) *MockAccountStorageCredentialsAPIInterface_StorageCredentialInfoNameToIdMap_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, request
func (_m *MockAccountStorageCredentialsAPIInterface) Update(ctx context.Context, request catalog.AccountsUpdateStorageCredential) (*catalog.AccountsStorageCredentialInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *catalog.AccountsStorageCredentialInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.AccountsUpdateStorageCredential) (*catalog.AccountsStorageCredentialInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.AccountsUpdateStorageCredential) *catalog.AccountsStorageCredentialInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.AccountsStorageCredentialInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.AccountsUpdateStorageCredential) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountStorageCredentialsAPIInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockAccountStorageCredentialsAPIInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.AccountsUpdateStorageCredential
func (_e *MockAccountStorageCredentialsAPIInterface_Expecter) Update(ctx interface{}, request interface{}) *MockAccountStorageCredentialsAPIInterface_Update_Call {
	return &MockAccountStorageCredentialsAPIInterface_Update_Call{Call: _e.mock.On("Update", ctx, request)}
}

func (_c *MockAccountStorageCredentialsAPIInterface_Update_Call) Run(run func(ctx context.Context, request catalog.AccountsUpdateStorageCredential)) *MockAccountStorageCredentialsAPIInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.AccountsUpdateStorageCredential))
	})
	return _c
}

func (_c *MockAccountStorageCredentialsAPIInterface_Update_Call) Return(_a0 *catalog.AccountsStorageCredentialInfo, _a1 error) *MockAccountStorageCredentialsAPIInterface_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountStorageCredentialsAPIInterface_Update_Call) RunAndReturn(run func(context.Context, catalog.AccountsUpdateStorageCredential) (*catalog.AccountsStorageCredentialInfo, error)) *MockAccountStorageCredentialsAPIInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockAccountStorageCredentialsAPIInterface) WithImpl(impl catalog.AccountStorageCredentialsService) catalog.AccountStorageCredentialsAPIInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 catalog.AccountStorageCredentialsAPIInterface
	if rf, ok := ret.Get(0).(func(catalog.AccountStorageCredentialsService) catalog.AccountStorageCredentialsAPIInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(catalog.AccountStorageCredentialsAPIInterface)
		}
	}

	return r0
}

// MockAccountStorageCredentialsAPIInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockAccountStorageCredentialsAPIInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl catalog.AccountStorageCredentialsService
func (_e *MockAccountStorageCredentialsAPIInterface_Expecter) WithImpl(impl interface{}) *MockAccountStorageCredentialsAPIInterface_WithImpl_Call {
	return &MockAccountStorageCredentialsAPIInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockAccountStorageCredentialsAPIInterface_WithImpl_Call) Run(run func(impl catalog.AccountStorageCredentialsService)) *MockAccountStorageCredentialsAPIInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(catalog.AccountStorageCredentialsService))
	})
	return _c
}

func (_c *MockAccountStorageCredentialsAPIInterface_WithImpl_Call) Return(_a0 catalog.AccountStorageCredentialsAPIInterface) *MockAccountStorageCredentialsAPIInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountStorageCredentialsAPIInterface_WithImpl_Call) RunAndReturn(run func(catalog.AccountStorageCredentialsService) catalog.AccountStorageCredentialsAPIInterface) *MockAccountStorageCredentialsAPIInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAccountStorageCredentialsAPIInterface creates a new instance of MockAccountStorageCredentialsAPIInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccountStorageCredentialsAPIInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccountStorageCredentialsAPIInterface {
	mock := &MockAccountStorageCredentialsAPIInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
