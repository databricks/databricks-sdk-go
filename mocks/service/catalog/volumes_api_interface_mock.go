// Code generated by mockery v2.38.0. DO NOT EDIT.

package catalog

import (
	context "context"

	catalog "github.com/databricks/databricks-sdk-go/service/catalog"

	listing "github.com/databricks/databricks-sdk-go/listing"

	mock "github.com/stretchr/testify/mock"
)

// MockVolumesAPIInterface is an autogenerated mock type for the VolumesAPIInterface type
type MockVolumesAPIInterface struct {
	mock.Mock
}

type MockVolumesAPIInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVolumesAPIInterface) EXPECT() *MockVolumesAPIInterface_Expecter {
	return &MockVolumesAPIInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, request
func (_m *MockVolumesAPIInterface) Create(ctx context.Context, request catalog.CreateVolumeRequestContent) (*catalog.VolumeInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *catalog.VolumeInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.CreateVolumeRequestContent) (*catalog.VolumeInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.CreateVolumeRequestContent) *catalog.VolumeInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.VolumeInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.CreateVolumeRequestContent) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVolumesAPIInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockVolumesAPIInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.CreateVolumeRequestContent
func (_e *MockVolumesAPIInterface_Expecter) Create(ctx interface{}, request interface{}) *MockVolumesAPIInterface_Create_Call {
	return &MockVolumesAPIInterface_Create_Call{Call: _e.mock.On("Create", ctx, request)}
}

func (_c *MockVolumesAPIInterface_Create_Call) Run(run func(ctx context.Context, request catalog.CreateVolumeRequestContent)) *MockVolumesAPIInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.CreateVolumeRequestContent))
	})
	return _c
}

func (_c *MockVolumesAPIInterface_Create_Call) Return(_a0 *catalog.VolumeInfo, _a1 error) *MockVolumesAPIInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVolumesAPIInterface_Create_Call) RunAndReturn(run func(context.Context, catalog.CreateVolumeRequestContent) (*catalog.VolumeInfo, error)) *MockVolumesAPIInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, request
func (_m *MockVolumesAPIInterface) Delete(ctx context.Context, request catalog.DeleteVolumeRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.DeleteVolumeRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockVolumesAPIInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockVolumesAPIInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.DeleteVolumeRequest
func (_e *MockVolumesAPIInterface_Expecter) Delete(ctx interface{}, request interface{}) *MockVolumesAPIInterface_Delete_Call {
	return &MockVolumesAPIInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, request)}
}

func (_c *MockVolumesAPIInterface_Delete_Call) Run(run func(ctx context.Context, request catalog.DeleteVolumeRequest)) *MockVolumesAPIInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.DeleteVolumeRequest))
	})
	return _c
}

func (_c *MockVolumesAPIInterface_Delete_Call) Return(_a0 error) *MockVolumesAPIInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVolumesAPIInterface_Delete_Call) RunAndReturn(run func(context.Context, catalog.DeleteVolumeRequest) error) *MockVolumesAPIInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByFullNameArg provides a mock function with given fields: ctx, fullNameArg
func (_m *MockVolumesAPIInterface) DeleteByFullNameArg(ctx context.Context, fullNameArg string) error {
	ret := _m.Called(ctx, fullNameArg)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByFullNameArg")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, fullNameArg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockVolumesAPIInterface_DeleteByFullNameArg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByFullNameArg'
type MockVolumesAPIInterface_DeleteByFullNameArg_Call struct {
	*mock.Call
}

// DeleteByFullNameArg is a helper method to define mock.On call
//   - ctx context.Context
//   - fullNameArg string
func (_e *MockVolumesAPIInterface_Expecter) DeleteByFullNameArg(ctx interface{}, fullNameArg interface{}) *MockVolumesAPIInterface_DeleteByFullNameArg_Call {
	return &MockVolumesAPIInterface_DeleteByFullNameArg_Call{Call: _e.mock.On("DeleteByFullNameArg", ctx, fullNameArg)}
}

func (_c *MockVolumesAPIInterface_DeleteByFullNameArg_Call) Run(run func(ctx context.Context, fullNameArg string)) *MockVolumesAPIInterface_DeleteByFullNameArg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockVolumesAPIInterface_DeleteByFullNameArg_Call) Return(_a0 error) *MockVolumesAPIInterface_DeleteByFullNameArg_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVolumesAPIInterface_DeleteByFullNameArg_Call) RunAndReturn(run func(context.Context, string) error) *MockVolumesAPIInterface_DeleteByFullNameArg_Call {
	_c.Call.Return(run)
	return _c
}

// GetByName provides a mock function with given fields: ctx, name
func (_m *MockVolumesAPIInterface) GetByName(ctx context.Context, name string) (*catalog.VolumeInfo, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetByName")
	}

	var r0 *catalog.VolumeInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*catalog.VolumeInfo, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *catalog.VolumeInfo); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.VolumeInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVolumesAPIInterface_GetByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByName'
type MockVolumesAPIInterface_GetByName_Call struct {
	*mock.Call
}

// GetByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockVolumesAPIInterface_Expecter) GetByName(ctx interface{}, name interface{}) *MockVolumesAPIInterface_GetByName_Call {
	return &MockVolumesAPIInterface_GetByName_Call{Call: _e.mock.On("GetByName", ctx, name)}
}

func (_c *MockVolumesAPIInterface_GetByName_Call) Run(run func(ctx context.Context, name string)) *MockVolumesAPIInterface_GetByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockVolumesAPIInterface_GetByName_Call) Return(_a0 *catalog.VolumeInfo, _a1 error) *MockVolumesAPIInterface_GetByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVolumesAPIInterface_GetByName_Call) RunAndReturn(run func(context.Context, string) (*catalog.VolumeInfo, error)) *MockVolumesAPIInterface_GetByName_Call {
	_c.Call.Return(run)
	return _c
}

// Impl provides a mock function with given fields:
func (_m *MockVolumesAPIInterface) Impl() catalog.VolumesService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 catalog.VolumesService
	if rf, ok := ret.Get(0).(func() catalog.VolumesService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(catalog.VolumesService)
		}
	}

	return r0
}

// MockVolumesAPIInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockVolumesAPIInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockVolumesAPIInterface_Expecter) Impl() *MockVolumesAPIInterface_Impl_Call {
	return &MockVolumesAPIInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockVolumesAPIInterface_Impl_Call) Run(run func()) *MockVolumesAPIInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockVolumesAPIInterface_Impl_Call) Return(_a0 catalog.VolumesService) *MockVolumesAPIInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVolumesAPIInterface_Impl_Call) RunAndReturn(run func() catalog.VolumesService) *MockVolumesAPIInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, request
func (_m *MockVolumesAPIInterface) List(ctx context.Context, request catalog.ListVolumesRequest) *listing.PaginatingIterator[catalog.ListVolumesRequest, *catalog.ListVolumesResponseContent, catalog.VolumeInfo] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *listing.PaginatingIterator[catalog.ListVolumesRequest, *catalog.ListVolumesResponseContent, catalog.VolumeInfo]
	if rf, ok := ret.Get(0).(func(context.Context, catalog.ListVolumesRequest) *listing.PaginatingIterator[catalog.ListVolumesRequest, *catalog.ListVolumesResponseContent, catalog.VolumeInfo]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*listing.PaginatingIterator[catalog.ListVolumesRequest, *catalog.ListVolumesResponseContent, catalog.VolumeInfo])
		}
	}

	return r0
}

// MockVolumesAPIInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockVolumesAPIInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.ListVolumesRequest
func (_e *MockVolumesAPIInterface_Expecter) List(ctx interface{}, request interface{}) *MockVolumesAPIInterface_List_Call {
	return &MockVolumesAPIInterface_List_Call{Call: _e.mock.On("List", ctx, request)}
}

func (_c *MockVolumesAPIInterface_List_Call) Run(run func(ctx context.Context, request catalog.ListVolumesRequest)) *MockVolumesAPIInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.ListVolumesRequest))
	})
	return _c
}

func (_c *MockVolumesAPIInterface_List_Call) Return(_a0 *listing.PaginatingIterator[catalog.ListVolumesRequest, *catalog.ListVolumesResponseContent, catalog.VolumeInfo]) *MockVolumesAPIInterface_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVolumesAPIInterface_List_Call) RunAndReturn(run func(context.Context, catalog.ListVolumesRequest) *listing.PaginatingIterator[catalog.ListVolumesRequest, *catalog.ListVolumesResponseContent, catalog.VolumeInfo]) *MockVolumesAPIInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListAll provides a mock function with given fields: ctx, request
func (_m *MockVolumesAPIInterface) ListAll(ctx context.Context, request catalog.ListVolumesRequest) ([]catalog.VolumeInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListAll")
	}

	var r0 []catalog.VolumeInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.ListVolumesRequest) ([]catalog.VolumeInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.ListVolumesRequest) []catalog.VolumeInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]catalog.VolumeInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.ListVolumesRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVolumesAPIInterface_ListAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAll'
type MockVolumesAPIInterface_ListAll_Call struct {
	*mock.Call
}

// ListAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.ListVolumesRequest
func (_e *MockVolumesAPIInterface_Expecter) ListAll(ctx interface{}, request interface{}) *MockVolumesAPIInterface_ListAll_Call {
	return &MockVolumesAPIInterface_ListAll_Call{Call: _e.mock.On("ListAll", ctx, request)}
}

func (_c *MockVolumesAPIInterface_ListAll_Call) Run(run func(ctx context.Context, request catalog.ListVolumesRequest)) *MockVolumesAPIInterface_ListAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.ListVolumesRequest))
	})
	return _c
}

func (_c *MockVolumesAPIInterface_ListAll_Call) Return(_a0 []catalog.VolumeInfo, _a1 error) *MockVolumesAPIInterface_ListAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVolumesAPIInterface_ListAll_Call) RunAndReturn(run func(context.Context, catalog.ListVolumesRequest) ([]catalog.VolumeInfo, error)) *MockVolumesAPIInterface_ListAll_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields: ctx, request
func (_m *MockVolumesAPIInterface) Read(ctx context.Context, request catalog.ReadVolumeRequest) (*catalog.VolumeInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 *catalog.VolumeInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.ReadVolumeRequest) (*catalog.VolumeInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.ReadVolumeRequest) *catalog.VolumeInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.VolumeInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.ReadVolumeRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVolumesAPIInterface_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type MockVolumesAPIInterface_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.ReadVolumeRequest
func (_e *MockVolumesAPIInterface_Expecter) Read(ctx interface{}, request interface{}) *MockVolumesAPIInterface_Read_Call {
	return &MockVolumesAPIInterface_Read_Call{Call: _e.mock.On("Read", ctx, request)}
}

func (_c *MockVolumesAPIInterface_Read_Call) Run(run func(ctx context.Context, request catalog.ReadVolumeRequest)) *MockVolumesAPIInterface_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.ReadVolumeRequest))
	})
	return _c
}

func (_c *MockVolumesAPIInterface_Read_Call) Return(_a0 *catalog.VolumeInfo, _a1 error) *MockVolumesAPIInterface_Read_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVolumesAPIInterface_Read_Call) RunAndReturn(run func(context.Context, catalog.ReadVolumeRequest) (*catalog.VolumeInfo, error)) *MockVolumesAPIInterface_Read_Call {
	_c.Call.Return(run)
	return _c
}

// ReadByFullNameArg provides a mock function with given fields: ctx, fullNameArg
func (_m *MockVolumesAPIInterface) ReadByFullNameArg(ctx context.Context, fullNameArg string) (*catalog.VolumeInfo, error) {
	ret := _m.Called(ctx, fullNameArg)

	if len(ret) == 0 {
		panic("no return value specified for ReadByFullNameArg")
	}

	var r0 *catalog.VolumeInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*catalog.VolumeInfo, error)); ok {
		return rf(ctx, fullNameArg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *catalog.VolumeInfo); ok {
		r0 = rf(ctx, fullNameArg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.VolumeInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, fullNameArg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVolumesAPIInterface_ReadByFullNameArg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadByFullNameArg'
type MockVolumesAPIInterface_ReadByFullNameArg_Call struct {
	*mock.Call
}

// ReadByFullNameArg is a helper method to define mock.On call
//   - ctx context.Context
//   - fullNameArg string
func (_e *MockVolumesAPIInterface_Expecter) ReadByFullNameArg(ctx interface{}, fullNameArg interface{}) *MockVolumesAPIInterface_ReadByFullNameArg_Call {
	return &MockVolumesAPIInterface_ReadByFullNameArg_Call{Call: _e.mock.On("ReadByFullNameArg", ctx, fullNameArg)}
}

func (_c *MockVolumesAPIInterface_ReadByFullNameArg_Call) Run(run func(ctx context.Context, fullNameArg string)) *MockVolumesAPIInterface_ReadByFullNameArg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockVolumesAPIInterface_ReadByFullNameArg_Call) Return(_a0 *catalog.VolumeInfo, _a1 error) *MockVolumesAPIInterface_ReadByFullNameArg_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVolumesAPIInterface_ReadByFullNameArg_Call) RunAndReturn(run func(context.Context, string) (*catalog.VolumeInfo, error)) *MockVolumesAPIInterface_ReadByFullNameArg_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, request
func (_m *MockVolumesAPIInterface) Update(ctx context.Context, request catalog.UpdateVolumeRequestContent) (*catalog.VolumeInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *catalog.VolumeInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.UpdateVolumeRequestContent) (*catalog.VolumeInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.UpdateVolumeRequestContent) *catalog.VolumeInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.VolumeInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.UpdateVolumeRequestContent) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVolumesAPIInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockVolumesAPIInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.UpdateVolumeRequestContent
func (_e *MockVolumesAPIInterface_Expecter) Update(ctx interface{}, request interface{}) *MockVolumesAPIInterface_Update_Call {
	return &MockVolumesAPIInterface_Update_Call{Call: _e.mock.On("Update", ctx, request)}
}

func (_c *MockVolumesAPIInterface_Update_Call) Run(run func(ctx context.Context, request catalog.UpdateVolumeRequestContent)) *MockVolumesAPIInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.UpdateVolumeRequestContent))
	})
	return _c
}

func (_c *MockVolumesAPIInterface_Update_Call) Return(_a0 *catalog.VolumeInfo, _a1 error) *MockVolumesAPIInterface_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVolumesAPIInterface_Update_Call) RunAndReturn(run func(context.Context, catalog.UpdateVolumeRequestContent) (*catalog.VolumeInfo, error)) *MockVolumesAPIInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// VolumeInfoNameToVolumeIdMap provides a mock function with given fields: ctx, request
func (_m *MockVolumesAPIInterface) VolumeInfoNameToVolumeIdMap(ctx context.Context, request catalog.ListVolumesRequest) (map[string]string, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for VolumeInfoNameToVolumeIdMap")
	}

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.ListVolumesRequest) (map[string]string, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.ListVolumesRequest) map[string]string); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.ListVolumesRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVolumesAPIInterface_VolumeInfoNameToVolumeIdMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VolumeInfoNameToVolumeIdMap'
type MockVolumesAPIInterface_VolumeInfoNameToVolumeIdMap_Call struct {
	*mock.Call
}

// VolumeInfoNameToVolumeIdMap is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.ListVolumesRequest
func (_e *MockVolumesAPIInterface_Expecter) VolumeInfoNameToVolumeIdMap(ctx interface{}, request interface{}) *MockVolumesAPIInterface_VolumeInfoNameToVolumeIdMap_Call {
	return &MockVolumesAPIInterface_VolumeInfoNameToVolumeIdMap_Call{Call: _e.mock.On("VolumeInfoNameToVolumeIdMap", ctx, request)}
}

func (_c *MockVolumesAPIInterface_VolumeInfoNameToVolumeIdMap_Call) Run(run func(ctx context.Context, request catalog.ListVolumesRequest)) *MockVolumesAPIInterface_VolumeInfoNameToVolumeIdMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.ListVolumesRequest))
	})
	return _c
}

func (_c *MockVolumesAPIInterface_VolumeInfoNameToVolumeIdMap_Call) Return(_a0 map[string]string, _a1 error) *MockVolumesAPIInterface_VolumeInfoNameToVolumeIdMap_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVolumesAPIInterface_VolumeInfoNameToVolumeIdMap_Call) RunAndReturn(run func(context.Context, catalog.ListVolumesRequest) (map[string]string, error)) *MockVolumesAPIInterface_VolumeInfoNameToVolumeIdMap_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockVolumesAPIInterface) WithImpl(impl catalog.VolumesService) catalog.VolumesAPIInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 catalog.VolumesAPIInterface
	if rf, ok := ret.Get(0).(func(catalog.VolumesService) catalog.VolumesAPIInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(catalog.VolumesAPIInterface)
		}
	}

	return r0
}

// MockVolumesAPIInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockVolumesAPIInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl catalog.VolumesService
func (_e *MockVolumesAPIInterface_Expecter) WithImpl(impl interface{}) *MockVolumesAPIInterface_WithImpl_Call {
	return &MockVolumesAPIInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockVolumesAPIInterface_WithImpl_Call) Run(run func(impl catalog.VolumesService)) *MockVolumesAPIInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(catalog.VolumesService))
	})
	return _c
}

func (_c *MockVolumesAPIInterface_WithImpl_Call) Return(_a0 catalog.VolumesAPIInterface) *MockVolumesAPIInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVolumesAPIInterface_WithImpl_Call) RunAndReturn(run func(catalog.VolumesService) catalog.VolumesAPIInterface) *MockVolumesAPIInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockVolumesAPIInterface creates a new instance of MockVolumesAPIInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVolumesAPIInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVolumesAPIInterface {
	mock := &MockVolumesAPIInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
