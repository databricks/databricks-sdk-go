// Code generated by mockery v2.38.0. DO NOT EDIT.

package serving

import (
	context "context"

	listing "github.com/databricks/databricks-sdk-go/listing"
	mock "github.com/stretchr/testify/mock"

	retries "github.com/databricks/databricks-sdk-go/retries"

	serving "github.com/databricks/databricks-sdk-go/service/serving"

	time "time"
)

// MockServingEndpointsAPIInterface is an autogenerated mock type for the ServingEndpointsAPIInterface type
type MockServingEndpointsAPIInterface struct {
	mock.Mock
}

type MockServingEndpointsAPIInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServingEndpointsAPIInterface) EXPECT() *MockServingEndpointsAPIInterface_Expecter {
	return &MockServingEndpointsAPIInterface_Expecter{mock: &_m.Mock}
}

// BuildLogs provides a mock function with given fields: ctx, request
func (_m *MockServingEndpointsAPIInterface) BuildLogs(ctx context.Context, request serving.BuildLogsRequest) (*serving.BuildLogsResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for BuildLogs")
	}

	var r0 *serving.BuildLogsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, serving.BuildLogsRequest) (*serving.BuildLogsResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, serving.BuildLogsRequest) *serving.BuildLogsResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serving.BuildLogsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, serving.BuildLogsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServingEndpointsAPIInterface_BuildLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildLogs'
type MockServingEndpointsAPIInterface_BuildLogs_Call struct {
	*mock.Call
}

// BuildLogs is a helper method to define mock.On call
//   - ctx context.Context
//   - request serving.BuildLogsRequest
func (_e *MockServingEndpointsAPIInterface_Expecter) BuildLogs(ctx interface{}, request interface{}) *MockServingEndpointsAPIInterface_BuildLogs_Call {
	return &MockServingEndpointsAPIInterface_BuildLogs_Call{Call: _e.mock.On("BuildLogs", ctx, request)}
}

func (_c *MockServingEndpointsAPIInterface_BuildLogs_Call) Run(run func(ctx context.Context, request serving.BuildLogsRequest)) *MockServingEndpointsAPIInterface_BuildLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(serving.BuildLogsRequest))
	})
	return _c
}

func (_c *MockServingEndpointsAPIInterface_BuildLogs_Call) Return(_a0 *serving.BuildLogsResponse, _a1 error) *MockServingEndpointsAPIInterface_BuildLogs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServingEndpointsAPIInterface_BuildLogs_Call) RunAndReturn(run func(context.Context, serving.BuildLogsRequest) (*serving.BuildLogsResponse, error)) *MockServingEndpointsAPIInterface_BuildLogs_Call {
	_c.Call.Return(run)
	return _c
}

// BuildLogsByNameAndServedModelName provides a mock function with given fields: ctx, name, servedModelName
func (_m *MockServingEndpointsAPIInterface) BuildLogsByNameAndServedModelName(ctx context.Context, name string, servedModelName string) (*serving.BuildLogsResponse, error) {
	ret := _m.Called(ctx, name, servedModelName)

	if len(ret) == 0 {
		panic("no return value specified for BuildLogsByNameAndServedModelName")
	}

	var r0 *serving.BuildLogsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*serving.BuildLogsResponse, error)); ok {
		return rf(ctx, name, servedModelName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *serving.BuildLogsResponse); ok {
		r0 = rf(ctx, name, servedModelName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serving.BuildLogsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, name, servedModelName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServingEndpointsAPIInterface_BuildLogsByNameAndServedModelName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildLogsByNameAndServedModelName'
type MockServingEndpointsAPIInterface_BuildLogsByNameAndServedModelName_Call struct {
	*mock.Call
}

// BuildLogsByNameAndServedModelName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - servedModelName string
func (_e *MockServingEndpointsAPIInterface_Expecter) BuildLogsByNameAndServedModelName(ctx interface{}, name interface{}, servedModelName interface{}) *MockServingEndpointsAPIInterface_BuildLogsByNameAndServedModelName_Call {
	return &MockServingEndpointsAPIInterface_BuildLogsByNameAndServedModelName_Call{Call: _e.mock.On("BuildLogsByNameAndServedModelName", ctx, name, servedModelName)}
}

func (_c *MockServingEndpointsAPIInterface_BuildLogsByNameAndServedModelName_Call) Run(run func(ctx context.Context, name string, servedModelName string)) *MockServingEndpointsAPIInterface_BuildLogsByNameAndServedModelName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockServingEndpointsAPIInterface_BuildLogsByNameAndServedModelName_Call) Return(_a0 *serving.BuildLogsResponse, _a1 error) *MockServingEndpointsAPIInterface_BuildLogsByNameAndServedModelName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServingEndpointsAPIInterface_BuildLogsByNameAndServedModelName_Call) RunAndReturn(run func(context.Context, string, string) (*serving.BuildLogsResponse, error)) *MockServingEndpointsAPIInterface_BuildLogsByNameAndServedModelName_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, createServingEndpoint
func (_m *MockServingEndpointsAPIInterface) Create(ctx context.Context, createServingEndpoint serving.CreateServingEndpoint) (*serving.WaitGetServingEndpointNotUpdating[serving.ServingEndpointDetailed], error) {
	ret := _m.Called(ctx, createServingEndpoint)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *serving.WaitGetServingEndpointNotUpdating[serving.ServingEndpointDetailed]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, serving.CreateServingEndpoint) (*serving.WaitGetServingEndpointNotUpdating[serving.ServingEndpointDetailed], error)); ok {
		return rf(ctx, createServingEndpoint)
	}
	if rf, ok := ret.Get(0).(func(context.Context, serving.CreateServingEndpoint) *serving.WaitGetServingEndpointNotUpdating[serving.ServingEndpointDetailed]); ok {
		r0 = rf(ctx, createServingEndpoint)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serving.WaitGetServingEndpointNotUpdating[serving.ServingEndpointDetailed])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, serving.CreateServingEndpoint) error); ok {
		r1 = rf(ctx, createServingEndpoint)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServingEndpointsAPIInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockServingEndpointsAPIInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - createServingEndpoint serving.CreateServingEndpoint
func (_e *MockServingEndpointsAPIInterface_Expecter) Create(ctx interface{}, createServingEndpoint interface{}) *MockServingEndpointsAPIInterface_Create_Call {
	return &MockServingEndpointsAPIInterface_Create_Call{Call: _e.mock.On("Create", ctx, createServingEndpoint)}
}

func (_c *MockServingEndpointsAPIInterface_Create_Call) Run(run func(ctx context.Context, createServingEndpoint serving.CreateServingEndpoint)) *MockServingEndpointsAPIInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(serving.CreateServingEndpoint))
	})
	return _c
}

func (_c *MockServingEndpointsAPIInterface_Create_Call) Return(_a0 *serving.WaitGetServingEndpointNotUpdating[serving.ServingEndpointDetailed], _a1 error) *MockServingEndpointsAPIInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServingEndpointsAPIInterface_Create_Call) RunAndReturn(run func(context.Context, serving.CreateServingEndpoint) (*serving.WaitGetServingEndpointNotUpdating[serving.ServingEndpointDetailed], error)) *MockServingEndpointsAPIInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAndWait provides a mock function with given fields: ctx, createServingEndpoint, options
func (_m *MockServingEndpointsAPIInterface) CreateAndWait(ctx context.Context, createServingEndpoint serving.CreateServingEndpoint, options ...retries.Option[serving.ServingEndpointDetailed]) (*serving.ServingEndpointDetailed, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, createServingEndpoint)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAndWait")
	}

	var r0 *serving.ServingEndpointDetailed
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, serving.CreateServingEndpoint, ...retries.Option[serving.ServingEndpointDetailed]) (*serving.ServingEndpointDetailed, error)); ok {
		return rf(ctx, createServingEndpoint, options...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, serving.CreateServingEndpoint, ...retries.Option[serving.ServingEndpointDetailed]) *serving.ServingEndpointDetailed); ok {
		r0 = rf(ctx, createServingEndpoint, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serving.ServingEndpointDetailed)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, serving.CreateServingEndpoint, ...retries.Option[serving.ServingEndpointDetailed]) error); ok {
		r1 = rf(ctx, createServingEndpoint, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServingEndpointsAPIInterface_CreateAndWait_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAndWait'
type MockServingEndpointsAPIInterface_CreateAndWait_Call struct {
	*mock.Call
}

// CreateAndWait is a helper method to define mock.On call
//   - ctx context.Context
//   - createServingEndpoint serving.CreateServingEndpoint
//   - options ...retries.Option[serving.ServingEndpointDetailed]
func (_e *MockServingEndpointsAPIInterface_Expecter) CreateAndWait(ctx interface{}, createServingEndpoint interface{}, options ...interface{}) *MockServingEndpointsAPIInterface_CreateAndWait_Call {
	return &MockServingEndpointsAPIInterface_CreateAndWait_Call{Call: _e.mock.On("CreateAndWait",
		append([]interface{}{ctx, createServingEndpoint}, options...)...)}
}

func (_c *MockServingEndpointsAPIInterface_CreateAndWait_Call) Run(run func(ctx context.Context, createServingEndpoint serving.CreateServingEndpoint, options ...retries.Option[serving.ServingEndpointDetailed])) *MockServingEndpointsAPIInterface_CreateAndWait_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]retries.Option[serving.ServingEndpointDetailed], len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(retries.Option[serving.ServingEndpointDetailed])
			}
		}
		run(args[0].(context.Context), args[1].(serving.CreateServingEndpoint), variadicArgs...)
	})
	return _c
}

func (_c *MockServingEndpointsAPIInterface_CreateAndWait_Call) Return(_a0 *serving.ServingEndpointDetailed, _a1 error) *MockServingEndpointsAPIInterface_CreateAndWait_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServingEndpointsAPIInterface_CreateAndWait_Call) RunAndReturn(run func(context.Context, serving.CreateServingEndpoint, ...retries.Option[serving.ServingEndpointDetailed]) (*serving.ServingEndpointDetailed, error)) *MockServingEndpointsAPIInterface_CreateAndWait_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, request
func (_m *MockServingEndpointsAPIInterface) Delete(ctx context.Context, request serving.DeleteServingEndpointRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, serving.DeleteServingEndpointRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServingEndpointsAPIInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockServingEndpointsAPIInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - request serving.DeleteServingEndpointRequest
func (_e *MockServingEndpointsAPIInterface_Expecter) Delete(ctx interface{}, request interface{}) *MockServingEndpointsAPIInterface_Delete_Call {
	return &MockServingEndpointsAPIInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, request)}
}

func (_c *MockServingEndpointsAPIInterface_Delete_Call) Run(run func(ctx context.Context, request serving.DeleteServingEndpointRequest)) *MockServingEndpointsAPIInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(serving.DeleteServingEndpointRequest))
	})
	return _c
}

func (_c *MockServingEndpointsAPIInterface_Delete_Call) Return(_a0 error) *MockServingEndpointsAPIInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServingEndpointsAPIInterface_Delete_Call) RunAndReturn(run func(context.Context, serving.DeleteServingEndpointRequest) error) *MockServingEndpointsAPIInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByName provides a mock function with given fields: ctx, name
func (_m *MockServingEndpointsAPIInterface) DeleteByName(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByName")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServingEndpointsAPIInterface_DeleteByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByName'
type MockServingEndpointsAPIInterface_DeleteByName_Call struct {
	*mock.Call
}

// DeleteByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockServingEndpointsAPIInterface_Expecter) DeleteByName(ctx interface{}, name interface{}) *MockServingEndpointsAPIInterface_DeleteByName_Call {
	return &MockServingEndpointsAPIInterface_DeleteByName_Call{Call: _e.mock.On("DeleteByName", ctx, name)}
}

func (_c *MockServingEndpointsAPIInterface_DeleteByName_Call) Run(run func(ctx context.Context, name string)) *MockServingEndpointsAPIInterface_DeleteByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockServingEndpointsAPIInterface_DeleteByName_Call) Return(_a0 error) *MockServingEndpointsAPIInterface_DeleteByName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServingEndpointsAPIInterface_DeleteByName_Call) RunAndReturn(run func(context.Context, string) error) *MockServingEndpointsAPIInterface_DeleteByName_Call {
	_c.Call.Return(run)
	return _c
}

// ExportMetrics provides a mock function with given fields: ctx, request
func (_m *MockServingEndpointsAPIInterface) ExportMetrics(ctx context.Context, request serving.ExportMetricsRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ExportMetrics")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, serving.ExportMetricsRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServingEndpointsAPIInterface_ExportMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExportMetrics'
type MockServingEndpointsAPIInterface_ExportMetrics_Call struct {
	*mock.Call
}

// ExportMetrics is a helper method to define mock.On call
//   - ctx context.Context
//   - request serving.ExportMetricsRequest
func (_e *MockServingEndpointsAPIInterface_Expecter) ExportMetrics(ctx interface{}, request interface{}) *MockServingEndpointsAPIInterface_ExportMetrics_Call {
	return &MockServingEndpointsAPIInterface_ExportMetrics_Call{Call: _e.mock.On("ExportMetrics", ctx, request)}
}

func (_c *MockServingEndpointsAPIInterface_ExportMetrics_Call) Run(run func(ctx context.Context, request serving.ExportMetricsRequest)) *MockServingEndpointsAPIInterface_ExportMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(serving.ExportMetricsRequest))
	})
	return _c
}

func (_c *MockServingEndpointsAPIInterface_ExportMetrics_Call) Return(_a0 error) *MockServingEndpointsAPIInterface_ExportMetrics_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServingEndpointsAPIInterface_ExportMetrics_Call) RunAndReturn(run func(context.Context, serving.ExportMetricsRequest) error) *MockServingEndpointsAPIInterface_ExportMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// ExportMetricsByName provides a mock function with given fields: ctx, name
func (_m *MockServingEndpointsAPIInterface) ExportMetricsByName(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for ExportMetricsByName")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServingEndpointsAPIInterface_ExportMetricsByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExportMetricsByName'
type MockServingEndpointsAPIInterface_ExportMetricsByName_Call struct {
	*mock.Call
}

// ExportMetricsByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockServingEndpointsAPIInterface_Expecter) ExportMetricsByName(ctx interface{}, name interface{}) *MockServingEndpointsAPIInterface_ExportMetricsByName_Call {
	return &MockServingEndpointsAPIInterface_ExportMetricsByName_Call{Call: _e.mock.On("ExportMetricsByName", ctx, name)}
}

func (_c *MockServingEndpointsAPIInterface_ExportMetricsByName_Call) Run(run func(ctx context.Context, name string)) *MockServingEndpointsAPIInterface_ExportMetricsByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockServingEndpointsAPIInterface_ExportMetricsByName_Call) Return(_a0 error) *MockServingEndpointsAPIInterface_ExportMetricsByName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServingEndpointsAPIInterface_ExportMetricsByName_Call) RunAndReturn(run func(context.Context, string) error) *MockServingEndpointsAPIInterface_ExportMetricsByName_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, request
func (_m *MockServingEndpointsAPIInterface) Get(ctx context.Context, request serving.GetServingEndpointRequest) (*serving.ServingEndpointDetailed, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *serving.ServingEndpointDetailed
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, serving.GetServingEndpointRequest) (*serving.ServingEndpointDetailed, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, serving.GetServingEndpointRequest) *serving.ServingEndpointDetailed); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serving.ServingEndpointDetailed)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, serving.GetServingEndpointRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServingEndpointsAPIInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockServingEndpointsAPIInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - request serving.GetServingEndpointRequest
func (_e *MockServingEndpointsAPIInterface_Expecter) Get(ctx interface{}, request interface{}) *MockServingEndpointsAPIInterface_Get_Call {
	return &MockServingEndpointsAPIInterface_Get_Call{Call: _e.mock.On("Get", ctx, request)}
}

func (_c *MockServingEndpointsAPIInterface_Get_Call) Run(run func(ctx context.Context, request serving.GetServingEndpointRequest)) *MockServingEndpointsAPIInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(serving.GetServingEndpointRequest))
	})
	return _c
}

func (_c *MockServingEndpointsAPIInterface_Get_Call) Return(_a0 *serving.ServingEndpointDetailed, _a1 error) *MockServingEndpointsAPIInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServingEndpointsAPIInterface_Get_Call) RunAndReturn(run func(context.Context, serving.GetServingEndpointRequest) (*serving.ServingEndpointDetailed, error)) *MockServingEndpointsAPIInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByName provides a mock function with given fields: ctx, name
func (_m *MockServingEndpointsAPIInterface) GetByName(ctx context.Context, name string) (*serving.ServingEndpointDetailed, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetByName")
	}

	var r0 *serving.ServingEndpointDetailed
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*serving.ServingEndpointDetailed, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *serving.ServingEndpointDetailed); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serving.ServingEndpointDetailed)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServingEndpointsAPIInterface_GetByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByName'
type MockServingEndpointsAPIInterface_GetByName_Call struct {
	*mock.Call
}

// GetByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockServingEndpointsAPIInterface_Expecter) GetByName(ctx interface{}, name interface{}) *MockServingEndpointsAPIInterface_GetByName_Call {
	return &MockServingEndpointsAPIInterface_GetByName_Call{Call: _e.mock.On("GetByName", ctx, name)}
}

func (_c *MockServingEndpointsAPIInterface_GetByName_Call) Run(run func(ctx context.Context, name string)) *MockServingEndpointsAPIInterface_GetByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockServingEndpointsAPIInterface_GetByName_Call) Return(_a0 *serving.ServingEndpointDetailed, _a1 error) *MockServingEndpointsAPIInterface_GetByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServingEndpointsAPIInterface_GetByName_Call) RunAndReturn(run func(context.Context, string) (*serving.ServingEndpointDetailed, error)) *MockServingEndpointsAPIInterface_GetByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetPermissionLevels provides a mock function with given fields: ctx, request
func (_m *MockServingEndpointsAPIInterface) GetPermissionLevels(ctx context.Context, request serving.GetServingEndpointPermissionLevelsRequest) (*serving.GetServingEndpointPermissionLevelsResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetPermissionLevels")
	}

	var r0 *serving.GetServingEndpointPermissionLevelsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, serving.GetServingEndpointPermissionLevelsRequest) (*serving.GetServingEndpointPermissionLevelsResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, serving.GetServingEndpointPermissionLevelsRequest) *serving.GetServingEndpointPermissionLevelsResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serving.GetServingEndpointPermissionLevelsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, serving.GetServingEndpointPermissionLevelsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServingEndpointsAPIInterface_GetPermissionLevels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPermissionLevels'
type MockServingEndpointsAPIInterface_GetPermissionLevels_Call struct {
	*mock.Call
}

// GetPermissionLevels is a helper method to define mock.On call
//   - ctx context.Context
//   - request serving.GetServingEndpointPermissionLevelsRequest
func (_e *MockServingEndpointsAPIInterface_Expecter) GetPermissionLevels(ctx interface{}, request interface{}) *MockServingEndpointsAPIInterface_GetPermissionLevels_Call {
	return &MockServingEndpointsAPIInterface_GetPermissionLevels_Call{Call: _e.mock.On("GetPermissionLevels", ctx, request)}
}

func (_c *MockServingEndpointsAPIInterface_GetPermissionLevels_Call) Run(run func(ctx context.Context, request serving.GetServingEndpointPermissionLevelsRequest)) *MockServingEndpointsAPIInterface_GetPermissionLevels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(serving.GetServingEndpointPermissionLevelsRequest))
	})
	return _c
}

func (_c *MockServingEndpointsAPIInterface_GetPermissionLevels_Call) Return(_a0 *serving.GetServingEndpointPermissionLevelsResponse, _a1 error) *MockServingEndpointsAPIInterface_GetPermissionLevels_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServingEndpointsAPIInterface_GetPermissionLevels_Call) RunAndReturn(run func(context.Context, serving.GetServingEndpointPermissionLevelsRequest) (*serving.GetServingEndpointPermissionLevelsResponse, error)) *MockServingEndpointsAPIInterface_GetPermissionLevels_Call {
	_c.Call.Return(run)
	return _c
}

// GetPermissionLevelsByServingEndpointId provides a mock function with given fields: ctx, servingEndpointId
func (_m *MockServingEndpointsAPIInterface) GetPermissionLevelsByServingEndpointId(ctx context.Context, servingEndpointId string) (*serving.GetServingEndpointPermissionLevelsResponse, error) {
	ret := _m.Called(ctx, servingEndpointId)

	if len(ret) == 0 {
		panic("no return value specified for GetPermissionLevelsByServingEndpointId")
	}

	var r0 *serving.GetServingEndpointPermissionLevelsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*serving.GetServingEndpointPermissionLevelsResponse, error)); ok {
		return rf(ctx, servingEndpointId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *serving.GetServingEndpointPermissionLevelsResponse); ok {
		r0 = rf(ctx, servingEndpointId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serving.GetServingEndpointPermissionLevelsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, servingEndpointId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServingEndpointsAPIInterface_GetPermissionLevelsByServingEndpointId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPermissionLevelsByServingEndpointId'
type MockServingEndpointsAPIInterface_GetPermissionLevelsByServingEndpointId_Call struct {
	*mock.Call
}

// GetPermissionLevelsByServingEndpointId is a helper method to define mock.On call
//   - ctx context.Context
//   - servingEndpointId string
func (_e *MockServingEndpointsAPIInterface_Expecter) GetPermissionLevelsByServingEndpointId(ctx interface{}, servingEndpointId interface{}) *MockServingEndpointsAPIInterface_GetPermissionLevelsByServingEndpointId_Call {
	return &MockServingEndpointsAPIInterface_GetPermissionLevelsByServingEndpointId_Call{Call: _e.mock.On("GetPermissionLevelsByServingEndpointId", ctx, servingEndpointId)}
}

func (_c *MockServingEndpointsAPIInterface_GetPermissionLevelsByServingEndpointId_Call) Run(run func(ctx context.Context, servingEndpointId string)) *MockServingEndpointsAPIInterface_GetPermissionLevelsByServingEndpointId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockServingEndpointsAPIInterface_GetPermissionLevelsByServingEndpointId_Call) Return(_a0 *serving.GetServingEndpointPermissionLevelsResponse, _a1 error) *MockServingEndpointsAPIInterface_GetPermissionLevelsByServingEndpointId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServingEndpointsAPIInterface_GetPermissionLevelsByServingEndpointId_Call) RunAndReturn(run func(context.Context, string) (*serving.GetServingEndpointPermissionLevelsResponse, error)) *MockServingEndpointsAPIInterface_GetPermissionLevelsByServingEndpointId_Call {
	_c.Call.Return(run)
	return _c
}

// GetPermissions provides a mock function with given fields: ctx, request
func (_m *MockServingEndpointsAPIInterface) GetPermissions(ctx context.Context, request serving.GetServingEndpointPermissionsRequest) (*serving.ServingEndpointPermissions, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetPermissions")
	}

	var r0 *serving.ServingEndpointPermissions
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, serving.GetServingEndpointPermissionsRequest) (*serving.ServingEndpointPermissions, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, serving.GetServingEndpointPermissionsRequest) *serving.ServingEndpointPermissions); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serving.ServingEndpointPermissions)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, serving.GetServingEndpointPermissionsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServingEndpointsAPIInterface_GetPermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPermissions'
type MockServingEndpointsAPIInterface_GetPermissions_Call struct {
	*mock.Call
}

// GetPermissions is a helper method to define mock.On call
//   - ctx context.Context
//   - request serving.GetServingEndpointPermissionsRequest
func (_e *MockServingEndpointsAPIInterface_Expecter) GetPermissions(ctx interface{}, request interface{}) *MockServingEndpointsAPIInterface_GetPermissions_Call {
	return &MockServingEndpointsAPIInterface_GetPermissions_Call{Call: _e.mock.On("GetPermissions", ctx, request)}
}

func (_c *MockServingEndpointsAPIInterface_GetPermissions_Call) Run(run func(ctx context.Context, request serving.GetServingEndpointPermissionsRequest)) *MockServingEndpointsAPIInterface_GetPermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(serving.GetServingEndpointPermissionsRequest))
	})
	return _c
}

func (_c *MockServingEndpointsAPIInterface_GetPermissions_Call) Return(_a0 *serving.ServingEndpointPermissions, _a1 error) *MockServingEndpointsAPIInterface_GetPermissions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServingEndpointsAPIInterface_GetPermissions_Call) RunAndReturn(run func(context.Context, serving.GetServingEndpointPermissionsRequest) (*serving.ServingEndpointPermissions, error)) *MockServingEndpointsAPIInterface_GetPermissions_Call {
	_c.Call.Return(run)
	return _c
}

// GetPermissionsByServingEndpointId provides a mock function with given fields: ctx, servingEndpointId
func (_m *MockServingEndpointsAPIInterface) GetPermissionsByServingEndpointId(ctx context.Context, servingEndpointId string) (*serving.ServingEndpointPermissions, error) {
	ret := _m.Called(ctx, servingEndpointId)

	if len(ret) == 0 {
		panic("no return value specified for GetPermissionsByServingEndpointId")
	}

	var r0 *serving.ServingEndpointPermissions
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*serving.ServingEndpointPermissions, error)); ok {
		return rf(ctx, servingEndpointId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *serving.ServingEndpointPermissions); ok {
		r0 = rf(ctx, servingEndpointId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serving.ServingEndpointPermissions)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, servingEndpointId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServingEndpointsAPIInterface_GetPermissionsByServingEndpointId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPermissionsByServingEndpointId'
type MockServingEndpointsAPIInterface_GetPermissionsByServingEndpointId_Call struct {
	*mock.Call
}

// GetPermissionsByServingEndpointId is a helper method to define mock.On call
//   - ctx context.Context
//   - servingEndpointId string
func (_e *MockServingEndpointsAPIInterface_Expecter) GetPermissionsByServingEndpointId(ctx interface{}, servingEndpointId interface{}) *MockServingEndpointsAPIInterface_GetPermissionsByServingEndpointId_Call {
	return &MockServingEndpointsAPIInterface_GetPermissionsByServingEndpointId_Call{Call: _e.mock.On("GetPermissionsByServingEndpointId", ctx, servingEndpointId)}
}

func (_c *MockServingEndpointsAPIInterface_GetPermissionsByServingEndpointId_Call) Run(run func(ctx context.Context, servingEndpointId string)) *MockServingEndpointsAPIInterface_GetPermissionsByServingEndpointId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockServingEndpointsAPIInterface_GetPermissionsByServingEndpointId_Call) Return(_a0 *serving.ServingEndpointPermissions, _a1 error) *MockServingEndpointsAPIInterface_GetPermissionsByServingEndpointId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServingEndpointsAPIInterface_GetPermissionsByServingEndpointId_Call) RunAndReturn(run func(context.Context, string) (*serving.ServingEndpointPermissions, error)) *MockServingEndpointsAPIInterface_GetPermissionsByServingEndpointId_Call {
	_c.Call.Return(run)
	return _c
}

// Impl provides a mock function with given fields:
func (_m *MockServingEndpointsAPIInterface) Impl() serving.ServingEndpointsService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 serving.ServingEndpointsService
	if rf, ok := ret.Get(0).(func() serving.ServingEndpointsService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(serving.ServingEndpointsService)
		}
	}

	return r0
}

// MockServingEndpointsAPIInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockServingEndpointsAPIInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockServingEndpointsAPIInterface_Expecter) Impl() *MockServingEndpointsAPIInterface_Impl_Call {
	return &MockServingEndpointsAPIInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockServingEndpointsAPIInterface_Impl_Call) Run(run func()) *MockServingEndpointsAPIInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockServingEndpointsAPIInterface_Impl_Call) Return(_a0 serving.ServingEndpointsService) *MockServingEndpointsAPIInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServingEndpointsAPIInterface_Impl_Call) RunAndReturn(run func() serving.ServingEndpointsService) *MockServingEndpointsAPIInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx
func (_m *MockServingEndpointsAPIInterface) List(ctx context.Context) *listing.PaginatingIterator[struct{}, *serving.ListEndpointsResponse, serving.ServingEndpoint] {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *listing.PaginatingIterator[struct{}, *serving.ListEndpointsResponse, serving.ServingEndpoint]
	if rf, ok := ret.Get(0).(func(context.Context) *listing.PaginatingIterator[struct{}, *serving.ListEndpointsResponse, serving.ServingEndpoint]); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*listing.PaginatingIterator[struct{}, *serving.ListEndpointsResponse, serving.ServingEndpoint])
		}
	}

	return r0
}

// MockServingEndpointsAPIInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockServingEndpointsAPIInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockServingEndpointsAPIInterface_Expecter) List(ctx interface{}) *MockServingEndpointsAPIInterface_List_Call {
	return &MockServingEndpointsAPIInterface_List_Call{Call: _e.mock.On("List", ctx)}
}

func (_c *MockServingEndpointsAPIInterface_List_Call) Run(run func(ctx context.Context)) *MockServingEndpointsAPIInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockServingEndpointsAPIInterface_List_Call) Return(_a0 *listing.PaginatingIterator[struct{}, *serving.ListEndpointsResponse, serving.ServingEndpoint]) *MockServingEndpointsAPIInterface_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServingEndpointsAPIInterface_List_Call) RunAndReturn(run func(context.Context) *listing.PaginatingIterator[struct{}, *serving.ListEndpointsResponse, serving.ServingEndpoint]) *MockServingEndpointsAPIInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListAll provides a mock function with given fields: ctx
func (_m *MockServingEndpointsAPIInterface) ListAll(ctx context.Context) ([]serving.ServingEndpoint, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListAll")
	}

	var r0 []serving.ServingEndpoint
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]serving.ServingEndpoint, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []serving.ServingEndpoint); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]serving.ServingEndpoint)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServingEndpointsAPIInterface_ListAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAll'
type MockServingEndpointsAPIInterface_ListAll_Call struct {
	*mock.Call
}

// ListAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockServingEndpointsAPIInterface_Expecter) ListAll(ctx interface{}) *MockServingEndpointsAPIInterface_ListAll_Call {
	return &MockServingEndpointsAPIInterface_ListAll_Call{Call: _e.mock.On("ListAll", ctx)}
}

func (_c *MockServingEndpointsAPIInterface_ListAll_Call) Run(run func(ctx context.Context)) *MockServingEndpointsAPIInterface_ListAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockServingEndpointsAPIInterface_ListAll_Call) Return(_a0 []serving.ServingEndpoint, _a1 error) *MockServingEndpointsAPIInterface_ListAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServingEndpointsAPIInterface_ListAll_Call) RunAndReturn(run func(context.Context) ([]serving.ServingEndpoint, error)) *MockServingEndpointsAPIInterface_ListAll_Call {
	_c.Call.Return(run)
	return _c
}

// Logs provides a mock function with given fields: ctx, request
func (_m *MockServingEndpointsAPIInterface) Logs(ctx context.Context, request serving.LogsRequest) (*serving.ServerLogsResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Logs")
	}

	var r0 *serving.ServerLogsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, serving.LogsRequest) (*serving.ServerLogsResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, serving.LogsRequest) *serving.ServerLogsResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serving.ServerLogsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, serving.LogsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServingEndpointsAPIInterface_Logs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logs'
type MockServingEndpointsAPIInterface_Logs_Call struct {
	*mock.Call
}

// Logs is a helper method to define mock.On call
//   - ctx context.Context
//   - request serving.LogsRequest
func (_e *MockServingEndpointsAPIInterface_Expecter) Logs(ctx interface{}, request interface{}) *MockServingEndpointsAPIInterface_Logs_Call {
	return &MockServingEndpointsAPIInterface_Logs_Call{Call: _e.mock.On("Logs", ctx, request)}
}

func (_c *MockServingEndpointsAPIInterface_Logs_Call) Run(run func(ctx context.Context, request serving.LogsRequest)) *MockServingEndpointsAPIInterface_Logs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(serving.LogsRequest))
	})
	return _c
}

func (_c *MockServingEndpointsAPIInterface_Logs_Call) Return(_a0 *serving.ServerLogsResponse, _a1 error) *MockServingEndpointsAPIInterface_Logs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServingEndpointsAPIInterface_Logs_Call) RunAndReturn(run func(context.Context, serving.LogsRequest) (*serving.ServerLogsResponse, error)) *MockServingEndpointsAPIInterface_Logs_Call {
	_c.Call.Return(run)
	return _c
}

// LogsByNameAndServedModelName provides a mock function with given fields: ctx, name, servedModelName
func (_m *MockServingEndpointsAPIInterface) LogsByNameAndServedModelName(ctx context.Context, name string, servedModelName string) (*serving.ServerLogsResponse, error) {
	ret := _m.Called(ctx, name, servedModelName)

	if len(ret) == 0 {
		panic("no return value specified for LogsByNameAndServedModelName")
	}

	var r0 *serving.ServerLogsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*serving.ServerLogsResponse, error)); ok {
		return rf(ctx, name, servedModelName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *serving.ServerLogsResponse); ok {
		r0 = rf(ctx, name, servedModelName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serving.ServerLogsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, name, servedModelName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServingEndpointsAPIInterface_LogsByNameAndServedModelName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogsByNameAndServedModelName'
type MockServingEndpointsAPIInterface_LogsByNameAndServedModelName_Call struct {
	*mock.Call
}

// LogsByNameAndServedModelName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - servedModelName string
func (_e *MockServingEndpointsAPIInterface_Expecter) LogsByNameAndServedModelName(ctx interface{}, name interface{}, servedModelName interface{}) *MockServingEndpointsAPIInterface_LogsByNameAndServedModelName_Call {
	return &MockServingEndpointsAPIInterface_LogsByNameAndServedModelName_Call{Call: _e.mock.On("LogsByNameAndServedModelName", ctx, name, servedModelName)}
}

func (_c *MockServingEndpointsAPIInterface_LogsByNameAndServedModelName_Call) Run(run func(ctx context.Context, name string, servedModelName string)) *MockServingEndpointsAPIInterface_LogsByNameAndServedModelName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockServingEndpointsAPIInterface_LogsByNameAndServedModelName_Call) Return(_a0 *serving.ServerLogsResponse, _a1 error) *MockServingEndpointsAPIInterface_LogsByNameAndServedModelName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServingEndpointsAPIInterface_LogsByNameAndServedModelName_Call) RunAndReturn(run func(context.Context, string, string) (*serving.ServerLogsResponse, error)) *MockServingEndpointsAPIInterface_LogsByNameAndServedModelName_Call {
	_c.Call.Return(run)
	return _c
}

// Patch provides a mock function with given fields: ctx, request
func (_m *MockServingEndpointsAPIInterface) Patch(ctx context.Context, request serving.PatchServingEndpointTags) ([]serving.EndpointTag, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Patch")
	}

	var r0 []serving.EndpointTag
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, serving.PatchServingEndpointTags) ([]serving.EndpointTag, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, serving.PatchServingEndpointTags) []serving.EndpointTag); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]serving.EndpointTag)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, serving.PatchServingEndpointTags) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServingEndpointsAPIInterface_Patch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Patch'
type MockServingEndpointsAPIInterface_Patch_Call struct {
	*mock.Call
}

// Patch is a helper method to define mock.On call
//   - ctx context.Context
//   - request serving.PatchServingEndpointTags
func (_e *MockServingEndpointsAPIInterface_Expecter) Patch(ctx interface{}, request interface{}) *MockServingEndpointsAPIInterface_Patch_Call {
	return &MockServingEndpointsAPIInterface_Patch_Call{Call: _e.mock.On("Patch", ctx, request)}
}

func (_c *MockServingEndpointsAPIInterface_Patch_Call) Run(run func(ctx context.Context, request serving.PatchServingEndpointTags)) *MockServingEndpointsAPIInterface_Patch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(serving.PatchServingEndpointTags))
	})
	return _c
}

func (_c *MockServingEndpointsAPIInterface_Patch_Call) Return(_a0 []serving.EndpointTag, _a1 error) *MockServingEndpointsAPIInterface_Patch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServingEndpointsAPIInterface_Patch_Call) RunAndReturn(run func(context.Context, serving.PatchServingEndpointTags) ([]serving.EndpointTag, error)) *MockServingEndpointsAPIInterface_Patch_Call {
	_c.Call.Return(run)
	return _c
}

// Put provides a mock function with given fields: ctx, request
func (_m *MockServingEndpointsAPIInterface) Put(ctx context.Context, request serving.PutRequest) (*serving.PutResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 *serving.PutResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, serving.PutRequest) (*serving.PutResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, serving.PutRequest) *serving.PutResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serving.PutResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, serving.PutRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServingEndpointsAPIInterface_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type MockServingEndpointsAPIInterface_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - ctx context.Context
//   - request serving.PutRequest
func (_e *MockServingEndpointsAPIInterface_Expecter) Put(ctx interface{}, request interface{}) *MockServingEndpointsAPIInterface_Put_Call {
	return &MockServingEndpointsAPIInterface_Put_Call{Call: _e.mock.On("Put", ctx, request)}
}

func (_c *MockServingEndpointsAPIInterface_Put_Call) Run(run func(ctx context.Context, request serving.PutRequest)) *MockServingEndpointsAPIInterface_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(serving.PutRequest))
	})
	return _c
}

func (_c *MockServingEndpointsAPIInterface_Put_Call) Return(_a0 *serving.PutResponse, _a1 error) *MockServingEndpointsAPIInterface_Put_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServingEndpointsAPIInterface_Put_Call) RunAndReturn(run func(context.Context, serving.PutRequest) (*serving.PutResponse, error)) *MockServingEndpointsAPIInterface_Put_Call {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function with given fields: ctx, request
func (_m *MockServingEndpointsAPIInterface) Query(ctx context.Context, request serving.QueryEndpointInput) (*serving.QueryEndpointResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 *serving.QueryEndpointResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, serving.QueryEndpointInput) (*serving.QueryEndpointResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, serving.QueryEndpointInput) *serving.QueryEndpointResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serving.QueryEndpointResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, serving.QueryEndpointInput) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServingEndpointsAPIInterface_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type MockServingEndpointsAPIInterface_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - ctx context.Context
//   - request serving.QueryEndpointInput
func (_e *MockServingEndpointsAPIInterface_Expecter) Query(ctx interface{}, request interface{}) *MockServingEndpointsAPIInterface_Query_Call {
	return &MockServingEndpointsAPIInterface_Query_Call{Call: _e.mock.On("Query", ctx, request)}
}

func (_c *MockServingEndpointsAPIInterface_Query_Call) Run(run func(ctx context.Context, request serving.QueryEndpointInput)) *MockServingEndpointsAPIInterface_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(serving.QueryEndpointInput))
	})
	return _c
}

func (_c *MockServingEndpointsAPIInterface_Query_Call) Return(_a0 *serving.QueryEndpointResponse, _a1 error) *MockServingEndpointsAPIInterface_Query_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServingEndpointsAPIInterface_Query_Call) RunAndReturn(run func(context.Context, serving.QueryEndpointInput) (*serving.QueryEndpointResponse, error)) *MockServingEndpointsAPIInterface_Query_Call {
	_c.Call.Return(run)
	return _c
}

// SetPermissions provides a mock function with given fields: ctx, request
func (_m *MockServingEndpointsAPIInterface) SetPermissions(ctx context.Context, request serving.ServingEndpointPermissionsRequest) (*serving.ServingEndpointPermissions, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for SetPermissions")
	}

	var r0 *serving.ServingEndpointPermissions
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, serving.ServingEndpointPermissionsRequest) (*serving.ServingEndpointPermissions, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, serving.ServingEndpointPermissionsRequest) *serving.ServingEndpointPermissions); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serving.ServingEndpointPermissions)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, serving.ServingEndpointPermissionsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServingEndpointsAPIInterface_SetPermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetPermissions'
type MockServingEndpointsAPIInterface_SetPermissions_Call struct {
	*mock.Call
}

// SetPermissions is a helper method to define mock.On call
//   - ctx context.Context
//   - request serving.ServingEndpointPermissionsRequest
func (_e *MockServingEndpointsAPIInterface_Expecter) SetPermissions(ctx interface{}, request interface{}) *MockServingEndpointsAPIInterface_SetPermissions_Call {
	return &MockServingEndpointsAPIInterface_SetPermissions_Call{Call: _e.mock.On("SetPermissions", ctx, request)}
}

func (_c *MockServingEndpointsAPIInterface_SetPermissions_Call) Run(run func(ctx context.Context, request serving.ServingEndpointPermissionsRequest)) *MockServingEndpointsAPIInterface_SetPermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(serving.ServingEndpointPermissionsRequest))
	})
	return _c
}

func (_c *MockServingEndpointsAPIInterface_SetPermissions_Call) Return(_a0 *serving.ServingEndpointPermissions, _a1 error) *MockServingEndpointsAPIInterface_SetPermissions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServingEndpointsAPIInterface_SetPermissions_Call) RunAndReturn(run func(context.Context, serving.ServingEndpointPermissionsRequest) (*serving.ServingEndpointPermissions, error)) *MockServingEndpointsAPIInterface_SetPermissions_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateConfig provides a mock function with given fields: ctx, endpointCoreConfigInput
func (_m *MockServingEndpointsAPIInterface) UpdateConfig(ctx context.Context, endpointCoreConfigInput serving.EndpointCoreConfigInput) (*serving.WaitGetServingEndpointNotUpdating[serving.ServingEndpointDetailed], error) {
	ret := _m.Called(ctx, endpointCoreConfigInput)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConfig")
	}

	var r0 *serving.WaitGetServingEndpointNotUpdating[serving.ServingEndpointDetailed]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, serving.EndpointCoreConfigInput) (*serving.WaitGetServingEndpointNotUpdating[serving.ServingEndpointDetailed], error)); ok {
		return rf(ctx, endpointCoreConfigInput)
	}
	if rf, ok := ret.Get(0).(func(context.Context, serving.EndpointCoreConfigInput) *serving.WaitGetServingEndpointNotUpdating[serving.ServingEndpointDetailed]); ok {
		r0 = rf(ctx, endpointCoreConfigInput)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serving.WaitGetServingEndpointNotUpdating[serving.ServingEndpointDetailed])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, serving.EndpointCoreConfigInput) error); ok {
		r1 = rf(ctx, endpointCoreConfigInput)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServingEndpointsAPIInterface_UpdateConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateConfig'
type MockServingEndpointsAPIInterface_UpdateConfig_Call struct {
	*mock.Call
}

// UpdateConfig is a helper method to define mock.On call
//   - ctx context.Context
//   - endpointCoreConfigInput serving.EndpointCoreConfigInput
func (_e *MockServingEndpointsAPIInterface_Expecter) UpdateConfig(ctx interface{}, endpointCoreConfigInput interface{}) *MockServingEndpointsAPIInterface_UpdateConfig_Call {
	return &MockServingEndpointsAPIInterface_UpdateConfig_Call{Call: _e.mock.On("UpdateConfig", ctx, endpointCoreConfigInput)}
}

func (_c *MockServingEndpointsAPIInterface_UpdateConfig_Call) Run(run func(ctx context.Context, endpointCoreConfigInput serving.EndpointCoreConfigInput)) *MockServingEndpointsAPIInterface_UpdateConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(serving.EndpointCoreConfigInput))
	})
	return _c
}

func (_c *MockServingEndpointsAPIInterface_UpdateConfig_Call) Return(_a0 *serving.WaitGetServingEndpointNotUpdating[serving.ServingEndpointDetailed], _a1 error) *MockServingEndpointsAPIInterface_UpdateConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServingEndpointsAPIInterface_UpdateConfig_Call) RunAndReturn(run func(context.Context, serving.EndpointCoreConfigInput) (*serving.WaitGetServingEndpointNotUpdating[serving.ServingEndpointDetailed], error)) *MockServingEndpointsAPIInterface_UpdateConfig_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateConfigAndWait provides a mock function with given fields: ctx, endpointCoreConfigInput, options
func (_m *MockServingEndpointsAPIInterface) UpdateConfigAndWait(ctx context.Context, endpointCoreConfigInput serving.EndpointCoreConfigInput, options ...retries.Option[serving.ServingEndpointDetailed]) (*serving.ServingEndpointDetailed, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, endpointCoreConfigInput)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConfigAndWait")
	}

	var r0 *serving.ServingEndpointDetailed
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, serving.EndpointCoreConfigInput, ...retries.Option[serving.ServingEndpointDetailed]) (*serving.ServingEndpointDetailed, error)); ok {
		return rf(ctx, endpointCoreConfigInput, options...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, serving.EndpointCoreConfigInput, ...retries.Option[serving.ServingEndpointDetailed]) *serving.ServingEndpointDetailed); ok {
		r0 = rf(ctx, endpointCoreConfigInput, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serving.ServingEndpointDetailed)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, serving.EndpointCoreConfigInput, ...retries.Option[serving.ServingEndpointDetailed]) error); ok {
		r1 = rf(ctx, endpointCoreConfigInput, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServingEndpointsAPIInterface_UpdateConfigAndWait_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateConfigAndWait'
type MockServingEndpointsAPIInterface_UpdateConfigAndWait_Call struct {
	*mock.Call
}

// UpdateConfigAndWait is a helper method to define mock.On call
//   - ctx context.Context
//   - endpointCoreConfigInput serving.EndpointCoreConfigInput
//   - options ...retries.Option[serving.ServingEndpointDetailed]
func (_e *MockServingEndpointsAPIInterface_Expecter) UpdateConfigAndWait(ctx interface{}, endpointCoreConfigInput interface{}, options ...interface{}) *MockServingEndpointsAPIInterface_UpdateConfigAndWait_Call {
	return &MockServingEndpointsAPIInterface_UpdateConfigAndWait_Call{Call: _e.mock.On("UpdateConfigAndWait",
		append([]interface{}{ctx, endpointCoreConfigInput}, options...)...)}
}

func (_c *MockServingEndpointsAPIInterface_UpdateConfigAndWait_Call) Run(run func(ctx context.Context, endpointCoreConfigInput serving.EndpointCoreConfigInput, options ...retries.Option[serving.ServingEndpointDetailed])) *MockServingEndpointsAPIInterface_UpdateConfigAndWait_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]retries.Option[serving.ServingEndpointDetailed], len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(retries.Option[serving.ServingEndpointDetailed])
			}
		}
		run(args[0].(context.Context), args[1].(serving.EndpointCoreConfigInput), variadicArgs...)
	})
	return _c
}

func (_c *MockServingEndpointsAPIInterface_UpdateConfigAndWait_Call) Return(_a0 *serving.ServingEndpointDetailed, _a1 error) *MockServingEndpointsAPIInterface_UpdateConfigAndWait_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServingEndpointsAPIInterface_UpdateConfigAndWait_Call) RunAndReturn(run func(context.Context, serving.EndpointCoreConfigInput, ...retries.Option[serving.ServingEndpointDetailed]) (*serving.ServingEndpointDetailed, error)) *MockServingEndpointsAPIInterface_UpdateConfigAndWait_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePermissions provides a mock function with given fields: ctx, request
func (_m *MockServingEndpointsAPIInterface) UpdatePermissions(ctx context.Context, request serving.ServingEndpointPermissionsRequest) (*serving.ServingEndpointPermissions, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePermissions")
	}

	var r0 *serving.ServingEndpointPermissions
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, serving.ServingEndpointPermissionsRequest) (*serving.ServingEndpointPermissions, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, serving.ServingEndpointPermissionsRequest) *serving.ServingEndpointPermissions); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serving.ServingEndpointPermissions)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, serving.ServingEndpointPermissionsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServingEndpointsAPIInterface_UpdatePermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePermissions'
type MockServingEndpointsAPIInterface_UpdatePermissions_Call struct {
	*mock.Call
}

// UpdatePermissions is a helper method to define mock.On call
//   - ctx context.Context
//   - request serving.ServingEndpointPermissionsRequest
func (_e *MockServingEndpointsAPIInterface_Expecter) UpdatePermissions(ctx interface{}, request interface{}) *MockServingEndpointsAPIInterface_UpdatePermissions_Call {
	return &MockServingEndpointsAPIInterface_UpdatePermissions_Call{Call: _e.mock.On("UpdatePermissions", ctx, request)}
}

func (_c *MockServingEndpointsAPIInterface_UpdatePermissions_Call) Run(run func(ctx context.Context, request serving.ServingEndpointPermissionsRequest)) *MockServingEndpointsAPIInterface_UpdatePermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(serving.ServingEndpointPermissionsRequest))
	})
	return _c
}

func (_c *MockServingEndpointsAPIInterface_UpdatePermissions_Call) Return(_a0 *serving.ServingEndpointPermissions, _a1 error) *MockServingEndpointsAPIInterface_UpdatePermissions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServingEndpointsAPIInterface_UpdatePermissions_Call) RunAndReturn(run func(context.Context, serving.ServingEndpointPermissionsRequest) (*serving.ServingEndpointPermissions, error)) *MockServingEndpointsAPIInterface_UpdatePermissions_Call {
	_c.Call.Return(run)
	return _c
}

// WaitGetServingEndpointNotUpdating provides a mock function with given fields: ctx, name, timeout, callback
func (_m *MockServingEndpointsAPIInterface) WaitGetServingEndpointNotUpdating(ctx context.Context, name string, timeout time.Duration, callback func(*serving.ServingEndpointDetailed)) (*serving.ServingEndpointDetailed, error) {
	ret := _m.Called(ctx, name, timeout, callback)

	if len(ret) == 0 {
		panic("no return value specified for WaitGetServingEndpointNotUpdating")
	}

	var r0 *serving.ServingEndpointDetailed
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration, func(*serving.ServingEndpointDetailed)) (*serving.ServingEndpointDetailed, error)); ok {
		return rf(ctx, name, timeout, callback)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration, func(*serving.ServingEndpointDetailed)) *serving.ServingEndpointDetailed); ok {
		r0 = rf(ctx, name, timeout, callback)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serving.ServingEndpointDetailed)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, time.Duration, func(*serving.ServingEndpointDetailed)) error); ok {
		r1 = rf(ctx, name, timeout, callback)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServingEndpointsAPIInterface_WaitGetServingEndpointNotUpdating_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitGetServingEndpointNotUpdating'
type MockServingEndpointsAPIInterface_WaitGetServingEndpointNotUpdating_Call struct {
	*mock.Call
}

// WaitGetServingEndpointNotUpdating is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - timeout time.Duration
//   - callback func(*serving.ServingEndpointDetailed)
func (_e *MockServingEndpointsAPIInterface_Expecter) WaitGetServingEndpointNotUpdating(ctx interface{}, name interface{}, timeout interface{}, callback interface{}) *MockServingEndpointsAPIInterface_WaitGetServingEndpointNotUpdating_Call {
	return &MockServingEndpointsAPIInterface_WaitGetServingEndpointNotUpdating_Call{Call: _e.mock.On("WaitGetServingEndpointNotUpdating", ctx, name, timeout, callback)}
}

func (_c *MockServingEndpointsAPIInterface_WaitGetServingEndpointNotUpdating_Call) Run(run func(ctx context.Context, name string, timeout time.Duration, callback func(*serving.ServingEndpointDetailed))) *MockServingEndpointsAPIInterface_WaitGetServingEndpointNotUpdating_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Duration), args[3].(func(*serving.ServingEndpointDetailed)))
	})
	return _c
}

func (_c *MockServingEndpointsAPIInterface_WaitGetServingEndpointNotUpdating_Call) Return(_a0 *serving.ServingEndpointDetailed, _a1 error) *MockServingEndpointsAPIInterface_WaitGetServingEndpointNotUpdating_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServingEndpointsAPIInterface_WaitGetServingEndpointNotUpdating_Call) RunAndReturn(run func(context.Context, string, time.Duration, func(*serving.ServingEndpointDetailed)) (*serving.ServingEndpointDetailed, error)) *MockServingEndpointsAPIInterface_WaitGetServingEndpointNotUpdating_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockServingEndpointsAPIInterface) WithImpl(impl serving.ServingEndpointsService) serving.ServingEndpointsAPIInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 serving.ServingEndpointsAPIInterface
	if rf, ok := ret.Get(0).(func(serving.ServingEndpointsService) serving.ServingEndpointsAPIInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(serving.ServingEndpointsAPIInterface)
		}
	}

	return r0
}

// MockServingEndpointsAPIInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockServingEndpointsAPIInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl serving.ServingEndpointsService
func (_e *MockServingEndpointsAPIInterface_Expecter) WithImpl(impl interface{}) *MockServingEndpointsAPIInterface_WithImpl_Call {
	return &MockServingEndpointsAPIInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockServingEndpointsAPIInterface_WithImpl_Call) Run(run func(impl serving.ServingEndpointsService)) *MockServingEndpointsAPIInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(serving.ServingEndpointsService))
	})
	return _c
}

func (_c *MockServingEndpointsAPIInterface_WithImpl_Call) Return(_a0 serving.ServingEndpointsAPIInterface) *MockServingEndpointsAPIInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServingEndpointsAPIInterface_WithImpl_Call) RunAndReturn(run func(serving.ServingEndpointsService) serving.ServingEndpointsAPIInterface) *MockServingEndpointsAPIInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockServingEndpointsAPIInterface creates a new instance of MockServingEndpointsAPIInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServingEndpointsAPIInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServingEndpointsAPIInterface {
	mock := &MockServingEndpointsAPIInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
