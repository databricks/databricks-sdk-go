// Code generated by mockery v2.38.0. DO NOT EDIT.

package serving

import (
	context "context"

	serving "github.com/databricks/databricks-sdk-go/service/serving"
	mock "github.com/stretchr/testify/mock"
)

// MockAppsAPIInterface is an autogenerated mock type for the AppsAPIInterface type
type MockAppsAPIInterface struct {
	mock.Mock
}

type MockAppsAPIInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAppsAPIInterface) EXPECT() *MockAppsAPIInterface_Expecter {
	return &MockAppsAPIInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, request
func (_m *MockAppsAPIInterface) Create(ctx context.Context, request serving.DeployAppRequest) (*serving.DeploymentStatus, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *serving.DeploymentStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, serving.DeployAppRequest) (*serving.DeploymentStatus, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, serving.DeployAppRequest) *serving.DeploymentStatus); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serving.DeploymentStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, serving.DeployAppRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAppsAPIInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockAppsAPIInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - request serving.DeployAppRequest
func (_e *MockAppsAPIInterface_Expecter) Create(ctx interface{}, request interface{}) *MockAppsAPIInterface_Create_Call {
	return &MockAppsAPIInterface_Create_Call{Call: _e.mock.On("Create", ctx, request)}
}

func (_c *MockAppsAPIInterface_Create_Call) Run(run func(ctx context.Context, request serving.DeployAppRequest)) *MockAppsAPIInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(serving.DeployAppRequest))
	})
	return _c
}

func (_c *MockAppsAPIInterface_Create_Call) Return(_a0 *serving.DeploymentStatus, _a1 error) *MockAppsAPIInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAppsAPIInterface_Create_Call) RunAndReturn(run func(context.Context, serving.DeployAppRequest) (*serving.DeploymentStatus, error)) *MockAppsAPIInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteApp provides a mock function with given fields: ctx, request
func (_m *MockAppsAPIInterface) DeleteApp(ctx context.Context, request serving.DeleteAppRequest) (*serving.DeleteAppResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for DeleteApp")
	}

	var r0 *serving.DeleteAppResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, serving.DeleteAppRequest) (*serving.DeleteAppResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, serving.DeleteAppRequest) *serving.DeleteAppResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serving.DeleteAppResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, serving.DeleteAppRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAppsAPIInterface_DeleteApp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteApp'
type MockAppsAPIInterface_DeleteApp_Call struct {
	*mock.Call
}

// DeleteApp is a helper method to define mock.On call
//   - ctx context.Context
//   - request serving.DeleteAppRequest
func (_e *MockAppsAPIInterface_Expecter) DeleteApp(ctx interface{}, request interface{}) *MockAppsAPIInterface_DeleteApp_Call {
	return &MockAppsAPIInterface_DeleteApp_Call{Call: _e.mock.On("DeleteApp", ctx, request)}
}

func (_c *MockAppsAPIInterface_DeleteApp_Call) Run(run func(ctx context.Context, request serving.DeleteAppRequest)) *MockAppsAPIInterface_DeleteApp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(serving.DeleteAppRequest))
	})
	return _c
}

func (_c *MockAppsAPIInterface_DeleteApp_Call) Return(_a0 *serving.DeleteAppResponse, _a1 error) *MockAppsAPIInterface_DeleteApp_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAppsAPIInterface_DeleteApp_Call) RunAndReturn(run func(context.Context, serving.DeleteAppRequest) (*serving.DeleteAppResponse, error)) *MockAppsAPIInterface_DeleteApp_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAppByName provides a mock function with given fields: ctx, name
func (_m *MockAppsAPIInterface) DeleteAppByName(ctx context.Context, name string) (*serving.DeleteAppResponse, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAppByName")
	}

	var r0 *serving.DeleteAppResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*serving.DeleteAppResponse, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *serving.DeleteAppResponse); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serving.DeleteAppResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAppsAPIInterface_DeleteAppByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAppByName'
type MockAppsAPIInterface_DeleteAppByName_Call struct {
	*mock.Call
}

// DeleteAppByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockAppsAPIInterface_Expecter) DeleteAppByName(ctx interface{}, name interface{}) *MockAppsAPIInterface_DeleteAppByName_Call {
	return &MockAppsAPIInterface_DeleteAppByName_Call{Call: _e.mock.On("DeleteAppByName", ctx, name)}
}

func (_c *MockAppsAPIInterface_DeleteAppByName_Call) Run(run func(ctx context.Context, name string)) *MockAppsAPIInterface_DeleteAppByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAppsAPIInterface_DeleteAppByName_Call) Return(_a0 *serving.DeleteAppResponse, _a1 error) *MockAppsAPIInterface_DeleteAppByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAppsAPIInterface_DeleteAppByName_Call) RunAndReturn(run func(context.Context, string) (*serving.DeleteAppResponse, error)) *MockAppsAPIInterface_DeleteAppByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetApp provides a mock function with given fields: ctx, request
func (_m *MockAppsAPIInterface) GetApp(ctx context.Context, request serving.GetAppRequest) (*serving.GetAppResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetApp")
	}

	var r0 *serving.GetAppResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, serving.GetAppRequest) (*serving.GetAppResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, serving.GetAppRequest) *serving.GetAppResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serving.GetAppResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, serving.GetAppRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAppsAPIInterface_GetApp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetApp'
type MockAppsAPIInterface_GetApp_Call struct {
	*mock.Call
}

// GetApp is a helper method to define mock.On call
//   - ctx context.Context
//   - request serving.GetAppRequest
func (_e *MockAppsAPIInterface_Expecter) GetApp(ctx interface{}, request interface{}) *MockAppsAPIInterface_GetApp_Call {
	return &MockAppsAPIInterface_GetApp_Call{Call: _e.mock.On("GetApp", ctx, request)}
}

func (_c *MockAppsAPIInterface_GetApp_Call) Run(run func(ctx context.Context, request serving.GetAppRequest)) *MockAppsAPIInterface_GetApp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(serving.GetAppRequest))
	})
	return _c
}

func (_c *MockAppsAPIInterface_GetApp_Call) Return(_a0 *serving.GetAppResponse, _a1 error) *MockAppsAPIInterface_GetApp_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAppsAPIInterface_GetApp_Call) RunAndReturn(run func(context.Context, serving.GetAppRequest) (*serving.GetAppResponse, error)) *MockAppsAPIInterface_GetApp_Call {
	_c.Call.Return(run)
	return _c
}

// GetAppByName provides a mock function with given fields: ctx, name
func (_m *MockAppsAPIInterface) GetAppByName(ctx context.Context, name string) (*serving.GetAppResponse, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetAppByName")
	}

	var r0 *serving.GetAppResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*serving.GetAppResponse, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *serving.GetAppResponse); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serving.GetAppResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAppsAPIInterface_GetAppByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAppByName'
type MockAppsAPIInterface_GetAppByName_Call struct {
	*mock.Call
}

// GetAppByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockAppsAPIInterface_Expecter) GetAppByName(ctx interface{}, name interface{}) *MockAppsAPIInterface_GetAppByName_Call {
	return &MockAppsAPIInterface_GetAppByName_Call{Call: _e.mock.On("GetAppByName", ctx, name)}
}

func (_c *MockAppsAPIInterface_GetAppByName_Call) Run(run func(ctx context.Context, name string)) *MockAppsAPIInterface_GetAppByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAppsAPIInterface_GetAppByName_Call) Return(_a0 *serving.GetAppResponse, _a1 error) *MockAppsAPIInterface_GetAppByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAppsAPIInterface_GetAppByName_Call) RunAndReturn(run func(context.Context, string) (*serving.GetAppResponse, error)) *MockAppsAPIInterface_GetAppByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetAppDeploymentStatus provides a mock function with given fields: ctx, request
func (_m *MockAppsAPIInterface) GetAppDeploymentStatus(ctx context.Context, request serving.GetAppDeploymentStatusRequest) (*serving.DeploymentStatus, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetAppDeploymentStatus")
	}

	var r0 *serving.DeploymentStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, serving.GetAppDeploymentStatusRequest) (*serving.DeploymentStatus, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, serving.GetAppDeploymentStatusRequest) *serving.DeploymentStatus); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serving.DeploymentStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, serving.GetAppDeploymentStatusRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAppsAPIInterface_GetAppDeploymentStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAppDeploymentStatus'
type MockAppsAPIInterface_GetAppDeploymentStatus_Call struct {
	*mock.Call
}

// GetAppDeploymentStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - request serving.GetAppDeploymentStatusRequest
func (_e *MockAppsAPIInterface_Expecter) GetAppDeploymentStatus(ctx interface{}, request interface{}) *MockAppsAPIInterface_GetAppDeploymentStatus_Call {
	return &MockAppsAPIInterface_GetAppDeploymentStatus_Call{Call: _e.mock.On("GetAppDeploymentStatus", ctx, request)}
}

func (_c *MockAppsAPIInterface_GetAppDeploymentStatus_Call) Run(run func(ctx context.Context, request serving.GetAppDeploymentStatusRequest)) *MockAppsAPIInterface_GetAppDeploymentStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(serving.GetAppDeploymentStatusRequest))
	})
	return _c
}

func (_c *MockAppsAPIInterface_GetAppDeploymentStatus_Call) Return(_a0 *serving.DeploymentStatus, _a1 error) *MockAppsAPIInterface_GetAppDeploymentStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAppsAPIInterface_GetAppDeploymentStatus_Call) RunAndReturn(run func(context.Context, serving.GetAppDeploymentStatusRequest) (*serving.DeploymentStatus, error)) *MockAppsAPIInterface_GetAppDeploymentStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetAppDeploymentStatusByDeploymentId provides a mock function with given fields: ctx, deploymentId
func (_m *MockAppsAPIInterface) GetAppDeploymentStatusByDeploymentId(ctx context.Context, deploymentId string) (*serving.DeploymentStatus, error) {
	ret := _m.Called(ctx, deploymentId)

	if len(ret) == 0 {
		panic("no return value specified for GetAppDeploymentStatusByDeploymentId")
	}

	var r0 *serving.DeploymentStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*serving.DeploymentStatus, error)); ok {
		return rf(ctx, deploymentId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *serving.DeploymentStatus); ok {
		r0 = rf(ctx, deploymentId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serving.DeploymentStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, deploymentId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAppsAPIInterface_GetAppDeploymentStatusByDeploymentId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAppDeploymentStatusByDeploymentId'
type MockAppsAPIInterface_GetAppDeploymentStatusByDeploymentId_Call struct {
	*mock.Call
}

// GetAppDeploymentStatusByDeploymentId is a helper method to define mock.On call
//   - ctx context.Context
//   - deploymentId string
func (_e *MockAppsAPIInterface_Expecter) GetAppDeploymentStatusByDeploymentId(ctx interface{}, deploymentId interface{}) *MockAppsAPIInterface_GetAppDeploymentStatusByDeploymentId_Call {
	return &MockAppsAPIInterface_GetAppDeploymentStatusByDeploymentId_Call{Call: _e.mock.On("GetAppDeploymentStatusByDeploymentId", ctx, deploymentId)}
}

func (_c *MockAppsAPIInterface_GetAppDeploymentStatusByDeploymentId_Call) Run(run func(ctx context.Context, deploymentId string)) *MockAppsAPIInterface_GetAppDeploymentStatusByDeploymentId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAppsAPIInterface_GetAppDeploymentStatusByDeploymentId_Call) Return(_a0 *serving.DeploymentStatus, _a1 error) *MockAppsAPIInterface_GetAppDeploymentStatusByDeploymentId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAppsAPIInterface_GetAppDeploymentStatusByDeploymentId_Call) RunAndReturn(run func(context.Context, string) (*serving.DeploymentStatus, error)) *MockAppsAPIInterface_GetAppDeploymentStatusByDeploymentId_Call {
	_c.Call.Return(run)
	return _c
}

// GetApps provides a mock function with given fields: ctx
func (_m *MockAppsAPIInterface) GetApps(ctx context.Context) (*serving.ListAppsResponse, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetApps")
	}

	var r0 *serving.ListAppsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*serving.ListAppsResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *serving.ListAppsResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serving.ListAppsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAppsAPIInterface_GetApps_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetApps'
type MockAppsAPIInterface_GetApps_Call struct {
	*mock.Call
}

// GetApps is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAppsAPIInterface_Expecter) GetApps(ctx interface{}) *MockAppsAPIInterface_GetApps_Call {
	return &MockAppsAPIInterface_GetApps_Call{Call: _e.mock.On("GetApps", ctx)}
}

func (_c *MockAppsAPIInterface_GetApps_Call) Run(run func(ctx context.Context)) *MockAppsAPIInterface_GetApps_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockAppsAPIInterface_GetApps_Call) Return(_a0 *serving.ListAppsResponse, _a1 error) *MockAppsAPIInterface_GetApps_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAppsAPIInterface_GetApps_Call) RunAndReturn(run func(context.Context) (*serving.ListAppsResponse, error)) *MockAppsAPIInterface_GetApps_Call {
	_c.Call.Return(run)
	return _c
}

// GetEvents provides a mock function with given fields: ctx, request
func (_m *MockAppsAPIInterface) GetEvents(ctx context.Context, request serving.GetEventsRequest) (*serving.ListAppEventsResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetEvents")
	}

	var r0 *serving.ListAppEventsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, serving.GetEventsRequest) (*serving.ListAppEventsResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, serving.GetEventsRequest) *serving.ListAppEventsResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serving.ListAppEventsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, serving.GetEventsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAppsAPIInterface_GetEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEvents'
type MockAppsAPIInterface_GetEvents_Call struct {
	*mock.Call
}

// GetEvents is a helper method to define mock.On call
//   - ctx context.Context
//   - request serving.GetEventsRequest
func (_e *MockAppsAPIInterface_Expecter) GetEvents(ctx interface{}, request interface{}) *MockAppsAPIInterface_GetEvents_Call {
	return &MockAppsAPIInterface_GetEvents_Call{Call: _e.mock.On("GetEvents", ctx, request)}
}

func (_c *MockAppsAPIInterface_GetEvents_Call) Run(run func(ctx context.Context, request serving.GetEventsRequest)) *MockAppsAPIInterface_GetEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(serving.GetEventsRequest))
	})
	return _c
}

func (_c *MockAppsAPIInterface_GetEvents_Call) Return(_a0 *serving.ListAppEventsResponse, _a1 error) *MockAppsAPIInterface_GetEvents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAppsAPIInterface_GetEvents_Call) RunAndReturn(run func(context.Context, serving.GetEventsRequest) (*serving.ListAppEventsResponse, error)) *MockAppsAPIInterface_GetEvents_Call {
	_c.Call.Return(run)
	return _c
}

// GetEventsByName provides a mock function with given fields: ctx, name
func (_m *MockAppsAPIInterface) GetEventsByName(ctx context.Context, name string) (*serving.ListAppEventsResponse, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetEventsByName")
	}

	var r0 *serving.ListAppEventsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*serving.ListAppEventsResponse, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *serving.ListAppEventsResponse); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serving.ListAppEventsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAppsAPIInterface_GetEventsByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEventsByName'
type MockAppsAPIInterface_GetEventsByName_Call struct {
	*mock.Call
}

// GetEventsByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockAppsAPIInterface_Expecter) GetEventsByName(ctx interface{}, name interface{}) *MockAppsAPIInterface_GetEventsByName_Call {
	return &MockAppsAPIInterface_GetEventsByName_Call{Call: _e.mock.On("GetEventsByName", ctx, name)}
}

func (_c *MockAppsAPIInterface_GetEventsByName_Call) Run(run func(ctx context.Context, name string)) *MockAppsAPIInterface_GetEventsByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAppsAPIInterface_GetEventsByName_Call) Return(_a0 *serving.ListAppEventsResponse, _a1 error) *MockAppsAPIInterface_GetEventsByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAppsAPIInterface_GetEventsByName_Call) RunAndReturn(run func(context.Context, string) (*serving.ListAppEventsResponse, error)) *MockAppsAPIInterface_GetEventsByName_Call {
	_c.Call.Return(run)
	return _c
}

// Impl provides a mock function with given fields:
func (_m *MockAppsAPIInterface) Impl() serving.AppsService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 serving.AppsService
	if rf, ok := ret.Get(0).(func() serving.AppsService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(serving.AppsService)
		}
	}

	return r0
}

// MockAppsAPIInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockAppsAPIInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockAppsAPIInterface_Expecter) Impl() *MockAppsAPIInterface_Impl_Call {
	return &MockAppsAPIInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockAppsAPIInterface_Impl_Call) Run(run func()) *MockAppsAPIInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAppsAPIInterface_Impl_Call) Return(_a0 serving.AppsService) *MockAppsAPIInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAppsAPIInterface_Impl_Call) RunAndReturn(run func() serving.AppsService) *MockAppsAPIInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockAppsAPIInterface) WithImpl(impl serving.AppsService) serving.AppsAPIInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 serving.AppsAPIInterface
	if rf, ok := ret.Get(0).(func(serving.AppsService) serving.AppsAPIInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(serving.AppsAPIInterface)
		}
	}

	return r0
}

// MockAppsAPIInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockAppsAPIInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl serving.AppsService
func (_e *MockAppsAPIInterface_Expecter) WithImpl(impl interface{}) *MockAppsAPIInterface_WithImpl_Call {
	return &MockAppsAPIInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockAppsAPIInterface_WithImpl_Call) Run(run func(impl serving.AppsService)) *MockAppsAPIInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(serving.AppsService))
	})
	return _c
}

func (_c *MockAppsAPIInterface_WithImpl_Call) Return(_a0 serving.AppsAPIInterface) *MockAppsAPIInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAppsAPIInterface_WithImpl_Call) RunAndReturn(run func(serving.AppsService) serving.AppsAPIInterface) *MockAppsAPIInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAppsAPIInterface creates a new instance of MockAppsAPIInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAppsAPIInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAppsAPIInterface {
	mock := &MockAppsAPIInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
