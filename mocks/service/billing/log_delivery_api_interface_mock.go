// Code generated by mockery v2.38.0. DO NOT EDIT.

package billing

import (
	context "context"

	billing "github.com/databricks/databricks-sdk-go/service/billing"

	listing "github.com/databricks/databricks-sdk-go/listing"

	mock "github.com/stretchr/testify/mock"
)

// MockLogDeliveryAPIInterface is an autogenerated mock type for the LogDeliveryAPIInterface type
type MockLogDeliveryAPIInterface struct {
	mock.Mock
}

type MockLogDeliveryAPIInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLogDeliveryAPIInterface) EXPECT() *MockLogDeliveryAPIInterface_Expecter {
	return &MockLogDeliveryAPIInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, request
func (_m *MockLogDeliveryAPIInterface) Create(ctx context.Context, request billing.WrappedCreateLogDeliveryConfiguration) (*billing.WrappedLogDeliveryConfiguration, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *billing.WrappedLogDeliveryConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, billing.WrappedCreateLogDeliveryConfiguration) (*billing.WrappedLogDeliveryConfiguration, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, billing.WrappedCreateLogDeliveryConfiguration) *billing.WrappedLogDeliveryConfiguration); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.WrappedLogDeliveryConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, billing.WrappedCreateLogDeliveryConfiguration) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLogDeliveryAPIInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockLogDeliveryAPIInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - request billing.WrappedCreateLogDeliveryConfiguration
func (_e *MockLogDeliveryAPIInterface_Expecter) Create(ctx interface{}, request interface{}) *MockLogDeliveryAPIInterface_Create_Call {
	return &MockLogDeliveryAPIInterface_Create_Call{Call: _e.mock.On("Create", ctx, request)}
}

func (_c *MockLogDeliveryAPIInterface_Create_Call) Run(run func(ctx context.Context, request billing.WrappedCreateLogDeliveryConfiguration)) *MockLogDeliveryAPIInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(billing.WrappedCreateLogDeliveryConfiguration))
	})
	return _c
}

func (_c *MockLogDeliveryAPIInterface_Create_Call) Return(_a0 *billing.WrappedLogDeliveryConfiguration, _a1 error) *MockLogDeliveryAPIInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLogDeliveryAPIInterface_Create_Call) RunAndReturn(run func(context.Context, billing.WrappedCreateLogDeliveryConfiguration) (*billing.WrappedLogDeliveryConfiguration, error)) *MockLogDeliveryAPIInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, request
func (_m *MockLogDeliveryAPIInterface) Get(ctx context.Context, request billing.GetLogDeliveryRequest) (*billing.WrappedLogDeliveryConfiguration, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *billing.WrappedLogDeliveryConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, billing.GetLogDeliveryRequest) (*billing.WrappedLogDeliveryConfiguration, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, billing.GetLogDeliveryRequest) *billing.WrappedLogDeliveryConfiguration); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.WrappedLogDeliveryConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, billing.GetLogDeliveryRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLogDeliveryAPIInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockLogDeliveryAPIInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - request billing.GetLogDeliveryRequest
func (_e *MockLogDeliveryAPIInterface_Expecter) Get(ctx interface{}, request interface{}) *MockLogDeliveryAPIInterface_Get_Call {
	return &MockLogDeliveryAPIInterface_Get_Call{Call: _e.mock.On("Get", ctx, request)}
}

func (_c *MockLogDeliveryAPIInterface_Get_Call) Run(run func(ctx context.Context, request billing.GetLogDeliveryRequest)) *MockLogDeliveryAPIInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(billing.GetLogDeliveryRequest))
	})
	return _c
}

func (_c *MockLogDeliveryAPIInterface_Get_Call) Return(_a0 *billing.WrappedLogDeliveryConfiguration, _a1 error) *MockLogDeliveryAPIInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLogDeliveryAPIInterface_Get_Call) RunAndReturn(run func(context.Context, billing.GetLogDeliveryRequest) (*billing.WrappedLogDeliveryConfiguration, error)) *MockLogDeliveryAPIInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByConfigName provides a mock function with given fields: ctx, name
func (_m *MockLogDeliveryAPIInterface) GetByConfigName(ctx context.Context, name string) (*billing.LogDeliveryConfiguration, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetByConfigName")
	}

	var r0 *billing.LogDeliveryConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*billing.LogDeliveryConfiguration, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *billing.LogDeliveryConfiguration); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.LogDeliveryConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLogDeliveryAPIInterface_GetByConfigName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByConfigName'
type MockLogDeliveryAPIInterface_GetByConfigName_Call struct {
	*mock.Call
}

// GetByConfigName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockLogDeliveryAPIInterface_Expecter) GetByConfigName(ctx interface{}, name interface{}) *MockLogDeliveryAPIInterface_GetByConfigName_Call {
	return &MockLogDeliveryAPIInterface_GetByConfigName_Call{Call: _e.mock.On("GetByConfigName", ctx, name)}
}

func (_c *MockLogDeliveryAPIInterface_GetByConfigName_Call) Run(run func(ctx context.Context, name string)) *MockLogDeliveryAPIInterface_GetByConfigName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockLogDeliveryAPIInterface_GetByConfigName_Call) Return(_a0 *billing.LogDeliveryConfiguration, _a1 error) *MockLogDeliveryAPIInterface_GetByConfigName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLogDeliveryAPIInterface_GetByConfigName_Call) RunAndReturn(run func(context.Context, string) (*billing.LogDeliveryConfiguration, error)) *MockLogDeliveryAPIInterface_GetByConfigName_Call {
	_c.Call.Return(run)
	return _c
}

// GetByLogDeliveryConfigurationId provides a mock function with given fields: ctx, logDeliveryConfigurationId
func (_m *MockLogDeliveryAPIInterface) GetByLogDeliveryConfigurationId(ctx context.Context, logDeliveryConfigurationId string) (*billing.WrappedLogDeliveryConfiguration, error) {
	ret := _m.Called(ctx, logDeliveryConfigurationId)

	if len(ret) == 0 {
		panic("no return value specified for GetByLogDeliveryConfigurationId")
	}

	var r0 *billing.WrappedLogDeliveryConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*billing.WrappedLogDeliveryConfiguration, error)); ok {
		return rf(ctx, logDeliveryConfigurationId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *billing.WrappedLogDeliveryConfiguration); ok {
		r0 = rf(ctx, logDeliveryConfigurationId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.WrappedLogDeliveryConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, logDeliveryConfigurationId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLogDeliveryAPIInterface_GetByLogDeliveryConfigurationId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByLogDeliveryConfigurationId'
type MockLogDeliveryAPIInterface_GetByLogDeliveryConfigurationId_Call struct {
	*mock.Call
}

// GetByLogDeliveryConfigurationId is a helper method to define mock.On call
//   - ctx context.Context
//   - logDeliveryConfigurationId string
func (_e *MockLogDeliveryAPIInterface_Expecter) GetByLogDeliveryConfigurationId(ctx interface{}, logDeliveryConfigurationId interface{}) *MockLogDeliveryAPIInterface_GetByLogDeliveryConfigurationId_Call {
	return &MockLogDeliveryAPIInterface_GetByLogDeliveryConfigurationId_Call{Call: _e.mock.On("GetByLogDeliveryConfigurationId", ctx, logDeliveryConfigurationId)}
}

func (_c *MockLogDeliveryAPIInterface_GetByLogDeliveryConfigurationId_Call) Run(run func(ctx context.Context, logDeliveryConfigurationId string)) *MockLogDeliveryAPIInterface_GetByLogDeliveryConfigurationId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockLogDeliveryAPIInterface_GetByLogDeliveryConfigurationId_Call) Return(_a0 *billing.WrappedLogDeliveryConfiguration, _a1 error) *MockLogDeliveryAPIInterface_GetByLogDeliveryConfigurationId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLogDeliveryAPIInterface_GetByLogDeliveryConfigurationId_Call) RunAndReturn(run func(context.Context, string) (*billing.WrappedLogDeliveryConfiguration, error)) *MockLogDeliveryAPIInterface_GetByLogDeliveryConfigurationId_Call {
	_c.Call.Return(run)
	return _c
}

// Impl provides a mock function with given fields:
func (_m *MockLogDeliveryAPIInterface) Impl() billing.LogDeliveryService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 billing.LogDeliveryService
	if rf, ok := ret.Get(0).(func() billing.LogDeliveryService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(billing.LogDeliveryService)
		}
	}

	return r0
}

// MockLogDeliveryAPIInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockLogDeliveryAPIInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockLogDeliveryAPIInterface_Expecter) Impl() *MockLogDeliveryAPIInterface_Impl_Call {
	return &MockLogDeliveryAPIInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockLogDeliveryAPIInterface_Impl_Call) Run(run func()) *MockLogDeliveryAPIInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLogDeliveryAPIInterface_Impl_Call) Return(_a0 billing.LogDeliveryService) *MockLogDeliveryAPIInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLogDeliveryAPIInterface_Impl_Call) RunAndReturn(run func() billing.LogDeliveryService) *MockLogDeliveryAPIInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, request
func (_m *MockLogDeliveryAPIInterface) List(ctx context.Context, request billing.ListLogDeliveryRequest) *listing.PaginatingIterator[billing.ListLogDeliveryRequest, *billing.WrappedLogDeliveryConfigurations, billing.LogDeliveryConfiguration] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *listing.PaginatingIterator[billing.ListLogDeliveryRequest, *billing.WrappedLogDeliveryConfigurations, billing.LogDeliveryConfiguration]
	if rf, ok := ret.Get(0).(func(context.Context, billing.ListLogDeliveryRequest) *listing.PaginatingIterator[billing.ListLogDeliveryRequest, *billing.WrappedLogDeliveryConfigurations, billing.LogDeliveryConfiguration]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*listing.PaginatingIterator[billing.ListLogDeliveryRequest, *billing.WrappedLogDeliveryConfigurations, billing.LogDeliveryConfiguration])
		}
	}

	return r0
}

// MockLogDeliveryAPIInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockLogDeliveryAPIInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - request billing.ListLogDeliveryRequest
func (_e *MockLogDeliveryAPIInterface_Expecter) List(ctx interface{}, request interface{}) *MockLogDeliveryAPIInterface_List_Call {
	return &MockLogDeliveryAPIInterface_List_Call{Call: _e.mock.On("List", ctx, request)}
}

func (_c *MockLogDeliveryAPIInterface_List_Call) Run(run func(ctx context.Context, request billing.ListLogDeliveryRequest)) *MockLogDeliveryAPIInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(billing.ListLogDeliveryRequest))
	})
	return _c
}

func (_c *MockLogDeliveryAPIInterface_List_Call) Return(_a0 *listing.PaginatingIterator[billing.ListLogDeliveryRequest, *billing.WrappedLogDeliveryConfigurations, billing.LogDeliveryConfiguration]) *MockLogDeliveryAPIInterface_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLogDeliveryAPIInterface_List_Call) RunAndReturn(run func(context.Context, billing.ListLogDeliveryRequest) *listing.PaginatingIterator[billing.ListLogDeliveryRequest, *billing.WrappedLogDeliveryConfigurations, billing.LogDeliveryConfiguration]) *MockLogDeliveryAPIInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListAll provides a mock function with given fields: ctx, request
func (_m *MockLogDeliveryAPIInterface) ListAll(ctx context.Context, request billing.ListLogDeliveryRequest) ([]billing.LogDeliveryConfiguration, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListAll")
	}

	var r0 []billing.LogDeliveryConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, billing.ListLogDeliveryRequest) ([]billing.LogDeliveryConfiguration, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, billing.ListLogDeliveryRequest) []billing.LogDeliveryConfiguration); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]billing.LogDeliveryConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, billing.ListLogDeliveryRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLogDeliveryAPIInterface_ListAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAll'
type MockLogDeliveryAPIInterface_ListAll_Call struct {
	*mock.Call
}

// ListAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request billing.ListLogDeliveryRequest
func (_e *MockLogDeliveryAPIInterface_Expecter) ListAll(ctx interface{}, request interface{}) *MockLogDeliveryAPIInterface_ListAll_Call {
	return &MockLogDeliveryAPIInterface_ListAll_Call{Call: _e.mock.On("ListAll", ctx, request)}
}

func (_c *MockLogDeliveryAPIInterface_ListAll_Call) Run(run func(ctx context.Context, request billing.ListLogDeliveryRequest)) *MockLogDeliveryAPIInterface_ListAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(billing.ListLogDeliveryRequest))
	})
	return _c
}

func (_c *MockLogDeliveryAPIInterface_ListAll_Call) Return(_a0 []billing.LogDeliveryConfiguration, _a1 error) *MockLogDeliveryAPIInterface_ListAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLogDeliveryAPIInterface_ListAll_Call) RunAndReturn(run func(context.Context, billing.ListLogDeliveryRequest) ([]billing.LogDeliveryConfiguration, error)) *MockLogDeliveryAPIInterface_ListAll_Call {
	_c.Call.Return(run)
	return _c
}

// LogDeliveryConfigurationConfigNameToConfigIdMap provides a mock function with given fields: ctx, request
func (_m *MockLogDeliveryAPIInterface) LogDeliveryConfigurationConfigNameToConfigIdMap(ctx context.Context, request billing.ListLogDeliveryRequest) (map[string]string, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for LogDeliveryConfigurationConfigNameToConfigIdMap")
	}

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, billing.ListLogDeliveryRequest) (map[string]string, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, billing.ListLogDeliveryRequest) map[string]string); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, billing.ListLogDeliveryRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLogDeliveryAPIInterface_LogDeliveryConfigurationConfigNameToConfigIdMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogDeliveryConfigurationConfigNameToConfigIdMap'
type MockLogDeliveryAPIInterface_LogDeliveryConfigurationConfigNameToConfigIdMap_Call struct {
	*mock.Call
}

// LogDeliveryConfigurationConfigNameToConfigIdMap is a helper method to define mock.On call
//   - ctx context.Context
//   - request billing.ListLogDeliveryRequest
func (_e *MockLogDeliveryAPIInterface_Expecter) LogDeliveryConfigurationConfigNameToConfigIdMap(ctx interface{}, request interface{}) *MockLogDeliveryAPIInterface_LogDeliveryConfigurationConfigNameToConfigIdMap_Call {
	return &MockLogDeliveryAPIInterface_LogDeliveryConfigurationConfigNameToConfigIdMap_Call{Call: _e.mock.On("LogDeliveryConfigurationConfigNameToConfigIdMap", ctx, request)}
}

func (_c *MockLogDeliveryAPIInterface_LogDeliveryConfigurationConfigNameToConfigIdMap_Call) Run(run func(ctx context.Context, request billing.ListLogDeliveryRequest)) *MockLogDeliveryAPIInterface_LogDeliveryConfigurationConfigNameToConfigIdMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(billing.ListLogDeliveryRequest))
	})
	return _c
}

func (_c *MockLogDeliveryAPIInterface_LogDeliveryConfigurationConfigNameToConfigIdMap_Call) Return(_a0 map[string]string, _a1 error) *MockLogDeliveryAPIInterface_LogDeliveryConfigurationConfigNameToConfigIdMap_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLogDeliveryAPIInterface_LogDeliveryConfigurationConfigNameToConfigIdMap_Call) RunAndReturn(run func(context.Context, billing.ListLogDeliveryRequest) (map[string]string, error)) *MockLogDeliveryAPIInterface_LogDeliveryConfigurationConfigNameToConfigIdMap_Call {
	_c.Call.Return(run)
	return _c
}

// PatchStatus provides a mock function with given fields: ctx, request
func (_m *MockLogDeliveryAPIInterface) PatchStatus(ctx context.Context, request billing.UpdateLogDeliveryConfigurationStatusRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for PatchStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, billing.UpdateLogDeliveryConfigurationStatusRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLogDeliveryAPIInterface_PatchStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchStatus'
type MockLogDeliveryAPIInterface_PatchStatus_Call struct {
	*mock.Call
}

// PatchStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - request billing.UpdateLogDeliveryConfigurationStatusRequest
func (_e *MockLogDeliveryAPIInterface_Expecter) PatchStatus(ctx interface{}, request interface{}) *MockLogDeliveryAPIInterface_PatchStatus_Call {
	return &MockLogDeliveryAPIInterface_PatchStatus_Call{Call: _e.mock.On("PatchStatus", ctx, request)}
}

func (_c *MockLogDeliveryAPIInterface_PatchStatus_Call) Run(run func(ctx context.Context, request billing.UpdateLogDeliveryConfigurationStatusRequest)) *MockLogDeliveryAPIInterface_PatchStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(billing.UpdateLogDeliveryConfigurationStatusRequest))
	})
	return _c
}

func (_c *MockLogDeliveryAPIInterface_PatchStatus_Call) Return(_a0 error) *MockLogDeliveryAPIInterface_PatchStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLogDeliveryAPIInterface_PatchStatus_Call) RunAndReturn(run func(context.Context, billing.UpdateLogDeliveryConfigurationStatusRequest) error) *MockLogDeliveryAPIInterface_PatchStatus_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockLogDeliveryAPIInterface) WithImpl(impl billing.LogDeliveryService) billing.LogDeliveryAPIInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 billing.LogDeliveryAPIInterface
	if rf, ok := ret.Get(0).(func(billing.LogDeliveryService) billing.LogDeliveryAPIInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(billing.LogDeliveryAPIInterface)
		}
	}

	return r0
}

// MockLogDeliveryAPIInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockLogDeliveryAPIInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl billing.LogDeliveryService
func (_e *MockLogDeliveryAPIInterface_Expecter) WithImpl(impl interface{}) *MockLogDeliveryAPIInterface_WithImpl_Call {
	return &MockLogDeliveryAPIInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockLogDeliveryAPIInterface_WithImpl_Call) Run(run func(impl billing.LogDeliveryService)) *MockLogDeliveryAPIInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(billing.LogDeliveryService))
	})
	return _c
}

func (_c *MockLogDeliveryAPIInterface_WithImpl_Call) Return(_a0 billing.LogDeliveryAPIInterface) *MockLogDeliveryAPIInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLogDeliveryAPIInterface_WithImpl_Call) RunAndReturn(run func(billing.LogDeliveryService) billing.LogDeliveryAPIInterface) *MockLogDeliveryAPIInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLogDeliveryAPIInterface creates a new instance of MockLogDeliveryAPIInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLogDeliveryAPIInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLogDeliveryAPIInterface {
	mock := &MockLogDeliveryAPIInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
