// Code generated by mockery v2.38.0. DO NOT EDIT.

package settings

import (
	context "context"

	settings "github.com/databricks/databricks-sdk-go/service/settings"
	mock "github.com/stretchr/testify/mock"
)

// MockAccountSettingsAPIInterface is an autogenerated mock type for the AccountSettingsAPIInterface type
type MockAccountSettingsAPIInterface struct {
	mock.Mock
}

type MockAccountSettingsAPIInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccountSettingsAPIInterface) EXPECT() *MockAccountSettingsAPIInterface_Expecter {
	return &MockAccountSettingsAPIInterface_Expecter{mock: &_m.Mock}
}

// DeletePersonalComputeSetting provides a mock function with given fields: ctx, request
func (_m *MockAccountSettingsAPIInterface) DeletePersonalComputeSetting(ctx context.Context, request settings.DeletePersonalComputeSettingRequest) (*settings.DeletePersonalComputeSettingResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for DeletePersonalComputeSetting")
	}

	var r0 *settings.DeletePersonalComputeSettingResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, settings.DeletePersonalComputeSettingRequest) (*settings.DeletePersonalComputeSettingResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, settings.DeletePersonalComputeSettingRequest) *settings.DeletePersonalComputeSettingResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*settings.DeletePersonalComputeSettingResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, settings.DeletePersonalComputeSettingRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountSettingsAPIInterface_DeletePersonalComputeSetting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePersonalComputeSetting'
type MockAccountSettingsAPIInterface_DeletePersonalComputeSetting_Call struct {
	*mock.Call
}

// DeletePersonalComputeSetting is a helper method to define mock.On call
//   - ctx context.Context
//   - request settings.DeletePersonalComputeSettingRequest
func (_e *MockAccountSettingsAPIInterface_Expecter) DeletePersonalComputeSetting(ctx interface{}, request interface{}) *MockAccountSettingsAPIInterface_DeletePersonalComputeSetting_Call {
	return &MockAccountSettingsAPIInterface_DeletePersonalComputeSetting_Call{Call: _e.mock.On("DeletePersonalComputeSetting", ctx, request)}
}

func (_c *MockAccountSettingsAPIInterface_DeletePersonalComputeSetting_Call) Run(run func(ctx context.Context, request settings.DeletePersonalComputeSettingRequest)) *MockAccountSettingsAPIInterface_DeletePersonalComputeSetting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(settings.DeletePersonalComputeSettingRequest))
	})
	return _c
}

func (_c *MockAccountSettingsAPIInterface_DeletePersonalComputeSetting_Call) Return(_a0 *settings.DeletePersonalComputeSettingResponse, _a1 error) *MockAccountSettingsAPIInterface_DeletePersonalComputeSetting_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountSettingsAPIInterface_DeletePersonalComputeSetting_Call) RunAndReturn(run func(context.Context, settings.DeletePersonalComputeSettingRequest) (*settings.DeletePersonalComputeSettingResponse, error)) *MockAccountSettingsAPIInterface_DeletePersonalComputeSetting_Call {
	_c.Call.Return(run)
	return _c
}

// Impl provides a mock function with given fields:
func (_m *MockAccountSettingsAPIInterface) Impl() settings.AccountSettingsService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 settings.AccountSettingsService
	if rf, ok := ret.Get(0).(func() settings.AccountSettingsService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(settings.AccountSettingsService)
		}
	}

	return r0
}

// MockAccountSettingsAPIInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockAccountSettingsAPIInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockAccountSettingsAPIInterface_Expecter) Impl() *MockAccountSettingsAPIInterface_Impl_Call {
	return &MockAccountSettingsAPIInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockAccountSettingsAPIInterface_Impl_Call) Run(run func()) *MockAccountSettingsAPIInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAccountSettingsAPIInterface_Impl_Call) Return(_a0 settings.AccountSettingsService) *MockAccountSettingsAPIInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountSettingsAPIInterface_Impl_Call) RunAndReturn(run func() settings.AccountSettingsService) *MockAccountSettingsAPIInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// ReadPersonalComputeSetting provides a mock function with given fields: ctx, request
func (_m *MockAccountSettingsAPIInterface) ReadPersonalComputeSetting(ctx context.Context, request settings.ReadPersonalComputeSettingRequest) (*settings.PersonalComputeSetting, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ReadPersonalComputeSetting")
	}

	var r0 *settings.PersonalComputeSetting
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, settings.ReadPersonalComputeSettingRequest) (*settings.PersonalComputeSetting, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, settings.ReadPersonalComputeSettingRequest) *settings.PersonalComputeSetting); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*settings.PersonalComputeSetting)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, settings.ReadPersonalComputeSettingRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountSettingsAPIInterface_ReadPersonalComputeSetting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadPersonalComputeSetting'
type MockAccountSettingsAPIInterface_ReadPersonalComputeSetting_Call struct {
	*mock.Call
}

// ReadPersonalComputeSetting is a helper method to define mock.On call
//   - ctx context.Context
//   - request settings.ReadPersonalComputeSettingRequest
func (_e *MockAccountSettingsAPIInterface_Expecter) ReadPersonalComputeSetting(ctx interface{}, request interface{}) *MockAccountSettingsAPIInterface_ReadPersonalComputeSetting_Call {
	return &MockAccountSettingsAPIInterface_ReadPersonalComputeSetting_Call{Call: _e.mock.On("ReadPersonalComputeSetting", ctx, request)}
}

func (_c *MockAccountSettingsAPIInterface_ReadPersonalComputeSetting_Call) Run(run func(ctx context.Context, request settings.ReadPersonalComputeSettingRequest)) *MockAccountSettingsAPIInterface_ReadPersonalComputeSetting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(settings.ReadPersonalComputeSettingRequest))
	})
	return _c
}

func (_c *MockAccountSettingsAPIInterface_ReadPersonalComputeSetting_Call) Return(_a0 *settings.PersonalComputeSetting, _a1 error) *MockAccountSettingsAPIInterface_ReadPersonalComputeSetting_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountSettingsAPIInterface_ReadPersonalComputeSetting_Call) RunAndReturn(run func(context.Context, settings.ReadPersonalComputeSettingRequest) (*settings.PersonalComputeSetting, error)) *MockAccountSettingsAPIInterface_ReadPersonalComputeSetting_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePersonalComputeSetting provides a mock function with given fields: ctx, request
func (_m *MockAccountSettingsAPIInterface) UpdatePersonalComputeSetting(ctx context.Context, request settings.UpdatePersonalComputeSettingRequest) (*settings.PersonalComputeSetting, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePersonalComputeSetting")
	}

	var r0 *settings.PersonalComputeSetting
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, settings.UpdatePersonalComputeSettingRequest) (*settings.PersonalComputeSetting, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, settings.UpdatePersonalComputeSettingRequest) *settings.PersonalComputeSetting); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*settings.PersonalComputeSetting)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, settings.UpdatePersonalComputeSettingRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountSettingsAPIInterface_UpdatePersonalComputeSetting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePersonalComputeSetting'
type MockAccountSettingsAPIInterface_UpdatePersonalComputeSetting_Call struct {
	*mock.Call
}

// UpdatePersonalComputeSetting is a helper method to define mock.On call
//   - ctx context.Context
//   - request settings.UpdatePersonalComputeSettingRequest
func (_e *MockAccountSettingsAPIInterface_Expecter) UpdatePersonalComputeSetting(ctx interface{}, request interface{}) *MockAccountSettingsAPIInterface_UpdatePersonalComputeSetting_Call {
	return &MockAccountSettingsAPIInterface_UpdatePersonalComputeSetting_Call{Call: _e.mock.On("UpdatePersonalComputeSetting", ctx, request)}
}

func (_c *MockAccountSettingsAPIInterface_UpdatePersonalComputeSetting_Call) Run(run func(ctx context.Context, request settings.UpdatePersonalComputeSettingRequest)) *MockAccountSettingsAPIInterface_UpdatePersonalComputeSetting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(settings.UpdatePersonalComputeSettingRequest))
	})
	return _c
}

func (_c *MockAccountSettingsAPIInterface_UpdatePersonalComputeSetting_Call) Return(_a0 *settings.PersonalComputeSetting, _a1 error) *MockAccountSettingsAPIInterface_UpdatePersonalComputeSetting_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountSettingsAPIInterface_UpdatePersonalComputeSetting_Call) RunAndReturn(run func(context.Context, settings.UpdatePersonalComputeSettingRequest) (*settings.PersonalComputeSetting, error)) *MockAccountSettingsAPIInterface_UpdatePersonalComputeSetting_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockAccountSettingsAPIInterface) WithImpl(impl settings.AccountSettingsService) settings.AccountSettingsAPIInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 settings.AccountSettingsAPIInterface
	if rf, ok := ret.Get(0).(func(settings.AccountSettingsService) settings.AccountSettingsAPIInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(settings.AccountSettingsAPIInterface)
		}
	}

	return r0
}

// MockAccountSettingsAPIInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockAccountSettingsAPIInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl settings.AccountSettingsService
func (_e *MockAccountSettingsAPIInterface_Expecter) WithImpl(impl interface{}) *MockAccountSettingsAPIInterface_WithImpl_Call {
	return &MockAccountSettingsAPIInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockAccountSettingsAPIInterface_WithImpl_Call) Run(run func(impl settings.AccountSettingsService)) *MockAccountSettingsAPIInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(settings.AccountSettingsService))
	})
	return _c
}

func (_c *MockAccountSettingsAPIInterface_WithImpl_Call) Return(_a0 settings.AccountSettingsAPIInterface) *MockAccountSettingsAPIInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountSettingsAPIInterface_WithImpl_Call) RunAndReturn(run func(settings.AccountSettingsService) settings.AccountSettingsAPIInterface) *MockAccountSettingsAPIInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAccountSettingsAPIInterface creates a new instance of MockAccountSettingsAPIInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccountSettingsAPIInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccountSettingsAPIInterface {
	mock := &MockAccountSettingsAPIInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
