// Code generated by mockery v2.38.0. DO NOT EDIT.

package settings

import (
	context "context"

	settings "github.com/databricks/databricks-sdk-go/service/settings"
	mock "github.com/stretchr/testify/mock"
)

// MockCredentialsManagerAPIInterface is an autogenerated mock type for the CredentialsManagerAPIInterface type
type MockCredentialsManagerAPIInterface struct {
	mock.Mock
}

type MockCredentialsManagerAPIInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCredentialsManagerAPIInterface) EXPECT() *MockCredentialsManagerAPIInterface_Expecter {
	return &MockCredentialsManagerAPIInterface_Expecter{mock: &_m.Mock}
}

// ExchangeToken provides a mock function with given fields: ctx, request
func (_m *MockCredentialsManagerAPIInterface) ExchangeToken(ctx context.Context, request settings.ExchangeTokenRequest) (*settings.ExchangeTokenResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ExchangeToken")
	}

	var r0 *settings.ExchangeTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, settings.ExchangeTokenRequest) (*settings.ExchangeTokenResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, settings.ExchangeTokenRequest) *settings.ExchangeTokenResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*settings.ExchangeTokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, settings.ExchangeTokenRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCredentialsManagerAPIInterface_ExchangeToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExchangeToken'
type MockCredentialsManagerAPIInterface_ExchangeToken_Call struct {
	*mock.Call
}

// ExchangeToken is a helper method to define mock.On call
//   - ctx context.Context
//   - request settings.ExchangeTokenRequest
func (_e *MockCredentialsManagerAPIInterface_Expecter) ExchangeToken(ctx interface{}, request interface{}) *MockCredentialsManagerAPIInterface_ExchangeToken_Call {
	return &MockCredentialsManagerAPIInterface_ExchangeToken_Call{Call: _e.mock.On("ExchangeToken", ctx, request)}
}

func (_c *MockCredentialsManagerAPIInterface_ExchangeToken_Call) Run(run func(ctx context.Context, request settings.ExchangeTokenRequest)) *MockCredentialsManagerAPIInterface_ExchangeToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(settings.ExchangeTokenRequest))
	})
	return _c
}

func (_c *MockCredentialsManagerAPIInterface_ExchangeToken_Call) Return(_a0 *settings.ExchangeTokenResponse, _a1 error) *MockCredentialsManagerAPIInterface_ExchangeToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCredentialsManagerAPIInterface_ExchangeToken_Call) RunAndReturn(run func(context.Context, settings.ExchangeTokenRequest) (*settings.ExchangeTokenResponse, error)) *MockCredentialsManagerAPIInterface_ExchangeToken_Call {
	_c.Call.Return(run)
	return _c
}

// Impl provides a mock function with given fields:
func (_m *MockCredentialsManagerAPIInterface) Impl() settings.CredentialsManagerService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 settings.CredentialsManagerService
	if rf, ok := ret.Get(0).(func() settings.CredentialsManagerService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(settings.CredentialsManagerService)
		}
	}

	return r0
}

// MockCredentialsManagerAPIInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockCredentialsManagerAPIInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockCredentialsManagerAPIInterface_Expecter) Impl() *MockCredentialsManagerAPIInterface_Impl_Call {
	return &MockCredentialsManagerAPIInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockCredentialsManagerAPIInterface_Impl_Call) Run(run func()) *MockCredentialsManagerAPIInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCredentialsManagerAPIInterface_Impl_Call) Return(_a0 settings.CredentialsManagerService) *MockCredentialsManagerAPIInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCredentialsManagerAPIInterface_Impl_Call) RunAndReturn(run func() settings.CredentialsManagerService) *MockCredentialsManagerAPIInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockCredentialsManagerAPIInterface) WithImpl(impl settings.CredentialsManagerService) settings.CredentialsManagerAPIInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 settings.CredentialsManagerAPIInterface
	if rf, ok := ret.Get(0).(func(settings.CredentialsManagerService) settings.CredentialsManagerAPIInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(settings.CredentialsManagerAPIInterface)
		}
	}

	return r0
}

// MockCredentialsManagerAPIInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockCredentialsManagerAPIInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl settings.CredentialsManagerService
func (_e *MockCredentialsManagerAPIInterface_Expecter) WithImpl(impl interface{}) *MockCredentialsManagerAPIInterface_WithImpl_Call {
	return &MockCredentialsManagerAPIInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockCredentialsManagerAPIInterface_WithImpl_Call) Run(run func(impl settings.CredentialsManagerService)) *MockCredentialsManagerAPIInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(settings.CredentialsManagerService))
	})
	return _c
}

func (_c *MockCredentialsManagerAPIInterface_WithImpl_Call) Return(_a0 settings.CredentialsManagerAPIInterface) *MockCredentialsManagerAPIInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCredentialsManagerAPIInterface_WithImpl_Call) RunAndReturn(run func(settings.CredentialsManagerService) settings.CredentialsManagerAPIInterface) *MockCredentialsManagerAPIInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCredentialsManagerAPIInterface creates a new instance of MockCredentialsManagerAPIInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCredentialsManagerAPIInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCredentialsManagerAPIInterface {
	mock := &MockCredentialsManagerAPIInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
