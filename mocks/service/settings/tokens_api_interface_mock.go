// Code generated by mockery v2.38.0. DO NOT EDIT.

package settings

import (
	context "context"

	listing "github.com/databricks/databricks-sdk-go/listing"
	mock "github.com/stretchr/testify/mock"

	settings "github.com/databricks/databricks-sdk-go/service/settings"
)

// MockTokensAPIInterface is an autogenerated mock type for the TokensAPIInterface type
type MockTokensAPIInterface struct {
	mock.Mock
}

type MockTokensAPIInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTokensAPIInterface) EXPECT() *MockTokensAPIInterface_Expecter {
	return &MockTokensAPIInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, request
func (_m *MockTokensAPIInterface) Create(ctx context.Context, request settings.CreateTokenRequest) (*settings.CreateTokenResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *settings.CreateTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, settings.CreateTokenRequest) (*settings.CreateTokenResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, settings.CreateTokenRequest) *settings.CreateTokenResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*settings.CreateTokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, settings.CreateTokenRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTokensAPIInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockTokensAPIInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - request settings.CreateTokenRequest
func (_e *MockTokensAPIInterface_Expecter) Create(ctx interface{}, request interface{}) *MockTokensAPIInterface_Create_Call {
	return &MockTokensAPIInterface_Create_Call{Call: _e.mock.On("Create", ctx, request)}
}

func (_c *MockTokensAPIInterface_Create_Call) Run(run func(ctx context.Context, request settings.CreateTokenRequest)) *MockTokensAPIInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(settings.CreateTokenRequest))
	})
	return _c
}

func (_c *MockTokensAPIInterface_Create_Call) Return(_a0 *settings.CreateTokenResponse, _a1 error) *MockTokensAPIInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTokensAPIInterface_Create_Call) RunAndReturn(run func(context.Context, settings.CreateTokenRequest) (*settings.CreateTokenResponse, error)) *MockTokensAPIInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, request
func (_m *MockTokensAPIInterface) Delete(ctx context.Context, request settings.RevokeTokenRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, settings.RevokeTokenRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTokensAPIInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockTokensAPIInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - request settings.RevokeTokenRequest
func (_e *MockTokensAPIInterface_Expecter) Delete(ctx interface{}, request interface{}) *MockTokensAPIInterface_Delete_Call {
	return &MockTokensAPIInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, request)}
}

func (_c *MockTokensAPIInterface_Delete_Call) Run(run func(ctx context.Context, request settings.RevokeTokenRequest)) *MockTokensAPIInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(settings.RevokeTokenRequest))
	})
	return _c
}

func (_c *MockTokensAPIInterface_Delete_Call) Return(_a0 error) *MockTokensAPIInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTokensAPIInterface_Delete_Call) RunAndReturn(run func(context.Context, settings.RevokeTokenRequest) error) *MockTokensAPIInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByTokenId provides a mock function with given fields: ctx, tokenId
func (_m *MockTokensAPIInterface) DeleteByTokenId(ctx context.Context, tokenId string) error {
	ret := _m.Called(ctx, tokenId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByTokenId")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, tokenId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTokensAPIInterface_DeleteByTokenId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByTokenId'
type MockTokensAPIInterface_DeleteByTokenId_Call struct {
	*mock.Call
}

// DeleteByTokenId is a helper method to define mock.On call
//   - ctx context.Context
//   - tokenId string
func (_e *MockTokensAPIInterface_Expecter) DeleteByTokenId(ctx interface{}, tokenId interface{}) *MockTokensAPIInterface_DeleteByTokenId_Call {
	return &MockTokensAPIInterface_DeleteByTokenId_Call{Call: _e.mock.On("DeleteByTokenId", ctx, tokenId)}
}

func (_c *MockTokensAPIInterface_DeleteByTokenId_Call) Run(run func(ctx context.Context, tokenId string)) *MockTokensAPIInterface_DeleteByTokenId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTokensAPIInterface_DeleteByTokenId_Call) Return(_a0 error) *MockTokensAPIInterface_DeleteByTokenId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTokensAPIInterface_DeleteByTokenId_Call) RunAndReturn(run func(context.Context, string) error) *MockTokensAPIInterface_DeleteByTokenId_Call {
	_c.Call.Return(run)
	return _c
}

// GetByComment provides a mock function with given fields: ctx, name
func (_m *MockTokensAPIInterface) GetByComment(ctx context.Context, name string) (*settings.TokenInfo, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetByComment")
	}

	var r0 *settings.TokenInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*settings.TokenInfo, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *settings.TokenInfo); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*settings.TokenInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTokensAPIInterface_GetByComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByComment'
type MockTokensAPIInterface_GetByComment_Call struct {
	*mock.Call
}

// GetByComment is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockTokensAPIInterface_Expecter) GetByComment(ctx interface{}, name interface{}) *MockTokensAPIInterface_GetByComment_Call {
	return &MockTokensAPIInterface_GetByComment_Call{Call: _e.mock.On("GetByComment", ctx, name)}
}

func (_c *MockTokensAPIInterface_GetByComment_Call) Run(run func(ctx context.Context, name string)) *MockTokensAPIInterface_GetByComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTokensAPIInterface_GetByComment_Call) Return(_a0 *settings.TokenInfo, _a1 error) *MockTokensAPIInterface_GetByComment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTokensAPIInterface_GetByComment_Call) RunAndReturn(run func(context.Context, string) (*settings.TokenInfo, error)) *MockTokensAPIInterface_GetByComment_Call {
	_c.Call.Return(run)
	return _c
}

// Impl provides a mock function with given fields:
func (_m *MockTokensAPIInterface) Impl() settings.TokensService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 settings.TokensService
	if rf, ok := ret.Get(0).(func() settings.TokensService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(settings.TokensService)
		}
	}

	return r0
}

// MockTokensAPIInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockTokensAPIInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockTokensAPIInterface_Expecter) Impl() *MockTokensAPIInterface_Impl_Call {
	return &MockTokensAPIInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockTokensAPIInterface_Impl_Call) Run(run func()) *MockTokensAPIInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTokensAPIInterface_Impl_Call) Return(_a0 settings.TokensService) *MockTokensAPIInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTokensAPIInterface_Impl_Call) RunAndReturn(run func() settings.TokensService) *MockTokensAPIInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx
func (_m *MockTokensAPIInterface) List(ctx context.Context) *listing.PaginatingIterator[struct{}, *settings.ListTokensResponse, settings.TokenInfo] {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *listing.PaginatingIterator[struct{}, *settings.ListTokensResponse, settings.TokenInfo]
	if rf, ok := ret.Get(0).(func(context.Context) *listing.PaginatingIterator[struct{}, *settings.ListTokensResponse, settings.TokenInfo]); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*listing.PaginatingIterator[struct{}, *settings.ListTokensResponse, settings.TokenInfo])
		}
	}

	return r0
}

// MockTokensAPIInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockTokensAPIInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockTokensAPIInterface_Expecter) List(ctx interface{}) *MockTokensAPIInterface_List_Call {
	return &MockTokensAPIInterface_List_Call{Call: _e.mock.On("List", ctx)}
}

func (_c *MockTokensAPIInterface_List_Call) Run(run func(ctx context.Context)) *MockTokensAPIInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockTokensAPIInterface_List_Call) Return(_a0 *listing.PaginatingIterator[struct{}, *settings.ListTokensResponse, settings.TokenInfo]) *MockTokensAPIInterface_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTokensAPIInterface_List_Call) RunAndReturn(run func(context.Context) *listing.PaginatingIterator[struct{}, *settings.ListTokensResponse, settings.TokenInfo]) *MockTokensAPIInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListAll provides a mock function with given fields: ctx
func (_m *MockTokensAPIInterface) ListAll(ctx context.Context) ([]settings.TokenInfo, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListAll")
	}

	var r0 []settings.TokenInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]settings.TokenInfo, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []settings.TokenInfo); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]settings.TokenInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTokensAPIInterface_ListAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAll'
type MockTokensAPIInterface_ListAll_Call struct {
	*mock.Call
}

// ListAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockTokensAPIInterface_Expecter) ListAll(ctx interface{}) *MockTokensAPIInterface_ListAll_Call {
	return &MockTokensAPIInterface_ListAll_Call{Call: _e.mock.On("ListAll", ctx)}
}

func (_c *MockTokensAPIInterface_ListAll_Call) Run(run func(ctx context.Context)) *MockTokensAPIInterface_ListAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockTokensAPIInterface_ListAll_Call) Return(_a0 []settings.TokenInfo, _a1 error) *MockTokensAPIInterface_ListAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTokensAPIInterface_ListAll_Call) RunAndReturn(run func(context.Context) ([]settings.TokenInfo, error)) *MockTokensAPIInterface_ListAll_Call {
	_c.Call.Return(run)
	return _c
}

// TokenInfoCommentToTokenIdMap provides a mock function with given fields: ctx
func (_m *MockTokensAPIInterface) TokenInfoCommentToTokenIdMap(ctx context.Context) (map[string]string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for TokenInfoCommentToTokenIdMap")
	}

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (map[string]string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) map[string]string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTokensAPIInterface_TokenInfoCommentToTokenIdMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TokenInfoCommentToTokenIdMap'
type MockTokensAPIInterface_TokenInfoCommentToTokenIdMap_Call struct {
	*mock.Call
}

// TokenInfoCommentToTokenIdMap is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockTokensAPIInterface_Expecter) TokenInfoCommentToTokenIdMap(ctx interface{}) *MockTokensAPIInterface_TokenInfoCommentToTokenIdMap_Call {
	return &MockTokensAPIInterface_TokenInfoCommentToTokenIdMap_Call{Call: _e.mock.On("TokenInfoCommentToTokenIdMap", ctx)}
}

func (_c *MockTokensAPIInterface_TokenInfoCommentToTokenIdMap_Call) Run(run func(ctx context.Context)) *MockTokensAPIInterface_TokenInfoCommentToTokenIdMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockTokensAPIInterface_TokenInfoCommentToTokenIdMap_Call) Return(_a0 map[string]string, _a1 error) *MockTokensAPIInterface_TokenInfoCommentToTokenIdMap_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTokensAPIInterface_TokenInfoCommentToTokenIdMap_Call) RunAndReturn(run func(context.Context) (map[string]string, error)) *MockTokensAPIInterface_TokenInfoCommentToTokenIdMap_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockTokensAPIInterface) WithImpl(impl settings.TokensService) settings.TokensAPIInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 settings.TokensAPIInterface
	if rf, ok := ret.Get(0).(func(settings.TokensService) settings.TokensAPIInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(settings.TokensAPIInterface)
		}
	}

	return r0
}

// MockTokensAPIInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockTokensAPIInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl settings.TokensService
func (_e *MockTokensAPIInterface_Expecter) WithImpl(impl interface{}) *MockTokensAPIInterface_WithImpl_Call {
	return &MockTokensAPIInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockTokensAPIInterface_WithImpl_Call) Run(run func(impl settings.TokensService)) *MockTokensAPIInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(settings.TokensService))
	})
	return _c
}

func (_c *MockTokensAPIInterface_WithImpl_Call) Return(_a0 settings.TokensAPIInterface) *MockTokensAPIInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTokensAPIInterface_WithImpl_Call) RunAndReturn(run func(settings.TokensService) settings.TokensAPIInterface) *MockTokensAPIInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTokensAPIInterface creates a new instance of MockTokensAPIInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTokensAPIInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTokensAPIInterface {
	mock := &MockTokensAPIInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
