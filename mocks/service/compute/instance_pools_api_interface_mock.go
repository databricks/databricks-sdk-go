// Code generated by mockery v2.38.0. DO NOT EDIT.

package compute

import (
	context "context"

	compute "github.com/databricks/databricks-sdk-go/service/compute"

	listing "github.com/databricks/databricks-sdk-go/listing"

	mock "github.com/stretchr/testify/mock"
)

// MockInstancePoolsAPIInterface is an autogenerated mock type for the InstancePoolsAPIInterface type
type MockInstancePoolsAPIInterface struct {
	mock.Mock
}

type MockInstancePoolsAPIInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockInstancePoolsAPIInterface) EXPECT() *MockInstancePoolsAPIInterface_Expecter {
	return &MockInstancePoolsAPIInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, request
func (_m *MockInstancePoolsAPIInterface) Create(ctx context.Context, request compute.CreateInstancePool) (*compute.CreateInstancePoolResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *compute.CreateInstancePoolResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, compute.CreateInstancePool) (*compute.CreateInstancePoolResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, compute.CreateInstancePool) *compute.CreateInstancePoolResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compute.CreateInstancePoolResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, compute.CreateInstancePool) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInstancePoolsAPIInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockInstancePoolsAPIInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - request compute.CreateInstancePool
func (_e *MockInstancePoolsAPIInterface_Expecter) Create(ctx interface{}, request interface{}) *MockInstancePoolsAPIInterface_Create_Call {
	return &MockInstancePoolsAPIInterface_Create_Call{Call: _e.mock.On("Create", ctx, request)}
}

func (_c *MockInstancePoolsAPIInterface_Create_Call) Run(run func(ctx context.Context, request compute.CreateInstancePool)) *MockInstancePoolsAPIInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(compute.CreateInstancePool))
	})
	return _c
}

func (_c *MockInstancePoolsAPIInterface_Create_Call) Return(_a0 *compute.CreateInstancePoolResponse, _a1 error) *MockInstancePoolsAPIInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInstancePoolsAPIInterface_Create_Call) RunAndReturn(run func(context.Context, compute.CreateInstancePool) (*compute.CreateInstancePoolResponse, error)) *MockInstancePoolsAPIInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, request
func (_m *MockInstancePoolsAPIInterface) Delete(ctx context.Context, request compute.DeleteInstancePool) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, compute.DeleteInstancePool) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInstancePoolsAPIInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockInstancePoolsAPIInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - request compute.DeleteInstancePool
func (_e *MockInstancePoolsAPIInterface_Expecter) Delete(ctx interface{}, request interface{}) *MockInstancePoolsAPIInterface_Delete_Call {
	return &MockInstancePoolsAPIInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, request)}
}

func (_c *MockInstancePoolsAPIInterface_Delete_Call) Run(run func(ctx context.Context, request compute.DeleteInstancePool)) *MockInstancePoolsAPIInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(compute.DeleteInstancePool))
	})
	return _c
}

func (_c *MockInstancePoolsAPIInterface_Delete_Call) Return(_a0 error) *MockInstancePoolsAPIInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInstancePoolsAPIInterface_Delete_Call) RunAndReturn(run func(context.Context, compute.DeleteInstancePool) error) *MockInstancePoolsAPIInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByInstancePoolId provides a mock function with given fields: ctx, instancePoolId
func (_m *MockInstancePoolsAPIInterface) DeleteByInstancePoolId(ctx context.Context, instancePoolId string) error {
	ret := _m.Called(ctx, instancePoolId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByInstancePoolId")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, instancePoolId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInstancePoolsAPIInterface_DeleteByInstancePoolId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByInstancePoolId'
type MockInstancePoolsAPIInterface_DeleteByInstancePoolId_Call struct {
	*mock.Call
}

// DeleteByInstancePoolId is a helper method to define mock.On call
//   - ctx context.Context
//   - instancePoolId string
func (_e *MockInstancePoolsAPIInterface_Expecter) DeleteByInstancePoolId(ctx interface{}, instancePoolId interface{}) *MockInstancePoolsAPIInterface_DeleteByInstancePoolId_Call {
	return &MockInstancePoolsAPIInterface_DeleteByInstancePoolId_Call{Call: _e.mock.On("DeleteByInstancePoolId", ctx, instancePoolId)}
}

func (_c *MockInstancePoolsAPIInterface_DeleteByInstancePoolId_Call) Run(run func(ctx context.Context, instancePoolId string)) *MockInstancePoolsAPIInterface_DeleteByInstancePoolId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockInstancePoolsAPIInterface_DeleteByInstancePoolId_Call) Return(_a0 error) *MockInstancePoolsAPIInterface_DeleteByInstancePoolId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInstancePoolsAPIInterface_DeleteByInstancePoolId_Call) RunAndReturn(run func(context.Context, string) error) *MockInstancePoolsAPIInterface_DeleteByInstancePoolId_Call {
	_c.Call.Return(run)
	return _c
}

// Edit provides a mock function with given fields: ctx, request
func (_m *MockInstancePoolsAPIInterface) Edit(ctx context.Context, request compute.EditInstancePool) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Edit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, compute.EditInstancePool) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInstancePoolsAPIInterface_Edit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Edit'
type MockInstancePoolsAPIInterface_Edit_Call struct {
	*mock.Call
}

// Edit is a helper method to define mock.On call
//   - ctx context.Context
//   - request compute.EditInstancePool
func (_e *MockInstancePoolsAPIInterface_Expecter) Edit(ctx interface{}, request interface{}) *MockInstancePoolsAPIInterface_Edit_Call {
	return &MockInstancePoolsAPIInterface_Edit_Call{Call: _e.mock.On("Edit", ctx, request)}
}

func (_c *MockInstancePoolsAPIInterface_Edit_Call) Run(run func(ctx context.Context, request compute.EditInstancePool)) *MockInstancePoolsAPIInterface_Edit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(compute.EditInstancePool))
	})
	return _c
}

func (_c *MockInstancePoolsAPIInterface_Edit_Call) Return(_a0 error) *MockInstancePoolsAPIInterface_Edit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInstancePoolsAPIInterface_Edit_Call) RunAndReturn(run func(context.Context, compute.EditInstancePool) error) *MockInstancePoolsAPIInterface_Edit_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, request
func (_m *MockInstancePoolsAPIInterface) Get(ctx context.Context, request compute.GetInstancePoolRequest) (*compute.GetInstancePool, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *compute.GetInstancePool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, compute.GetInstancePoolRequest) (*compute.GetInstancePool, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, compute.GetInstancePoolRequest) *compute.GetInstancePool); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compute.GetInstancePool)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, compute.GetInstancePoolRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInstancePoolsAPIInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockInstancePoolsAPIInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - request compute.GetInstancePoolRequest
func (_e *MockInstancePoolsAPIInterface_Expecter) Get(ctx interface{}, request interface{}) *MockInstancePoolsAPIInterface_Get_Call {
	return &MockInstancePoolsAPIInterface_Get_Call{Call: _e.mock.On("Get", ctx, request)}
}

func (_c *MockInstancePoolsAPIInterface_Get_Call) Run(run func(ctx context.Context, request compute.GetInstancePoolRequest)) *MockInstancePoolsAPIInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(compute.GetInstancePoolRequest))
	})
	return _c
}

func (_c *MockInstancePoolsAPIInterface_Get_Call) Return(_a0 *compute.GetInstancePool, _a1 error) *MockInstancePoolsAPIInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInstancePoolsAPIInterface_Get_Call) RunAndReturn(run func(context.Context, compute.GetInstancePoolRequest) (*compute.GetInstancePool, error)) *MockInstancePoolsAPIInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByInstancePoolId provides a mock function with given fields: ctx, instancePoolId
func (_m *MockInstancePoolsAPIInterface) GetByInstancePoolId(ctx context.Context, instancePoolId string) (*compute.GetInstancePool, error) {
	ret := _m.Called(ctx, instancePoolId)

	if len(ret) == 0 {
		panic("no return value specified for GetByInstancePoolId")
	}

	var r0 *compute.GetInstancePool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*compute.GetInstancePool, error)); ok {
		return rf(ctx, instancePoolId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *compute.GetInstancePool); ok {
		r0 = rf(ctx, instancePoolId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compute.GetInstancePool)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, instancePoolId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInstancePoolsAPIInterface_GetByInstancePoolId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByInstancePoolId'
type MockInstancePoolsAPIInterface_GetByInstancePoolId_Call struct {
	*mock.Call
}

// GetByInstancePoolId is a helper method to define mock.On call
//   - ctx context.Context
//   - instancePoolId string
func (_e *MockInstancePoolsAPIInterface_Expecter) GetByInstancePoolId(ctx interface{}, instancePoolId interface{}) *MockInstancePoolsAPIInterface_GetByInstancePoolId_Call {
	return &MockInstancePoolsAPIInterface_GetByInstancePoolId_Call{Call: _e.mock.On("GetByInstancePoolId", ctx, instancePoolId)}
}

func (_c *MockInstancePoolsAPIInterface_GetByInstancePoolId_Call) Run(run func(ctx context.Context, instancePoolId string)) *MockInstancePoolsAPIInterface_GetByInstancePoolId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockInstancePoolsAPIInterface_GetByInstancePoolId_Call) Return(_a0 *compute.GetInstancePool, _a1 error) *MockInstancePoolsAPIInterface_GetByInstancePoolId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInstancePoolsAPIInterface_GetByInstancePoolId_Call) RunAndReturn(run func(context.Context, string) (*compute.GetInstancePool, error)) *MockInstancePoolsAPIInterface_GetByInstancePoolId_Call {
	_c.Call.Return(run)
	return _c
}

// GetByInstancePoolName provides a mock function with given fields: ctx, name
func (_m *MockInstancePoolsAPIInterface) GetByInstancePoolName(ctx context.Context, name string) (*compute.InstancePoolAndStats, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetByInstancePoolName")
	}

	var r0 *compute.InstancePoolAndStats
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*compute.InstancePoolAndStats, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *compute.InstancePoolAndStats); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compute.InstancePoolAndStats)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInstancePoolsAPIInterface_GetByInstancePoolName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByInstancePoolName'
type MockInstancePoolsAPIInterface_GetByInstancePoolName_Call struct {
	*mock.Call
}

// GetByInstancePoolName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockInstancePoolsAPIInterface_Expecter) GetByInstancePoolName(ctx interface{}, name interface{}) *MockInstancePoolsAPIInterface_GetByInstancePoolName_Call {
	return &MockInstancePoolsAPIInterface_GetByInstancePoolName_Call{Call: _e.mock.On("GetByInstancePoolName", ctx, name)}
}

func (_c *MockInstancePoolsAPIInterface_GetByInstancePoolName_Call) Run(run func(ctx context.Context, name string)) *MockInstancePoolsAPIInterface_GetByInstancePoolName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockInstancePoolsAPIInterface_GetByInstancePoolName_Call) Return(_a0 *compute.InstancePoolAndStats, _a1 error) *MockInstancePoolsAPIInterface_GetByInstancePoolName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInstancePoolsAPIInterface_GetByInstancePoolName_Call) RunAndReturn(run func(context.Context, string) (*compute.InstancePoolAndStats, error)) *MockInstancePoolsAPIInterface_GetByInstancePoolName_Call {
	_c.Call.Return(run)
	return _c
}

// GetPermissionLevels provides a mock function with given fields: ctx, request
func (_m *MockInstancePoolsAPIInterface) GetPermissionLevels(ctx context.Context, request compute.GetInstancePoolPermissionLevelsRequest) (*compute.GetInstancePoolPermissionLevelsResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetPermissionLevels")
	}

	var r0 *compute.GetInstancePoolPermissionLevelsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, compute.GetInstancePoolPermissionLevelsRequest) (*compute.GetInstancePoolPermissionLevelsResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, compute.GetInstancePoolPermissionLevelsRequest) *compute.GetInstancePoolPermissionLevelsResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compute.GetInstancePoolPermissionLevelsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, compute.GetInstancePoolPermissionLevelsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInstancePoolsAPIInterface_GetPermissionLevels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPermissionLevels'
type MockInstancePoolsAPIInterface_GetPermissionLevels_Call struct {
	*mock.Call
}

// GetPermissionLevels is a helper method to define mock.On call
//   - ctx context.Context
//   - request compute.GetInstancePoolPermissionLevelsRequest
func (_e *MockInstancePoolsAPIInterface_Expecter) GetPermissionLevels(ctx interface{}, request interface{}) *MockInstancePoolsAPIInterface_GetPermissionLevels_Call {
	return &MockInstancePoolsAPIInterface_GetPermissionLevels_Call{Call: _e.mock.On("GetPermissionLevels", ctx, request)}
}

func (_c *MockInstancePoolsAPIInterface_GetPermissionLevels_Call) Run(run func(ctx context.Context, request compute.GetInstancePoolPermissionLevelsRequest)) *MockInstancePoolsAPIInterface_GetPermissionLevels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(compute.GetInstancePoolPermissionLevelsRequest))
	})
	return _c
}

func (_c *MockInstancePoolsAPIInterface_GetPermissionLevels_Call) Return(_a0 *compute.GetInstancePoolPermissionLevelsResponse, _a1 error) *MockInstancePoolsAPIInterface_GetPermissionLevels_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInstancePoolsAPIInterface_GetPermissionLevels_Call) RunAndReturn(run func(context.Context, compute.GetInstancePoolPermissionLevelsRequest) (*compute.GetInstancePoolPermissionLevelsResponse, error)) *MockInstancePoolsAPIInterface_GetPermissionLevels_Call {
	_c.Call.Return(run)
	return _c
}

// GetPermissionLevelsByInstancePoolId provides a mock function with given fields: ctx, instancePoolId
func (_m *MockInstancePoolsAPIInterface) GetPermissionLevelsByInstancePoolId(ctx context.Context, instancePoolId string) (*compute.GetInstancePoolPermissionLevelsResponse, error) {
	ret := _m.Called(ctx, instancePoolId)

	if len(ret) == 0 {
		panic("no return value specified for GetPermissionLevelsByInstancePoolId")
	}

	var r0 *compute.GetInstancePoolPermissionLevelsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*compute.GetInstancePoolPermissionLevelsResponse, error)); ok {
		return rf(ctx, instancePoolId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *compute.GetInstancePoolPermissionLevelsResponse); ok {
		r0 = rf(ctx, instancePoolId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compute.GetInstancePoolPermissionLevelsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, instancePoolId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInstancePoolsAPIInterface_GetPermissionLevelsByInstancePoolId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPermissionLevelsByInstancePoolId'
type MockInstancePoolsAPIInterface_GetPermissionLevelsByInstancePoolId_Call struct {
	*mock.Call
}

// GetPermissionLevelsByInstancePoolId is a helper method to define mock.On call
//   - ctx context.Context
//   - instancePoolId string
func (_e *MockInstancePoolsAPIInterface_Expecter) GetPermissionLevelsByInstancePoolId(ctx interface{}, instancePoolId interface{}) *MockInstancePoolsAPIInterface_GetPermissionLevelsByInstancePoolId_Call {
	return &MockInstancePoolsAPIInterface_GetPermissionLevelsByInstancePoolId_Call{Call: _e.mock.On("GetPermissionLevelsByInstancePoolId", ctx, instancePoolId)}
}

func (_c *MockInstancePoolsAPIInterface_GetPermissionLevelsByInstancePoolId_Call) Run(run func(ctx context.Context, instancePoolId string)) *MockInstancePoolsAPIInterface_GetPermissionLevelsByInstancePoolId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockInstancePoolsAPIInterface_GetPermissionLevelsByInstancePoolId_Call) Return(_a0 *compute.GetInstancePoolPermissionLevelsResponse, _a1 error) *MockInstancePoolsAPIInterface_GetPermissionLevelsByInstancePoolId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInstancePoolsAPIInterface_GetPermissionLevelsByInstancePoolId_Call) RunAndReturn(run func(context.Context, string) (*compute.GetInstancePoolPermissionLevelsResponse, error)) *MockInstancePoolsAPIInterface_GetPermissionLevelsByInstancePoolId_Call {
	_c.Call.Return(run)
	return _c
}

// GetPermissions provides a mock function with given fields: ctx, request
func (_m *MockInstancePoolsAPIInterface) GetPermissions(ctx context.Context, request compute.GetInstancePoolPermissionsRequest) (*compute.InstancePoolPermissions, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetPermissions")
	}

	var r0 *compute.InstancePoolPermissions
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, compute.GetInstancePoolPermissionsRequest) (*compute.InstancePoolPermissions, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, compute.GetInstancePoolPermissionsRequest) *compute.InstancePoolPermissions); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compute.InstancePoolPermissions)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, compute.GetInstancePoolPermissionsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInstancePoolsAPIInterface_GetPermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPermissions'
type MockInstancePoolsAPIInterface_GetPermissions_Call struct {
	*mock.Call
}

// GetPermissions is a helper method to define mock.On call
//   - ctx context.Context
//   - request compute.GetInstancePoolPermissionsRequest
func (_e *MockInstancePoolsAPIInterface_Expecter) GetPermissions(ctx interface{}, request interface{}) *MockInstancePoolsAPIInterface_GetPermissions_Call {
	return &MockInstancePoolsAPIInterface_GetPermissions_Call{Call: _e.mock.On("GetPermissions", ctx, request)}
}

func (_c *MockInstancePoolsAPIInterface_GetPermissions_Call) Run(run func(ctx context.Context, request compute.GetInstancePoolPermissionsRequest)) *MockInstancePoolsAPIInterface_GetPermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(compute.GetInstancePoolPermissionsRequest))
	})
	return _c
}

func (_c *MockInstancePoolsAPIInterface_GetPermissions_Call) Return(_a0 *compute.InstancePoolPermissions, _a1 error) *MockInstancePoolsAPIInterface_GetPermissions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInstancePoolsAPIInterface_GetPermissions_Call) RunAndReturn(run func(context.Context, compute.GetInstancePoolPermissionsRequest) (*compute.InstancePoolPermissions, error)) *MockInstancePoolsAPIInterface_GetPermissions_Call {
	_c.Call.Return(run)
	return _c
}

// GetPermissionsByInstancePoolId provides a mock function with given fields: ctx, instancePoolId
func (_m *MockInstancePoolsAPIInterface) GetPermissionsByInstancePoolId(ctx context.Context, instancePoolId string) (*compute.InstancePoolPermissions, error) {
	ret := _m.Called(ctx, instancePoolId)

	if len(ret) == 0 {
		panic("no return value specified for GetPermissionsByInstancePoolId")
	}

	var r0 *compute.InstancePoolPermissions
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*compute.InstancePoolPermissions, error)); ok {
		return rf(ctx, instancePoolId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *compute.InstancePoolPermissions); ok {
		r0 = rf(ctx, instancePoolId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compute.InstancePoolPermissions)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, instancePoolId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInstancePoolsAPIInterface_GetPermissionsByInstancePoolId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPermissionsByInstancePoolId'
type MockInstancePoolsAPIInterface_GetPermissionsByInstancePoolId_Call struct {
	*mock.Call
}

// GetPermissionsByInstancePoolId is a helper method to define mock.On call
//   - ctx context.Context
//   - instancePoolId string
func (_e *MockInstancePoolsAPIInterface_Expecter) GetPermissionsByInstancePoolId(ctx interface{}, instancePoolId interface{}) *MockInstancePoolsAPIInterface_GetPermissionsByInstancePoolId_Call {
	return &MockInstancePoolsAPIInterface_GetPermissionsByInstancePoolId_Call{Call: _e.mock.On("GetPermissionsByInstancePoolId", ctx, instancePoolId)}
}

func (_c *MockInstancePoolsAPIInterface_GetPermissionsByInstancePoolId_Call) Run(run func(ctx context.Context, instancePoolId string)) *MockInstancePoolsAPIInterface_GetPermissionsByInstancePoolId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockInstancePoolsAPIInterface_GetPermissionsByInstancePoolId_Call) Return(_a0 *compute.InstancePoolPermissions, _a1 error) *MockInstancePoolsAPIInterface_GetPermissionsByInstancePoolId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInstancePoolsAPIInterface_GetPermissionsByInstancePoolId_Call) RunAndReturn(run func(context.Context, string) (*compute.InstancePoolPermissions, error)) *MockInstancePoolsAPIInterface_GetPermissionsByInstancePoolId_Call {
	_c.Call.Return(run)
	return _c
}

// Impl provides a mock function with given fields:
func (_m *MockInstancePoolsAPIInterface) Impl() compute.InstancePoolsService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 compute.InstancePoolsService
	if rf, ok := ret.Get(0).(func() compute.InstancePoolsService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(compute.InstancePoolsService)
		}
	}

	return r0
}

// MockInstancePoolsAPIInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockInstancePoolsAPIInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockInstancePoolsAPIInterface_Expecter) Impl() *MockInstancePoolsAPIInterface_Impl_Call {
	return &MockInstancePoolsAPIInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockInstancePoolsAPIInterface_Impl_Call) Run(run func()) *MockInstancePoolsAPIInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockInstancePoolsAPIInterface_Impl_Call) Return(_a0 compute.InstancePoolsService) *MockInstancePoolsAPIInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInstancePoolsAPIInterface_Impl_Call) RunAndReturn(run func() compute.InstancePoolsService) *MockInstancePoolsAPIInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// InstancePoolAndStatsInstancePoolNameToInstancePoolIdMap provides a mock function with given fields: ctx
func (_m *MockInstancePoolsAPIInterface) InstancePoolAndStatsInstancePoolNameToInstancePoolIdMap(ctx context.Context) (map[string]string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for InstancePoolAndStatsInstancePoolNameToInstancePoolIdMap")
	}

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (map[string]string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) map[string]string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInstancePoolsAPIInterface_InstancePoolAndStatsInstancePoolNameToInstancePoolIdMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InstancePoolAndStatsInstancePoolNameToInstancePoolIdMap'
type MockInstancePoolsAPIInterface_InstancePoolAndStatsInstancePoolNameToInstancePoolIdMap_Call struct {
	*mock.Call
}

// InstancePoolAndStatsInstancePoolNameToInstancePoolIdMap is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockInstancePoolsAPIInterface_Expecter) InstancePoolAndStatsInstancePoolNameToInstancePoolIdMap(ctx interface{}) *MockInstancePoolsAPIInterface_InstancePoolAndStatsInstancePoolNameToInstancePoolIdMap_Call {
	return &MockInstancePoolsAPIInterface_InstancePoolAndStatsInstancePoolNameToInstancePoolIdMap_Call{Call: _e.mock.On("InstancePoolAndStatsInstancePoolNameToInstancePoolIdMap", ctx)}
}

func (_c *MockInstancePoolsAPIInterface_InstancePoolAndStatsInstancePoolNameToInstancePoolIdMap_Call) Run(run func(ctx context.Context)) *MockInstancePoolsAPIInterface_InstancePoolAndStatsInstancePoolNameToInstancePoolIdMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockInstancePoolsAPIInterface_InstancePoolAndStatsInstancePoolNameToInstancePoolIdMap_Call) Return(_a0 map[string]string, _a1 error) *MockInstancePoolsAPIInterface_InstancePoolAndStatsInstancePoolNameToInstancePoolIdMap_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInstancePoolsAPIInterface_InstancePoolAndStatsInstancePoolNameToInstancePoolIdMap_Call) RunAndReturn(run func(context.Context) (map[string]string, error)) *MockInstancePoolsAPIInterface_InstancePoolAndStatsInstancePoolNameToInstancePoolIdMap_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx
func (_m *MockInstancePoolsAPIInterface) List(ctx context.Context) *listing.PaginatingIterator[struct{}, *compute.ListInstancePools, compute.InstancePoolAndStats] {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *listing.PaginatingIterator[struct{}, *compute.ListInstancePools, compute.InstancePoolAndStats]
	if rf, ok := ret.Get(0).(func(context.Context) *listing.PaginatingIterator[struct{}, *compute.ListInstancePools, compute.InstancePoolAndStats]); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*listing.PaginatingIterator[struct{}, *compute.ListInstancePools, compute.InstancePoolAndStats])
		}
	}

	return r0
}

// MockInstancePoolsAPIInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockInstancePoolsAPIInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockInstancePoolsAPIInterface_Expecter) List(ctx interface{}) *MockInstancePoolsAPIInterface_List_Call {
	return &MockInstancePoolsAPIInterface_List_Call{Call: _e.mock.On("List", ctx)}
}

func (_c *MockInstancePoolsAPIInterface_List_Call) Run(run func(ctx context.Context)) *MockInstancePoolsAPIInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockInstancePoolsAPIInterface_List_Call) Return(_a0 *listing.PaginatingIterator[struct{}, *compute.ListInstancePools, compute.InstancePoolAndStats]) *MockInstancePoolsAPIInterface_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInstancePoolsAPIInterface_List_Call) RunAndReturn(run func(context.Context) *listing.PaginatingIterator[struct{}, *compute.ListInstancePools, compute.InstancePoolAndStats]) *MockInstancePoolsAPIInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListAll provides a mock function with given fields: ctx
func (_m *MockInstancePoolsAPIInterface) ListAll(ctx context.Context) ([]compute.InstancePoolAndStats, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListAll")
	}

	var r0 []compute.InstancePoolAndStats
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]compute.InstancePoolAndStats, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []compute.InstancePoolAndStats); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]compute.InstancePoolAndStats)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInstancePoolsAPIInterface_ListAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAll'
type MockInstancePoolsAPIInterface_ListAll_Call struct {
	*mock.Call
}

// ListAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockInstancePoolsAPIInterface_Expecter) ListAll(ctx interface{}) *MockInstancePoolsAPIInterface_ListAll_Call {
	return &MockInstancePoolsAPIInterface_ListAll_Call{Call: _e.mock.On("ListAll", ctx)}
}

func (_c *MockInstancePoolsAPIInterface_ListAll_Call) Run(run func(ctx context.Context)) *MockInstancePoolsAPIInterface_ListAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockInstancePoolsAPIInterface_ListAll_Call) Return(_a0 []compute.InstancePoolAndStats, _a1 error) *MockInstancePoolsAPIInterface_ListAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInstancePoolsAPIInterface_ListAll_Call) RunAndReturn(run func(context.Context) ([]compute.InstancePoolAndStats, error)) *MockInstancePoolsAPIInterface_ListAll_Call {
	_c.Call.Return(run)
	return _c
}

// SetPermissions provides a mock function with given fields: ctx, request
func (_m *MockInstancePoolsAPIInterface) SetPermissions(ctx context.Context, request compute.InstancePoolPermissionsRequest) (*compute.InstancePoolPermissions, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for SetPermissions")
	}

	var r0 *compute.InstancePoolPermissions
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, compute.InstancePoolPermissionsRequest) (*compute.InstancePoolPermissions, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, compute.InstancePoolPermissionsRequest) *compute.InstancePoolPermissions); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compute.InstancePoolPermissions)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, compute.InstancePoolPermissionsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInstancePoolsAPIInterface_SetPermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetPermissions'
type MockInstancePoolsAPIInterface_SetPermissions_Call struct {
	*mock.Call
}

// SetPermissions is a helper method to define mock.On call
//   - ctx context.Context
//   - request compute.InstancePoolPermissionsRequest
func (_e *MockInstancePoolsAPIInterface_Expecter) SetPermissions(ctx interface{}, request interface{}) *MockInstancePoolsAPIInterface_SetPermissions_Call {
	return &MockInstancePoolsAPIInterface_SetPermissions_Call{Call: _e.mock.On("SetPermissions", ctx, request)}
}

func (_c *MockInstancePoolsAPIInterface_SetPermissions_Call) Run(run func(ctx context.Context, request compute.InstancePoolPermissionsRequest)) *MockInstancePoolsAPIInterface_SetPermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(compute.InstancePoolPermissionsRequest))
	})
	return _c
}

func (_c *MockInstancePoolsAPIInterface_SetPermissions_Call) Return(_a0 *compute.InstancePoolPermissions, _a1 error) *MockInstancePoolsAPIInterface_SetPermissions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInstancePoolsAPIInterface_SetPermissions_Call) RunAndReturn(run func(context.Context, compute.InstancePoolPermissionsRequest) (*compute.InstancePoolPermissions, error)) *MockInstancePoolsAPIInterface_SetPermissions_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePermissions provides a mock function with given fields: ctx, request
func (_m *MockInstancePoolsAPIInterface) UpdatePermissions(ctx context.Context, request compute.InstancePoolPermissionsRequest) (*compute.InstancePoolPermissions, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePermissions")
	}

	var r0 *compute.InstancePoolPermissions
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, compute.InstancePoolPermissionsRequest) (*compute.InstancePoolPermissions, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, compute.InstancePoolPermissionsRequest) *compute.InstancePoolPermissions); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compute.InstancePoolPermissions)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, compute.InstancePoolPermissionsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInstancePoolsAPIInterface_UpdatePermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePermissions'
type MockInstancePoolsAPIInterface_UpdatePermissions_Call struct {
	*mock.Call
}

// UpdatePermissions is a helper method to define mock.On call
//   - ctx context.Context
//   - request compute.InstancePoolPermissionsRequest
func (_e *MockInstancePoolsAPIInterface_Expecter) UpdatePermissions(ctx interface{}, request interface{}) *MockInstancePoolsAPIInterface_UpdatePermissions_Call {
	return &MockInstancePoolsAPIInterface_UpdatePermissions_Call{Call: _e.mock.On("UpdatePermissions", ctx, request)}
}

func (_c *MockInstancePoolsAPIInterface_UpdatePermissions_Call) Run(run func(ctx context.Context, request compute.InstancePoolPermissionsRequest)) *MockInstancePoolsAPIInterface_UpdatePermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(compute.InstancePoolPermissionsRequest))
	})
	return _c
}

func (_c *MockInstancePoolsAPIInterface_UpdatePermissions_Call) Return(_a0 *compute.InstancePoolPermissions, _a1 error) *MockInstancePoolsAPIInterface_UpdatePermissions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInstancePoolsAPIInterface_UpdatePermissions_Call) RunAndReturn(run func(context.Context, compute.InstancePoolPermissionsRequest) (*compute.InstancePoolPermissions, error)) *MockInstancePoolsAPIInterface_UpdatePermissions_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockInstancePoolsAPIInterface) WithImpl(impl compute.InstancePoolsService) compute.InstancePoolsAPIInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 compute.InstancePoolsAPIInterface
	if rf, ok := ret.Get(0).(func(compute.InstancePoolsService) compute.InstancePoolsAPIInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(compute.InstancePoolsAPIInterface)
		}
	}

	return r0
}

// MockInstancePoolsAPIInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockInstancePoolsAPIInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl compute.InstancePoolsService
func (_e *MockInstancePoolsAPIInterface_Expecter) WithImpl(impl interface{}) *MockInstancePoolsAPIInterface_WithImpl_Call {
	return &MockInstancePoolsAPIInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockInstancePoolsAPIInterface_WithImpl_Call) Run(run func(impl compute.InstancePoolsService)) *MockInstancePoolsAPIInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(compute.InstancePoolsService))
	})
	return _c
}

func (_c *MockInstancePoolsAPIInterface_WithImpl_Call) Return(_a0 compute.InstancePoolsAPIInterface) *MockInstancePoolsAPIInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInstancePoolsAPIInterface_WithImpl_Call) RunAndReturn(run func(compute.InstancePoolsService) compute.InstancePoolsAPIInterface) *MockInstancePoolsAPIInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockInstancePoolsAPIInterface creates a new instance of MockInstancePoolsAPIInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInstancePoolsAPIInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInstancePoolsAPIInterface {
	mock := &MockInstancePoolsAPIInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
