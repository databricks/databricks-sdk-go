// Code generated by mockery v2.38.0. DO NOT EDIT.

package pipelines

import (
	context "context"

	listing "github.com/databricks/databricks-sdk-go/listing"
	mock "github.com/stretchr/testify/mock"

	pipelines "github.com/databricks/databricks-sdk-go/service/pipelines"

	retries "github.com/databricks/databricks-sdk-go/retries"

	time "time"
)

// MockPipelinesAPIInterface is an autogenerated mock type for the PipelinesAPIInterface type
type MockPipelinesAPIInterface struct {
	mock.Mock
}

type MockPipelinesAPIInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPipelinesAPIInterface) EXPECT() *MockPipelinesAPIInterface_Expecter {
	return &MockPipelinesAPIInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, request
func (_m *MockPipelinesAPIInterface) Create(ctx context.Context, request pipelines.CreatePipeline) (*pipelines.CreatePipelineResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *pipelines.CreatePipelineResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pipelines.CreatePipeline) (*pipelines.CreatePipelineResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pipelines.CreatePipeline) *pipelines.CreatePipelineResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pipelines.CreatePipelineResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, pipelines.CreatePipeline) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPipelinesAPIInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockPipelinesAPIInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - request pipelines.CreatePipeline
func (_e *MockPipelinesAPIInterface_Expecter) Create(ctx interface{}, request interface{}) *MockPipelinesAPIInterface_Create_Call {
	return &MockPipelinesAPIInterface_Create_Call{Call: _e.mock.On("Create", ctx, request)}
}

func (_c *MockPipelinesAPIInterface_Create_Call) Run(run func(ctx context.Context, request pipelines.CreatePipeline)) *MockPipelinesAPIInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pipelines.CreatePipeline))
	})
	return _c
}

func (_c *MockPipelinesAPIInterface_Create_Call) Return(_a0 *pipelines.CreatePipelineResponse, _a1 error) *MockPipelinesAPIInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPipelinesAPIInterface_Create_Call) RunAndReturn(run func(context.Context, pipelines.CreatePipeline) (*pipelines.CreatePipelineResponse, error)) *MockPipelinesAPIInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, request
func (_m *MockPipelinesAPIInterface) Delete(ctx context.Context, request pipelines.DeletePipelineRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, pipelines.DeletePipelineRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPipelinesAPIInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockPipelinesAPIInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - request pipelines.DeletePipelineRequest
func (_e *MockPipelinesAPIInterface_Expecter) Delete(ctx interface{}, request interface{}) *MockPipelinesAPIInterface_Delete_Call {
	return &MockPipelinesAPIInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, request)}
}

func (_c *MockPipelinesAPIInterface_Delete_Call) Run(run func(ctx context.Context, request pipelines.DeletePipelineRequest)) *MockPipelinesAPIInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pipelines.DeletePipelineRequest))
	})
	return _c
}

func (_c *MockPipelinesAPIInterface_Delete_Call) Return(_a0 error) *MockPipelinesAPIInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPipelinesAPIInterface_Delete_Call) RunAndReturn(run func(context.Context, pipelines.DeletePipelineRequest) error) *MockPipelinesAPIInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByPipelineId provides a mock function with given fields: ctx, pipelineId
func (_m *MockPipelinesAPIInterface) DeleteByPipelineId(ctx context.Context, pipelineId string) error {
	ret := _m.Called(ctx, pipelineId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByPipelineId")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, pipelineId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPipelinesAPIInterface_DeleteByPipelineId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByPipelineId'
type MockPipelinesAPIInterface_DeleteByPipelineId_Call struct {
	*mock.Call
}

// DeleteByPipelineId is a helper method to define mock.On call
//   - ctx context.Context
//   - pipelineId string
func (_e *MockPipelinesAPIInterface_Expecter) DeleteByPipelineId(ctx interface{}, pipelineId interface{}) *MockPipelinesAPIInterface_DeleteByPipelineId_Call {
	return &MockPipelinesAPIInterface_DeleteByPipelineId_Call{Call: _e.mock.On("DeleteByPipelineId", ctx, pipelineId)}
}

func (_c *MockPipelinesAPIInterface_DeleteByPipelineId_Call) Run(run func(ctx context.Context, pipelineId string)) *MockPipelinesAPIInterface_DeleteByPipelineId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockPipelinesAPIInterface_DeleteByPipelineId_Call) Return(_a0 error) *MockPipelinesAPIInterface_DeleteByPipelineId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPipelinesAPIInterface_DeleteByPipelineId_Call) RunAndReturn(run func(context.Context, string) error) *MockPipelinesAPIInterface_DeleteByPipelineId_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, request
func (_m *MockPipelinesAPIInterface) Get(ctx context.Context, request pipelines.GetPipelineRequest) (*pipelines.GetPipelineResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *pipelines.GetPipelineResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pipelines.GetPipelineRequest) (*pipelines.GetPipelineResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pipelines.GetPipelineRequest) *pipelines.GetPipelineResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pipelines.GetPipelineResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, pipelines.GetPipelineRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPipelinesAPIInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockPipelinesAPIInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - request pipelines.GetPipelineRequest
func (_e *MockPipelinesAPIInterface_Expecter) Get(ctx interface{}, request interface{}) *MockPipelinesAPIInterface_Get_Call {
	return &MockPipelinesAPIInterface_Get_Call{Call: _e.mock.On("Get", ctx, request)}
}

func (_c *MockPipelinesAPIInterface_Get_Call) Run(run func(ctx context.Context, request pipelines.GetPipelineRequest)) *MockPipelinesAPIInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pipelines.GetPipelineRequest))
	})
	return _c
}

func (_c *MockPipelinesAPIInterface_Get_Call) Return(_a0 *pipelines.GetPipelineResponse, _a1 error) *MockPipelinesAPIInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPipelinesAPIInterface_Get_Call) RunAndReturn(run func(context.Context, pipelines.GetPipelineRequest) (*pipelines.GetPipelineResponse, error)) *MockPipelinesAPIInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByName provides a mock function with given fields: ctx, name
func (_m *MockPipelinesAPIInterface) GetByName(ctx context.Context, name string) (*pipelines.PipelineStateInfo, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetByName")
	}

	var r0 *pipelines.PipelineStateInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*pipelines.PipelineStateInfo, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *pipelines.PipelineStateInfo); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pipelines.PipelineStateInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPipelinesAPIInterface_GetByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByName'
type MockPipelinesAPIInterface_GetByName_Call struct {
	*mock.Call
}

// GetByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockPipelinesAPIInterface_Expecter) GetByName(ctx interface{}, name interface{}) *MockPipelinesAPIInterface_GetByName_Call {
	return &MockPipelinesAPIInterface_GetByName_Call{Call: _e.mock.On("GetByName", ctx, name)}
}

func (_c *MockPipelinesAPIInterface_GetByName_Call) Run(run func(ctx context.Context, name string)) *MockPipelinesAPIInterface_GetByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockPipelinesAPIInterface_GetByName_Call) Return(_a0 *pipelines.PipelineStateInfo, _a1 error) *MockPipelinesAPIInterface_GetByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPipelinesAPIInterface_GetByName_Call) RunAndReturn(run func(context.Context, string) (*pipelines.PipelineStateInfo, error)) *MockPipelinesAPIInterface_GetByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetByPipelineId provides a mock function with given fields: ctx, pipelineId
func (_m *MockPipelinesAPIInterface) GetByPipelineId(ctx context.Context, pipelineId string) (*pipelines.GetPipelineResponse, error) {
	ret := _m.Called(ctx, pipelineId)

	if len(ret) == 0 {
		panic("no return value specified for GetByPipelineId")
	}

	var r0 *pipelines.GetPipelineResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*pipelines.GetPipelineResponse, error)); ok {
		return rf(ctx, pipelineId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *pipelines.GetPipelineResponse); ok {
		r0 = rf(ctx, pipelineId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pipelines.GetPipelineResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, pipelineId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPipelinesAPIInterface_GetByPipelineId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByPipelineId'
type MockPipelinesAPIInterface_GetByPipelineId_Call struct {
	*mock.Call
}

// GetByPipelineId is a helper method to define mock.On call
//   - ctx context.Context
//   - pipelineId string
func (_e *MockPipelinesAPIInterface_Expecter) GetByPipelineId(ctx interface{}, pipelineId interface{}) *MockPipelinesAPIInterface_GetByPipelineId_Call {
	return &MockPipelinesAPIInterface_GetByPipelineId_Call{Call: _e.mock.On("GetByPipelineId", ctx, pipelineId)}
}

func (_c *MockPipelinesAPIInterface_GetByPipelineId_Call) Run(run func(ctx context.Context, pipelineId string)) *MockPipelinesAPIInterface_GetByPipelineId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockPipelinesAPIInterface_GetByPipelineId_Call) Return(_a0 *pipelines.GetPipelineResponse, _a1 error) *MockPipelinesAPIInterface_GetByPipelineId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPipelinesAPIInterface_GetByPipelineId_Call) RunAndReturn(run func(context.Context, string) (*pipelines.GetPipelineResponse, error)) *MockPipelinesAPIInterface_GetByPipelineId_Call {
	_c.Call.Return(run)
	return _c
}

// GetPermissionLevels provides a mock function with given fields: ctx, request
func (_m *MockPipelinesAPIInterface) GetPermissionLevels(ctx context.Context, request pipelines.GetPipelinePermissionLevelsRequest) (*pipelines.GetPipelinePermissionLevelsResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetPermissionLevels")
	}

	var r0 *pipelines.GetPipelinePermissionLevelsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pipelines.GetPipelinePermissionLevelsRequest) (*pipelines.GetPipelinePermissionLevelsResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pipelines.GetPipelinePermissionLevelsRequest) *pipelines.GetPipelinePermissionLevelsResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pipelines.GetPipelinePermissionLevelsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, pipelines.GetPipelinePermissionLevelsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPipelinesAPIInterface_GetPermissionLevels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPermissionLevels'
type MockPipelinesAPIInterface_GetPermissionLevels_Call struct {
	*mock.Call
}

// GetPermissionLevels is a helper method to define mock.On call
//   - ctx context.Context
//   - request pipelines.GetPipelinePermissionLevelsRequest
func (_e *MockPipelinesAPIInterface_Expecter) GetPermissionLevels(ctx interface{}, request interface{}) *MockPipelinesAPIInterface_GetPermissionLevels_Call {
	return &MockPipelinesAPIInterface_GetPermissionLevels_Call{Call: _e.mock.On("GetPermissionLevels", ctx, request)}
}

func (_c *MockPipelinesAPIInterface_GetPermissionLevels_Call) Run(run func(ctx context.Context, request pipelines.GetPipelinePermissionLevelsRequest)) *MockPipelinesAPIInterface_GetPermissionLevels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pipelines.GetPipelinePermissionLevelsRequest))
	})
	return _c
}

func (_c *MockPipelinesAPIInterface_GetPermissionLevels_Call) Return(_a0 *pipelines.GetPipelinePermissionLevelsResponse, _a1 error) *MockPipelinesAPIInterface_GetPermissionLevels_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPipelinesAPIInterface_GetPermissionLevels_Call) RunAndReturn(run func(context.Context, pipelines.GetPipelinePermissionLevelsRequest) (*pipelines.GetPipelinePermissionLevelsResponse, error)) *MockPipelinesAPIInterface_GetPermissionLevels_Call {
	_c.Call.Return(run)
	return _c
}

// GetPermissionLevelsByPipelineId provides a mock function with given fields: ctx, pipelineId
func (_m *MockPipelinesAPIInterface) GetPermissionLevelsByPipelineId(ctx context.Context, pipelineId string) (*pipelines.GetPipelinePermissionLevelsResponse, error) {
	ret := _m.Called(ctx, pipelineId)

	if len(ret) == 0 {
		panic("no return value specified for GetPermissionLevelsByPipelineId")
	}

	var r0 *pipelines.GetPipelinePermissionLevelsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*pipelines.GetPipelinePermissionLevelsResponse, error)); ok {
		return rf(ctx, pipelineId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *pipelines.GetPipelinePermissionLevelsResponse); ok {
		r0 = rf(ctx, pipelineId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pipelines.GetPipelinePermissionLevelsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, pipelineId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPipelinesAPIInterface_GetPermissionLevelsByPipelineId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPermissionLevelsByPipelineId'
type MockPipelinesAPIInterface_GetPermissionLevelsByPipelineId_Call struct {
	*mock.Call
}

// GetPermissionLevelsByPipelineId is a helper method to define mock.On call
//   - ctx context.Context
//   - pipelineId string
func (_e *MockPipelinesAPIInterface_Expecter) GetPermissionLevelsByPipelineId(ctx interface{}, pipelineId interface{}) *MockPipelinesAPIInterface_GetPermissionLevelsByPipelineId_Call {
	return &MockPipelinesAPIInterface_GetPermissionLevelsByPipelineId_Call{Call: _e.mock.On("GetPermissionLevelsByPipelineId", ctx, pipelineId)}
}

func (_c *MockPipelinesAPIInterface_GetPermissionLevelsByPipelineId_Call) Run(run func(ctx context.Context, pipelineId string)) *MockPipelinesAPIInterface_GetPermissionLevelsByPipelineId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockPipelinesAPIInterface_GetPermissionLevelsByPipelineId_Call) Return(_a0 *pipelines.GetPipelinePermissionLevelsResponse, _a1 error) *MockPipelinesAPIInterface_GetPermissionLevelsByPipelineId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPipelinesAPIInterface_GetPermissionLevelsByPipelineId_Call) RunAndReturn(run func(context.Context, string) (*pipelines.GetPipelinePermissionLevelsResponse, error)) *MockPipelinesAPIInterface_GetPermissionLevelsByPipelineId_Call {
	_c.Call.Return(run)
	return _c
}

// GetPermissions provides a mock function with given fields: ctx, request
func (_m *MockPipelinesAPIInterface) GetPermissions(ctx context.Context, request pipelines.GetPipelinePermissionsRequest) (*pipelines.PipelinePermissions, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetPermissions")
	}

	var r0 *pipelines.PipelinePermissions
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pipelines.GetPipelinePermissionsRequest) (*pipelines.PipelinePermissions, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pipelines.GetPipelinePermissionsRequest) *pipelines.PipelinePermissions); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pipelines.PipelinePermissions)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, pipelines.GetPipelinePermissionsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPipelinesAPIInterface_GetPermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPermissions'
type MockPipelinesAPIInterface_GetPermissions_Call struct {
	*mock.Call
}

// GetPermissions is a helper method to define mock.On call
//   - ctx context.Context
//   - request pipelines.GetPipelinePermissionsRequest
func (_e *MockPipelinesAPIInterface_Expecter) GetPermissions(ctx interface{}, request interface{}) *MockPipelinesAPIInterface_GetPermissions_Call {
	return &MockPipelinesAPIInterface_GetPermissions_Call{Call: _e.mock.On("GetPermissions", ctx, request)}
}

func (_c *MockPipelinesAPIInterface_GetPermissions_Call) Run(run func(ctx context.Context, request pipelines.GetPipelinePermissionsRequest)) *MockPipelinesAPIInterface_GetPermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pipelines.GetPipelinePermissionsRequest))
	})
	return _c
}

func (_c *MockPipelinesAPIInterface_GetPermissions_Call) Return(_a0 *pipelines.PipelinePermissions, _a1 error) *MockPipelinesAPIInterface_GetPermissions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPipelinesAPIInterface_GetPermissions_Call) RunAndReturn(run func(context.Context, pipelines.GetPipelinePermissionsRequest) (*pipelines.PipelinePermissions, error)) *MockPipelinesAPIInterface_GetPermissions_Call {
	_c.Call.Return(run)
	return _c
}

// GetPermissionsByPipelineId provides a mock function with given fields: ctx, pipelineId
func (_m *MockPipelinesAPIInterface) GetPermissionsByPipelineId(ctx context.Context, pipelineId string) (*pipelines.PipelinePermissions, error) {
	ret := _m.Called(ctx, pipelineId)

	if len(ret) == 0 {
		panic("no return value specified for GetPermissionsByPipelineId")
	}

	var r0 *pipelines.PipelinePermissions
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*pipelines.PipelinePermissions, error)); ok {
		return rf(ctx, pipelineId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *pipelines.PipelinePermissions); ok {
		r0 = rf(ctx, pipelineId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pipelines.PipelinePermissions)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, pipelineId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPipelinesAPIInterface_GetPermissionsByPipelineId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPermissionsByPipelineId'
type MockPipelinesAPIInterface_GetPermissionsByPipelineId_Call struct {
	*mock.Call
}

// GetPermissionsByPipelineId is a helper method to define mock.On call
//   - ctx context.Context
//   - pipelineId string
func (_e *MockPipelinesAPIInterface_Expecter) GetPermissionsByPipelineId(ctx interface{}, pipelineId interface{}) *MockPipelinesAPIInterface_GetPermissionsByPipelineId_Call {
	return &MockPipelinesAPIInterface_GetPermissionsByPipelineId_Call{Call: _e.mock.On("GetPermissionsByPipelineId", ctx, pipelineId)}
}

func (_c *MockPipelinesAPIInterface_GetPermissionsByPipelineId_Call) Run(run func(ctx context.Context, pipelineId string)) *MockPipelinesAPIInterface_GetPermissionsByPipelineId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockPipelinesAPIInterface_GetPermissionsByPipelineId_Call) Return(_a0 *pipelines.PipelinePermissions, _a1 error) *MockPipelinesAPIInterface_GetPermissionsByPipelineId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPipelinesAPIInterface_GetPermissionsByPipelineId_Call) RunAndReturn(run func(context.Context, string) (*pipelines.PipelinePermissions, error)) *MockPipelinesAPIInterface_GetPermissionsByPipelineId_Call {
	_c.Call.Return(run)
	return _c
}

// GetUpdate provides a mock function with given fields: ctx, request
func (_m *MockPipelinesAPIInterface) GetUpdate(ctx context.Context, request pipelines.GetUpdateRequest) (*pipelines.GetUpdateResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetUpdate")
	}

	var r0 *pipelines.GetUpdateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pipelines.GetUpdateRequest) (*pipelines.GetUpdateResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pipelines.GetUpdateRequest) *pipelines.GetUpdateResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pipelines.GetUpdateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, pipelines.GetUpdateRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPipelinesAPIInterface_GetUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUpdate'
type MockPipelinesAPIInterface_GetUpdate_Call struct {
	*mock.Call
}

// GetUpdate is a helper method to define mock.On call
//   - ctx context.Context
//   - request pipelines.GetUpdateRequest
func (_e *MockPipelinesAPIInterface_Expecter) GetUpdate(ctx interface{}, request interface{}) *MockPipelinesAPIInterface_GetUpdate_Call {
	return &MockPipelinesAPIInterface_GetUpdate_Call{Call: _e.mock.On("GetUpdate", ctx, request)}
}

func (_c *MockPipelinesAPIInterface_GetUpdate_Call) Run(run func(ctx context.Context, request pipelines.GetUpdateRequest)) *MockPipelinesAPIInterface_GetUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pipelines.GetUpdateRequest))
	})
	return _c
}

func (_c *MockPipelinesAPIInterface_GetUpdate_Call) Return(_a0 *pipelines.GetUpdateResponse, _a1 error) *MockPipelinesAPIInterface_GetUpdate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPipelinesAPIInterface_GetUpdate_Call) RunAndReturn(run func(context.Context, pipelines.GetUpdateRequest) (*pipelines.GetUpdateResponse, error)) *MockPipelinesAPIInterface_GetUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// GetUpdateByPipelineIdAndUpdateId provides a mock function with given fields: ctx, pipelineId, updateId
func (_m *MockPipelinesAPIInterface) GetUpdateByPipelineIdAndUpdateId(ctx context.Context, pipelineId string, updateId string) (*pipelines.GetUpdateResponse, error) {
	ret := _m.Called(ctx, pipelineId, updateId)

	if len(ret) == 0 {
		panic("no return value specified for GetUpdateByPipelineIdAndUpdateId")
	}

	var r0 *pipelines.GetUpdateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*pipelines.GetUpdateResponse, error)); ok {
		return rf(ctx, pipelineId, updateId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *pipelines.GetUpdateResponse); ok {
		r0 = rf(ctx, pipelineId, updateId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pipelines.GetUpdateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, pipelineId, updateId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPipelinesAPIInterface_GetUpdateByPipelineIdAndUpdateId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUpdateByPipelineIdAndUpdateId'
type MockPipelinesAPIInterface_GetUpdateByPipelineIdAndUpdateId_Call struct {
	*mock.Call
}

// GetUpdateByPipelineIdAndUpdateId is a helper method to define mock.On call
//   - ctx context.Context
//   - pipelineId string
//   - updateId string
func (_e *MockPipelinesAPIInterface_Expecter) GetUpdateByPipelineIdAndUpdateId(ctx interface{}, pipelineId interface{}, updateId interface{}) *MockPipelinesAPIInterface_GetUpdateByPipelineIdAndUpdateId_Call {
	return &MockPipelinesAPIInterface_GetUpdateByPipelineIdAndUpdateId_Call{Call: _e.mock.On("GetUpdateByPipelineIdAndUpdateId", ctx, pipelineId, updateId)}
}

func (_c *MockPipelinesAPIInterface_GetUpdateByPipelineIdAndUpdateId_Call) Run(run func(ctx context.Context, pipelineId string, updateId string)) *MockPipelinesAPIInterface_GetUpdateByPipelineIdAndUpdateId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockPipelinesAPIInterface_GetUpdateByPipelineIdAndUpdateId_Call) Return(_a0 *pipelines.GetUpdateResponse, _a1 error) *MockPipelinesAPIInterface_GetUpdateByPipelineIdAndUpdateId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPipelinesAPIInterface_GetUpdateByPipelineIdAndUpdateId_Call) RunAndReturn(run func(context.Context, string, string) (*pipelines.GetUpdateResponse, error)) *MockPipelinesAPIInterface_GetUpdateByPipelineIdAndUpdateId_Call {
	_c.Call.Return(run)
	return _c
}

// Impl provides a mock function with given fields:
func (_m *MockPipelinesAPIInterface) Impl() pipelines.PipelinesService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 pipelines.PipelinesService
	if rf, ok := ret.Get(0).(func() pipelines.PipelinesService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pipelines.PipelinesService)
		}
	}

	return r0
}

// MockPipelinesAPIInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockPipelinesAPIInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockPipelinesAPIInterface_Expecter) Impl() *MockPipelinesAPIInterface_Impl_Call {
	return &MockPipelinesAPIInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockPipelinesAPIInterface_Impl_Call) Run(run func()) *MockPipelinesAPIInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPipelinesAPIInterface_Impl_Call) Return(_a0 pipelines.PipelinesService) *MockPipelinesAPIInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPipelinesAPIInterface_Impl_Call) RunAndReturn(run func() pipelines.PipelinesService) *MockPipelinesAPIInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// ListPipelineEvents provides a mock function with given fields: ctx, request
func (_m *MockPipelinesAPIInterface) ListPipelineEvents(ctx context.Context, request pipelines.ListPipelineEventsRequest) *listing.PaginatingIterator[pipelines.ListPipelineEventsRequest, *pipelines.ListPipelineEventsResponse, pipelines.PipelineEvent] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListPipelineEvents")
	}

	var r0 *listing.PaginatingIterator[pipelines.ListPipelineEventsRequest, *pipelines.ListPipelineEventsResponse, pipelines.PipelineEvent]
	if rf, ok := ret.Get(0).(func(context.Context, pipelines.ListPipelineEventsRequest) *listing.PaginatingIterator[pipelines.ListPipelineEventsRequest, *pipelines.ListPipelineEventsResponse, pipelines.PipelineEvent]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*listing.PaginatingIterator[pipelines.ListPipelineEventsRequest, *pipelines.ListPipelineEventsResponse, pipelines.PipelineEvent])
		}
	}

	return r0
}

// MockPipelinesAPIInterface_ListPipelineEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPipelineEvents'
type MockPipelinesAPIInterface_ListPipelineEvents_Call struct {
	*mock.Call
}

// ListPipelineEvents is a helper method to define mock.On call
//   - ctx context.Context
//   - request pipelines.ListPipelineEventsRequest
func (_e *MockPipelinesAPIInterface_Expecter) ListPipelineEvents(ctx interface{}, request interface{}) *MockPipelinesAPIInterface_ListPipelineEvents_Call {
	return &MockPipelinesAPIInterface_ListPipelineEvents_Call{Call: _e.mock.On("ListPipelineEvents", ctx, request)}
}

func (_c *MockPipelinesAPIInterface_ListPipelineEvents_Call) Run(run func(ctx context.Context, request pipelines.ListPipelineEventsRequest)) *MockPipelinesAPIInterface_ListPipelineEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pipelines.ListPipelineEventsRequest))
	})
	return _c
}

func (_c *MockPipelinesAPIInterface_ListPipelineEvents_Call) Return(_a0 *listing.PaginatingIterator[pipelines.ListPipelineEventsRequest, *pipelines.ListPipelineEventsResponse, pipelines.PipelineEvent]) *MockPipelinesAPIInterface_ListPipelineEvents_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPipelinesAPIInterface_ListPipelineEvents_Call) RunAndReturn(run func(context.Context, pipelines.ListPipelineEventsRequest) *listing.PaginatingIterator[pipelines.ListPipelineEventsRequest, *pipelines.ListPipelineEventsResponse, pipelines.PipelineEvent]) *MockPipelinesAPIInterface_ListPipelineEvents_Call {
	_c.Call.Return(run)
	return _c
}

// ListPipelineEventsAll provides a mock function with given fields: ctx, request
func (_m *MockPipelinesAPIInterface) ListPipelineEventsAll(ctx context.Context, request pipelines.ListPipelineEventsRequest) ([]pipelines.PipelineEvent, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListPipelineEventsAll")
	}

	var r0 []pipelines.PipelineEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pipelines.ListPipelineEventsRequest) ([]pipelines.PipelineEvent, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pipelines.ListPipelineEventsRequest) []pipelines.PipelineEvent); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]pipelines.PipelineEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, pipelines.ListPipelineEventsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPipelinesAPIInterface_ListPipelineEventsAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPipelineEventsAll'
type MockPipelinesAPIInterface_ListPipelineEventsAll_Call struct {
	*mock.Call
}

// ListPipelineEventsAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request pipelines.ListPipelineEventsRequest
func (_e *MockPipelinesAPIInterface_Expecter) ListPipelineEventsAll(ctx interface{}, request interface{}) *MockPipelinesAPIInterface_ListPipelineEventsAll_Call {
	return &MockPipelinesAPIInterface_ListPipelineEventsAll_Call{Call: _e.mock.On("ListPipelineEventsAll", ctx, request)}
}

func (_c *MockPipelinesAPIInterface_ListPipelineEventsAll_Call) Run(run func(ctx context.Context, request pipelines.ListPipelineEventsRequest)) *MockPipelinesAPIInterface_ListPipelineEventsAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pipelines.ListPipelineEventsRequest))
	})
	return _c
}

func (_c *MockPipelinesAPIInterface_ListPipelineEventsAll_Call) Return(_a0 []pipelines.PipelineEvent, _a1 error) *MockPipelinesAPIInterface_ListPipelineEventsAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPipelinesAPIInterface_ListPipelineEventsAll_Call) RunAndReturn(run func(context.Context, pipelines.ListPipelineEventsRequest) ([]pipelines.PipelineEvent, error)) *MockPipelinesAPIInterface_ListPipelineEventsAll_Call {
	_c.Call.Return(run)
	return _c
}

// ListPipelineEventsByPipelineId provides a mock function with given fields: ctx, pipelineId
func (_m *MockPipelinesAPIInterface) ListPipelineEventsByPipelineId(ctx context.Context, pipelineId string) (*pipelines.ListPipelineEventsResponse, error) {
	ret := _m.Called(ctx, pipelineId)

	if len(ret) == 0 {
		panic("no return value specified for ListPipelineEventsByPipelineId")
	}

	var r0 *pipelines.ListPipelineEventsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*pipelines.ListPipelineEventsResponse, error)); ok {
		return rf(ctx, pipelineId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *pipelines.ListPipelineEventsResponse); ok {
		r0 = rf(ctx, pipelineId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pipelines.ListPipelineEventsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, pipelineId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPipelinesAPIInterface_ListPipelineEventsByPipelineId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPipelineEventsByPipelineId'
type MockPipelinesAPIInterface_ListPipelineEventsByPipelineId_Call struct {
	*mock.Call
}

// ListPipelineEventsByPipelineId is a helper method to define mock.On call
//   - ctx context.Context
//   - pipelineId string
func (_e *MockPipelinesAPIInterface_Expecter) ListPipelineEventsByPipelineId(ctx interface{}, pipelineId interface{}) *MockPipelinesAPIInterface_ListPipelineEventsByPipelineId_Call {
	return &MockPipelinesAPIInterface_ListPipelineEventsByPipelineId_Call{Call: _e.mock.On("ListPipelineEventsByPipelineId", ctx, pipelineId)}
}

func (_c *MockPipelinesAPIInterface_ListPipelineEventsByPipelineId_Call) Run(run func(ctx context.Context, pipelineId string)) *MockPipelinesAPIInterface_ListPipelineEventsByPipelineId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockPipelinesAPIInterface_ListPipelineEventsByPipelineId_Call) Return(_a0 *pipelines.ListPipelineEventsResponse, _a1 error) *MockPipelinesAPIInterface_ListPipelineEventsByPipelineId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPipelinesAPIInterface_ListPipelineEventsByPipelineId_Call) RunAndReturn(run func(context.Context, string) (*pipelines.ListPipelineEventsResponse, error)) *MockPipelinesAPIInterface_ListPipelineEventsByPipelineId_Call {
	_c.Call.Return(run)
	return _c
}

// ListPipelines provides a mock function with given fields: ctx, request
func (_m *MockPipelinesAPIInterface) ListPipelines(ctx context.Context, request pipelines.ListPipelinesRequest) *listing.PaginatingIterator[pipelines.ListPipelinesRequest, *pipelines.ListPipelinesResponse, pipelines.PipelineStateInfo] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListPipelines")
	}

	var r0 *listing.PaginatingIterator[pipelines.ListPipelinesRequest, *pipelines.ListPipelinesResponse, pipelines.PipelineStateInfo]
	if rf, ok := ret.Get(0).(func(context.Context, pipelines.ListPipelinesRequest) *listing.PaginatingIterator[pipelines.ListPipelinesRequest, *pipelines.ListPipelinesResponse, pipelines.PipelineStateInfo]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*listing.PaginatingIterator[pipelines.ListPipelinesRequest, *pipelines.ListPipelinesResponse, pipelines.PipelineStateInfo])
		}
	}

	return r0
}

// MockPipelinesAPIInterface_ListPipelines_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPipelines'
type MockPipelinesAPIInterface_ListPipelines_Call struct {
	*mock.Call
}

// ListPipelines is a helper method to define mock.On call
//   - ctx context.Context
//   - request pipelines.ListPipelinesRequest
func (_e *MockPipelinesAPIInterface_Expecter) ListPipelines(ctx interface{}, request interface{}) *MockPipelinesAPIInterface_ListPipelines_Call {
	return &MockPipelinesAPIInterface_ListPipelines_Call{Call: _e.mock.On("ListPipelines", ctx, request)}
}

func (_c *MockPipelinesAPIInterface_ListPipelines_Call) Run(run func(ctx context.Context, request pipelines.ListPipelinesRequest)) *MockPipelinesAPIInterface_ListPipelines_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pipelines.ListPipelinesRequest))
	})
	return _c
}

func (_c *MockPipelinesAPIInterface_ListPipelines_Call) Return(_a0 *listing.PaginatingIterator[pipelines.ListPipelinesRequest, *pipelines.ListPipelinesResponse, pipelines.PipelineStateInfo]) *MockPipelinesAPIInterface_ListPipelines_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPipelinesAPIInterface_ListPipelines_Call) RunAndReturn(run func(context.Context, pipelines.ListPipelinesRequest) *listing.PaginatingIterator[pipelines.ListPipelinesRequest, *pipelines.ListPipelinesResponse, pipelines.PipelineStateInfo]) *MockPipelinesAPIInterface_ListPipelines_Call {
	_c.Call.Return(run)
	return _c
}

// ListPipelinesAll provides a mock function with given fields: ctx, request
func (_m *MockPipelinesAPIInterface) ListPipelinesAll(ctx context.Context, request pipelines.ListPipelinesRequest) ([]pipelines.PipelineStateInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListPipelinesAll")
	}

	var r0 []pipelines.PipelineStateInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pipelines.ListPipelinesRequest) ([]pipelines.PipelineStateInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pipelines.ListPipelinesRequest) []pipelines.PipelineStateInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]pipelines.PipelineStateInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, pipelines.ListPipelinesRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPipelinesAPIInterface_ListPipelinesAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPipelinesAll'
type MockPipelinesAPIInterface_ListPipelinesAll_Call struct {
	*mock.Call
}

// ListPipelinesAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request pipelines.ListPipelinesRequest
func (_e *MockPipelinesAPIInterface_Expecter) ListPipelinesAll(ctx interface{}, request interface{}) *MockPipelinesAPIInterface_ListPipelinesAll_Call {
	return &MockPipelinesAPIInterface_ListPipelinesAll_Call{Call: _e.mock.On("ListPipelinesAll", ctx, request)}
}

func (_c *MockPipelinesAPIInterface_ListPipelinesAll_Call) Run(run func(ctx context.Context, request pipelines.ListPipelinesRequest)) *MockPipelinesAPIInterface_ListPipelinesAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pipelines.ListPipelinesRequest))
	})
	return _c
}

func (_c *MockPipelinesAPIInterface_ListPipelinesAll_Call) Return(_a0 []pipelines.PipelineStateInfo, _a1 error) *MockPipelinesAPIInterface_ListPipelinesAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPipelinesAPIInterface_ListPipelinesAll_Call) RunAndReturn(run func(context.Context, pipelines.ListPipelinesRequest) ([]pipelines.PipelineStateInfo, error)) *MockPipelinesAPIInterface_ListPipelinesAll_Call {
	_c.Call.Return(run)
	return _c
}

// ListUpdates provides a mock function with given fields: ctx, request
func (_m *MockPipelinesAPIInterface) ListUpdates(ctx context.Context, request pipelines.ListUpdatesRequest) (*pipelines.ListUpdatesResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListUpdates")
	}

	var r0 *pipelines.ListUpdatesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pipelines.ListUpdatesRequest) (*pipelines.ListUpdatesResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pipelines.ListUpdatesRequest) *pipelines.ListUpdatesResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pipelines.ListUpdatesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, pipelines.ListUpdatesRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPipelinesAPIInterface_ListUpdates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUpdates'
type MockPipelinesAPIInterface_ListUpdates_Call struct {
	*mock.Call
}

// ListUpdates is a helper method to define mock.On call
//   - ctx context.Context
//   - request pipelines.ListUpdatesRequest
func (_e *MockPipelinesAPIInterface_Expecter) ListUpdates(ctx interface{}, request interface{}) *MockPipelinesAPIInterface_ListUpdates_Call {
	return &MockPipelinesAPIInterface_ListUpdates_Call{Call: _e.mock.On("ListUpdates", ctx, request)}
}

func (_c *MockPipelinesAPIInterface_ListUpdates_Call) Run(run func(ctx context.Context, request pipelines.ListUpdatesRequest)) *MockPipelinesAPIInterface_ListUpdates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pipelines.ListUpdatesRequest))
	})
	return _c
}

func (_c *MockPipelinesAPIInterface_ListUpdates_Call) Return(_a0 *pipelines.ListUpdatesResponse, _a1 error) *MockPipelinesAPIInterface_ListUpdates_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPipelinesAPIInterface_ListUpdates_Call) RunAndReturn(run func(context.Context, pipelines.ListUpdatesRequest) (*pipelines.ListUpdatesResponse, error)) *MockPipelinesAPIInterface_ListUpdates_Call {
	_c.Call.Return(run)
	return _c
}

// ListUpdatesByPipelineId provides a mock function with given fields: ctx, pipelineId
func (_m *MockPipelinesAPIInterface) ListUpdatesByPipelineId(ctx context.Context, pipelineId string) (*pipelines.ListUpdatesResponse, error) {
	ret := _m.Called(ctx, pipelineId)

	if len(ret) == 0 {
		panic("no return value specified for ListUpdatesByPipelineId")
	}

	var r0 *pipelines.ListUpdatesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*pipelines.ListUpdatesResponse, error)); ok {
		return rf(ctx, pipelineId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *pipelines.ListUpdatesResponse); ok {
		r0 = rf(ctx, pipelineId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pipelines.ListUpdatesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, pipelineId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPipelinesAPIInterface_ListUpdatesByPipelineId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUpdatesByPipelineId'
type MockPipelinesAPIInterface_ListUpdatesByPipelineId_Call struct {
	*mock.Call
}

// ListUpdatesByPipelineId is a helper method to define mock.On call
//   - ctx context.Context
//   - pipelineId string
func (_e *MockPipelinesAPIInterface_Expecter) ListUpdatesByPipelineId(ctx interface{}, pipelineId interface{}) *MockPipelinesAPIInterface_ListUpdatesByPipelineId_Call {
	return &MockPipelinesAPIInterface_ListUpdatesByPipelineId_Call{Call: _e.mock.On("ListUpdatesByPipelineId", ctx, pipelineId)}
}

func (_c *MockPipelinesAPIInterface_ListUpdatesByPipelineId_Call) Run(run func(ctx context.Context, pipelineId string)) *MockPipelinesAPIInterface_ListUpdatesByPipelineId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockPipelinesAPIInterface_ListUpdatesByPipelineId_Call) Return(_a0 *pipelines.ListUpdatesResponse, _a1 error) *MockPipelinesAPIInterface_ListUpdatesByPipelineId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPipelinesAPIInterface_ListUpdatesByPipelineId_Call) RunAndReturn(run func(context.Context, string) (*pipelines.ListUpdatesResponse, error)) *MockPipelinesAPIInterface_ListUpdatesByPipelineId_Call {
	_c.Call.Return(run)
	return _c
}

// PipelineStateInfoNameToPipelineIdMap provides a mock function with given fields: ctx, request
func (_m *MockPipelinesAPIInterface) PipelineStateInfoNameToPipelineIdMap(ctx context.Context, request pipelines.ListPipelinesRequest) (map[string]string, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for PipelineStateInfoNameToPipelineIdMap")
	}

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pipelines.ListPipelinesRequest) (map[string]string, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pipelines.ListPipelinesRequest) map[string]string); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, pipelines.ListPipelinesRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPipelinesAPIInterface_PipelineStateInfoNameToPipelineIdMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PipelineStateInfoNameToPipelineIdMap'
type MockPipelinesAPIInterface_PipelineStateInfoNameToPipelineIdMap_Call struct {
	*mock.Call
}

// PipelineStateInfoNameToPipelineIdMap is a helper method to define mock.On call
//   - ctx context.Context
//   - request pipelines.ListPipelinesRequest
func (_e *MockPipelinesAPIInterface_Expecter) PipelineStateInfoNameToPipelineIdMap(ctx interface{}, request interface{}) *MockPipelinesAPIInterface_PipelineStateInfoNameToPipelineIdMap_Call {
	return &MockPipelinesAPIInterface_PipelineStateInfoNameToPipelineIdMap_Call{Call: _e.mock.On("PipelineStateInfoNameToPipelineIdMap", ctx, request)}
}

func (_c *MockPipelinesAPIInterface_PipelineStateInfoNameToPipelineIdMap_Call) Run(run func(ctx context.Context, request pipelines.ListPipelinesRequest)) *MockPipelinesAPIInterface_PipelineStateInfoNameToPipelineIdMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pipelines.ListPipelinesRequest))
	})
	return _c
}

func (_c *MockPipelinesAPIInterface_PipelineStateInfoNameToPipelineIdMap_Call) Return(_a0 map[string]string, _a1 error) *MockPipelinesAPIInterface_PipelineStateInfoNameToPipelineIdMap_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPipelinesAPIInterface_PipelineStateInfoNameToPipelineIdMap_Call) RunAndReturn(run func(context.Context, pipelines.ListPipelinesRequest) (map[string]string, error)) *MockPipelinesAPIInterface_PipelineStateInfoNameToPipelineIdMap_Call {
	_c.Call.Return(run)
	return _c
}

// Reset provides a mock function with given fields: ctx, resetRequest
func (_m *MockPipelinesAPIInterface) Reset(ctx context.Context, resetRequest pipelines.ResetRequest) (*pipelines.WaitGetPipelineRunning[interface{}], error) {
	ret := _m.Called(ctx, resetRequest)

	if len(ret) == 0 {
		panic("no return value specified for Reset")
	}

	var r0 *pipelines.WaitGetPipelineRunning[interface{}]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pipelines.ResetRequest) (*pipelines.WaitGetPipelineRunning[interface{}], error)); ok {
		return rf(ctx, resetRequest)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pipelines.ResetRequest) *pipelines.WaitGetPipelineRunning[interface{}]); ok {
		r0 = rf(ctx, resetRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pipelines.WaitGetPipelineRunning[interface{}])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, pipelines.ResetRequest) error); ok {
		r1 = rf(ctx, resetRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPipelinesAPIInterface_Reset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reset'
type MockPipelinesAPIInterface_Reset_Call struct {
	*mock.Call
}

// Reset is a helper method to define mock.On call
//   - ctx context.Context
//   - resetRequest pipelines.ResetRequest
func (_e *MockPipelinesAPIInterface_Expecter) Reset(ctx interface{}, resetRequest interface{}) *MockPipelinesAPIInterface_Reset_Call {
	return &MockPipelinesAPIInterface_Reset_Call{Call: _e.mock.On("Reset", ctx, resetRequest)}
}

func (_c *MockPipelinesAPIInterface_Reset_Call) Run(run func(ctx context.Context, resetRequest pipelines.ResetRequest)) *MockPipelinesAPIInterface_Reset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pipelines.ResetRequest))
	})
	return _c
}

func (_c *MockPipelinesAPIInterface_Reset_Call) Return(_a0 *pipelines.WaitGetPipelineRunning[interface{}], _a1 error) *MockPipelinesAPIInterface_Reset_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPipelinesAPIInterface_Reset_Call) RunAndReturn(run func(context.Context, pipelines.ResetRequest) (*pipelines.WaitGetPipelineRunning[interface{}], error)) *MockPipelinesAPIInterface_Reset_Call {
	_c.Call.Return(run)
	return _c
}

// ResetAndWait provides a mock function with given fields: ctx, resetRequest, options
func (_m *MockPipelinesAPIInterface) ResetAndWait(ctx context.Context, resetRequest pipelines.ResetRequest, options ...retries.Option[pipelines.GetPipelineResponse]) (*pipelines.GetPipelineResponse, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, resetRequest)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ResetAndWait")
	}

	var r0 *pipelines.GetPipelineResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pipelines.ResetRequest, ...retries.Option[pipelines.GetPipelineResponse]) (*pipelines.GetPipelineResponse, error)); ok {
		return rf(ctx, resetRequest, options...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pipelines.ResetRequest, ...retries.Option[pipelines.GetPipelineResponse]) *pipelines.GetPipelineResponse); ok {
		r0 = rf(ctx, resetRequest, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pipelines.GetPipelineResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, pipelines.ResetRequest, ...retries.Option[pipelines.GetPipelineResponse]) error); ok {
		r1 = rf(ctx, resetRequest, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPipelinesAPIInterface_ResetAndWait_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResetAndWait'
type MockPipelinesAPIInterface_ResetAndWait_Call struct {
	*mock.Call
}

// ResetAndWait is a helper method to define mock.On call
//   - ctx context.Context
//   - resetRequest pipelines.ResetRequest
//   - options ...retries.Option[pipelines.GetPipelineResponse]
func (_e *MockPipelinesAPIInterface_Expecter) ResetAndWait(ctx interface{}, resetRequest interface{}, options ...interface{}) *MockPipelinesAPIInterface_ResetAndWait_Call {
	return &MockPipelinesAPIInterface_ResetAndWait_Call{Call: _e.mock.On("ResetAndWait",
		append([]interface{}{ctx, resetRequest}, options...)...)}
}

func (_c *MockPipelinesAPIInterface_ResetAndWait_Call) Run(run func(ctx context.Context, resetRequest pipelines.ResetRequest, options ...retries.Option[pipelines.GetPipelineResponse])) *MockPipelinesAPIInterface_ResetAndWait_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]retries.Option[pipelines.GetPipelineResponse], len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(retries.Option[pipelines.GetPipelineResponse])
			}
		}
		run(args[0].(context.Context), args[1].(pipelines.ResetRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockPipelinesAPIInterface_ResetAndWait_Call) Return(_a0 *pipelines.GetPipelineResponse, _a1 error) *MockPipelinesAPIInterface_ResetAndWait_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPipelinesAPIInterface_ResetAndWait_Call) RunAndReturn(run func(context.Context, pipelines.ResetRequest, ...retries.Option[pipelines.GetPipelineResponse]) (*pipelines.GetPipelineResponse, error)) *MockPipelinesAPIInterface_ResetAndWait_Call {
	_c.Call.Return(run)
	return _c
}

// SetPermissions provides a mock function with given fields: ctx, request
func (_m *MockPipelinesAPIInterface) SetPermissions(ctx context.Context, request pipelines.PipelinePermissionsRequest) (*pipelines.PipelinePermissions, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for SetPermissions")
	}

	var r0 *pipelines.PipelinePermissions
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pipelines.PipelinePermissionsRequest) (*pipelines.PipelinePermissions, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pipelines.PipelinePermissionsRequest) *pipelines.PipelinePermissions); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pipelines.PipelinePermissions)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, pipelines.PipelinePermissionsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPipelinesAPIInterface_SetPermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetPermissions'
type MockPipelinesAPIInterface_SetPermissions_Call struct {
	*mock.Call
}

// SetPermissions is a helper method to define mock.On call
//   - ctx context.Context
//   - request pipelines.PipelinePermissionsRequest
func (_e *MockPipelinesAPIInterface_Expecter) SetPermissions(ctx interface{}, request interface{}) *MockPipelinesAPIInterface_SetPermissions_Call {
	return &MockPipelinesAPIInterface_SetPermissions_Call{Call: _e.mock.On("SetPermissions", ctx, request)}
}

func (_c *MockPipelinesAPIInterface_SetPermissions_Call) Run(run func(ctx context.Context, request pipelines.PipelinePermissionsRequest)) *MockPipelinesAPIInterface_SetPermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pipelines.PipelinePermissionsRequest))
	})
	return _c
}

func (_c *MockPipelinesAPIInterface_SetPermissions_Call) Return(_a0 *pipelines.PipelinePermissions, _a1 error) *MockPipelinesAPIInterface_SetPermissions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPipelinesAPIInterface_SetPermissions_Call) RunAndReturn(run func(context.Context, pipelines.PipelinePermissionsRequest) (*pipelines.PipelinePermissions, error)) *MockPipelinesAPIInterface_SetPermissions_Call {
	_c.Call.Return(run)
	return _c
}

// StartUpdate provides a mock function with given fields: ctx, request
func (_m *MockPipelinesAPIInterface) StartUpdate(ctx context.Context, request pipelines.StartUpdate) (*pipelines.StartUpdateResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for StartUpdate")
	}

	var r0 *pipelines.StartUpdateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pipelines.StartUpdate) (*pipelines.StartUpdateResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pipelines.StartUpdate) *pipelines.StartUpdateResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pipelines.StartUpdateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, pipelines.StartUpdate) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPipelinesAPIInterface_StartUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartUpdate'
type MockPipelinesAPIInterface_StartUpdate_Call struct {
	*mock.Call
}

// StartUpdate is a helper method to define mock.On call
//   - ctx context.Context
//   - request pipelines.StartUpdate
func (_e *MockPipelinesAPIInterface_Expecter) StartUpdate(ctx interface{}, request interface{}) *MockPipelinesAPIInterface_StartUpdate_Call {
	return &MockPipelinesAPIInterface_StartUpdate_Call{Call: _e.mock.On("StartUpdate", ctx, request)}
}

func (_c *MockPipelinesAPIInterface_StartUpdate_Call) Run(run func(ctx context.Context, request pipelines.StartUpdate)) *MockPipelinesAPIInterface_StartUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pipelines.StartUpdate))
	})
	return _c
}

func (_c *MockPipelinesAPIInterface_StartUpdate_Call) Return(_a0 *pipelines.StartUpdateResponse, _a1 error) *MockPipelinesAPIInterface_StartUpdate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPipelinesAPIInterface_StartUpdate_Call) RunAndReturn(run func(context.Context, pipelines.StartUpdate) (*pipelines.StartUpdateResponse, error)) *MockPipelinesAPIInterface_StartUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with given fields: ctx, stopRequest
func (_m *MockPipelinesAPIInterface) Stop(ctx context.Context, stopRequest pipelines.StopRequest) (*pipelines.WaitGetPipelineIdle[interface{}], error) {
	ret := _m.Called(ctx, stopRequest)

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 *pipelines.WaitGetPipelineIdle[interface{}]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pipelines.StopRequest) (*pipelines.WaitGetPipelineIdle[interface{}], error)); ok {
		return rf(ctx, stopRequest)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pipelines.StopRequest) *pipelines.WaitGetPipelineIdle[interface{}]); ok {
		r0 = rf(ctx, stopRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pipelines.WaitGetPipelineIdle[interface{}])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, pipelines.StopRequest) error); ok {
		r1 = rf(ctx, stopRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPipelinesAPIInterface_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockPipelinesAPIInterface_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
//   - ctx context.Context
//   - stopRequest pipelines.StopRequest
func (_e *MockPipelinesAPIInterface_Expecter) Stop(ctx interface{}, stopRequest interface{}) *MockPipelinesAPIInterface_Stop_Call {
	return &MockPipelinesAPIInterface_Stop_Call{Call: _e.mock.On("Stop", ctx, stopRequest)}
}

func (_c *MockPipelinesAPIInterface_Stop_Call) Run(run func(ctx context.Context, stopRequest pipelines.StopRequest)) *MockPipelinesAPIInterface_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pipelines.StopRequest))
	})
	return _c
}

func (_c *MockPipelinesAPIInterface_Stop_Call) Return(_a0 *pipelines.WaitGetPipelineIdle[interface{}], _a1 error) *MockPipelinesAPIInterface_Stop_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPipelinesAPIInterface_Stop_Call) RunAndReturn(run func(context.Context, pipelines.StopRequest) (*pipelines.WaitGetPipelineIdle[interface{}], error)) *MockPipelinesAPIInterface_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// StopAndWait provides a mock function with given fields: ctx, stopRequest, options
func (_m *MockPipelinesAPIInterface) StopAndWait(ctx context.Context, stopRequest pipelines.StopRequest, options ...retries.Option[pipelines.GetPipelineResponse]) (*pipelines.GetPipelineResponse, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, stopRequest)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopAndWait")
	}

	var r0 *pipelines.GetPipelineResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pipelines.StopRequest, ...retries.Option[pipelines.GetPipelineResponse]) (*pipelines.GetPipelineResponse, error)); ok {
		return rf(ctx, stopRequest, options...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pipelines.StopRequest, ...retries.Option[pipelines.GetPipelineResponse]) *pipelines.GetPipelineResponse); ok {
		r0 = rf(ctx, stopRequest, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pipelines.GetPipelineResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, pipelines.StopRequest, ...retries.Option[pipelines.GetPipelineResponse]) error); ok {
		r1 = rf(ctx, stopRequest, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPipelinesAPIInterface_StopAndWait_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StopAndWait'
type MockPipelinesAPIInterface_StopAndWait_Call struct {
	*mock.Call
}

// StopAndWait is a helper method to define mock.On call
//   - ctx context.Context
//   - stopRequest pipelines.StopRequest
//   - options ...retries.Option[pipelines.GetPipelineResponse]
func (_e *MockPipelinesAPIInterface_Expecter) StopAndWait(ctx interface{}, stopRequest interface{}, options ...interface{}) *MockPipelinesAPIInterface_StopAndWait_Call {
	return &MockPipelinesAPIInterface_StopAndWait_Call{Call: _e.mock.On("StopAndWait",
		append([]interface{}{ctx, stopRequest}, options...)...)}
}

func (_c *MockPipelinesAPIInterface_StopAndWait_Call) Run(run func(ctx context.Context, stopRequest pipelines.StopRequest, options ...retries.Option[pipelines.GetPipelineResponse])) *MockPipelinesAPIInterface_StopAndWait_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]retries.Option[pipelines.GetPipelineResponse], len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(retries.Option[pipelines.GetPipelineResponse])
			}
		}
		run(args[0].(context.Context), args[1].(pipelines.StopRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockPipelinesAPIInterface_StopAndWait_Call) Return(_a0 *pipelines.GetPipelineResponse, _a1 error) *MockPipelinesAPIInterface_StopAndWait_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPipelinesAPIInterface_StopAndWait_Call) RunAndReturn(run func(context.Context, pipelines.StopRequest, ...retries.Option[pipelines.GetPipelineResponse]) (*pipelines.GetPipelineResponse, error)) *MockPipelinesAPIInterface_StopAndWait_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, request
func (_m *MockPipelinesAPIInterface) Update(ctx context.Context, request pipelines.EditPipeline) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, pipelines.EditPipeline) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPipelinesAPIInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockPipelinesAPIInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - request pipelines.EditPipeline
func (_e *MockPipelinesAPIInterface_Expecter) Update(ctx interface{}, request interface{}) *MockPipelinesAPIInterface_Update_Call {
	return &MockPipelinesAPIInterface_Update_Call{Call: _e.mock.On("Update", ctx, request)}
}

func (_c *MockPipelinesAPIInterface_Update_Call) Run(run func(ctx context.Context, request pipelines.EditPipeline)) *MockPipelinesAPIInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pipelines.EditPipeline))
	})
	return _c
}

func (_c *MockPipelinesAPIInterface_Update_Call) Return(_a0 error) *MockPipelinesAPIInterface_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPipelinesAPIInterface_Update_Call) RunAndReturn(run func(context.Context, pipelines.EditPipeline) error) *MockPipelinesAPIInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePermissions provides a mock function with given fields: ctx, request
func (_m *MockPipelinesAPIInterface) UpdatePermissions(ctx context.Context, request pipelines.PipelinePermissionsRequest) (*pipelines.PipelinePermissions, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePermissions")
	}

	var r0 *pipelines.PipelinePermissions
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pipelines.PipelinePermissionsRequest) (*pipelines.PipelinePermissions, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pipelines.PipelinePermissionsRequest) *pipelines.PipelinePermissions); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pipelines.PipelinePermissions)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, pipelines.PipelinePermissionsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPipelinesAPIInterface_UpdatePermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePermissions'
type MockPipelinesAPIInterface_UpdatePermissions_Call struct {
	*mock.Call
}

// UpdatePermissions is a helper method to define mock.On call
//   - ctx context.Context
//   - request pipelines.PipelinePermissionsRequest
func (_e *MockPipelinesAPIInterface_Expecter) UpdatePermissions(ctx interface{}, request interface{}) *MockPipelinesAPIInterface_UpdatePermissions_Call {
	return &MockPipelinesAPIInterface_UpdatePermissions_Call{Call: _e.mock.On("UpdatePermissions", ctx, request)}
}

func (_c *MockPipelinesAPIInterface_UpdatePermissions_Call) Run(run func(ctx context.Context, request pipelines.PipelinePermissionsRequest)) *MockPipelinesAPIInterface_UpdatePermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pipelines.PipelinePermissionsRequest))
	})
	return _c
}

func (_c *MockPipelinesAPIInterface_UpdatePermissions_Call) Return(_a0 *pipelines.PipelinePermissions, _a1 error) *MockPipelinesAPIInterface_UpdatePermissions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPipelinesAPIInterface_UpdatePermissions_Call) RunAndReturn(run func(context.Context, pipelines.PipelinePermissionsRequest) (*pipelines.PipelinePermissions, error)) *MockPipelinesAPIInterface_UpdatePermissions_Call {
	_c.Call.Return(run)
	return _c
}

// WaitGetPipelineIdle provides a mock function with given fields: ctx, pipelineId, timeout, callback
func (_m *MockPipelinesAPIInterface) WaitGetPipelineIdle(ctx context.Context, pipelineId string, timeout time.Duration, callback func(*pipelines.GetPipelineResponse)) (*pipelines.GetPipelineResponse, error) {
	ret := _m.Called(ctx, pipelineId, timeout, callback)

	if len(ret) == 0 {
		panic("no return value specified for WaitGetPipelineIdle")
	}

	var r0 *pipelines.GetPipelineResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration, func(*pipelines.GetPipelineResponse)) (*pipelines.GetPipelineResponse, error)); ok {
		return rf(ctx, pipelineId, timeout, callback)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration, func(*pipelines.GetPipelineResponse)) *pipelines.GetPipelineResponse); ok {
		r0 = rf(ctx, pipelineId, timeout, callback)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pipelines.GetPipelineResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, time.Duration, func(*pipelines.GetPipelineResponse)) error); ok {
		r1 = rf(ctx, pipelineId, timeout, callback)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPipelinesAPIInterface_WaitGetPipelineIdle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitGetPipelineIdle'
type MockPipelinesAPIInterface_WaitGetPipelineIdle_Call struct {
	*mock.Call
}

// WaitGetPipelineIdle is a helper method to define mock.On call
//   - ctx context.Context
//   - pipelineId string
//   - timeout time.Duration
//   - callback func(*pipelines.GetPipelineResponse)
func (_e *MockPipelinesAPIInterface_Expecter) WaitGetPipelineIdle(ctx interface{}, pipelineId interface{}, timeout interface{}, callback interface{}) *MockPipelinesAPIInterface_WaitGetPipelineIdle_Call {
	return &MockPipelinesAPIInterface_WaitGetPipelineIdle_Call{Call: _e.mock.On("WaitGetPipelineIdle", ctx, pipelineId, timeout, callback)}
}

func (_c *MockPipelinesAPIInterface_WaitGetPipelineIdle_Call) Run(run func(ctx context.Context, pipelineId string, timeout time.Duration, callback func(*pipelines.GetPipelineResponse))) *MockPipelinesAPIInterface_WaitGetPipelineIdle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Duration), args[3].(func(*pipelines.GetPipelineResponse)))
	})
	return _c
}

func (_c *MockPipelinesAPIInterface_WaitGetPipelineIdle_Call) Return(_a0 *pipelines.GetPipelineResponse, _a1 error) *MockPipelinesAPIInterface_WaitGetPipelineIdle_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPipelinesAPIInterface_WaitGetPipelineIdle_Call) RunAndReturn(run func(context.Context, string, time.Duration, func(*pipelines.GetPipelineResponse)) (*pipelines.GetPipelineResponse, error)) *MockPipelinesAPIInterface_WaitGetPipelineIdle_Call {
	_c.Call.Return(run)
	return _c
}

// WaitGetPipelineRunning provides a mock function with given fields: ctx, pipelineId, timeout, callback
func (_m *MockPipelinesAPIInterface) WaitGetPipelineRunning(ctx context.Context, pipelineId string, timeout time.Duration, callback func(*pipelines.GetPipelineResponse)) (*pipelines.GetPipelineResponse, error) {
	ret := _m.Called(ctx, pipelineId, timeout, callback)

	if len(ret) == 0 {
		panic("no return value specified for WaitGetPipelineRunning")
	}

	var r0 *pipelines.GetPipelineResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration, func(*pipelines.GetPipelineResponse)) (*pipelines.GetPipelineResponse, error)); ok {
		return rf(ctx, pipelineId, timeout, callback)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration, func(*pipelines.GetPipelineResponse)) *pipelines.GetPipelineResponse); ok {
		r0 = rf(ctx, pipelineId, timeout, callback)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pipelines.GetPipelineResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, time.Duration, func(*pipelines.GetPipelineResponse)) error); ok {
		r1 = rf(ctx, pipelineId, timeout, callback)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPipelinesAPIInterface_WaitGetPipelineRunning_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitGetPipelineRunning'
type MockPipelinesAPIInterface_WaitGetPipelineRunning_Call struct {
	*mock.Call
}

// WaitGetPipelineRunning is a helper method to define mock.On call
//   - ctx context.Context
//   - pipelineId string
//   - timeout time.Duration
//   - callback func(*pipelines.GetPipelineResponse)
func (_e *MockPipelinesAPIInterface_Expecter) WaitGetPipelineRunning(ctx interface{}, pipelineId interface{}, timeout interface{}, callback interface{}) *MockPipelinesAPIInterface_WaitGetPipelineRunning_Call {
	return &MockPipelinesAPIInterface_WaitGetPipelineRunning_Call{Call: _e.mock.On("WaitGetPipelineRunning", ctx, pipelineId, timeout, callback)}
}

func (_c *MockPipelinesAPIInterface_WaitGetPipelineRunning_Call) Run(run func(ctx context.Context, pipelineId string, timeout time.Duration, callback func(*pipelines.GetPipelineResponse))) *MockPipelinesAPIInterface_WaitGetPipelineRunning_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Duration), args[3].(func(*pipelines.GetPipelineResponse)))
	})
	return _c
}

func (_c *MockPipelinesAPIInterface_WaitGetPipelineRunning_Call) Return(_a0 *pipelines.GetPipelineResponse, _a1 error) *MockPipelinesAPIInterface_WaitGetPipelineRunning_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPipelinesAPIInterface_WaitGetPipelineRunning_Call) RunAndReturn(run func(context.Context, string, time.Duration, func(*pipelines.GetPipelineResponse)) (*pipelines.GetPipelineResponse, error)) *MockPipelinesAPIInterface_WaitGetPipelineRunning_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockPipelinesAPIInterface) WithImpl(impl pipelines.PipelinesService) pipelines.PipelinesAPIInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 pipelines.PipelinesAPIInterface
	if rf, ok := ret.Get(0).(func(pipelines.PipelinesService) pipelines.PipelinesAPIInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pipelines.PipelinesAPIInterface)
		}
	}

	return r0
}

// MockPipelinesAPIInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockPipelinesAPIInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl pipelines.PipelinesService
func (_e *MockPipelinesAPIInterface_Expecter) WithImpl(impl interface{}) *MockPipelinesAPIInterface_WithImpl_Call {
	return &MockPipelinesAPIInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockPipelinesAPIInterface_WithImpl_Call) Run(run func(impl pipelines.PipelinesService)) *MockPipelinesAPIInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(pipelines.PipelinesService))
	})
	return _c
}

func (_c *MockPipelinesAPIInterface_WithImpl_Call) Return(_a0 pipelines.PipelinesAPIInterface) *MockPipelinesAPIInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPipelinesAPIInterface_WithImpl_Call) RunAndReturn(run func(pipelines.PipelinesService) pipelines.PipelinesAPIInterface) *MockPipelinesAPIInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPipelinesAPIInterface creates a new instance of MockPipelinesAPIInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPipelinesAPIInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPipelinesAPIInterface {
	mock := &MockPipelinesAPIInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
