// Code generated by mockery v2.38.0. DO NOT EDIT.

package sql

import (
	context "context"

	listing "github.com/databricks/databricks-sdk-go/listing"
	mock "github.com/stretchr/testify/mock"

	sql "github.com/databricks/databricks-sdk-go/service/sql"
)

// MockDashboardsAPIInterface is an autogenerated mock type for the DashboardsAPIInterface type
type MockDashboardsAPIInterface struct {
	mock.Mock
}

type MockDashboardsAPIInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDashboardsAPIInterface) EXPECT() *MockDashboardsAPIInterface_Expecter {
	return &MockDashboardsAPIInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, request
func (_m *MockDashboardsAPIInterface) Create(ctx context.Context, request sql.CreateDashboardRequest) (*sql.Dashboard, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *sql.Dashboard
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.CreateDashboardRequest) (*sql.Dashboard, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.CreateDashboardRequest) *sql.Dashboard); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Dashboard)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.CreateDashboardRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDashboardsAPIInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockDashboardsAPIInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - request sql.CreateDashboardRequest
func (_e *MockDashboardsAPIInterface_Expecter) Create(ctx interface{}, request interface{}) *MockDashboardsAPIInterface_Create_Call {
	return &MockDashboardsAPIInterface_Create_Call{Call: _e.mock.On("Create", ctx, request)}
}

func (_c *MockDashboardsAPIInterface_Create_Call) Run(run func(ctx context.Context, request sql.CreateDashboardRequest)) *MockDashboardsAPIInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.CreateDashboardRequest))
	})
	return _c
}

func (_c *MockDashboardsAPIInterface_Create_Call) Return(_a0 *sql.Dashboard, _a1 error) *MockDashboardsAPIInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDashboardsAPIInterface_Create_Call) RunAndReturn(run func(context.Context, sql.CreateDashboardRequest) (*sql.Dashboard, error)) *MockDashboardsAPIInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// DashboardNameToIdMap provides a mock function with given fields: ctx, request
func (_m *MockDashboardsAPIInterface) DashboardNameToIdMap(ctx context.Context, request sql.ListDashboardsRequest) (map[string]string, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for DashboardNameToIdMap")
	}

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.ListDashboardsRequest) (map[string]string, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.ListDashboardsRequest) map[string]string); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.ListDashboardsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDashboardsAPIInterface_DashboardNameToIdMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DashboardNameToIdMap'
type MockDashboardsAPIInterface_DashboardNameToIdMap_Call struct {
	*mock.Call
}

// DashboardNameToIdMap is a helper method to define mock.On call
//   - ctx context.Context
//   - request sql.ListDashboardsRequest
func (_e *MockDashboardsAPIInterface_Expecter) DashboardNameToIdMap(ctx interface{}, request interface{}) *MockDashboardsAPIInterface_DashboardNameToIdMap_Call {
	return &MockDashboardsAPIInterface_DashboardNameToIdMap_Call{Call: _e.mock.On("DashboardNameToIdMap", ctx, request)}
}

func (_c *MockDashboardsAPIInterface_DashboardNameToIdMap_Call) Run(run func(ctx context.Context, request sql.ListDashboardsRequest)) *MockDashboardsAPIInterface_DashboardNameToIdMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.ListDashboardsRequest))
	})
	return _c
}

func (_c *MockDashboardsAPIInterface_DashboardNameToIdMap_Call) Return(_a0 map[string]string, _a1 error) *MockDashboardsAPIInterface_DashboardNameToIdMap_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDashboardsAPIInterface_DashboardNameToIdMap_Call) RunAndReturn(run func(context.Context, sql.ListDashboardsRequest) (map[string]string, error)) *MockDashboardsAPIInterface_DashboardNameToIdMap_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, request
func (_m *MockDashboardsAPIInterface) Delete(ctx context.Context, request sql.DeleteDashboardRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.DeleteDashboardRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDashboardsAPIInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockDashboardsAPIInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - request sql.DeleteDashboardRequest
func (_e *MockDashboardsAPIInterface_Expecter) Delete(ctx interface{}, request interface{}) *MockDashboardsAPIInterface_Delete_Call {
	return &MockDashboardsAPIInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, request)}
}

func (_c *MockDashboardsAPIInterface_Delete_Call) Run(run func(ctx context.Context, request sql.DeleteDashboardRequest)) *MockDashboardsAPIInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.DeleteDashboardRequest))
	})
	return _c
}

func (_c *MockDashboardsAPIInterface_Delete_Call) Return(_a0 error) *MockDashboardsAPIInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDashboardsAPIInterface_Delete_Call) RunAndReturn(run func(context.Context, sql.DeleteDashboardRequest) error) *MockDashboardsAPIInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByDashboardId provides a mock function with given fields: ctx, dashboardId
func (_m *MockDashboardsAPIInterface) DeleteByDashboardId(ctx context.Context, dashboardId string) error {
	ret := _m.Called(ctx, dashboardId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByDashboardId")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, dashboardId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDashboardsAPIInterface_DeleteByDashboardId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByDashboardId'
type MockDashboardsAPIInterface_DeleteByDashboardId_Call struct {
	*mock.Call
}

// DeleteByDashboardId is a helper method to define mock.On call
//   - ctx context.Context
//   - dashboardId string
func (_e *MockDashboardsAPIInterface_Expecter) DeleteByDashboardId(ctx interface{}, dashboardId interface{}) *MockDashboardsAPIInterface_DeleteByDashboardId_Call {
	return &MockDashboardsAPIInterface_DeleteByDashboardId_Call{Call: _e.mock.On("DeleteByDashboardId", ctx, dashboardId)}
}

func (_c *MockDashboardsAPIInterface_DeleteByDashboardId_Call) Run(run func(ctx context.Context, dashboardId string)) *MockDashboardsAPIInterface_DeleteByDashboardId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDashboardsAPIInterface_DeleteByDashboardId_Call) Return(_a0 error) *MockDashboardsAPIInterface_DeleteByDashboardId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDashboardsAPIInterface_DeleteByDashboardId_Call) RunAndReturn(run func(context.Context, string) error) *MockDashboardsAPIInterface_DeleteByDashboardId_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, request
func (_m *MockDashboardsAPIInterface) Get(ctx context.Context, request sql.GetDashboardRequest) (*sql.Dashboard, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *sql.Dashboard
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.GetDashboardRequest) (*sql.Dashboard, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.GetDashboardRequest) *sql.Dashboard); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Dashboard)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.GetDashboardRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDashboardsAPIInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockDashboardsAPIInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - request sql.GetDashboardRequest
func (_e *MockDashboardsAPIInterface_Expecter) Get(ctx interface{}, request interface{}) *MockDashboardsAPIInterface_Get_Call {
	return &MockDashboardsAPIInterface_Get_Call{Call: _e.mock.On("Get", ctx, request)}
}

func (_c *MockDashboardsAPIInterface_Get_Call) Run(run func(ctx context.Context, request sql.GetDashboardRequest)) *MockDashboardsAPIInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.GetDashboardRequest))
	})
	return _c
}

func (_c *MockDashboardsAPIInterface_Get_Call) Return(_a0 *sql.Dashboard, _a1 error) *MockDashboardsAPIInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDashboardsAPIInterface_Get_Call) RunAndReturn(run func(context.Context, sql.GetDashboardRequest) (*sql.Dashboard, error)) *MockDashboardsAPIInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByDashboardId provides a mock function with given fields: ctx, dashboardId
func (_m *MockDashboardsAPIInterface) GetByDashboardId(ctx context.Context, dashboardId string) (*sql.Dashboard, error) {
	ret := _m.Called(ctx, dashboardId)

	if len(ret) == 0 {
		panic("no return value specified for GetByDashboardId")
	}

	var r0 *sql.Dashboard
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*sql.Dashboard, error)); ok {
		return rf(ctx, dashboardId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *sql.Dashboard); ok {
		r0 = rf(ctx, dashboardId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Dashboard)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, dashboardId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDashboardsAPIInterface_GetByDashboardId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByDashboardId'
type MockDashboardsAPIInterface_GetByDashboardId_Call struct {
	*mock.Call
}

// GetByDashboardId is a helper method to define mock.On call
//   - ctx context.Context
//   - dashboardId string
func (_e *MockDashboardsAPIInterface_Expecter) GetByDashboardId(ctx interface{}, dashboardId interface{}) *MockDashboardsAPIInterface_GetByDashboardId_Call {
	return &MockDashboardsAPIInterface_GetByDashboardId_Call{Call: _e.mock.On("GetByDashboardId", ctx, dashboardId)}
}

func (_c *MockDashboardsAPIInterface_GetByDashboardId_Call) Run(run func(ctx context.Context, dashboardId string)) *MockDashboardsAPIInterface_GetByDashboardId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDashboardsAPIInterface_GetByDashboardId_Call) Return(_a0 *sql.Dashboard, _a1 error) *MockDashboardsAPIInterface_GetByDashboardId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDashboardsAPIInterface_GetByDashboardId_Call) RunAndReturn(run func(context.Context, string) (*sql.Dashboard, error)) *MockDashboardsAPIInterface_GetByDashboardId_Call {
	_c.Call.Return(run)
	return _c
}

// GetByName provides a mock function with given fields: ctx, name
func (_m *MockDashboardsAPIInterface) GetByName(ctx context.Context, name string) (*sql.Dashboard, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetByName")
	}

	var r0 *sql.Dashboard
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*sql.Dashboard, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *sql.Dashboard); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Dashboard)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDashboardsAPIInterface_GetByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByName'
type MockDashboardsAPIInterface_GetByName_Call struct {
	*mock.Call
}

// GetByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockDashboardsAPIInterface_Expecter) GetByName(ctx interface{}, name interface{}) *MockDashboardsAPIInterface_GetByName_Call {
	return &MockDashboardsAPIInterface_GetByName_Call{Call: _e.mock.On("GetByName", ctx, name)}
}

func (_c *MockDashboardsAPIInterface_GetByName_Call) Run(run func(ctx context.Context, name string)) *MockDashboardsAPIInterface_GetByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDashboardsAPIInterface_GetByName_Call) Return(_a0 *sql.Dashboard, _a1 error) *MockDashboardsAPIInterface_GetByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDashboardsAPIInterface_GetByName_Call) RunAndReturn(run func(context.Context, string) (*sql.Dashboard, error)) *MockDashboardsAPIInterface_GetByName_Call {
	_c.Call.Return(run)
	return _c
}

// Impl provides a mock function with given fields:
func (_m *MockDashboardsAPIInterface) Impl() sql.DashboardsService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 sql.DashboardsService
	if rf, ok := ret.Get(0).(func() sql.DashboardsService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.DashboardsService)
		}
	}

	return r0
}

// MockDashboardsAPIInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockDashboardsAPIInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockDashboardsAPIInterface_Expecter) Impl() *MockDashboardsAPIInterface_Impl_Call {
	return &MockDashboardsAPIInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockDashboardsAPIInterface_Impl_Call) Run(run func()) *MockDashboardsAPIInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDashboardsAPIInterface_Impl_Call) Return(_a0 sql.DashboardsService) *MockDashboardsAPIInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDashboardsAPIInterface_Impl_Call) RunAndReturn(run func() sql.DashboardsService) *MockDashboardsAPIInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, request
func (_m *MockDashboardsAPIInterface) List(ctx context.Context, request sql.ListDashboardsRequest) *listing.DeduplicatingIterator[sql.Dashboard, string] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *listing.DeduplicatingIterator[sql.Dashboard, string]
	if rf, ok := ret.Get(0).(func(context.Context, sql.ListDashboardsRequest) *listing.DeduplicatingIterator[sql.Dashboard, string]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*listing.DeduplicatingIterator[sql.Dashboard, string])
		}
	}

	return r0
}

// MockDashboardsAPIInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockDashboardsAPIInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - request sql.ListDashboardsRequest
func (_e *MockDashboardsAPIInterface_Expecter) List(ctx interface{}, request interface{}) *MockDashboardsAPIInterface_List_Call {
	return &MockDashboardsAPIInterface_List_Call{Call: _e.mock.On("List", ctx, request)}
}

func (_c *MockDashboardsAPIInterface_List_Call) Run(run func(ctx context.Context, request sql.ListDashboardsRequest)) *MockDashboardsAPIInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.ListDashboardsRequest))
	})
	return _c
}

func (_c *MockDashboardsAPIInterface_List_Call) Return(_a0 *listing.DeduplicatingIterator[sql.Dashboard, string]) *MockDashboardsAPIInterface_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDashboardsAPIInterface_List_Call) RunAndReturn(run func(context.Context, sql.ListDashboardsRequest) *listing.DeduplicatingIterator[sql.Dashboard, string]) *MockDashboardsAPIInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListAll provides a mock function with given fields: ctx, request
func (_m *MockDashboardsAPIInterface) ListAll(ctx context.Context, request sql.ListDashboardsRequest) ([]sql.Dashboard, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListAll")
	}

	var r0 []sql.Dashboard
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.ListDashboardsRequest) ([]sql.Dashboard, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.ListDashboardsRequest) []sql.Dashboard); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sql.Dashboard)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.ListDashboardsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDashboardsAPIInterface_ListAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAll'
type MockDashboardsAPIInterface_ListAll_Call struct {
	*mock.Call
}

// ListAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request sql.ListDashboardsRequest
func (_e *MockDashboardsAPIInterface_Expecter) ListAll(ctx interface{}, request interface{}) *MockDashboardsAPIInterface_ListAll_Call {
	return &MockDashboardsAPIInterface_ListAll_Call{Call: _e.mock.On("ListAll", ctx, request)}
}

func (_c *MockDashboardsAPIInterface_ListAll_Call) Run(run func(ctx context.Context, request sql.ListDashboardsRequest)) *MockDashboardsAPIInterface_ListAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.ListDashboardsRequest))
	})
	return _c
}

func (_c *MockDashboardsAPIInterface_ListAll_Call) Return(_a0 []sql.Dashboard, _a1 error) *MockDashboardsAPIInterface_ListAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDashboardsAPIInterface_ListAll_Call) RunAndReturn(run func(context.Context, sql.ListDashboardsRequest) ([]sql.Dashboard, error)) *MockDashboardsAPIInterface_ListAll_Call {
	_c.Call.Return(run)
	return _c
}

// Restore provides a mock function with given fields: ctx, request
func (_m *MockDashboardsAPIInterface) Restore(ctx context.Context, request sql.RestoreDashboardRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Restore")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.RestoreDashboardRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDashboardsAPIInterface_Restore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Restore'
type MockDashboardsAPIInterface_Restore_Call struct {
	*mock.Call
}

// Restore is a helper method to define mock.On call
//   - ctx context.Context
//   - request sql.RestoreDashboardRequest
func (_e *MockDashboardsAPIInterface_Expecter) Restore(ctx interface{}, request interface{}) *MockDashboardsAPIInterface_Restore_Call {
	return &MockDashboardsAPIInterface_Restore_Call{Call: _e.mock.On("Restore", ctx, request)}
}

func (_c *MockDashboardsAPIInterface_Restore_Call) Run(run func(ctx context.Context, request sql.RestoreDashboardRequest)) *MockDashboardsAPIInterface_Restore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.RestoreDashboardRequest))
	})
	return _c
}

func (_c *MockDashboardsAPIInterface_Restore_Call) Return(_a0 error) *MockDashboardsAPIInterface_Restore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDashboardsAPIInterface_Restore_Call) RunAndReturn(run func(context.Context, sql.RestoreDashboardRequest) error) *MockDashboardsAPIInterface_Restore_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockDashboardsAPIInterface) WithImpl(impl sql.DashboardsService) sql.DashboardsAPIInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 sql.DashboardsAPIInterface
	if rf, ok := ret.Get(0).(func(sql.DashboardsService) sql.DashboardsAPIInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.DashboardsAPIInterface)
		}
	}

	return r0
}

// MockDashboardsAPIInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockDashboardsAPIInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl sql.DashboardsService
func (_e *MockDashboardsAPIInterface_Expecter) WithImpl(impl interface{}) *MockDashboardsAPIInterface_WithImpl_Call {
	return &MockDashboardsAPIInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockDashboardsAPIInterface_WithImpl_Call) Run(run func(impl sql.DashboardsService)) *MockDashboardsAPIInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(sql.DashboardsService))
	})
	return _c
}

func (_c *MockDashboardsAPIInterface_WithImpl_Call) Return(_a0 sql.DashboardsAPIInterface) *MockDashboardsAPIInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDashboardsAPIInterface_WithImpl_Call) RunAndReturn(run func(sql.DashboardsService) sql.DashboardsAPIInterface) *MockDashboardsAPIInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDashboardsAPIInterface creates a new instance of MockDashboardsAPIInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDashboardsAPIInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDashboardsAPIInterface {
	mock := &MockDashboardsAPIInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
