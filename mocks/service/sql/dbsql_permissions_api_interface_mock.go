// Code generated by mockery v2.38.0. DO NOT EDIT.

package sql

import (
	context "context"

	sql "github.com/databricks/databricks-sdk-go/service/sql"
	mock "github.com/stretchr/testify/mock"
)

// MockDbsqlPermissionsAPIInterface is an autogenerated mock type for the DbsqlPermissionsAPIInterface type
type MockDbsqlPermissionsAPIInterface struct {
	mock.Mock
}

type MockDbsqlPermissionsAPIInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDbsqlPermissionsAPIInterface) EXPECT() *MockDbsqlPermissionsAPIInterface_Expecter {
	return &MockDbsqlPermissionsAPIInterface_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: ctx, request
func (_m *MockDbsqlPermissionsAPIInterface) Get(ctx context.Context, request sql.GetDbsqlPermissionRequest) (*sql.GetResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *sql.GetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.GetDbsqlPermissionRequest) (*sql.GetResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.GetDbsqlPermissionRequest) *sql.GetResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.GetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.GetDbsqlPermissionRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDbsqlPermissionsAPIInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockDbsqlPermissionsAPIInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - request sql.GetDbsqlPermissionRequest
func (_e *MockDbsqlPermissionsAPIInterface_Expecter) Get(ctx interface{}, request interface{}) *MockDbsqlPermissionsAPIInterface_Get_Call {
	return &MockDbsqlPermissionsAPIInterface_Get_Call{Call: _e.mock.On("Get", ctx, request)}
}

func (_c *MockDbsqlPermissionsAPIInterface_Get_Call) Run(run func(ctx context.Context, request sql.GetDbsqlPermissionRequest)) *MockDbsqlPermissionsAPIInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.GetDbsqlPermissionRequest))
	})
	return _c
}

func (_c *MockDbsqlPermissionsAPIInterface_Get_Call) Return(_a0 *sql.GetResponse, _a1 error) *MockDbsqlPermissionsAPIInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDbsqlPermissionsAPIInterface_Get_Call) RunAndReturn(run func(context.Context, sql.GetDbsqlPermissionRequest) (*sql.GetResponse, error)) *MockDbsqlPermissionsAPIInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByObjectTypeAndObjectId provides a mock function with given fields: ctx, objectType, objectId
func (_m *MockDbsqlPermissionsAPIInterface) GetByObjectTypeAndObjectId(ctx context.Context, objectType sql.ObjectTypePlural, objectId string) (*sql.GetResponse, error) {
	ret := _m.Called(ctx, objectType, objectId)

	if len(ret) == 0 {
		panic("no return value specified for GetByObjectTypeAndObjectId")
	}

	var r0 *sql.GetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.ObjectTypePlural, string) (*sql.GetResponse, error)); ok {
		return rf(ctx, objectType, objectId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.ObjectTypePlural, string) *sql.GetResponse); ok {
		r0 = rf(ctx, objectType, objectId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.GetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.ObjectTypePlural, string) error); ok {
		r1 = rf(ctx, objectType, objectId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDbsqlPermissionsAPIInterface_GetByObjectTypeAndObjectId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByObjectTypeAndObjectId'
type MockDbsqlPermissionsAPIInterface_GetByObjectTypeAndObjectId_Call struct {
	*mock.Call
}

// GetByObjectTypeAndObjectId is a helper method to define mock.On call
//   - ctx context.Context
//   - objectType sql.ObjectTypePlural
//   - objectId string
func (_e *MockDbsqlPermissionsAPIInterface_Expecter) GetByObjectTypeAndObjectId(ctx interface{}, objectType interface{}, objectId interface{}) *MockDbsqlPermissionsAPIInterface_GetByObjectTypeAndObjectId_Call {
	return &MockDbsqlPermissionsAPIInterface_GetByObjectTypeAndObjectId_Call{Call: _e.mock.On("GetByObjectTypeAndObjectId", ctx, objectType, objectId)}
}

func (_c *MockDbsqlPermissionsAPIInterface_GetByObjectTypeAndObjectId_Call) Run(run func(ctx context.Context, objectType sql.ObjectTypePlural, objectId string)) *MockDbsqlPermissionsAPIInterface_GetByObjectTypeAndObjectId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.ObjectTypePlural), args[2].(string))
	})
	return _c
}

func (_c *MockDbsqlPermissionsAPIInterface_GetByObjectTypeAndObjectId_Call) Return(_a0 *sql.GetResponse, _a1 error) *MockDbsqlPermissionsAPIInterface_GetByObjectTypeAndObjectId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDbsqlPermissionsAPIInterface_GetByObjectTypeAndObjectId_Call) RunAndReturn(run func(context.Context, sql.ObjectTypePlural, string) (*sql.GetResponse, error)) *MockDbsqlPermissionsAPIInterface_GetByObjectTypeAndObjectId_Call {
	_c.Call.Return(run)
	return _c
}

// Impl provides a mock function with given fields:
func (_m *MockDbsqlPermissionsAPIInterface) Impl() sql.DbsqlPermissionsService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 sql.DbsqlPermissionsService
	if rf, ok := ret.Get(0).(func() sql.DbsqlPermissionsService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.DbsqlPermissionsService)
		}
	}

	return r0
}

// MockDbsqlPermissionsAPIInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockDbsqlPermissionsAPIInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockDbsqlPermissionsAPIInterface_Expecter) Impl() *MockDbsqlPermissionsAPIInterface_Impl_Call {
	return &MockDbsqlPermissionsAPIInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockDbsqlPermissionsAPIInterface_Impl_Call) Run(run func()) *MockDbsqlPermissionsAPIInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDbsqlPermissionsAPIInterface_Impl_Call) Return(_a0 sql.DbsqlPermissionsService) *MockDbsqlPermissionsAPIInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDbsqlPermissionsAPIInterface_Impl_Call) RunAndReturn(run func() sql.DbsqlPermissionsService) *MockDbsqlPermissionsAPIInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: ctx, request
func (_m *MockDbsqlPermissionsAPIInterface) Set(ctx context.Context, request sql.SetRequest) (*sql.SetResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 *sql.SetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.SetRequest) (*sql.SetResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.SetRequest) *sql.SetResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.SetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.SetRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDbsqlPermissionsAPIInterface_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockDbsqlPermissionsAPIInterface_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - ctx context.Context
//   - request sql.SetRequest
func (_e *MockDbsqlPermissionsAPIInterface_Expecter) Set(ctx interface{}, request interface{}) *MockDbsqlPermissionsAPIInterface_Set_Call {
	return &MockDbsqlPermissionsAPIInterface_Set_Call{Call: _e.mock.On("Set", ctx, request)}
}

func (_c *MockDbsqlPermissionsAPIInterface_Set_Call) Run(run func(ctx context.Context, request sql.SetRequest)) *MockDbsqlPermissionsAPIInterface_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.SetRequest))
	})
	return _c
}

func (_c *MockDbsqlPermissionsAPIInterface_Set_Call) Return(_a0 *sql.SetResponse, _a1 error) *MockDbsqlPermissionsAPIInterface_Set_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDbsqlPermissionsAPIInterface_Set_Call) RunAndReturn(run func(context.Context, sql.SetRequest) (*sql.SetResponse, error)) *MockDbsqlPermissionsAPIInterface_Set_Call {
	_c.Call.Return(run)
	return _c
}

// TransferOwnership provides a mock function with given fields: ctx, request
func (_m *MockDbsqlPermissionsAPIInterface) TransferOwnership(ctx context.Context, request sql.TransferOwnershipRequest) (*sql.Success, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for TransferOwnership")
	}

	var r0 *sql.Success
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.TransferOwnershipRequest) (*sql.Success, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.TransferOwnershipRequest) *sql.Success); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Success)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.TransferOwnershipRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDbsqlPermissionsAPIInterface_TransferOwnership_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransferOwnership'
type MockDbsqlPermissionsAPIInterface_TransferOwnership_Call struct {
	*mock.Call
}

// TransferOwnership is a helper method to define mock.On call
//   - ctx context.Context
//   - request sql.TransferOwnershipRequest
func (_e *MockDbsqlPermissionsAPIInterface_Expecter) TransferOwnership(ctx interface{}, request interface{}) *MockDbsqlPermissionsAPIInterface_TransferOwnership_Call {
	return &MockDbsqlPermissionsAPIInterface_TransferOwnership_Call{Call: _e.mock.On("TransferOwnership", ctx, request)}
}

func (_c *MockDbsqlPermissionsAPIInterface_TransferOwnership_Call) Run(run func(ctx context.Context, request sql.TransferOwnershipRequest)) *MockDbsqlPermissionsAPIInterface_TransferOwnership_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.TransferOwnershipRequest))
	})
	return _c
}

func (_c *MockDbsqlPermissionsAPIInterface_TransferOwnership_Call) Return(_a0 *sql.Success, _a1 error) *MockDbsqlPermissionsAPIInterface_TransferOwnership_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDbsqlPermissionsAPIInterface_TransferOwnership_Call) RunAndReturn(run func(context.Context, sql.TransferOwnershipRequest) (*sql.Success, error)) *MockDbsqlPermissionsAPIInterface_TransferOwnership_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockDbsqlPermissionsAPIInterface) WithImpl(impl sql.DbsqlPermissionsService) sql.DbsqlPermissionsAPIInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 sql.DbsqlPermissionsAPIInterface
	if rf, ok := ret.Get(0).(func(sql.DbsqlPermissionsService) sql.DbsqlPermissionsAPIInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.DbsqlPermissionsAPIInterface)
		}
	}

	return r0
}

// MockDbsqlPermissionsAPIInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockDbsqlPermissionsAPIInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl sql.DbsqlPermissionsService
func (_e *MockDbsqlPermissionsAPIInterface_Expecter) WithImpl(impl interface{}) *MockDbsqlPermissionsAPIInterface_WithImpl_Call {
	return &MockDbsqlPermissionsAPIInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockDbsqlPermissionsAPIInterface_WithImpl_Call) Run(run func(impl sql.DbsqlPermissionsService)) *MockDbsqlPermissionsAPIInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(sql.DbsqlPermissionsService))
	})
	return _c
}

func (_c *MockDbsqlPermissionsAPIInterface_WithImpl_Call) Return(_a0 sql.DbsqlPermissionsAPIInterface) *MockDbsqlPermissionsAPIInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDbsqlPermissionsAPIInterface_WithImpl_Call) RunAndReturn(run func(sql.DbsqlPermissionsService) sql.DbsqlPermissionsAPIInterface) *MockDbsqlPermissionsAPIInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDbsqlPermissionsAPIInterface creates a new instance of MockDbsqlPermissionsAPIInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDbsqlPermissionsAPIInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDbsqlPermissionsAPIInterface {
	mock := &MockDbsqlPermissionsAPIInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
