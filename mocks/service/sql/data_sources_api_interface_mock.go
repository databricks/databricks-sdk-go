// Code generated by mockery v2.38.0. DO NOT EDIT.

package sql

import (
	context "context"

	sql "github.com/databricks/databricks-sdk-go/service/sql"
	mock "github.com/stretchr/testify/mock"
)

// MockDataSourcesAPIInterface is an autogenerated mock type for the DataSourcesAPIInterface type
type MockDataSourcesAPIInterface struct {
	mock.Mock
}

type MockDataSourcesAPIInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDataSourcesAPIInterface) EXPECT() *MockDataSourcesAPIInterface_Expecter {
	return &MockDataSourcesAPIInterface_Expecter{mock: &_m.Mock}
}

// DataSourceNameToIdMap provides a mock function with given fields: ctx
func (_m *MockDataSourcesAPIInterface) DataSourceNameToIdMap(ctx context.Context) (map[string]string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DataSourceNameToIdMap")
	}

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (map[string]string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) map[string]string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDataSourcesAPIInterface_DataSourceNameToIdMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DataSourceNameToIdMap'
type MockDataSourcesAPIInterface_DataSourceNameToIdMap_Call struct {
	*mock.Call
}

// DataSourceNameToIdMap is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockDataSourcesAPIInterface_Expecter) DataSourceNameToIdMap(ctx interface{}) *MockDataSourcesAPIInterface_DataSourceNameToIdMap_Call {
	return &MockDataSourcesAPIInterface_DataSourceNameToIdMap_Call{Call: _e.mock.On("DataSourceNameToIdMap", ctx)}
}

func (_c *MockDataSourcesAPIInterface_DataSourceNameToIdMap_Call) Run(run func(ctx context.Context)) *MockDataSourcesAPIInterface_DataSourceNameToIdMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockDataSourcesAPIInterface_DataSourceNameToIdMap_Call) Return(_a0 map[string]string, _a1 error) *MockDataSourcesAPIInterface_DataSourceNameToIdMap_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDataSourcesAPIInterface_DataSourceNameToIdMap_Call) RunAndReturn(run func(context.Context) (map[string]string, error)) *MockDataSourcesAPIInterface_DataSourceNameToIdMap_Call {
	_c.Call.Return(run)
	return _c
}

// GetByName provides a mock function with given fields: ctx, name
func (_m *MockDataSourcesAPIInterface) GetByName(ctx context.Context, name string) (*sql.DataSource, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetByName")
	}

	var r0 *sql.DataSource
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*sql.DataSource, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *sql.DataSource); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.DataSource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDataSourcesAPIInterface_GetByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByName'
type MockDataSourcesAPIInterface_GetByName_Call struct {
	*mock.Call
}

// GetByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockDataSourcesAPIInterface_Expecter) GetByName(ctx interface{}, name interface{}) *MockDataSourcesAPIInterface_GetByName_Call {
	return &MockDataSourcesAPIInterface_GetByName_Call{Call: _e.mock.On("GetByName", ctx, name)}
}

func (_c *MockDataSourcesAPIInterface_GetByName_Call) Run(run func(ctx context.Context, name string)) *MockDataSourcesAPIInterface_GetByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDataSourcesAPIInterface_GetByName_Call) Return(_a0 *sql.DataSource, _a1 error) *MockDataSourcesAPIInterface_GetByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDataSourcesAPIInterface_GetByName_Call) RunAndReturn(run func(context.Context, string) (*sql.DataSource, error)) *MockDataSourcesAPIInterface_GetByName_Call {
	_c.Call.Return(run)
	return _c
}

// Impl provides a mock function with given fields:
func (_m *MockDataSourcesAPIInterface) Impl() sql.DataSourcesService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 sql.DataSourcesService
	if rf, ok := ret.Get(0).(func() sql.DataSourcesService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.DataSourcesService)
		}
	}

	return r0
}

// MockDataSourcesAPIInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockDataSourcesAPIInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockDataSourcesAPIInterface_Expecter) Impl() *MockDataSourcesAPIInterface_Impl_Call {
	return &MockDataSourcesAPIInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockDataSourcesAPIInterface_Impl_Call) Run(run func()) *MockDataSourcesAPIInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDataSourcesAPIInterface_Impl_Call) Return(_a0 sql.DataSourcesService) *MockDataSourcesAPIInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDataSourcesAPIInterface_Impl_Call) RunAndReturn(run func() sql.DataSourcesService) *MockDataSourcesAPIInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx
func (_m *MockDataSourcesAPIInterface) List(ctx context.Context) ([]sql.DataSource, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []sql.DataSource
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]sql.DataSource, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []sql.DataSource); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sql.DataSource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDataSourcesAPIInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockDataSourcesAPIInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockDataSourcesAPIInterface_Expecter) List(ctx interface{}) *MockDataSourcesAPIInterface_List_Call {
	return &MockDataSourcesAPIInterface_List_Call{Call: _e.mock.On("List", ctx)}
}

func (_c *MockDataSourcesAPIInterface_List_Call) Run(run func(ctx context.Context)) *MockDataSourcesAPIInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockDataSourcesAPIInterface_List_Call) Return(_a0 []sql.DataSource, _a1 error) *MockDataSourcesAPIInterface_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDataSourcesAPIInterface_List_Call) RunAndReturn(run func(context.Context) ([]sql.DataSource, error)) *MockDataSourcesAPIInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockDataSourcesAPIInterface) WithImpl(impl sql.DataSourcesService) sql.DataSourcesAPIInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 sql.DataSourcesAPIInterface
	if rf, ok := ret.Get(0).(func(sql.DataSourcesService) sql.DataSourcesAPIInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.DataSourcesAPIInterface)
		}
	}

	return r0
}

// MockDataSourcesAPIInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockDataSourcesAPIInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl sql.DataSourcesService
func (_e *MockDataSourcesAPIInterface_Expecter) WithImpl(impl interface{}) *MockDataSourcesAPIInterface_WithImpl_Call {
	return &MockDataSourcesAPIInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockDataSourcesAPIInterface_WithImpl_Call) Run(run func(impl sql.DataSourcesService)) *MockDataSourcesAPIInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(sql.DataSourcesService))
	})
	return _c
}

func (_c *MockDataSourcesAPIInterface_WithImpl_Call) Return(_a0 sql.DataSourcesAPIInterface) *MockDataSourcesAPIInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDataSourcesAPIInterface_WithImpl_Call) RunAndReturn(run func(sql.DataSourcesService) sql.DataSourcesAPIInterface) *MockDataSourcesAPIInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDataSourcesAPIInterface creates a new instance of MockDataSourcesAPIInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDataSourcesAPIInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDataSourcesAPIInterface {
	mock := &MockDataSourcesAPIInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
