// Code generated by mockery v2.38.0. DO NOT EDIT.

package provisioning

import (
	context "context"

	provisioning "github.com/databricks/databricks-sdk-go/service/provisioning"
	mock "github.com/stretchr/testify/mock"
)

// MockStorageAPIInterface is an autogenerated mock type for the StorageAPIInterface type
type MockStorageAPIInterface struct {
	mock.Mock
}

type MockStorageAPIInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStorageAPIInterface) EXPECT() *MockStorageAPIInterface_Expecter {
	return &MockStorageAPIInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, request
func (_m *MockStorageAPIInterface) Create(ctx context.Context, request provisioning.CreateStorageConfigurationRequest) (*provisioning.StorageConfiguration, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *provisioning.StorageConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, provisioning.CreateStorageConfigurationRequest) (*provisioning.StorageConfiguration, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, provisioning.CreateStorageConfigurationRequest) *provisioning.StorageConfiguration); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provisioning.StorageConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, provisioning.CreateStorageConfigurationRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorageAPIInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockStorageAPIInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - request provisioning.CreateStorageConfigurationRequest
func (_e *MockStorageAPIInterface_Expecter) Create(ctx interface{}, request interface{}) *MockStorageAPIInterface_Create_Call {
	return &MockStorageAPIInterface_Create_Call{Call: _e.mock.On("Create", ctx, request)}
}

func (_c *MockStorageAPIInterface_Create_Call) Run(run func(ctx context.Context, request provisioning.CreateStorageConfigurationRequest)) *MockStorageAPIInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(provisioning.CreateStorageConfigurationRequest))
	})
	return _c
}

func (_c *MockStorageAPIInterface_Create_Call) Return(_a0 *provisioning.StorageConfiguration, _a1 error) *MockStorageAPIInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorageAPIInterface_Create_Call) RunAndReturn(run func(context.Context, provisioning.CreateStorageConfigurationRequest) (*provisioning.StorageConfiguration, error)) *MockStorageAPIInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, request
func (_m *MockStorageAPIInterface) Delete(ctx context.Context, request provisioning.DeleteStorageRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, provisioning.DeleteStorageRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorageAPIInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockStorageAPIInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - request provisioning.DeleteStorageRequest
func (_e *MockStorageAPIInterface_Expecter) Delete(ctx interface{}, request interface{}) *MockStorageAPIInterface_Delete_Call {
	return &MockStorageAPIInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, request)}
}

func (_c *MockStorageAPIInterface_Delete_Call) Run(run func(ctx context.Context, request provisioning.DeleteStorageRequest)) *MockStorageAPIInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(provisioning.DeleteStorageRequest))
	})
	return _c
}

func (_c *MockStorageAPIInterface_Delete_Call) Return(_a0 error) *MockStorageAPIInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorageAPIInterface_Delete_Call) RunAndReturn(run func(context.Context, provisioning.DeleteStorageRequest) error) *MockStorageAPIInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByStorageConfigurationId provides a mock function with given fields: ctx, storageConfigurationId
func (_m *MockStorageAPIInterface) DeleteByStorageConfigurationId(ctx context.Context, storageConfigurationId string) error {
	ret := _m.Called(ctx, storageConfigurationId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByStorageConfigurationId")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, storageConfigurationId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorageAPIInterface_DeleteByStorageConfigurationId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByStorageConfigurationId'
type MockStorageAPIInterface_DeleteByStorageConfigurationId_Call struct {
	*mock.Call
}

// DeleteByStorageConfigurationId is a helper method to define mock.On call
//   - ctx context.Context
//   - storageConfigurationId string
func (_e *MockStorageAPIInterface_Expecter) DeleteByStorageConfigurationId(ctx interface{}, storageConfigurationId interface{}) *MockStorageAPIInterface_DeleteByStorageConfigurationId_Call {
	return &MockStorageAPIInterface_DeleteByStorageConfigurationId_Call{Call: _e.mock.On("DeleteByStorageConfigurationId", ctx, storageConfigurationId)}
}

func (_c *MockStorageAPIInterface_DeleteByStorageConfigurationId_Call) Run(run func(ctx context.Context, storageConfigurationId string)) *MockStorageAPIInterface_DeleteByStorageConfigurationId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStorageAPIInterface_DeleteByStorageConfigurationId_Call) Return(_a0 error) *MockStorageAPIInterface_DeleteByStorageConfigurationId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorageAPIInterface_DeleteByStorageConfigurationId_Call) RunAndReturn(run func(context.Context, string) error) *MockStorageAPIInterface_DeleteByStorageConfigurationId_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, request
func (_m *MockStorageAPIInterface) Get(ctx context.Context, request provisioning.GetStorageRequest) (*provisioning.StorageConfiguration, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *provisioning.StorageConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, provisioning.GetStorageRequest) (*provisioning.StorageConfiguration, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, provisioning.GetStorageRequest) *provisioning.StorageConfiguration); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provisioning.StorageConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, provisioning.GetStorageRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorageAPIInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockStorageAPIInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - request provisioning.GetStorageRequest
func (_e *MockStorageAPIInterface_Expecter) Get(ctx interface{}, request interface{}) *MockStorageAPIInterface_Get_Call {
	return &MockStorageAPIInterface_Get_Call{Call: _e.mock.On("Get", ctx, request)}
}

func (_c *MockStorageAPIInterface_Get_Call) Run(run func(ctx context.Context, request provisioning.GetStorageRequest)) *MockStorageAPIInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(provisioning.GetStorageRequest))
	})
	return _c
}

func (_c *MockStorageAPIInterface_Get_Call) Return(_a0 *provisioning.StorageConfiguration, _a1 error) *MockStorageAPIInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorageAPIInterface_Get_Call) RunAndReturn(run func(context.Context, provisioning.GetStorageRequest) (*provisioning.StorageConfiguration, error)) *MockStorageAPIInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByStorageConfigurationId provides a mock function with given fields: ctx, storageConfigurationId
func (_m *MockStorageAPIInterface) GetByStorageConfigurationId(ctx context.Context, storageConfigurationId string) (*provisioning.StorageConfiguration, error) {
	ret := _m.Called(ctx, storageConfigurationId)

	if len(ret) == 0 {
		panic("no return value specified for GetByStorageConfigurationId")
	}

	var r0 *provisioning.StorageConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*provisioning.StorageConfiguration, error)); ok {
		return rf(ctx, storageConfigurationId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *provisioning.StorageConfiguration); ok {
		r0 = rf(ctx, storageConfigurationId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provisioning.StorageConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, storageConfigurationId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorageAPIInterface_GetByStorageConfigurationId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByStorageConfigurationId'
type MockStorageAPIInterface_GetByStorageConfigurationId_Call struct {
	*mock.Call
}

// GetByStorageConfigurationId is a helper method to define mock.On call
//   - ctx context.Context
//   - storageConfigurationId string
func (_e *MockStorageAPIInterface_Expecter) GetByStorageConfigurationId(ctx interface{}, storageConfigurationId interface{}) *MockStorageAPIInterface_GetByStorageConfigurationId_Call {
	return &MockStorageAPIInterface_GetByStorageConfigurationId_Call{Call: _e.mock.On("GetByStorageConfigurationId", ctx, storageConfigurationId)}
}

func (_c *MockStorageAPIInterface_GetByStorageConfigurationId_Call) Run(run func(ctx context.Context, storageConfigurationId string)) *MockStorageAPIInterface_GetByStorageConfigurationId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStorageAPIInterface_GetByStorageConfigurationId_Call) Return(_a0 *provisioning.StorageConfiguration, _a1 error) *MockStorageAPIInterface_GetByStorageConfigurationId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorageAPIInterface_GetByStorageConfigurationId_Call) RunAndReturn(run func(context.Context, string) (*provisioning.StorageConfiguration, error)) *MockStorageAPIInterface_GetByStorageConfigurationId_Call {
	_c.Call.Return(run)
	return _c
}

// GetByStorageConfigurationName provides a mock function with given fields: ctx, name
func (_m *MockStorageAPIInterface) GetByStorageConfigurationName(ctx context.Context, name string) (*provisioning.StorageConfiguration, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetByStorageConfigurationName")
	}

	var r0 *provisioning.StorageConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*provisioning.StorageConfiguration, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *provisioning.StorageConfiguration); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provisioning.StorageConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorageAPIInterface_GetByStorageConfigurationName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByStorageConfigurationName'
type MockStorageAPIInterface_GetByStorageConfigurationName_Call struct {
	*mock.Call
}

// GetByStorageConfigurationName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockStorageAPIInterface_Expecter) GetByStorageConfigurationName(ctx interface{}, name interface{}) *MockStorageAPIInterface_GetByStorageConfigurationName_Call {
	return &MockStorageAPIInterface_GetByStorageConfigurationName_Call{Call: _e.mock.On("GetByStorageConfigurationName", ctx, name)}
}

func (_c *MockStorageAPIInterface_GetByStorageConfigurationName_Call) Run(run func(ctx context.Context, name string)) *MockStorageAPIInterface_GetByStorageConfigurationName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStorageAPIInterface_GetByStorageConfigurationName_Call) Return(_a0 *provisioning.StorageConfiguration, _a1 error) *MockStorageAPIInterface_GetByStorageConfigurationName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorageAPIInterface_GetByStorageConfigurationName_Call) RunAndReturn(run func(context.Context, string) (*provisioning.StorageConfiguration, error)) *MockStorageAPIInterface_GetByStorageConfigurationName_Call {
	_c.Call.Return(run)
	return _c
}

// Impl provides a mock function with given fields:
func (_m *MockStorageAPIInterface) Impl() provisioning.StorageService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 provisioning.StorageService
	if rf, ok := ret.Get(0).(func() provisioning.StorageService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(provisioning.StorageService)
		}
	}

	return r0
}

// MockStorageAPIInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockStorageAPIInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockStorageAPIInterface_Expecter) Impl() *MockStorageAPIInterface_Impl_Call {
	return &MockStorageAPIInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockStorageAPIInterface_Impl_Call) Run(run func()) *MockStorageAPIInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStorageAPIInterface_Impl_Call) Return(_a0 provisioning.StorageService) *MockStorageAPIInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorageAPIInterface_Impl_Call) RunAndReturn(run func() provisioning.StorageService) *MockStorageAPIInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx
func (_m *MockStorageAPIInterface) List(ctx context.Context) ([]provisioning.StorageConfiguration, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []provisioning.StorageConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]provisioning.StorageConfiguration, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []provisioning.StorageConfiguration); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]provisioning.StorageConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorageAPIInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockStorageAPIInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockStorageAPIInterface_Expecter) List(ctx interface{}) *MockStorageAPIInterface_List_Call {
	return &MockStorageAPIInterface_List_Call{Call: _e.mock.On("List", ctx)}
}

func (_c *MockStorageAPIInterface_List_Call) Run(run func(ctx context.Context)) *MockStorageAPIInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockStorageAPIInterface_List_Call) Return(_a0 []provisioning.StorageConfiguration, _a1 error) *MockStorageAPIInterface_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorageAPIInterface_List_Call) RunAndReturn(run func(context.Context) ([]provisioning.StorageConfiguration, error)) *MockStorageAPIInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// StorageConfigurationStorageConfigurationNameToStorageConfigurationIdMap provides a mock function with given fields: ctx
func (_m *MockStorageAPIInterface) StorageConfigurationStorageConfigurationNameToStorageConfigurationIdMap(ctx context.Context) (map[string]string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for StorageConfigurationStorageConfigurationNameToStorageConfigurationIdMap")
	}

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (map[string]string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) map[string]string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorageAPIInterface_StorageConfigurationStorageConfigurationNameToStorageConfigurationIdMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StorageConfigurationStorageConfigurationNameToStorageConfigurationIdMap'
type MockStorageAPIInterface_StorageConfigurationStorageConfigurationNameToStorageConfigurationIdMap_Call struct {
	*mock.Call
}

// StorageConfigurationStorageConfigurationNameToStorageConfigurationIdMap is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockStorageAPIInterface_Expecter) StorageConfigurationStorageConfigurationNameToStorageConfigurationIdMap(ctx interface{}) *MockStorageAPIInterface_StorageConfigurationStorageConfigurationNameToStorageConfigurationIdMap_Call {
	return &MockStorageAPIInterface_StorageConfigurationStorageConfigurationNameToStorageConfigurationIdMap_Call{Call: _e.mock.On("StorageConfigurationStorageConfigurationNameToStorageConfigurationIdMap", ctx)}
}

func (_c *MockStorageAPIInterface_StorageConfigurationStorageConfigurationNameToStorageConfigurationIdMap_Call) Run(run func(ctx context.Context)) *MockStorageAPIInterface_StorageConfigurationStorageConfigurationNameToStorageConfigurationIdMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockStorageAPIInterface_StorageConfigurationStorageConfigurationNameToStorageConfigurationIdMap_Call) Return(_a0 map[string]string, _a1 error) *MockStorageAPIInterface_StorageConfigurationStorageConfigurationNameToStorageConfigurationIdMap_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorageAPIInterface_StorageConfigurationStorageConfigurationNameToStorageConfigurationIdMap_Call) RunAndReturn(run func(context.Context) (map[string]string, error)) *MockStorageAPIInterface_StorageConfigurationStorageConfigurationNameToStorageConfigurationIdMap_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockStorageAPIInterface) WithImpl(impl provisioning.StorageService) provisioning.StorageAPIInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 provisioning.StorageAPIInterface
	if rf, ok := ret.Get(0).(func(provisioning.StorageService) provisioning.StorageAPIInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(provisioning.StorageAPIInterface)
		}
	}

	return r0
}

// MockStorageAPIInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockStorageAPIInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl provisioning.StorageService
func (_e *MockStorageAPIInterface_Expecter) WithImpl(impl interface{}) *MockStorageAPIInterface_WithImpl_Call {
	return &MockStorageAPIInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockStorageAPIInterface_WithImpl_Call) Run(run func(impl provisioning.StorageService)) *MockStorageAPIInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(provisioning.StorageService))
	})
	return _c
}

func (_c *MockStorageAPIInterface_WithImpl_Call) Return(_a0 provisioning.StorageAPIInterface) *MockStorageAPIInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorageAPIInterface_WithImpl_Call) RunAndReturn(run func(provisioning.StorageService) provisioning.StorageAPIInterface) *MockStorageAPIInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStorageAPIInterface creates a new instance of MockStorageAPIInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStorageAPIInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStorageAPIInterface {
	mock := &MockStorageAPIInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
