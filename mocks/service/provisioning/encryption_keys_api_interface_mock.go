// Code generated by mockery v2.38.0. DO NOT EDIT.

package provisioning

import (
	context "context"

	provisioning "github.com/databricks/databricks-sdk-go/service/provisioning"
	mock "github.com/stretchr/testify/mock"
)

// MockEncryptionKeysAPIInterface is an autogenerated mock type for the EncryptionKeysAPIInterface type
type MockEncryptionKeysAPIInterface struct {
	mock.Mock
}

type MockEncryptionKeysAPIInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEncryptionKeysAPIInterface) EXPECT() *MockEncryptionKeysAPIInterface_Expecter {
	return &MockEncryptionKeysAPIInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, request
func (_m *MockEncryptionKeysAPIInterface) Create(ctx context.Context, request provisioning.CreateCustomerManagedKeyRequest) (*provisioning.CustomerManagedKey, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *provisioning.CustomerManagedKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, provisioning.CreateCustomerManagedKeyRequest) (*provisioning.CustomerManagedKey, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, provisioning.CreateCustomerManagedKeyRequest) *provisioning.CustomerManagedKey); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provisioning.CustomerManagedKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, provisioning.CreateCustomerManagedKeyRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEncryptionKeysAPIInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockEncryptionKeysAPIInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - request provisioning.CreateCustomerManagedKeyRequest
func (_e *MockEncryptionKeysAPIInterface_Expecter) Create(ctx interface{}, request interface{}) *MockEncryptionKeysAPIInterface_Create_Call {
	return &MockEncryptionKeysAPIInterface_Create_Call{Call: _e.mock.On("Create", ctx, request)}
}

func (_c *MockEncryptionKeysAPIInterface_Create_Call) Run(run func(ctx context.Context, request provisioning.CreateCustomerManagedKeyRequest)) *MockEncryptionKeysAPIInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(provisioning.CreateCustomerManagedKeyRequest))
	})
	return _c
}

func (_c *MockEncryptionKeysAPIInterface_Create_Call) Return(_a0 *provisioning.CustomerManagedKey, _a1 error) *MockEncryptionKeysAPIInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEncryptionKeysAPIInterface_Create_Call) RunAndReturn(run func(context.Context, provisioning.CreateCustomerManagedKeyRequest) (*provisioning.CustomerManagedKey, error)) *MockEncryptionKeysAPIInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, request
func (_m *MockEncryptionKeysAPIInterface) Delete(ctx context.Context, request provisioning.DeleteEncryptionKeyRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, provisioning.DeleteEncryptionKeyRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEncryptionKeysAPIInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockEncryptionKeysAPIInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - request provisioning.DeleteEncryptionKeyRequest
func (_e *MockEncryptionKeysAPIInterface_Expecter) Delete(ctx interface{}, request interface{}) *MockEncryptionKeysAPIInterface_Delete_Call {
	return &MockEncryptionKeysAPIInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, request)}
}

func (_c *MockEncryptionKeysAPIInterface_Delete_Call) Run(run func(ctx context.Context, request provisioning.DeleteEncryptionKeyRequest)) *MockEncryptionKeysAPIInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(provisioning.DeleteEncryptionKeyRequest))
	})
	return _c
}

func (_c *MockEncryptionKeysAPIInterface_Delete_Call) Return(_a0 error) *MockEncryptionKeysAPIInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEncryptionKeysAPIInterface_Delete_Call) RunAndReturn(run func(context.Context, provisioning.DeleteEncryptionKeyRequest) error) *MockEncryptionKeysAPIInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByCustomerManagedKeyId provides a mock function with given fields: ctx, customerManagedKeyId
func (_m *MockEncryptionKeysAPIInterface) DeleteByCustomerManagedKeyId(ctx context.Context, customerManagedKeyId string) error {
	ret := _m.Called(ctx, customerManagedKeyId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByCustomerManagedKeyId")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, customerManagedKeyId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEncryptionKeysAPIInterface_DeleteByCustomerManagedKeyId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByCustomerManagedKeyId'
type MockEncryptionKeysAPIInterface_DeleteByCustomerManagedKeyId_Call struct {
	*mock.Call
}

// DeleteByCustomerManagedKeyId is a helper method to define mock.On call
//   - ctx context.Context
//   - customerManagedKeyId string
func (_e *MockEncryptionKeysAPIInterface_Expecter) DeleteByCustomerManagedKeyId(ctx interface{}, customerManagedKeyId interface{}) *MockEncryptionKeysAPIInterface_DeleteByCustomerManagedKeyId_Call {
	return &MockEncryptionKeysAPIInterface_DeleteByCustomerManagedKeyId_Call{Call: _e.mock.On("DeleteByCustomerManagedKeyId", ctx, customerManagedKeyId)}
}

func (_c *MockEncryptionKeysAPIInterface_DeleteByCustomerManagedKeyId_Call) Run(run func(ctx context.Context, customerManagedKeyId string)) *MockEncryptionKeysAPIInterface_DeleteByCustomerManagedKeyId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockEncryptionKeysAPIInterface_DeleteByCustomerManagedKeyId_Call) Return(_a0 error) *MockEncryptionKeysAPIInterface_DeleteByCustomerManagedKeyId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEncryptionKeysAPIInterface_DeleteByCustomerManagedKeyId_Call) RunAndReturn(run func(context.Context, string) error) *MockEncryptionKeysAPIInterface_DeleteByCustomerManagedKeyId_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, request
func (_m *MockEncryptionKeysAPIInterface) Get(ctx context.Context, request provisioning.GetEncryptionKeyRequest) (*provisioning.CustomerManagedKey, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *provisioning.CustomerManagedKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, provisioning.GetEncryptionKeyRequest) (*provisioning.CustomerManagedKey, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, provisioning.GetEncryptionKeyRequest) *provisioning.CustomerManagedKey); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provisioning.CustomerManagedKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, provisioning.GetEncryptionKeyRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEncryptionKeysAPIInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockEncryptionKeysAPIInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - request provisioning.GetEncryptionKeyRequest
func (_e *MockEncryptionKeysAPIInterface_Expecter) Get(ctx interface{}, request interface{}) *MockEncryptionKeysAPIInterface_Get_Call {
	return &MockEncryptionKeysAPIInterface_Get_Call{Call: _e.mock.On("Get", ctx, request)}
}

func (_c *MockEncryptionKeysAPIInterface_Get_Call) Run(run func(ctx context.Context, request provisioning.GetEncryptionKeyRequest)) *MockEncryptionKeysAPIInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(provisioning.GetEncryptionKeyRequest))
	})
	return _c
}

func (_c *MockEncryptionKeysAPIInterface_Get_Call) Return(_a0 *provisioning.CustomerManagedKey, _a1 error) *MockEncryptionKeysAPIInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEncryptionKeysAPIInterface_Get_Call) RunAndReturn(run func(context.Context, provisioning.GetEncryptionKeyRequest) (*provisioning.CustomerManagedKey, error)) *MockEncryptionKeysAPIInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByCustomerManagedKeyId provides a mock function with given fields: ctx, customerManagedKeyId
func (_m *MockEncryptionKeysAPIInterface) GetByCustomerManagedKeyId(ctx context.Context, customerManagedKeyId string) (*provisioning.CustomerManagedKey, error) {
	ret := _m.Called(ctx, customerManagedKeyId)

	if len(ret) == 0 {
		panic("no return value specified for GetByCustomerManagedKeyId")
	}

	var r0 *provisioning.CustomerManagedKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*provisioning.CustomerManagedKey, error)); ok {
		return rf(ctx, customerManagedKeyId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *provisioning.CustomerManagedKey); ok {
		r0 = rf(ctx, customerManagedKeyId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provisioning.CustomerManagedKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, customerManagedKeyId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEncryptionKeysAPIInterface_GetByCustomerManagedKeyId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByCustomerManagedKeyId'
type MockEncryptionKeysAPIInterface_GetByCustomerManagedKeyId_Call struct {
	*mock.Call
}

// GetByCustomerManagedKeyId is a helper method to define mock.On call
//   - ctx context.Context
//   - customerManagedKeyId string
func (_e *MockEncryptionKeysAPIInterface_Expecter) GetByCustomerManagedKeyId(ctx interface{}, customerManagedKeyId interface{}) *MockEncryptionKeysAPIInterface_GetByCustomerManagedKeyId_Call {
	return &MockEncryptionKeysAPIInterface_GetByCustomerManagedKeyId_Call{Call: _e.mock.On("GetByCustomerManagedKeyId", ctx, customerManagedKeyId)}
}

func (_c *MockEncryptionKeysAPIInterface_GetByCustomerManagedKeyId_Call) Run(run func(ctx context.Context, customerManagedKeyId string)) *MockEncryptionKeysAPIInterface_GetByCustomerManagedKeyId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockEncryptionKeysAPIInterface_GetByCustomerManagedKeyId_Call) Return(_a0 *provisioning.CustomerManagedKey, _a1 error) *MockEncryptionKeysAPIInterface_GetByCustomerManagedKeyId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEncryptionKeysAPIInterface_GetByCustomerManagedKeyId_Call) RunAndReturn(run func(context.Context, string) (*provisioning.CustomerManagedKey, error)) *MockEncryptionKeysAPIInterface_GetByCustomerManagedKeyId_Call {
	_c.Call.Return(run)
	return _c
}

// Impl provides a mock function with given fields:
func (_m *MockEncryptionKeysAPIInterface) Impl() provisioning.EncryptionKeysService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 provisioning.EncryptionKeysService
	if rf, ok := ret.Get(0).(func() provisioning.EncryptionKeysService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(provisioning.EncryptionKeysService)
		}
	}

	return r0
}

// MockEncryptionKeysAPIInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockEncryptionKeysAPIInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockEncryptionKeysAPIInterface_Expecter) Impl() *MockEncryptionKeysAPIInterface_Impl_Call {
	return &MockEncryptionKeysAPIInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockEncryptionKeysAPIInterface_Impl_Call) Run(run func()) *MockEncryptionKeysAPIInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEncryptionKeysAPIInterface_Impl_Call) Return(_a0 provisioning.EncryptionKeysService) *MockEncryptionKeysAPIInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEncryptionKeysAPIInterface_Impl_Call) RunAndReturn(run func() provisioning.EncryptionKeysService) *MockEncryptionKeysAPIInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx
func (_m *MockEncryptionKeysAPIInterface) List(ctx context.Context) ([]provisioning.CustomerManagedKey, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []provisioning.CustomerManagedKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]provisioning.CustomerManagedKey, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []provisioning.CustomerManagedKey); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]provisioning.CustomerManagedKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEncryptionKeysAPIInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockEncryptionKeysAPIInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockEncryptionKeysAPIInterface_Expecter) List(ctx interface{}) *MockEncryptionKeysAPIInterface_List_Call {
	return &MockEncryptionKeysAPIInterface_List_Call{Call: _e.mock.On("List", ctx)}
}

func (_c *MockEncryptionKeysAPIInterface_List_Call) Run(run func(ctx context.Context)) *MockEncryptionKeysAPIInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockEncryptionKeysAPIInterface_List_Call) Return(_a0 []provisioning.CustomerManagedKey, _a1 error) *MockEncryptionKeysAPIInterface_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEncryptionKeysAPIInterface_List_Call) RunAndReturn(run func(context.Context) ([]provisioning.CustomerManagedKey, error)) *MockEncryptionKeysAPIInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockEncryptionKeysAPIInterface) WithImpl(impl provisioning.EncryptionKeysService) provisioning.EncryptionKeysAPIInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 provisioning.EncryptionKeysAPIInterface
	if rf, ok := ret.Get(0).(func(provisioning.EncryptionKeysService) provisioning.EncryptionKeysAPIInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(provisioning.EncryptionKeysAPIInterface)
		}
	}

	return r0
}

// MockEncryptionKeysAPIInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockEncryptionKeysAPIInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl provisioning.EncryptionKeysService
func (_e *MockEncryptionKeysAPIInterface_Expecter) WithImpl(impl interface{}) *MockEncryptionKeysAPIInterface_WithImpl_Call {
	return &MockEncryptionKeysAPIInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockEncryptionKeysAPIInterface_WithImpl_Call) Run(run func(impl provisioning.EncryptionKeysService)) *MockEncryptionKeysAPIInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(provisioning.EncryptionKeysService))
	})
	return _c
}

func (_c *MockEncryptionKeysAPIInterface_WithImpl_Call) Return(_a0 provisioning.EncryptionKeysAPIInterface) *MockEncryptionKeysAPIInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEncryptionKeysAPIInterface_WithImpl_Call) RunAndReturn(run func(provisioning.EncryptionKeysService) provisioning.EncryptionKeysAPIInterface) *MockEncryptionKeysAPIInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEncryptionKeysAPIInterface creates a new instance of MockEncryptionKeysAPIInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEncryptionKeysAPIInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEncryptionKeysAPIInterface {
	mock := &MockEncryptionKeysAPIInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
