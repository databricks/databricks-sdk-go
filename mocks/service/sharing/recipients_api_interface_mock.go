// Code generated by mockery v2.38.0. DO NOT EDIT.

package sharing

import (
	context "context"

	listing "github.com/databricks/databricks-sdk-go/listing"
	mock "github.com/stretchr/testify/mock"

	sharing "github.com/databricks/databricks-sdk-go/service/sharing"
)

// MockRecipientsAPIInterface is an autogenerated mock type for the RecipientsAPIInterface type
type MockRecipientsAPIInterface struct {
	mock.Mock
}

type MockRecipientsAPIInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRecipientsAPIInterface) EXPECT() *MockRecipientsAPIInterface_Expecter {
	return &MockRecipientsAPIInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, request
func (_m *MockRecipientsAPIInterface) Create(ctx context.Context, request sharing.CreateRecipient) (*sharing.RecipientInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *sharing.RecipientInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sharing.CreateRecipient) (*sharing.RecipientInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sharing.CreateRecipient) *sharing.RecipientInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sharing.RecipientInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sharing.CreateRecipient) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRecipientsAPIInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockRecipientsAPIInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - request sharing.CreateRecipient
func (_e *MockRecipientsAPIInterface_Expecter) Create(ctx interface{}, request interface{}) *MockRecipientsAPIInterface_Create_Call {
	return &MockRecipientsAPIInterface_Create_Call{Call: _e.mock.On("Create", ctx, request)}
}

func (_c *MockRecipientsAPIInterface_Create_Call) Run(run func(ctx context.Context, request sharing.CreateRecipient)) *MockRecipientsAPIInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sharing.CreateRecipient))
	})
	return _c
}

func (_c *MockRecipientsAPIInterface_Create_Call) Return(_a0 *sharing.RecipientInfo, _a1 error) *MockRecipientsAPIInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRecipientsAPIInterface_Create_Call) RunAndReturn(run func(context.Context, sharing.CreateRecipient) (*sharing.RecipientInfo, error)) *MockRecipientsAPIInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, request
func (_m *MockRecipientsAPIInterface) Delete(ctx context.Context, request sharing.DeleteRecipientRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sharing.DeleteRecipientRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRecipientsAPIInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockRecipientsAPIInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - request sharing.DeleteRecipientRequest
func (_e *MockRecipientsAPIInterface_Expecter) Delete(ctx interface{}, request interface{}) *MockRecipientsAPIInterface_Delete_Call {
	return &MockRecipientsAPIInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, request)}
}

func (_c *MockRecipientsAPIInterface_Delete_Call) Run(run func(ctx context.Context, request sharing.DeleteRecipientRequest)) *MockRecipientsAPIInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sharing.DeleteRecipientRequest))
	})
	return _c
}

func (_c *MockRecipientsAPIInterface_Delete_Call) Return(_a0 error) *MockRecipientsAPIInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRecipientsAPIInterface_Delete_Call) RunAndReturn(run func(context.Context, sharing.DeleteRecipientRequest) error) *MockRecipientsAPIInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByName provides a mock function with given fields: ctx, name
func (_m *MockRecipientsAPIInterface) DeleteByName(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByName")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRecipientsAPIInterface_DeleteByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByName'
type MockRecipientsAPIInterface_DeleteByName_Call struct {
	*mock.Call
}

// DeleteByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockRecipientsAPIInterface_Expecter) DeleteByName(ctx interface{}, name interface{}) *MockRecipientsAPIInterface_DeleteByName_Call {
	return &MockRecipientsAPIInterface_DeleteByName_Call{Call: _e.mock.On("DeleteByName", ctx, name)}
}

func (_c *MockRecipientsAPIInterface_DeleteByName_Call) Run(run func(ctx context.Context, name string)) *MockRecipientsAPIInterface_DeleteByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRecipientsAPIInterface_DeleteByName_Call) Return(_a0 error) *MockRecipientsAPIInterface_DeleteByName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRecipientsAPIInterface_DeleteByName_Call) RunAndReturn(run func(context.Context, string) error) *MockRecipientsAPIInterface_DeleteByName_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, request
func (_m *MockRecipientsAPIInterface) Get(ctx context.Context, request sharing.GetRecipientRequest) (*sharing.RecipientInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *sharing.RecipientInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sharing.GetRecipientRequest) (*sharing.RecipientInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sharing.GetRecipientRequest) *sharing.RecipientInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sharing.RecipientInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sharing.GetRecipientRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRecipientsAPIInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockRecipientsAPIInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - request sharing.GetRecipientRequest
func (_e *MockRecipientsAPIInterface_Expecter) Get(ctx interface{}, request interface{}) *MockRecipientsAPIInterface_Get_Call {
	return &MockRecipientsAPIInterface_Get_Call{Call: _e.mock.On("Get", ctx, request)}
}

func (_c *MockRecipientsAPIInterface_Get_Call) Run(run func(ctx context.Context, request sharing.GetRecipientRequest)) *MockRecipientsAPIInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sharing.GetRecipientRequest))
	})
	return _c
}

func (_c *MockRecipientsAPIInterface_Get_Call) Return(_a0 *sharing.RecipientInfo, _a1 error) *MockRecipientsAPIInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRecipientsAPIInterface_Get_Call) RunAndReturn(run func(context.Context, sharing.GetRecipientRequest) (*sharing.RecipientInfo, error)) *MockRecipientsAPIInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByName provides a mock function with given fields: ctx, name
func (_m *MockRecipientsAPIInterface) GetByName(ctx context.Context, name string) (*sharing.RecipientInfo, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetByName")
	}

	var r0 *sharing.RecipientInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*sharing.RecipientInfo, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *sharing.RecipientInfo); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sharing.RecipientInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRecipientsAPIInterface_GetByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByName'
type MockRecipientsAPIInterface_GetByName_Call struct {
	*mock.Call
}

// GetByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockRecipientsAPIInterface_Expecter) GetByName(ctx interface{}, name interface{}) *MockRecipientsAPIInterface_GetByName_Call {
	return &MockRecipientsAPIInterface_GetByName_Call{Call: _e.mock.On("GetByName", ctx, name)}
}

func (_c *MockRecipientsAPIInterface_GetByName_Call) Run(run func(ctx context.Context, name string)) *MockRecipientsAPIInterface_GetByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRecipientsAPIInterface_GetByName_Call) Return(_a0 *sharing.RecipientInfo, _a1 error) *MockRecipientsAPIInterface_GetByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRecipientsAPIInterface_GetByName_Call) RunAndReturn(run func(context.Context, string) (*sharing.RecipientInfo, error)) *MockRecipientsAPIInterface_GetByName_Call {
	_c.Call.Return(run)
	return _c
}

// Impl provides a mock function with given fields:
func (_m *MockRecipientsAPIInterface) Impl() sharing.RecipientsService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 sharing.RecipientsService
	if rf, ok := ret.Get(0).(func() sharing.RecipientsService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sharing.RecipientsService)
		}
	}

	return r0
}

// MockRecipientsAPIInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockRecipientsAPIInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockRecipientsAPIInterface_Expecter) Impl() *MockRecipientsAPIInterface_Impl_Call {
	return &MockRecipientsAPIInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockRecipientsAPIInterface_Impl_Call) Run(run func()) *MockRecipientsAPIInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRecipientsAPIInterface_Impl_Call) Return(_a0 sharing.RecipientsService) *MockRecipientsAPIInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRecipientsAPIInterface_Impl_Call) RunAndReturn(run func() sharing.RecipientsService) *MockRecipientsAPIInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, request
func (_m *MockRecipientsAPIInterface) List(ctx context.Context, request sharing.ListRecipientsRequest) *listing.PaginatingIterator[sharing.ListRecipientsRequest, *sharing.ListRecipientsResponse, sharing.RecipientInfo] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *listing.PaginatingIterator[sharing.ListRecipientsRequest, *sharing.ListRecipientsResponse, sharing.RecipientInfo]
	if rf, ok := ret.Get(0).(func(context.Context, sharing.ListRecipientsRequest) *listing.PaginatingIterator[sharing.ListRecipientsRequest, *sharing.ListRecipientsResponse, sharing.RecipientInfo]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*listing.PaginatingIterator[sharing.ListRecipientsRequest, *sharing.ListRecipientsResponse, sharing.RecipientInfo])
		}
	}

	return r0
}

// MockRecipientsAPIInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockRecipientsAPIInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - request sharing.ListRecipientsRequest
func (_e *MockRecipientsAPIInterface_Expecter) List(ctx interface{}, request interface{}) *MockRecipientsAPIInterface_List_Call {
	return &MockRecipientsAPIInterface_List_Call{Call: _e.mock.On("List", ctx, request)}
}

func (_c *MockRecipientsAPIInterface_List_Call) Run(run func(ctx context.Context, request sharing.ListRecipientsRequest)) *MockRecipientsAPIInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sharing.ListRecipientsRequest))
	})
	return _c
}

func (_c *MockRecipientsAPIInterface_List_Call) Return(_a0 *listing.PaginatingIterator[sharing.ListRecipientsRequest, *sharing.ListRecipientsResponse, sharing.RecipientInfo]) *MockRecipientsAPIInterface_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRecipientsAPIInterface_List_Call) RunAndReturn(run func(context.Context, sharing.ListRecipientsRequest) *listing.PaginatingIterator[sharing.ListRecipientsRequest, *sharing.ListRecipientsResponse, sharing.RecipientInfo]) *MockRecipientsAPIInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListAll provides a mock function with given fields: ctx, request
func (_m *MockRecipientsAPIInterface) ListAll(ctx context.Context, request sharing.ListRecipientsRequest) ([]sharing.RecipientInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListAll")
	}

	var r0 []sharing.RecipientInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sharing.ListRecipientsRequest) ([]sharing.RecipientInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sharing.ListRecipientsRequest) []sharing.RecipientInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sharing.RecipientInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sharing.ListRecipientsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRecipientsAPIInterface_ListAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAll'
type MockRecipientsAPIInterface_ListAll_Call struct {
	*mock.Call
}

// ListAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request sharing.ListRecipientsRequest
func (_e *MockRecipientsAPIInterface_Expecter) ListAll(ctx interface{}, request interface{}) *MockRecipientsAPIInterface_ListAll_Call {
	return &MockRecipientsAPIInterface_ListAll_Call{Call: _e.mock.On("ListAll", ctx, request)}
}

func (_c *MockRecipientsAPIInterface_ListAll_Call) Run(run func(ctx context.Context, request sharing.ListRecipientsRequest)) *MockRecipientsAPIInterface_ListAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sharing.ListRecipientsRequest))
	})
	return _c
}

func (_c *MockRecipientsAPIInterface_ListAll_Call) Return(_a0 []sharing.RecipientInfo, _a1 error) *MockRecipientsAPIInterface_ListAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRecipientsAPIInterface_ListAll_Call) RunAndReturn(run func(context.Context, sharing.ListRecipientsRequest) ([]sharing.RecipientInfo, error)) *MockRecipientsAPIInterface_ListAll_Call {
	_c.Call.Return(run)
	return _c
}

// RecipientInfoNameToMetastoreIdMap provides a mock function with given fields: ctx, request
func (_m *MockRecipientsAPIInterface) RecipientInfoNameToMetastoreIdMap(ctx context.Context, request sharing.ListRecipientsRequest) (map[string]string, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for RecipientInfoNameToMetastoreIdMap")
	}

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sharing.ListRecipientsRequest) (map[string]string, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sharing.ListRecipientsRequest) map[string]string); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sharing.ListRecipientsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRecipientsAPIInterface_RecipientInfoNameToMetastoreIdMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecipientInfoNameToMetastoreIdMap'
type MockRecipientsAPIInterface_RecipientInfoNameToMetastoreIdMap_Call struct {
	*mock.Call
}

// RecipientInfoNameToMetastoreIdMap is a helper method to define mock.On call
//   - ctx context.Context
//   - request sharing.ListRecipientsRequest
func (_e *MockRecipientsAPIInterface_Expecter) RecipientInfoNameToMetastoreIdMap(ctx interface{}, request interface{}) *MockRecipientsAPIInterface_RecipientInfoNameToMetastoreIdMap_Call {
	return &MockRecipientsAPIInterface_RecipientInfoNameToMetastoreIdMap_Call{Call: _e.mock.On("RecipientInfoNameToMetastoreIdMap", ctx, request)}
}

func (_c *MockRecipientsAPIInterface_RecipientInfoNameToMetastoreIdMap_Call) Run(run func(ctx context.Context, request sharing.ListRecipientsRequest)) *MockRecipientsAPIInterface_RecipientInfoNameToMetastoreIdMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sharing.ListRecipientsRequest))
	})
	return _c
}

func (_c *MockRecipientsAPIInterface_RecipientInfoNameToMetastoreIdMap_Call) Return(_a0 map[string]string, _a1 error) *MockRecipientsAPIInterface_RecipientInfoNameToMetastoreIdMap_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRecipientsAPIInterface_RecipientInfoNameToMetastoreIdMap_Call) RunAndReturn(run func(context.Context, sharing.ListRecipientsRequest) (map[string]string, error)) *MockRecipientsAPIInterface_RecipientInfoNameToMetastoreIdMap_Call {
	_c.Call.Return(run)
	return _c
}

// RotateToken provides a mock function with given fields: ctx, request
func (_m *MockRecipientsAPIInterface) RotateToken(ctx context.Context, request sharing.RotateRecipientToken) (*sharing.RecipientInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for RotateToken")
	}

	var r0 *sharing.RecipientInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sharing.RotateRecipientToken) (*sharing.RecipientInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sharing.RotateRecipientToken) *sharing.RecipientInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sharing.RecipientInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sharing.RotateRecipientToken) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRecipientsAPIInterface_RotateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RotateToken'
type MockRecipientsAPIInterface_RotateToken_Call struct {
	*mock.Call
}

// RotateToken is a helper method to define mock.On call
//   - ctx context.Context
//   - request sharing.RotateRecipientToken
func (_e *MockRecipientsAPIInterface_Expecter) RotateToken(ctx interface{}, request interface{}) *MockRecipientsAPIInterface_RotateToken_Call {
	return &MockRecipientsAPIInterface_RotateToken_Call{Call: _e.mock.On("RotateToken", ctx, request)}
}

func (_c *MockRecipientsAPIInterface_RotateToken_Call) Run(run func(ctx context.Context, request sharing.RotateRecipientToken)) *MockRecipientsAPIInterface_RotateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sharing.RotateRecipientToken))
	})
	return _c
}

func (_c *MockRecipientsAPIInterface_RotateToken_Call) Return(_a0 *sharing.RecipientInfo, _a1 error) *MockRecipientsAPIInterface_RotateToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRecipientsAPIInterface_RotateToken_Call) RunAndReturn(run func(context.Context, sharing.RotateRecipientToken) (*sharing.RecipientInfo, error)) *MockRecipientsAPIInterface_RotateToken_Call {
	_c.Call.Return(run)
	return _c
}

// SharePermissions provides a mock function with given fields: ctx, request
func (_m *MockRecipientsAPIInterface) SharePermissions(ctx context.Context, request sharing.SharePermissionsRequest) (*sharing.GetRecipientSharePermissionsResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for SharePermissions")
	}

	var r0 *sharing.GetRecipientSharePermissionsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sharing.SharePermissionsRequest) (*sharing.GetRecipientSharePermissionsResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sharing.SharePermissionsRequest) *sharing.GetRecipientSharePermissionsResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sharing.GetRecipientSharePermissionsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sharing.SharePermissionsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRecipientsAPIInterface_SharePermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SharePermissions'
type MockRecipientsAPIInterface_SharePermissions_Call struct {
	*mock.Call
}

// SharePermissions is a helper method to define mock.On call
//   - ctx context.Context
//   - request sharing.SharePermissionsRequest
func (_e *MockRecipientsAPIInterface_Expecter) SharePermissions(ctx interface{}, request interface{}) *MockRecipientsAPIInterface_SharePermissions_Call {
	return &MockRecipientsAPIInterface_SharePermissions_Call{Call: _e.mock.On("SharePermissions", ctx, request)}
}

func (_c *MockRecipientsAPIInterface_SharePermissions_Call) Run(run func(ctx context.Context, request sharing.SharePermissionsRequest)) *MockRecipientsAPIInterface_SharePermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sharing.SharePermissionsRequest))
	})
	return _c
}

func (_c *MockRecipientsAPIInterface_SharePermissions_Call) Return(_a0 *sharing.GetRecipientSharePermissionsResponse, _a1 error) *MockRecipientsAPIInterface_SharePermissions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRecipientsAPIInterface_SharePermissions_Call) RunAndReturn(run func(context.Context, sharing.SharePermissionsRequest) (*sharing.GetRecipientSharePermissionsResponse, error)) *MockRecipientsAPIInterface_SharePermissions_Call {
	_c.Call.Return(run)
	return _c
}

// SharePermissionsByName provides a mock function with given fields: ctx, name
func (_m *MockRecipientsAPIInterface) SharePermissionsByName(ctx context.Context, name string) (*sharing.GetRecipientSharePermissionsResponse, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for SharePermissionsByName")
	}

	var r0 *sharing.GetRecipientSharePermissionsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*sharing.GetRecipientSharePermissionsResponse, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *sharing.GetRecipientSharePermissionsResponse); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sharing.GetRecipientSharePermissionsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRecipientsAPIInterface_SharePermissionsByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SharePermissionsByName'
type MockRecipientsAPIInterface_SharePermissionsByName_Call struct {
	*mock.Call
}

// SharePermissionsByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockRecipientsAPIInterface_Expecter) SharePermissionsByName(ctx interface{}, name interface{}) *MockRecipientsAPIInterface_SharePermissionsByName_Call {
	return &MockRecipientsAPIInterface_SharePermissionsByName_Call{Call: _e.mock.On("SharePermissionsByName", ctx, name)}
}

func (_c *MockRecipientsAPIInterface_SharePermissionsByName_Call) Run(run func(ctx context.Context, name string)) *MockRecipientsAPIInterface_SharePermissionsByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRecipientsAPIInterface_SharePermissionsByName_Call) Return(_a0 *sharing.GetRecipientSharePermissionsResponse, _a1 error) *MockRecipientsAPIInterface_SharePermissionsByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRecipientsAPIInterface_SharePermissionsByName_Call) RunAndReturn(run func(context.Context, string) (*sharing.GetRecipientSharePermissionsResponse, error)) *MockRecipientsAPIInterface_SharePermissionsByName_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, request
func (_m *MockRecipientsAPIInterface) Update(ctx context.Context, request sharing.UpdateRecipient) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sharing.UpdateRecipient) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRecipientsAPIInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockRecipientsAPIInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - request sharing.UpdateRecipient
func (_e *MockRecipientsAPIInterface_Expecter) Update(ctx interface{}, request interface{}) *MockRecipientsAPIInterface_Update_Call {
	return &MockRecipientsAPIInterface_Update_Call{Call: _e.mock.On("Update", ctx, request)}
}

func (_c *MockRecipientsAPIInterface_Update_Call) Run(run func(ctx context.Context, request sharing.UpdateRecipient)) *MockRecipientsAPIInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sharing.UpdateRecipient))
	})
	return _c
}

func (_c *MockRecipientsAPIInterface_Update_Call) Return(_a0 error) *MockRecipientsAPIInterface_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRecipientsAPIInterface_Update_Call) RunAndReturn(run func(context.Context, sharing.UpdateRecipient) error) *MockRecipientsAPIInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockRecipientsAPIInterface) WithImpl(impl sharing.RecipientsService) sharing.RecipientsAPIInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 sharing.RecipientsAPIInterface
	if rf, ok := ret.Get(0).(func(sharing.RecipientsService) sharing.RecipientsAPIInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sharing.RecipientsAPIInterface)
		}
	}

	return r0
}

// MockRecipientsAPIInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockRecipientsAPIInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl sharing.RecipientsService
func (_e *MockRecipientsAPIInterface_Expecter) WithImpl(impl interface{}) *MockRecipientsAPIInterface_WithImpl_Call {
	return &MockRecipientsAPIInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockRecipientsAPIInterface_WithImpl_Call) Run(run func(impl sharing.RecipientsService)) *MockRecipientsAPIInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(sharing.RecipientsService))
	})
	return _c
}

func (_c *MockRecipientsAPIInterface_WithImpl_Call) Return(_a0 sharing.RecipientsAPIInterface) *MockRecipientsAPIInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRecipientsAPIInterface_WithImpl_Call) RunAndReturn(run func(sharing.RecipientsService) sharing.RecipientsAPIInterface) *MockRecipientsAPIInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRecipientsAPIInterface creates a new instance of MockRecipientsAPIInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRecipientsAPIInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRecipientsAPIInterface {
	mock := &MockRecipientsAPIInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
