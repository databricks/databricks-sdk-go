// Code generated by mockery v2.38.0. DO NOT EDIT.

package sharing

import (
	context "context"

	listing "github.com/databricks/databricks-sdk-go/listing"
	mock "github.com/stretchr/testify/mock"

	sharing "github.com/databricks/databricks-sdk-go/service/sharing"
)

// MockProvidersAPIInterface is an autogenerated mock type for the ProvidersAPIInterface type
type MockProvidersAPIInterface struct {
	mock.Mock
}

type MockProvidersAPIInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProvidersAPIInterface) EXPECT() *MockProvidersAPIInterface_Expecter {
	return &MockProvidersAPIInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, request
func (_m *MockProvidersAPIInterface) Create(ctx context.Context, request sharing.CreateProvider) (*sharing.ProviderInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *sharing.ProviderInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sharing.CreateProvider) (*sharing.ProviderInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sharing.CreateProvider) *sharing.ProviderInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sharing.ProviderInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sharing.CreateProvider) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProvidersAPIInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockProvidersAPIInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - request sharing.CreateProvider
func (_e *MockProvidersAPIInterface_Expecter) Create(ctx interface{}, request interface{}) *MockProvidersAPIInterface_Create_Call {
	return &MockProvidersAPIInterface_Create_Call{Call: _e.mock.On("Create", ctx, request)}
}

func (_c *MockProvidersAPIInterface_Create_Call) Run(run func(ctx context.Context, request sharing.CreateProvider)) *MockProvidersAPIInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sharing.CreateProvider))
	})
	return _c
}

func (_c *MockProvidersAPIInterface_Create_Call) Return(_a0 *sharing.ProviderInfo, _a1 error) *MockProvidersAPIInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProvidersAPIInterface_Create_Call) RunAndReturn(run func(context.Context, sharing.CreateProvider) (*sharing.ProviderInfo, error)) *MockProvidersAPIInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, request
func (_m *MockProvidersAPIInterface) Delete(ctx context.Context, request sharing.DeleteProviderRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sharing.DeleteProviderRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockProvidersAPIInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockProvidersAPIInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - request sharing.DeleteProviderRequest
func (_e *MockProvidersAPIInterface_Expecter) Delete(ctx interface{}, request interface{}) *MockProvidersAPIInterface_Delete_Call {
	return &MockProvidersAPIInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, request)}
}

func (_c *MockProvidersAPIInterface_Delete_Call) Run(run func(ctx context.Context, request sharing.DeleteProviderRequest)) *MockProvidersAPIInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sharing.DeleteProviderRequest))
	})
	return _c
}

func (_c *MockProvidersAPIInterface_Delete_Call) Return(_a0 error) *MockProvidersAPIInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProvidersAPIInterface_Delete_Call) RunAndReturn(run func(context.Context, sharing.DeleteProviderRequest) error) *MockProvidersAPIInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByName provides a mock function with given fields: ctx, name
func (_m *MockProvidersAPIInterface) DeleteByName(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByName")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockProvidersAPIInterface_DeleteByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByName'
type MockProvidersAPIInterface_DeleteByName_Call struct {
	*mock.Call
}

// DeleteByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockProvidersAPIInterface_Expecter) DeleteByName(ctx interface{}, name interface{}) *MockProvidersAPIInterface_DeleteByName_Call {
	return &MockProvidersAPIInterface_DeleteByName_Call{Call: _e.mock.On("DeleteByName", ctx, name)}
}

func (_c *MockProvidersAPIInterface_DeleteByName_Call) Run(run func(ctx context.Context, name string)) *MockProvidersAPIInterface_DeleteByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockProvidersAPIInterface_DeleteByName_Call) Return(_a0 error) *MockProvidersAPIInterface_DeleteByName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProvidersAPIInterface_DeleteByName_Call) RunAndReturn(run func(context.Context, string) error) *MockProvidersAPIInterface_DeleteByName_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, request
func (_m *MockProvidersAPIInterface) Get(ctx context.Context, request sharing.GetProviderRequest) (*sharing.ProviderInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *sharing.ProviderInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sharing.GetProviderRequest) (*sharing.ProviderInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sharing.GetProviderRequest) *sharing.ProviderInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sharing.ProviderInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sharing.GetProviderRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProvidersAPIInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockProvidersAPIInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - request sharing.GetProviderRequest
func (_e *MockProvidersAPIInterface_Expecter) Get(ctx interface{}, request interface{}) *MockProvidersAPIInterface_Get_Call {
	return &MockProvidersAPIInterface_Get_Call{Call: _e.mock.On("Get", ctx, request)}
}

func (_c *MockProvidersAPIInterface_Get_Call) Run(run func(ctx context.Context, request sharing.GetProviderRequest)) *MockProvidersAPIInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sharing.GetProviderRequest))
	})
	return _c
}

func (_c *MockProvidersAPIInterface_Get_Call) Return(_a0 *sharing.ProviderInfo, _a1 error) *MockProvidersAPIInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProvidersAPIInterface_Get_Call) RunAndReturn(run func(context.Context, sharing.GetProviderRequest) (*sharing.ProviderInfo, error)) *MockProvidersAPIInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByName provides a mock function with given fields: ctx, name
func (_m *MockProvidersAPIInterface) GetByName(ctx context.Context, name string) (*sharing.ProviderInfo, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetByName")
	}

	var r0 *sharing.ProviderInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*sharing.ProviderInfo, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *sharing.ProviderInfo); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sharing.ProviderInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProvidersAPIInterface_GetByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByName'
type MockProvidersAPIInterface_GetByName_Call struct {
	*mock.Call
}

// GetByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockProvidersAPIInterface_Expecter) GetByName(ctx interface{}, name interface{}) *MockProvidersAPIInterface_GetByName_Call {
	return &MockProvidersAPIInterface_GetByName_Call{Call: _e.mock.On("GetByName", ctx, name)}
}

func (_c *MockProvidersAPIInterface_GetByName_Call) Run(run func(ctx context.Context, name string)) *MockProvidersAPIInterface_GetByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockProvidersAPIInterface_GetByName_Call) Return(_a0 *sharing.ProviderInfo, _a1 error) *MockProvidersAPIInterface_GetByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProvidersAPIInterface_GetByName_Call) RunAndReturn(run func(context.Context, string) (*sharing.ProviderInfo, error)) *MockProvidersAPIInterface_GetByName_Call {
	_c.Call.Return(run)
	return _c
}

// Impl provides a mock function with given fields:
func (_m *MockProvidersAPIInterface) Impl() sharing.ProvidersService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 sharing.ProvidersService
	if rf, ok := ret.Get(0).(func() sharing.ProvidersService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sharing.ProvidersService)
		}
	}

	return r0
}

// MockProvidersAPIInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockProvidersAPIInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockProvidersAPIInterface_Expecter) Impl() *MockProvidersAPIInterface_Impl_Call {
	return &MockProvidersAPIInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockProvidersAPIInterface_Impl_Call) Run(run func()) *MockProvidersAPIInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockProvidersAPIInterface_Impl_Call) Return(_a0 sharing.ProvidersService) *MockProvidersAPIInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProvidersAPIInterface_Impl_Call) RunAndReturn(run func() sharing.ProvidersService) *MockProvidersAPIInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, request
func (_m *MockProvidersAPIInterface) List(ctx context.Context, request sharing.ListProvidersRequest) *listing.PaginatingIterator[sharing.ListProvidersRequest, *sharing.ListProvidersResponse, sharing.ProviderInfo] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *listing.PaginatingIterator[sharing.ListProvidersRequest, *sharing.ListProvidersResponse, sharing.ProviderInfo]
	if rf, ok := ret.Get(0).(func(context.Context, sharing.ListProvidersRequest) *listing.PaginatingIterator[sharing.ListProvidersRequest, *sharing.ListProvidersResponse, sharing.ProviderInfo]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*listing.PaginatingIterator[sharing.ListProvidersRequest, *sharing.ListProvidersResponse, sharing.ProviderInfo])
		}
	}

	return r0
}

// MockProvidersAPIInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockProvidersAPIInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - request sharing.ListProvidersRequest
func (_e *MockProvidersAPIInterface_Expecter) List(ctx interface{}, request interface{}) *MockProvidersAPIInterface_List_Call {
	return &MockProvidersAPIInterface_List_Call{Call: _e.mock.On("List", ctx, request)}
}

func (_c *MockProvidersAPIInterface_List_Call) Run(run func(ctx context.Context, request sharing.ListProvidersRequest)) *MockProvidersAPIInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sharing.ListProvidersRequest))
	})
	return _c
}

func (_c *MockProvidersAPIInterface_List_Call) Return(_a0 *listing.PaginatingIterator[sharing.ListProvidersRequest, *sharing.ListProvidersResponse, sharing.ProviderInfo]) *MockProvidersAPIInterface_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProvidersAPIInterface_List_Call) RunAndReturn(run func(context.Context, sharing.ListProvidersRequest) *listing.PaginatingIterator[sharing.ListProvidersRequest, *sharing.ListProvidersResponse, sharing.ProviderInfo]) *MockProvidersAPIInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListAll provides a mock function with given fields: ctx, request
func (_m *MockProvidersAPIInterface) ListAll(ctx context.Context, request sharing.ListProvidersRequest) ([]sharing.ProviderInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListAll")
	}

	var r0 []sharing.ProviderInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sharing.ListProvidersRequest) ([]sharing.ProviderInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sharing.ListProvidersRequest) []sharing.ProviderInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sharing.ProviderInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sharing.ListProvidersRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProvidersAPIInterface_ListAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAll'
type MockProvidersAPIInterface_ListAll_Call struct {
	*mock.Call
}

// ListAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request sharing.ListProvidersRequest
func (_e *MockProvidersAPIInterface_Expecter) ListAll(ctx interface{}, request interface{}) *MockProvidersAPIInterface_ListAll_Call {
	return &MockProvidersAPIInterface_ListAll_Call{Call: _e.mock.On("ListAll", ctx, request)}
}

func (_c *MockProvidersAPIInterface_ListAll_Call) Run(run func(ctx context.Context, request sharing.ListProvidersRequest)) *MockProvidersAPIInterface_ListAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sharing.ListProvidersRequest))
	})
	return _c
}

func (_c *MockProvidersAPIInterface_ListAll_Call) Return(_a0 []sharing.ProviderInfo, _a1 error) *MockProvidersAPIInterface_ListAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProvidersAPIInterface_ListAll_Call) RunAndReturn(run func(context.Context, sharing.ListProvidersRequest) ([]sharing.ProviderInfo, error)) *MockProvidersAPIInterface_ListAll_Call {
	_c.Call.Return(run)
	return _c
}

// ListShares provides a mock function with given fields: ctx, request
func (_m *MockProvidersAPIInterface) ListShares(ctx context.Context, request sharing.ListSharesRequest) *listing.PaginatingIterator[sharing.ListSharesRequest, *sharing.ListProviderSharesResponse, sharing.ProviderShare] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListShares")
	}

	var r0 *listing.PaginatingIterator[sharing.ListSharesRequest, *sharing.ListProviderSharesResponse, sharing.ProviderShare]
	if rf, ok := ret.Get(0).(func(context.Context, sharing.ListSharesRequest) *listing.PaginatingIterator[sharing.ListSharesRequest, *sharing.ListProviderSharesResponse, sharing.ProviderShare]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*listing.PaginatingIterator[sharing.ListSharesRequest, *sharing.ListProviderSharesResponse, sharing.ProviderShare])
		}
	}

	return r0
}

// MockProvidersAPIInterface_ListShares_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListShares'
type MockProvidersAPIInterface_ListShares_Call struct {
	*mock.Call
}

// ListShares is a helper method to define mock.On call
//   - ctx context.Context
//   - request sharing.ListSharesRequest
func (_e *MockProvidersAPIInterface_Expecter) ListShares(ctx interface{}, request interface{}) *MockProvidersAPIInterface_ListShares_Call {
	return &MockProvidersAPIInterface_ListShares_Call{Call: _e.mock.On("ListShares", ctx, request)}
}

func (_c *MockProvidersAPIInterface_ListShares_Call) Run(run func(ctx context.Context, request sharing.ListSharesRequest)) *MockProvidersAPIInterface_ListShares_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sharing.ListSharesRequest))
	})
	return _c
}

func (_c *MockProvidersAPIInterface_ListShares_Call) Return(_a0 *listing.PaginatingIterator[sharing.ListSharesRequest, *sharing.ListProviderSharesResponse, sharing.ProviderShare]) *MockProvidersAPIInterface_ListShares_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProvidersAPIInterface_ListShares_Call) RunAndReturn(run func(context.Context, sharing.ListSharesRequest) *listing.PaginatingIterator[sharing.ListSharesRequest, *sharing.ListProviderSharesResponse, sharing.ProviderShare]) *MockProvidersAPIInterface_ListShares_Call {
	_c.Call.Return(run)
	return _c
}

// ListSharesAll provides a mock function with given fields: ctx, request
func (_m *MockProvidersAPIInterface) ListSharesAll(ctx context.Context, request sharing.ListSharesRequest) ([]sharing.ProviderShare, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListSharesAll")
	}

	var r0 []sharing.ProviderShare
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sharing.ListSharesRequest) ([]sharing.ProviderShare, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sharing.ListSharesRequest) []sharing.ProviderShare); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sharing.ProviderShare)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sharing.ListSharesRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProvidersAPIInterface_ListSharesAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSharesAll'
type MockProvidersAPIInterface_ListSharesAll_Call struct {
	*mock.Call
}

// ListSharesAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request sharing.ListSharesRequest
func (_e *MockProvidersAPIInterface_Expecter) ListSharesAll(ctx interface{}, request interface{}) *MockProvidersAPIInterface_ListSharesAll_Call {
	return &MockProvidersAPIInterface_ListSharesAll_Call{Call: _e.mock.On("ListSharesAll", ctx, request)}
}

func (_c *MockProvidersAPIInterface_ListSharesAll_Call) Run(run func(ctx context.Context, request sharing.ListSharesRequest)) *MockProvidersAPIInterface_ListSharesAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sharing.ListSharesRequest))
	})
	return _c
}

func (_c *MockProvidersAPIInterface_ListSharesAll_Call) Return(_a0 []sharing.ProviderShare, _a1 error) *MockProvidersAPIInterface_ListSharesAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProvidersAPIInterface_ListSharesAll_Call) RunAndReturn(run func(context.Context, sharing.ListSharesRequest) ([]sharing.ProviderShare, error)) *MockProvidersAPIInterface_ListSharesAll_Call {
	_c.Call.Return(run)
	return _c
}

// ListSharesByName provides a mock function with given fields: ctx, name
func (_m *MockProvidersAPIInterface) ListSharesByName(ctx context.Context, name string) (*sharing.ListProviderSharesResponse, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for ListSharesByName")
	}

	var r0 *sharing.ListProviderSharesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*sharing.ListProviderSharesResponse, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *sharing.ListProviderSharesResponse); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sharing.ListProviderSharesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProvidersAPIInterface_ListSharesByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSharesByName'
type MockProvidersAPIInterface_ListSharesByName_Call struct {
	*mock.Call
}

// ListSharesByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockProvidersAPIInterface_Expecter) ListSharesByName(ctx interface{}, name interface{}) *MockProvidersAPIInterface_ListSharesByName_Call {
	return &MockProvidersAPIInterface_ListSharesByName_Call{Call: _e.mock.On("ListSharesByName", ctx, name)}
}

func (_c *MockProvidersAPIInterface_ListSharesByName_Call) Run(run func(ctx context.Context, name string)) *MockProvidersAPIInterface_ListSharesByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockProvidersAPIInterface_ListSharesByName_Call) Return(_a0 *sharing.ListProviderSharesResponse, _a1 error) *MockProvidersAPIInterface_ListSharesByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProvidersAPIInterface_ListSharesByName_Call) RunAndReturn(run func(context.Context, string) (*sharing.ListProviderSharesResponse, error)) *MockProvidersAPIInterface_ListSharesByName_Call {
	_c.Call.Return(run)
	return _c
}

// ProviderInfoNameToMetastoreIdMap provides a mock function with given fields: ctx, request
func (_m *MockProvidersAPIInterface) ProviderInfoNameToMetastoreIdMap(ctx context.Context, request sharing.ListProvidersRequest) (map[string]string, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ProviderInfoNameToMetastoreIdMap")
	}

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sharing.ListProvidersRequest) (map[string]string, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sharing.ListProvidersRequest) map[string]string); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sharing.ListProvidersRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProvidersAPIInterface_ProviderInfoNameToMetastoreIdMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProviderInfoNameToMetastoreIdMap'
type MockProvidersAPIInterface_ProviderInfoNameToMetastoreIdMap_Call struct {
	*mock.Call
}

// ProviderInfoNameToMetastoreIdMap is a helper method to define mock.On call
//   - ctx context.Context
//   - request sharing.ListProvidersRequest
func (_e *MockProvidersAPIInterface_Expecter) ProviderInfoNameToMetastoreIdMap(ctx interface{}, request interface{}) *MockProvidersAPIInterface_ProviderInfoNameToMetastoreIdMap_Call {
	return &MockProvidersAPIInterface_ProviderInfoNameToMetastoreIdMap_Call{Call: _e.mock.On("ProviderInfoNameToMetastoreIdMap", ctx, request)}
}

func (_c *MockProvidersAPIInterface_ProviderInfoNameToMetastoreIdMap_Call) Run(run func(ctx context.Context, request sharing.ListProvidersRequest)) *MockProvidersAPIInterface_ProviderInfoNameToMetastoreIdMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sharing.ListProvidersRequest))
	})
	return _c
}

func (_c *MockProvidersAPIInterface_ProviderInfoNameToMetastoreIdMap_Call) Return(_a0 map[string]string, _a1 error) *MockProvidersAPIInterface_ProviderInfoNameToMetastoreIdMap_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProvidersAPIInterface_ProviderInfoNameToMetastoreIdMap_Call) RunAndReturn(run func(context.Context, sharing.ListProvidersRequest) (map[string]string, error)) *MockProvidersAPIInterface_ProviderInfoNameToMetastoreIdMap_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, request
func (_m *MockProvidersAPIInterface) Update(ctx context.Context, request sharing.UpdateProvider) (*sharing.ProviderInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *sharing.ProviderInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sharing.UpdateProvider) (*sharing.ProviderInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sharing.UpdateProvider) *sharing.ProviderInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sharing.ProviderInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sharing.UpdateProvider) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProvidersAPIInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockProvidersAPIInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - request sharing.UpdateProvider
func (_e *MockProvidersAPIInterface_Expecter) Update(ctx interface{}, request interface{}) *MockProvidersAPIInterface_Update_Call {
	return &MockProvidersAPIInterface_Update_Call{Call: _e.mock.On("Update", ctx, request)}
}

func (_c *MockProvidersAPIInterface_Update_Call) Run(run func(ctx context.Context, request sharing.UpdateProvider)) *MockProvidersAPIInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sharing.UpdateProvider))
	})
	return _c
}

func (_c *MockProvidersAPIInterface_Update_Call) Return(_a0 *sharing.ProviderInfo, _a1 error) *MockProvidersAPIInterface_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProvidersAPIInterface_Update_Call) RunAndReturn(run func(context.Context, sharing.UpdateProvider) (*sharing.ProviderInfo, error)) *MockProvidersAPIInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockProvidersAPIInterface) WithImpl(impl sharing.ProvidersService) sharing.ProvidersAPIInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 sharing.ProvidersAPIInterface
	if rf, ok := ret.Get(0).(func(sharing.ProvidersService) sharing.ProvidersAPIInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sharing.ProvidersAPIInterface)
		}
	}

	return r0
}

// MockProvidersAPIInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockProvidersAPIInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl sharing.ProvidersService
func (_e *MockProvidersAPIInterface_Expecter) WithImpl(impl interface{}) *MockProvidersAPIInterface_WithImpl_Call {
	return &MockProvidersAPIInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockProvidersAPIInterface_WithImpl_Call) Run(run func(impl sharing.ProvidersService)) *MockProvidersAPIInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(sharing.ProvidersService))
	})
	return _c
}

func (_c *MockProvidersAPIInterface_WithImpl_Call) Return(_a0 sharing.ProvidersAPIInterface) *MockProvidersAPIInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProvidersAPIInterface_WithImpl_Call) RunAndReturn(run func(sharing.ProvidersService) sharing.ProvidersAPIInterface) *MockProvidersAPIInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProvidersAPIInterface creates a new instance of MockProvidersAPIInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProvidersAPIInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProvidersAPIInterface {
	mock := &MockProvidersAPIInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
