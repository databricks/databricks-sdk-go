// Code generated by mockery v2.38.0. DO NOT EDIT.

package sharing

import (
	context "context"

	catalog "github.com/databricks/databricks-sdk-go/service/catalog"

	listing "github.com/databricks/databricks-sdk-go/listing"

	mock "github.com/stretchr/testify/mock"

	sharing "github.com/databricks/databricks-sdk-go/service/sharing"
)

// MockSharesAPIInterface is an autogenerated mock type for the SharesAPIInterface type
type MockSharesAPIInterface struct {
	mock.Mock
}

type MockSharesAPIInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSharesAPIInterface) EXPECT() *MockSharesAPIInterface_Expecter {
	return &MockSharesAPIInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, request
func (_m *MockSharesAPIInterface) Create(ctx context.Context, request sharing.CreateShare) (*sharing.ShareInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *sharing.ShareInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sharing.CreateShare) (*sharing.ShareInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sharing.CreateShare) *sharing.ShareInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sharing.ShareInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sharing.CreateShare) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSharesAPIInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockSharesAPIInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - request sharing.CreateShare
func (_e *MockSharesAPIInterface_Expecter) Create(ctx interface{}, request interface{}) *MockSharesAPIInterface_Create_Call {
	return &MockSharesAPIInterface_Create_Call{Call: _e.mock.On("Create", ctx, request)}
}

func (_c *MockSharesAPIInterface_Create_Call) Run(run func(ctx context.Context, request sharing.CreateShare)) *MockSharesAPIInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sharing.CreateShare))
	})
	return _c
}

func (_c *MockSharesAPIInterface_Create_Call) Return(_a0 *sharing.ShareInfo, _a1 error) *MockSharesAPIInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSharesAPIInterface_Create_Call) RunAndReturn(run func(context.Context, sharing.CreateShare) (*sharing.ShareInfo, error)) *MockSharesAPIInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, request
func (_m *MockSharesAPIInterface) Delete(ctx context.Context, request sharing.DeleteShareRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sharing.DeleteShareRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSharesAPIInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockSharesAPIInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - request sharing.DeleteShareRequest
func (_e *MockSharesAPIInterface_Expecter) Delete(ctx interface{}, request interface{}) *MockSharesAPIInterface_Delete_Call {
	return &MockSharesAPIInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, request)}
}

func (_c *MockSharesAPIInterface_Delete_Call) Run(run func(ctx context.Context, request sharing.DeleteShareRequest)) *MockSharesAPIInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sharing.DeleteShareRequest))
	})
	return _c
}

func (_c *MockSharesAPIInterface_Delete_Call) Return(_a0 error) *MockSharesAPIInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSharesAPIInterface_Delete_Call) RunAndReturn(run func(context.Context, sharing.DeleteShareRequest) error) *MockSharesAPIInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByName provides a mock function with given fields: ctx, name
func (_m *MockSharesAPIInterface) DeleteByName(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByName")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSharesAPIInterface_DeleteByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByName'
type MockSharesAPIInterface_DeleteByName_Call struct {
	*mock.Call
}

// DeleteByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockSharesAPIInterface_Expecter) DeleteByName(ctx interface{}, name interface{}) *MockSharesAPIInterface_DeleteByName_Call {
	return &MockSharesAPIInterface_DeleteByName_Call{Call: _e.mock.On("DeleteByName", ctx, name)}
}

func (_c *MockSharesAPIInterface_DeleteByName_Call) Run(run func(ctx context.Context, name string)) *MockSharesAPIInterface_DeleteByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSharesAPIInterface_DeleteByName_Call) Return(_a0 error) *MockSharesAPIInterface_DeleteByName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSharesAPIInterface_DeleteByName_Call) RunAndReturn(run func(context.Context, string) error) *MockSharesAPIInterface_DeleteByName_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, request
func (_m *MockSharesAPIInterface) Get(ctx context.Context, request sharing.GetShareRequest) (*sharing.ShareInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *sharing.ShareInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sharing.GetShareRequest) (*sharing.ShareInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sharing.GetShareRequest) *sharing.ShareInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sharing.ShareInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sharing.GetShareRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSharesAPIInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockSharesAPIInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - request sharing.GetShareRequest
func (_e *MockSharesAPIInterface_Expecter) Get(ctx interface{}, request interface{}) *MockSharesAPIInterface_Get_Call {
	return &MockSharesAPIInterface_Get_Call{Call: _e.mock.On("Get", ctx, request)}
}

func (_c *MockSharesAPIInterface_Get_Call) Run(run func(ctx context.Context, request sharing.GetShareRequest)) *MockSharesAPIInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sharing.GetShareRequest))
	})
	return _c
}

func (_c *MockSharesAPIInterface_Get_Call) Return(_a0 *sharing.ShareInfo, _a1 error) *MockSharesAPIInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSharesAPIInterface_Get_Call) RunAndReturn(run func(context.Context, sharing.GetShareRequest) (*sharing.ShareInfo, error)) *MockSharesAPIInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByName provides a mock function with given fields: ctx, name
func (_m *MockSharesAPIInterface) GetByName(ctx context.Context, name string) (*sharing.ShareInfo, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetByName")
	}

	var r0 *sharing.ShareInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*sharing.ShareInfo, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *sharing.ShareInfo); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sharing.ShareInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSharesAPIInterface_GetByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByName'
type MockSharesAPIInterface_GetByName_Call struct {
	*mock.Call
}

// GetByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockSharesAPIInterface_Expecter) GetByName(ctx interface{}, name interface{}) *MockSharesAPIInterface_GetByName_Call {
	return &MockSharesAPIInterface_GetByName_Call{Call: _e.mock.On("GetByName", ctx, name)}
}

func (_c *MockSharesAPIInterface_GetByName_Call) Run(run func(ctx context.Context, name string)) *MockSharesAPIInterface_GetByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSharesAPIInterface_GetByName_Call) Return(_a0 *sharing.ShareInfo, _a1 error) *MockSharesAPIInterface_GetByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSharesAPIInterface_GetByName_Call) RunAndReturn(run func(context.Context, string) (*sharing.ShareInfo, error)) *MockSharesAPIInterface_GetByName_Call {
	_c.Call.Return(run)
	return _c
}

// Impl provides a mock function with given fields:
func (_m *MockSharesAPIInterface) Impl() sharing.SharesService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 sharing.SharesService
	if rf, ok := ret.Get(0).(func() sharing.SharesService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sharing.SharesService)
		}
	}

	return r0
}

// MockSharesAPIInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockSharesAPIInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockSharesAPIInterface_Expecter) Impl() *MockSharesAPIInterface_Impl_Call {
	return &MockSharesAPIInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockSharesAPIInterface_Impl_Call) Run(run func()) *MockSharesAPIInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSharesAPIInterface_Impl_Call) Return(_a0 sharing.SharesService) *MockSharesAPIInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSharesAPIInterface_Impl_Call) RunAndReturn(run func() sharing.SharesService) *MockSharesAPIInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx
func (_m *MockSharesAPIInterface) List(ctx context.Context) *listing.PaginatingIterator[struct{}, *sharing.ListSharesResponse, sharing.ShareInfo] {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *listing.PaginatingIterator[struct{}, *sharing.ListSharesResponse, sharing.ShareInfo]
	if rf, ok := ret.Get(0).(func(context.Context) *listing.PaginatingIterator[struct{}, *sharing.ListSharesResponse, sharing.ShareInfo]); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*listing.PaginatingIterator[struct{}, *sharing.ListSharesResponse, sharing.ShareInfo])
		}
	}

	return r0
}

// MockSharesAPIInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockSharesAPIInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSharesAPIInterface_Expecter) List(ctx interface{}) *MockSharesAPIInterface_List_Call {
	return &MockSharesAPIInterface_List_Call{Call: _e.mock.On("List", ctx)}
}

func (_c *MockSharesAPIInterface_List_Call) Run(run func(ctx context.Context)) *MockSharesAPIInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSharesAPIInterface_List_Call) Return(_a0 *listing.PaginatingIterator[struct{}, *sharing.ListSharesResponse, sharing.ShareInfo]) *MockSharesAPIInterface_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSharesAPIInterface_List_Call) RunAndReturn(run func(context.Context) *listing.PaginatingIterator[struct{}, *sharing.ListSharesResponse, sharing.ShareInfo]) *MockSharesAPIInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListAll provides a mock function with given fields: ctx
func (_m *MockSharesAPIInterface) ListAll(ctx context.Context) ([]sharing.ShareInfo, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListAll")
	}

	var r0 []sharing.ShareInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]sharing.ShareInfo, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []sharing.ShareInfo); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sharing.ShareInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSharesAPIInterface_ListAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAll'
type MockSharesAPIInterface_ListAll_Call struct {
	*mock.Call
}

// ListAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSharesAPIInterface_Expecter) ListAll(ctx interface{}) *MockSharesAPIInterface_ListAll_Call {
	return &MockSharesAPIInterface_ListAll_Call{Call: _e.mock.On("ListAll", ctx)}
}

func (_c *MockSharesAPIInterface_ListAll_Call) Run(run func(ctx context.Context)) *MockSharesAPIInterface_ListAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSharesAPIInterface_ListAll_Call) Return(_a0 []sharing.ShareInfo, _a1 error) *MockSharesAPIInterface_ListAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSharesAPIInterface_ListAll_Call) RunAndReturn(run func(context.Context) ([]sharing.ShareInfo, error)) *MockSharesAPIInterface_ListAll_Call {
	_c.Call.Return(run)
	return _c
}

// SharePermissions provides a mock function with given fields: ctx, request
func (_m *MockSharesAPIInterface) SharePermissions(ctx context.Context, request sharing.SharePermissionsRequest) (*catalog.PermissionsList, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for SharePermissions")
	}

	var r0 *catalog.PermissionsList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sharing.SharePermissionsRequest) (*catalog.PermissionsList, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sharing.SharePermissionsRequest) *catalog.PermissionsList); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.PermissionsList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sharing.SharePermissionsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSharesAPIInterface_SharePermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SharePermissions'
type MockSharesAPIInterface_SharePermissions_Call struct {
	*mock.Call
}

// SharePermissions is a helper method to define mock.On call
//   - ctx context.Context
//   - request sharing.SharePermissionsRequest
func (_e *MockSharesAPIInterface_Expecter) SharePermissions(ctx interface{}, request interface{}) *MockSharesAPIInterface_SharePermissions_Call {
	return &MockSharesAPIInterface_SharePermissions_Call{Call: _e.mock.On("SharePermissions", ctx, request)}
}

func (_c *MockSharesAPIInterface_SharePermissions_Call) Run(run func(ctx context.Context, request sharing.SharePermissionsRequest)) *MockSharesAPIInterface_SharePermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sharing.SharePermissionsRequest))
	})
	return _c
}

func (_c *MockSharesAPIInterface_SharePermissions_Call) Return(_a0 *catalog.PermissionsList, _a1 error) *MockSharesAPIInterface_SharePermissions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSharesAPIInterface_SharePermissions_Call) RunAndReturn(run func(context.Context, sharing.SharePermissionsRequest) (*catalog.PermissionsList, error)) *MockSharesAPIInterface_SharePermissions_Call {
	_c.Call.Return(run)
	return _c
}

// SharePermissionsByName provides a mock function with given fields: ctx, name
func (_m *MockSharesAPIInterface) SharePermissionsByName(ctx context.Context, name string) (*catalog.PermissionsList, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for SharePermissionsByName")
	}

	var r0 *catalog.PermissionsList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*catalog.PermissionsList, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *catalog.PermissionsList); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.PermissionsList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSharesAPIInterface_SharePermissionsByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SharePermissionsByName'
type MockSharesAPIInterface_SharePermissionsByName_Call struct {
	*mock.Call
}

// SharePermissionsByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockSharesAPIInterface_Expecter) SharePermissionsByName(ctx interface{}, name interface{}) *MockSharesAPIInterface_SharePermissionsByName_Call {
	return &MockSharesAPIInterface_SharePermissionsByName_Call{Call: _e.mock.On("SharePermissionsByName", ctx, name)}
}

func (_c *MockSharesAPIInterface_SharePermissionsByName_Call) Run(run func(ctx context.Context, name string)) *MockSharesAPIInterface_SharePermissionsByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSharesAPIInterface_SharePermissionsByName_Call) Return(_a0 *catalog.PermissionsList, _a1 error) *MockSharesAPIInterface_SharePermissionsByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSharesAPIInterface_SharePermissionsByName_Call) RunAndReturn(run func(context.Context, string) (*catalog.PermissionsList, error)) *MockSharesAPIInterface_SharePermissionsByName_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, request
func (_m *MockSharesAPIInterface) Update(ctx context.Context, request sharing.UpdateShare) (*sharing.ShareInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *sharing.ShareInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sharing.UpdateShare) (*sharing.ShareInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sharing.UpdateShare) *sharing.ShareInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sharing.ShareInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sharing.UpdateShare) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSharesAPIInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockSharesAPIInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - request sharing.UpdateShare
func (_e *MockSharesAPIInterface_Expecter) Update(ctx interface{}, request interface{}) *MockSharesAPIInterface_Update_Call {
	return &MockSharesAPIInterface_Update_Call{Call: _e.mock.On("Update", ctx, request)}
}

func (_c *MockSharesAPIInterface_Update_Call) Run(run func(ctx context.Context, request sharing.UpdateShare)) *MockSharesAPIInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sharing.UpdateShare))
	})
	return _c
}

func (_c *MockSharesAPIInterface_Update_Call) Return(_a0 *sharing.ShareInfo, _a1 error) *MockSharesAPIInterface_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSharesAPIInterface_Update_Call) RunAndReturn(run func(context.Context, sharing.UpdateShare) (*sharing.ShareInfo, error)) *MockSharesAPIInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePermissions provides a mock function with given fields: ctx, request
func (_m *MockSharesAPIInterface) UpdatePermissions(ctx context.Context, request sharing.UpdateSharePermissions) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePermissions")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sharing.UpdateSharePermissions) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSharesAPIInterface_UpdatePermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePermissions'
type MockSharesAPIInterface_UpdatePermissions_Call struct {
	*mock.Call
}

// UpdatePermissions is a helper method to define mock.On call
//   - ctx context.Context
//   - request sharing.UpdateSharePermissions
func (_e *MockSharesAPIInterface_Expecter) UpdatePermissions(ctx interface{}, request interface{}) *MockSharesAPIInterface_UpdatePermissions_Call {
	return &MockSharesAPIInterface_UpdatePermissions_Call{Call: _e.mock.On("UpdatePermissions", ctx, request)}
}

func (_c *MockSharesAPIInterface_UpdatePermissions_Call) Run(run func(ctx context.Context, request sharing.UpdateSharePermissions)) *MockSharesAPIInterface_UpdatePermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sharing.UpdateSharePermissions))
	})
	return _c
}

func (_c *MockSharesAPIInterface_UpdatePermissions_Call) Return(_a0 error) *MockSharesAPIInterface_UpdatePermissions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSharesAPIInterface_UpdatePermissions_Call) RunAndReturn(run func(context.Context, sharing.UpdateSharePermissions) error) *MockSharesAPIInterface_UpdatePermissions_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockSharesAPIInterface) WithImpl(impl sharing.SharesService) sharing.SharesAPIInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 sharing.SharesAPIInterface
	if rf, ok := ret.Get(0).(func(sharing.SharesService) sharing.SharesAPIInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sharing.SharesAPIInterface)
		}
	}

	return r0
}

// MockSharesAPIInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockSharesAPIInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl sharing.SharesService
func (_e *MockSharesAPIInterface_Expecter) WithImpl(impl interface{}) *MockSharesAPIInterface_WithImpl_Call {
	return &MockSharesAPIInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockSharesAPIInterface_WithImpl_Call) Run(run func(impl sharing.SharesService)) *MockSharesAPIInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(sharing.SharesService))
	})
	return _c
}

func (_c *MockSharesAPIInterface_WithImpl_Call) Return(_a0 sharing.SharesAPIInterface) *MockSharesAPIInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSharesAPIInterface_WithImpl_Call) RunAndReturn(run func(sharing.SharesService) sharing.SharesAPIInterface) *MockSharesAPIInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSharesAPIInterface creates a new instance of MockSharesAPIInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSharesAPIInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSharesAPIInterface {
	mock := &MockSharesAPIInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
