// Code generated by mockery v2.38.0. DO NOT EDIT.

package sharing

import (
	context "context"

	listing "github.com/databricks/databricks-sdk-go/listing"
	mock "github.com/stretchr/testify/mock"

	sharing "github.com/databricks/databricks-sdk-go/service/sharing"
)

// MockCleanRoomsAPIInterface is an autogenerated mock type for the CleanRoomsAPIInterface type
type MockCleanRoomsAPIInterface struct {
	mock.Mock
}

type MockCleanRoomsAPIInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCleanRoomsAPIInterface) EXPECT() *MockCleanRoomsAPIInterface_Expecter {
	return &MockCleanRoomsAPIInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, request
func (_m *MockCleanRoomsAPIInterface) Create(ctx context.Context, request sharing.CreateCleanRoom) (*sharing.CleanRoomInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *sharing.CleanRoomInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sharing.CreateCleanRoom) (*sharing.CleanRoomInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sharing.CreateCleanRoom) *sharing.CleanRoomInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sharing.CleanRoomInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sharing.CreateCleanRoom) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCleanRoomsAPIInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockCleanRoomsAPIInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - request sharing.CreateCleanRoom
func (_e *MockCleanRoomsAPIInterface_Expecter) Create(ctx interface{}, request interface{}) *MockCleanRoomsAPIInterface_Create_Call {
	return &MockCleanRoomsAPIInterface_Create_Call{Call: _e.mock.On("Create", ctx, request)}
}

func (_c *MockCleanRoomsAPIInterface_Create_Call) Run(run func(ctx context.Context, request sharing.CreateCleanRoom)) *MockCleanRoomsAPIInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sharing.CreateCleanRoom))
	})
	return _c
}

func (_c *MockCleanRoomsAPIInterface_Create_Call) Return(_a0 *sharing.CleanRoomInfo, _a1 error) *MockCleanRoomsAPIInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCleanRoomsAPIInterface_Create_Call) RunAndReturn(run func(context.Context, sharing.CreateCleanRoom) (*sharing.CleanRoomInfo, error)) *MockCleanRoomsAPIInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, request
func (_m *MockCleanRoomsAPIInterface) Delete(ctx context.Context, request sharing.DeleteCleanRoomRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sharing.DeleteCleanRoomRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCleanRoomsAPIInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockCleanRoomsAPIInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - request sharing.DeleteCleanRoomRequest
func (_e *MockCleanRoomsAPIInterface_Expecter) Delete(ctx interface{}, request interface{}) *MockCleanRoomsAPIInterface_Delete_Call {
	return &MockCleanRoomsAPIInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, request)}
}

func (_c *MockCleanRoomsAPIInterface_Delete_Call) Run(run func(ctx context.Context, request sharing.DeleteCleanRoomRequest)) *MockCleanRoomsAPIInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sharing.DeleteCleanRoomRequest))
	})
	return _c
}

func (_c *MockCleanRoomsAPIInterface_Delete_Call) Return(_a0 error) *MockCleanRoomsAPIInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCleanRoomsAPIInterface_Delete_Call) RunAndReturn(run func(context.Context, sharing.DeleteCleanRoomRequest) error) *MockCleanRoomsAPIInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByNameArg provides a mock function with given fields: ctx, nameArg
func (_m *MockCleanRoomsAPIInterface) DeleteByNameArg(ctx context.Context, nameArg string) error {
	ret := _m.Called(ctx, nameArg)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByNameArg")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, nameArg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCleanRoomsAPIInterface_DeleteByNameArg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByNameArg'
type MockCleanRoomsAPIInterface_DeleteByNameArg_Call struct {
	*mock.Call
}

// DeleteByNameArg is a helper method to define mock.On call
//   - ctx context.Context
//   - nameArg string
func (_e *MockCleanRoomsAPIInterface_Expecter) DeleteByNameArg(ctx interface{}, nameArg interface{}) *MockCleanRoomsAPIInterface_DeleteByNameArg_Call {
	return &MockCleanRoomsAPIInterface_DeleteByNameArg_Call{Call: _e.mock.On("DeleteByNameArg", ctx, nameArg)}
}

func (_c *MockCleanRoomsAPIInterface_DeleteByNameArg_Call) Run(run func(ctx context.Context, nameArg string)) *MockCleanRoomsAPIInterface_DeleteByNameArg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockCleanRoomsAPIInterface_DeleteByNameArg_Call) Return(_a0 error) *MockCleanRoomsAPIInterface_DeleteByNameArg_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCleanRoomsAPIInterface_DeleteByNameArg_Call) RunAndReturn(run func(context.Context, string) error) *MockCleanRoomsAPIInterface_DeleteByNameArg_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, request
func (_m *MockCleanRoomsAPIInterface) Get(ctx context.Context, request sharing.GetCleanRoomRequest) (*sharing.CleanRoomInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *sharing.CleanRoomInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sharing.GetCleanRoomRequest) (*sharing.CleanRoomInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sharing.GetCleanRoomRequest) *sharing.CleanRoomInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sharing.CleanRoomInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sharing.GetCleanRoomRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCleanRoomsAPIInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockCleanRoomsAPIInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - request sharing.GetCleanRoomRequest
func (_e *MockCleanRoomsAPIInterface_Expecter) Get(ctx interface{}, request interface{}) *MockCleanRoomsAPIInterface_Get_Call {
	return &MockCleanRoomsAPIInterface_Get_Call{Call: _e.mock.On("Get", ctx, request)}
}

func (_c *MockCleanRoomsAPIInterface_Get_Call) Run(run func(ctx context.Context, request sharing.GetCleanRoomRequest)) *MockCleanRoomsAPIInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sharing.GetCleanRoomRequest))
	})
	return _c
}

func (_c *MockCleanRoomsAPIInterface_Get_Call) Return(_a0 *sharing.CleanRoomInfo, _a1 error) *MockCleanRoomsAPIInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCleanRoomsAPIInterface_Get_Call) RunAndReturn(run func(context.Context, sharing.GetCleanRoomRequest) (*sharing.CleanRoomInfo, error)) *MockCleanRoomsAPIInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByNameArg provides a mock function with given fields: ctx, nameArg
func (_m *MockCleanRoomsAPIInterface) GetByNameArg(ctx context.Context, nameArg string) (*sharing.CleanRoomInfo, error) {
	ret := _m.Called(ctx, nameArg)

	if len(ret) == 0 {
		panic("no return value specified for GetByNameArg")
	}

	var r0 *sharing.CleanRoomInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*sharing.CleanRoomInfo, error)); ok {
		return rf(ctx, nameArg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *sharing.CleanRoomInfo); ok {
		r0 = rf(ctx, nameArg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sharing.CleanRoomInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, nameArg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCleanRoomsAPIInterface_GetByNameArg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByNameArg'
type MockCleanRoomsAPIInterface_GetByNameArg_Call struct {
	*mock.Call
}

// GetByNameArg is a helper method to define mock.On call
//   - ctx context.Context
//   - nameArg string
func (_e *MockCleanRoomsAPIInterface_Expecter) GetByNameArg(ctx interface{}, nameArg interface{}) *MockCleanRoomsAPIInterface_GetByNameArg_Call {
	return &MockCleanRoomsAPIInterface_GetByNameArg_Call{Call: _e.mock.On("GetByNameArg", ctx, nameArg)}
}

func (_c *MockCleanRoomsAPIInterface_GetByNameArg_Call) Run(run func(ctx context.Context, nameArg string)) *MockCleanRoomsAPIInterface_GetByNameArg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockCleanRoomsAPIInterface_GetByNameArg_Call) Return(_a0 *sharing.CleanRoomInfo, _a1 error) *MockCleanRoomsAPIInterface_GetByNameArg_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCleanRoomsAPIInterface_GetByNameArg_Call) RunAndReturn(run func(context.Context, string) (*sharing.CleanRoomInfo, error)) *MockCleanRoomsAPIInterface_GetByNameArg_Call {
	_c.Call.Return(run)
	return _c
}

// Impl provides a mock function with given fields:
func (_m *MockCleanRoomsAPIInterface) Impl() sharing.CleanRoomsService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 sharing.CleanRoomsService
	if rf, ok := ret.Get(0).(func() sharing.CleanRoomsService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sharing.CleanRoomsService)
		}
	}

	return r0
}

// MockCleanRoomsAPIInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockCleanRoomsAPIInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockCleanRoomsAPIInterface_Expecter) Impl() *MockCleanRoomsAPIInterface_Impl_Call {
	return &MockCleanRoomsAPIInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockCleanRoomsAPIInterface_Impl_Call) Run(run func()) *MockCleanRoomsAPIInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCleanRoomsAPIInterface_Impl_Call) Return(_a0 sharing.CleanRoomsService) *MockCleanRoomsAPIInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCleanRoomsAPIInterface_Impl_Call) RunAndReturn(run func() sharing.CleanRoomsService) *MockCleanRoomsAPIInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, request
func (_m *MockCleanRoomsAPIInterface) List(ctx context.Context, request sharing.ListCleanRoomsRequest) *listing.PaginatingIterator[sharing.ListCleanRoomsRequest, *sharing.ListCleanRoomsResponse, sharing.CleanRoomInfo] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *listing.PaginatingIterator[sharing.ListCleanRoomsRequest, *sharing.ListCleanRoomsResponse, sharing.CleanRoomInfo]
	if rf, ok := ret.Get(0).(func(context.Context, sharing.ListCleanRoomsRequest) *listing.PaginatingIterator[sharing.ListCleanRoomsRequest, *sharing.ListCleanRoomsResponse, sharing.CleanRoomInfo]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*listing.PaginatingIterator[sharing.ListCleanRoomsRequest, *sharing.ListCleanRoomsResponse, sharing.CleanRoomInfo])
		}
	}

	return r0
}

// MockCleanRoomsAPIInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockCleanRoomsAPIInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - request sharing.ListCleanRoomsRequest
func (_e *MockCleanRoomsAPIInterface_Expecter) List(ctx interface{}, request interface{}) *MockCleanRoomsAPIInterface_List_Call {
	return &MockCleanRoomsAPIInterface_List_Call{Call: _e.mock.On("List", ctx, request)}
}

func (_c *MockCleanRoomsAPIInterface_List_Call) Run(run func(ctx context.Context, request sharing.ListCleanRoomsRequest)) *MockCleanRoomsAPIInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sharing.ListCleanRoomsRequest))
	})
	return _c
}

func (_c *MockCleanRoomsAPIInterface_List_Call) Return(_a0 *listing.PaginatingIterator[sharing.ListCleanRoomsRequest, *sharing.ListCleanRoomsResponse, sharing.CleanRoomInfo]) *MockCleanRoomsAPIInterface_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCleanRoomsAPIInterface_List_Call) RunAndReturn(run func(context.Context, sharing.ListCleanRoomsRequest) *listing.PaginatingIterator[sharing.ListCleanRoomsRequest, *sharing.ListCleanRoomsResponse, sharing.CleanRoomInfo]) *MockCleanRoomsAPIInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListAll provides a mock function with given fields: ctx, request
func (_m *MockCleanRoomsAPIInterface) ListAll(ctx context.Context, request sharing.ListCleanRoomsRequest) ([]sharing.CleanRoomInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListAll")
	}

	var r0 []sharing.CleanRoomInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sharing.ListCleanRoomsRequest) ([]sharing.CleanRoomInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sharing.ListCleanRoomsRequest) []sharing.CleanRoomInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sharing.CleanRoomInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sharing.ListCleanRoomsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCleanRoomsAPIInterface_ListAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAll'
type MockCleanRoomsAPIInterface_ListAll_Call struct {
	*mock.Call
}

// ListAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request sharing.ListCleanRoomsRequest
func (_e *MockCleanRoomsAPIInterface_Expecter) ListAll(ctx interface{}, request interface{}) *MockCleanRoomsAPIInterface_ListAll_Call {
	return &MockCleanRoomsAPIInterface_ListAll_Call{Call: _e.mock.On("ListAll", ctx, request)}
}

func (_c *MockCleanRoomsAPIInterface_ListAll_Call) Run(run func(ctx context.Context, request sharing.ListCleanRoomsRequest)) *MockCleanRoomsAPIInterface_ListAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sharing.ListCleanRoomsRequest))
	})
	return _c
}

func (_c *MockCleanRoomsAPIInterface_ListAll_Call) Return(_a0 []sharing.CleanRoomInfo, _a1 error) *MockCleanRoomsAPIInterface_ListAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCleanRoomsAPIInterface_ListAll_Call) RunAndReturn(run func(context.Context, sharing.ListCleanRoomsRequest) ([]sharing.CleanRoomInfo, error)) *MockCleanRoomsAPIInterface_ListAll_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, request
func (_m *MockCleanRoomsAPIInterface) Update(ctx context.Context, request sharing.UpdateCleanRoom) (*sharing.CleanRoomInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *sharing.CleanRoomInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sharing.UpdateCleanRoom) (*sharing.CleanRoomInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sharing.UpdateCleanRoom) *sharing.CleanRoomInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sharing.CleanRoomInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sharing.UpdateCleanRoom) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCleanRoomsAPIInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockCleanRoomsAPIInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - request sharing.UpdateCleanRoom
func (_e *MockCleanRoomsAPIInterface_Expecter) Update(ctx interface{}, request interface{}) *MockCleanRoomsAPIInterface_Update_Call {
	return &MockCleanRoomsAPIInterface_Update_Call{Call: _e.mock.On("Update", ctx, request)}
}

func (_c *MockCleanRoomsAPIInterface_Update_Call) Run(run func(ctx context.Context, request sharing.UpdateCleanRoom)) *MockCleanRoomsAPIInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sharing.UpdateCleanRoom))
	})
	return _c
}

func (_c *MockCleanRoomsAPIInterface_Update_Call) Return(_a0 *sharing.CleanRoomInfo, _a1 error) *MockCleanRoomsAPIInterface_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCleanRoomsAPIInterface_Update_Call) RunAndReturn(run func(context.Context, sharing.UpdateCleanRoom) (*sharing.CleanRoomInfo, error)) *MockCleanRoomsAPIInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockCleanRoomsAPIInterface) WithImpl(impl sharing.CleanRoomsService) sharing.CleanRoomsAPIInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 sharing.CleanRoomsAPIInterface
	if rf, ok := ret.Get(0).(func(sharing.CleanRoomsService) sharing.CleanRoomsAPIInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sharing.CleanRoomsAPIInterface)
		}
	}

	return r0
}

// MockCleanRoomsAPIInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockCleanRoomsAPIInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl sharing.CleanRoomsService
func (_e *MockCleanRoomsAPIInterface_Expecter) WithImpl(impl interface{}) *MockCleanRoomsAPIInterface_WithImpl_Call {
	return &MockCleanRoomsAPIInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockCleanRoomsAPIInterface_WithImpl_Call) Run(run func(impl sharing.CleanRoomsService)) *MockCleanRoomsAPIInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(sharing.CleanRoomsService))
	})
	return _c
}

func (_c *MockCleanRoomsAPIInterface_WithImpl_Call) Return(_a0 sharing.CleanRoomsAPIInterface) *MockCleanRoomsAPIInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCleanRoomsAPIInterface_WithImpl_Call) RunAndReturn(run func(sharing.CleanRoomsService) sharing.CleanRoomsAPIInterface) *MockCleanRoomsAPIInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCleanRoomsAPIInterface creates a new instance of MockCleanRoomsAPIInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCleanRoomsAPIInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCleanRoomsAPIInterface {
	mock := &MockCleanRoomsAPIInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
