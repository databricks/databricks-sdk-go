// Code generated by mockery v2.38.0. DO NOT EDIT.

package iam

import (
	context "context"

	listing "github.com/databricks/databricks-sdk-go/listing"
	iam "github.com/databricks/databricks-sdk-go/service/iam"

	mock "github.com/stretchr/testify/mock"
)

// MockServicePrincipalsAPIInterface is an autogenerated mock type for the ServicePrincipalsAPIInterface type
type MockServicePrincipalsAPIInterface struct {
	mock.Mock
}

type MockServicePrincipalsAPIInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServicePrincipalsAPIInterface) EXPECT() *MockServicePrincipalsAPIInterface_Expecter {
	return &MockServicePrincipalsAPIInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, request
func (_m *MockServicePrincipalsAPIInterface) Create(ctx context.Context, request iam.ServicePrincipal) (*iam.ServicePrincipal, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *iam.ServicePrincipal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iam.ServicePrincipal) (*iam.ServicePrincipal, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iam.ServicePrincipal) *iam.ServicePrincipal); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ServicePrincipal)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iam.ServicePrincipal) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServicePrincipalsAPIInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockServicePrincipalsAPIInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - request iam.ServicePrincipal
func (_e *MockServicePrincipalsAPIInterface_Expecter) Create(ctx interface{}, request interface{}) *MockServicePrincipalsAPIInterface_Create_Call {
	return &MockServicePrincipalsAPIInterface_Create_Call{Call: _e.mock.On("Create", ctx, request)}
}

func (_c *MockServicePrincipalsAPIInterface_Create_Call) Run(run func(ctx context.Context, request iam.ServicePrincipal)) *MockServicePrincipalsAPIInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iam.ServicePrincipal))
	})
	return _c
}

func (_c *MockServicePrincipalsAPIInterface_Create_Call) Return(_a0 *iam.ServicePrincipal, _a1 error) *MockServicePrincipalsAPIInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServicePrincipalsAPIInterface_Create_Call) RunAndReturn(run func(context.Context, iam.ServicePrincipal) (*iam.ServicePrincipal, error)) *MockServicePrincipalsAPIInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, request
func (_m *MockServicePrincipalsAPIInterface) Delete(ctx context.Context, request iam.DeleteServicePrincipalRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, iam.DeleteServicePrincipalRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServicePrincipalsAPIInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockServicePrincipalsAPIInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - request iam.DeleteServicePrincipalRequest
func (_e *MockServicePrincipalsAPIInterface_Expecter) Delete(ctx interface{}, request interface{}) *MockServicePrincipalsAPIInterface_Delete_Call {
	return &MockServicePrincipalsAPIInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, request)}
}

func (_c *MockServicePrincipalsAPIInterface_Delete_Call) Run(run func(ctx context.Context, request iam.DeleteServicePrincipalRequest)) *MockServicePrincipalsAPIInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iam.DeleteServicePrincipalRequest))
	})
	return _c
}

func (_c *MockServicePrincipalsAPIInterface_Delete_Call) Return(_a0 error) *MockServicePrincipalsAPIInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServicePrincipalsAPIInterface_Delete_Call) RunAndReturn(run func(context.Context, iam.DeleteServicePrincipalRequest) error) *MockServicePrincipalsAPIInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteById provides a mock function with given fields: ctx, id
func (_m *MockServicePrincipalsAPIInterface) DeleteById(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServicePrincipalsAPIInterface_DeleteById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteById'
type MockServicePrincipalsAPIInterface_DeleteById_Call struct {
	*mock.Call
}

// DeleteById is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockServicePrincipalsAPIInterface_Expecter) DeleteById(ctx interface{}, id interface{}) *MockServicePrincipalsAPIInterface_DeleteById_Call {
	return &MockServicePrincipalsAPIInterface_DeleteById_Call{Call: _e.mock.On("DeleteById", ctx, id)}
}

func (_c *MockServicePrincipalsAPIInterface_DeleteById_Call) Run(run func(ctx context.Context, id string)) *MockServicePrincipalsAPIInterface_DeleteById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockServicePrincipalsAPIInterface_DeleteById_Call) Return(_a0 error) *MockServicePrincipalsAPIInterface_DeleteById_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServicePrincipalsAPIInterface_DeleteById_Call) RunAndReturn(run func(context.Context, string) error) *MockServicePrincipalsAPIInterface_DeleteById_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, request
func (_m *MockServicePrincipalsAPIInterface) Get(ctx context.Context, request iam.GetServicePrincipalRequest) (*iam.ServicePrincipal, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *iam.ServicePrincipal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iam.GetServicePrincipalRequest) (*iam.ServicePrincipal, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iam.GetServicePrincipalRequest) *iam.ServicePrincipal); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ServicePrincipal)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iam.GetServicePrincipalRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServicePrincipalsAPIInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockServicePrincipalsAPIInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - request iam.GetServicePrincipalRequest
func (_e *MockServicePrincipalsAPIInterface_Expecter) Get(ctx interface{}, request interface{}) *MockServicePrincipalsAPIInterface_Get_Call {
	return &MockServicePrincipalsAPIInterface_Get_Call{Call: _e.mock.On("Get", ctx, request)}
}

func (_c *MockServicePrincipalsAPIInterface_Get_Call) Run(run func(ctx context.Context, request iam.GetServicePrincipalRequest)) *MockServicePrincipalsAPIInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iam.GetServicePrincipalRequest))
	})
	return _c
}

func (_c *MockServicePrincipalsAPIInterface_Get_Call) Return(_a0 *iam.ServicePrincipal, _a1 error) *MockServicePrincipalsAPIInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServicePrincipalsAPIInterface_Get_Call) RunAndReturn(run func(context.Context, iam.GetServicePrincipalRequest) (*iam.ServicePrincipal, error)) *MockServicePrincipalsAPIInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByDisplayName provides a mock function with given fields: ctx, name
func (_m *MockServicePrincipalsAPIInterface) GetByDisplayName(ctx context.Context, name string) (*iam.ServicePrincipal, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetByDisplayName")
	}

	var r0 *iam.ServicePrincipal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*iam.ServicePrincipal, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *iam.ServicePrincipal); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ServicePrincipal)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServicePrincipalsAPIInterface_GetByDisplayName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByDisplayName'
type MockServicePrincipalsAPIInterface_GetByDisplayName_Call struct {
	*mock.Call
}

// GetByDisplayName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockServicePrincipalsAPIInterface_Expecter) GetByDisplayName(ctx interface{}, name interface{}) *MockServicePrincipalsAPIInterface_GetByDisplayName_Call {
	return &MockServicePrincipalsAPIInterface_GetByDisplayName_Call{Call: _e.mock.On("GetByDisplayName", ctx, name)}
}

func (_c *MockServicePrincipalsAPIInterface_GetByDisplayName_Call) Run(run func(ctx context.Context, name string)) *MockServicePrincipalsAPIInterface_GetByDisplayName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockServicePrincipalsAPIInterface_GetByDisplayName_Call) Return(_a0 *iam.ServicePrincipal, _a1 error) *MockServicePrincipalsAPIInterface_GetByDisplayName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServicePrincipalsAPIInterface_GetByDisplayName_Call) RunAndReturn(run func(context.Context, string) (*iam.ServicePrincipal, error)) *MockServicePrincipalsAPIInterface_GetByDisplayName_Call {
	_c.Call.Return(run)
	return _c
}

// GetById provides a mock function with given fields: ctx, id
func (_m *MockServicePrincipalsAPIInterface) GetById(ctx context.Context, id string) (*iam.ServicePrincipal, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 *iam.ServicePrincipal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*iam.ServicePrincipal, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *iam.ServicePrincipal); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ServicePrincipal)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServicePrincipalsAPIInterface_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type MockServicePrincipalsAPIInterface_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockServicePrincipalsAPIInterface_Expecter) GetById(ctx interface{}, id interface{}) *MockServicePrincipalsAPIInterface_GetById_Call {
	return &MockServicePrincipalsAPIInterface_GetById_Call{Call: _e.mock.On("GetById", ctx, id)}
}

func (_c *MockServicePrincipalsAPIInterface_GetById_Call) Run(run func(ctx context.Context, id string)) *MockServicePrincipalsAPIInterface_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockServicePrincipalsAPIInterface_GetById_Call) Return(_a0 *iam.ServicePrincipal, _a1 error) *MockServicePrincipalsAPIInterface_GetById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServicePrincipalsAPIInterface_GetById_Call) RunAndReturn(run func(context.Context, string) (*iam.ServicePrincipal, error)) *MockServicePrincipalsAPIInterface_GetById_Call {
	_c.Call.Return(run)
	return _c
}

// Impl provides a mock function with given fields:
func (_m *MockServicePrincipalsAPIInterface) Impl() iam.ServicePrincipalsService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 iam.ServicePrincipalsService
	if rf, ok := ret.Get(0).(func() iam.ServicePrincipalsService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(iam.ServicePrincipalsService)
		}
	}

	return r0
}

// MockServicePrincipalsAPIInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockServicePrincipalsAPIInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockServicePrincipalsAPIInterface_Expecter) Impl() *MockServicePrincipalsAPIInterface_Impl_Call {
	return &MockServicePrincipalsAPIInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockServicePrincipalsAPIInterface_Impl_Call) Run(run func()) *MockServicePrincipalsAPIInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockServicePrincipalsAPIInterface_Impl_Call) Return(_a0 iam.ServicePrincipalsService) *MockServicePrincipalsAPIInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServicePrincipalsAPIInterface_Impl_Call) RunAndReturn(run func() iam.ServicePrincipalsService) *MockServicePrincipalsAPIInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, request
func (_m *MockServicePrincipalsAPIInterface) List(ctx context.Context, request iam.ListServicePrincipalsRequest) *listing.DeduplicatingIterator[iam.ServicePrincipal, string] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *listing.DeduplicatingIterator[iam.ServicePrincipal, string]
	if rf, ok := ret.Get(0).(func(context.Context, iam.ListServicePrincipalsRequest) *listing.DeduplicatingIterator[iam.ServicePrincipal, string]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*listing.DeduplicatingIterator[iam.ServicePrincipal, string])
		}
	}

	return r0
}

// MockServicePrincipalsAPIInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockServicePrincipalsAPIInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - request iam.ListServicePrincipalsRequest
func (_e *MockServicePrincipalsAPIInterface_Expecter) List(ctx interface{}, request interface{}) *MockServicePrincipalsAPIInterface_List_Call {
	return &MockServicePrincipalsAPIInterface_List_Call{Call: _e.mock.On("List", ctx, request)}
}

func (_c *MockServicePrincipalsAPIInterface_List_Call) Run(run func(ctx context.Context, request iam.ListServicePrincipalsRequest)) *MockServicePrincipalsAPIInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iam.ListServicePrincipalsRequest))
	})
	return _c
}

func (_c *MockServicePrincipalsAPIInterface_List_Call) Return(_a0 *listing.DeduplicatingIterator[iam.ServicePrincipal, string]) *MockServicePrincipalsAPIInterface_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServicePrincipalsAPIInterface_List_Call) RunAndReturn(run func(context.Context, iam.ListServicePrincipalsRequest) *listing.DeduplicatingIterator[iam.ServicePrincipal, string]) *MockServicePrincipalsAPIInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListAll provides a mock function with given fields: ctx, request
func (_m *MockServicePrincipalsAPIInterface) ListAll(ctx context.Context, request iam.ListServicePrincipalsRequest) ([]iam.ServicePrincipal, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListAll")
	}

	var r0 []iam.ServicePrincipal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iam.ListServicePrincipalsRequest) ([]iam.ServicePrincipal, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iam.ListServicePrincipalsRequest) []iam.ServicePrincipal); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]iam.ServicePrincipal)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iam.ListServicePrincipalsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServicePrincipalsAPIInterface_ListAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAll'
type MockServicePrincipalsAPIInterface_ListAll_Call struct {
	*mock.Call
}

// ListAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request iam.ListServicePrincipalsRequest
func (_e *MockServicePrincipalsAPIInterface_Expecter) ListAll(ctx interface{}, request interface{}) *MockServicePrincipalsAPIInterface_ListAll_Call {
	return &MockServicePrincipalsAPIInterface_ListAll_Call{Call: _e.mock.On("ListAll", ctx, request)}
}

func (_c *MockServicePrincipalsAPIInterface_ListAll_Call) Run(run func(ctx context.Context, request iam.ListServicePrincipalsRequest)) *MockServicePrincipalsAPIInterface_ListAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iam.ListServicePrincipalsRequest))
	})
	return _c
}

func (_c *MockServicePrincipalsAPIInterface_ListAll_Call) Return(_a0 []iam.ServicePrincipal, _a1 error) *MockServicePrincipalsAPIInterface_ListAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServicePrincipalsAPIInterface_ListAll_Call) RunAndReturn(run func(context.Context, iam.ListServicePrincipalsRequest) ([]iam.ServicePrincipal, error)) *MockServicePrincipalsAPIInterface_ListAll_Call {
	_c.Call.Return(run)
	return _c
}

// Patch provides a mock function with given fields: ctx, request
func (_m *MockServicePrincipalsAPIInterface) Patch(ctx context.Context, request iam.PartialUpdate) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Patch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, iam.PartialUpdate) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServicePrincipalsAPIInterface_Patch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Patch'
type MockServicePrincipalsAPIInterface_Patch_Call struct {
	*mock.Call
}

// Patch is a helper method to define mock.On call
//   - ctx context.Context
//   - request iam.PartialUpdate
func (_e *MockServicePrincipalsAPIInterface_Expecter) Patch(ctx interface{}, request interface{}) *MockServicePrincipalsAPIInterface_Patch_Call {
	return &MockServicePrincipalsAPIInterface_Patch_Call{Call: _e.mock.On("Patch", ctx, request)}
}

func (_c *MockServicePrincipalsAPIInterface_Patch_Call) Run(run func(ctx context.Context, request iam.PartialUpdate)) *MockServicePrincipalsAPIInterface_Patch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iam.PartialUpdate))
	})
	return _c
}

func (_c *MockServicePrincipalsAPIInterface_Patch_Call) Return(_a0 error) *MockServicePrincipalsAPIInterface_Patch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServicePrincipalsAPIInterface_Patch_Call) RunAndReturn(run func(context.Context, iam.PartialUpdate) error) *MockServicePrincipalsAPIInterface_Patch_Call {
	_c.Call.Return(run)
	return _c
}

// ServicePrincipalDisplayNameToIdMap provides a mock function with given fields: ctx, request
func (_m *MockServicePrincipalsAPIInterface) ServicePrincipalDisplayNameToIdMap(ctx context.Context, request iam.ListServicePrincipalsRequest) (map[string]string, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ServicePrincipalDisplayNameToIdMap")
	}

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iam.ListServicePrincipalsRequest) (map[string]string, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iam.ListServicePrincipalsRequest) map[string]string); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iam.ListServicePrincipalsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServicePrincipalsAPIInterface_ServicePrincipalDisplayNameToIdMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServicePrincipalDisplayNameToIdMap'
type MockServicePrincipalsAPIInterface_ServicePrincipalDisplayNameToIdMap_Call struct {
	*mock.Call
}

// ServicePrincipalDisplayNameToIdMap is a helper method to define mock.On call
//   - ctx context.Context
//   - request iam.ListServicePrincipalsRequest
func (_e *MockServicePrincipalsAPIInterface_Expecter) ServicePrincipalDisplayNameToIdMap(ctx interface{}, request interface{}) *MockServicePrincipalsAPIInterface_ServicePrincipalDisplayNameToIdMap_Call {
	return &MockServicePrincipalsAPIInterface_ServicePrincipalDisplayNameToIdMap_Call{Call: _e.mock.On("ServicePrincipalDisplayNameToIdMap", ctx, request)}
}

func (_c *MockServicePrincipalsAPIInterface_ServicePrincipalDisplayNameToIdMap_Call) Run(run func(ctx context.Context, request iam.ListServicePrincipalsRequest)) *MockServicePrincipalsAPIInterface_ServicePrincipalDisplayNameToIdMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iam.ListServicePrincipalsRequest))
	})
	return _c
}

func (_c *MockServicePrincipalsAPIInterface_ServicePrincipalDisplayNameToIdMap_Call) Return(_a0 map[string]string, _a1 error) *MockServicePrincipalsAPIInterface_ServicePrincipalDisplayNameToIdMap_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServicePrincipalsAPIInterface_ServicePrincipalDisplayNameToIdMap_Call) RunAndReturn(run func(context.Context, iam.ListServicePrincipalsRequest) (map[string]string, error)) *MockServicePrincipalsAPIInterface_ServicePrincipalDisplayNameToIdMap_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, request
func (_m *MockServicePrincipalsAPIInterface) Update(ctx context.Context, request iam.ServicePrincipal) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, iam.ServicePrincipal) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServicePrincipalsAPIInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockServicePrincipalsAPIInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - request iam.ServicePrincipal
func (_e *MockServicePrincipalsAPIInterface_Expecter) Update(ctx interface{}, request interface{}) *MockServicePrincipalsAPIInterface_Update_Call {
	return &MockServicePrincipalsAPIInterface_Update_Call{Call: _e.mock.On("Update", ctx, request)}
}

func (_c *MockServicePrincipalsAPIInterface_Update_Call) Run(run func(ctx context.Context, request iam.ServicePrincipal)) *MockServicePrincipalsAPIInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iam.ServicePrincipal))
	})
	return _c
}

func (_c *MockServicePrincipalsAPIInterface_Update_Call) Return(_a0 error) *MockServicePrincipalsAPIInterface_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServicePrincipalsAPIInterface_Update_Call) RunAndReturn(run func(context.Context, iam.ServicePrincipal) error) *MockServicePrincipalsAPIInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockServicePrincipalsAPIInterface) WithImpl(impl iam.ServicePrincipalsService) iam.ServicePrincipalsAPIInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 iam.ServicePrincipalsAPIInterface
	if rf, ok := ret.Get(0).(func(iam.ServicePrincipalsService) iam.ServicePrincipalsAPIInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(iam.ServicePrincipalsAPIInterface)
		}
	}

	return r0
}

// MockServicePrincipalsAPIInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockServicePrincipalsAPIInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl iam.ServicePrincipalsService
func (_e *MockServicePrincipalsAPIInterface_Expecter) WithImpl(impl interface{}) *MockServicePrincipalsAPIInterface_WithImpl_Call {
	return &MockServicePrincipalsAPIInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockServicePrincipalsAPIInterface_WithImpl_Call) Run(run func(impl iam.ServicePrincipalsService)) *MockServicePrincipalsAPIInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(iam.ServicePrincipalsService))
	})
	return _c
}

func (_c *MockServicePrincipalsAPIInterface_WithImpl_Call) Return(_a0 iam.ServicePrincipalsAPIInterface) *MockServicePrincipalsAPIInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServicePrincipalsAPIInterface_WithImpl_Call) RunAndReturn(run func(iam.ServicePrincipalsService) iam.ServicePrincipalsAPIInterface) *MockServicePrincipalsAPIInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockServicePrincipalsAPIInterface creates a new instance of MockServicePrincipalsAPIInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServicePrincipalsAPIInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServicePrincipalsAPIInterface {
	mock := &MockServicePrincipalsAPIInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
