// Code generated by mockery v2.53.2. DO NOT EDIT.

package billing

import (
	context "context"

	billing "github.com/databricks/databricks-sdk-go/service/billing"

	listing "github.com/databricks/databricks-sdk-go/listing"

	mock "github.com/stretchr/testify/mock"
)

// MockBudgetsInterface is an autogenerated mock type for the BudgetsInterface type
type MockBudgetsInterface struct {
	mock.Mock
}

type MockBudgetsInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBudgetsInterface) EXPECT() *MockBudgetsInterface_Expecter {
	return &MockBudgetsInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, request
func (_m *MockBudgetsInterface) Create(ctx context.Context, request billing.CreateBudgetConfigurationRequest) (*billing.CreateBudgetConfigurationResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *billing.CreateBudgetConfigurationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, billing.CreateBudgetConfigurationRequest) (*billing.CreateBudgetConfigurationResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, billing.CreateBudgetConfigurationRequest) *billing.CreateBudgetConfigurationResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.CreateBudgetConfigurationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, billing.CreateBudgetConfigurationRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBudgetsInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockBudgetsInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - request billing.CreateBudgetConfigurationRequest
func (_e *MockBudgetsInterface_Expecter) Create(ctx interface{}, request interface{}) *MockBudgetsInterface_Create_Call {
	return &MockBudgetsInterface_Create_Call{Call: _e.mock.On("Create", ctx, request)}
}

func (_c *MockBudgetsInterface_Create_Call) Run(run func(ctx context.Context, request billing.CreateBudgetConfigurationRequest)) *MockBudgetsInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(billing.CreateBudgetConfigurationRequest))
	})
	return _c
}

func (_c *MockBudgetsInterface_Create_Call) Return(_a0 *billing.CreateBudgetConfigurationResponse, _a1 error) *MockBudgetsInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBudgetsInterface_Create_Call) RunAndReturn(run func(context.Context, billing.CreateBudgetConfigurationRequest) (*billing.CreateBudgetConfigurationResponse, error)) *MockBudgetsInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, request
func (_m *MockBudgetsInterface) Delete(ctx context.Context, request billing.DeleteBudgetConfigurationRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, billing.DeleteBudgetConfigurationRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBudgetsInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockBudgetsInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - request billing.DeleteBudgetConfigurationRequest
func (_e *MockBudgetsInterface_Expecter) Delete(ctx interface{}, request interface{}) *MockBudgetsInterface_Delete_Call {
	return &MockBudgetsInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, request)}
}

func (_c *MockBudgetsInterface_Delete_Call) Run(run func(ctx context.Context, request billing.DeleteBudgetConfigurationRequest)) *MockBudgetsInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(billing.DeleteBudgetConfigurationRequest))
	})
	return _c
}

func (_c *MockBudgetsInterface_Delete_Call) Return(_a0 error) *MockBudgetsInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBudgetsInterface_Delete_Call) RunAndReturn(run func(context.Context, billing.DeleteBudgetConfigurationRequest) error) *MockBudgetsInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByBudgetId provides a mock function with given fields: ctx, budgetId
func (_m *MockBudgetsInterface) DeleteByBudgetId(ctx context.Context, budgetId string) error {
	ret := _m.Called(ctx, budgetId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByBudgetId")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, budgetId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBudgetsInterface_DeleteByBudgetId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByBudgetId'
type MockBudgetsInterface_DeleteByBudgetId_Call struct {
	*mock.Call
}

// DeleteByBudgetId is a helper method to define mock.On call
//   - ctx context.Context
//   - budgetId string
func (_e *MockBudgetsInterface_Expecter) DeleteByBudgetId(ctx interface{}, budgetId interface{}) *MockBudgetsInterface_DeleteByBudgetId_Call {
	return &MockBudgetsInterface_DeleteByBudgetId_Call{Call: _e.mock.On("DeleteByBudgetId", ctx, budgetId)}
}

func (_c *MockBudgetsInterface_DeleteByBudgetId_Call) Run(run func(ctx context.Context, budgetId string)) *MockBudgetsInterface_DeleteByBudgetId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockBudgetsInterface_DeleteByBudgetId_Call) Return(_a0 error) *MockBudgetsInterface_DeleteByBudgetId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBudgetsInterface_DeleteByBudgetId_Call) RunAndReturn(run func(context.Context, string) error) *MockBudgetsInterface_DeleteByBudgetId_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, request
func (_m *MockBudgetsInterface) Get(ctx context.Context, request billing.GetBudgetConfigurationRequest) (*billing.GetBudgetConfigurationResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *billing.GetBudgetConfigurationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, billing.GetBudgetConfigurationRequest) (*billing.GetBudgetConfigurationResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, billing.GetBudgetConfigurationRequest) *billing.GetBudgetConfigurationResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.GetBudgetConfigurationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, billing.GetBudgetConfigurationRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBudgetsInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockBudgetsInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - request billing.GetBudgetConfigurationRequest
func (_e *MockBudgetsInterface_Expecter) Get(ctx interface{}, request interface{}) *MockBudgetsInterface_Get_Call {
	return &MockBudgetsInterface_Get_Call{Call: _e.mock.On("Get", ctx, request)}
}

func (_c *MockBudgetsInterface_Get_Call) Run(run func(ctx context.Context, request billing.GetBudgetConfigurationRequest)) *MockBudgetsInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(billing.GetBudgetConfigurationRequest))
	})
	return _c
}

func (_c *MockBudgetsInterface_Get_Call) Return(_a0 *billing.GetBudgetConfigurationResponse, _a1 error) *MockBudgetsInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBudgetsInterface_Get_Call) RunAndReturn(run func(context.Context, billing.GetBudgetConfigurationRequest) (*billing.GetBudgetConfigurationResponse, error)) *MockBudgetsInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByBudgetId provides a mock function with given fields: ctx, budgetId
func (_m *MockBudgetsInterface) GetByBudgetId(ctx context.Context, budgetId string) (*billing.GetBudgetConfigurationResponse, error) {
	ret := _m.Called(ctx, budgetId)

	if len(ret) == 0 {
		panic("no return value specified for GetByBudgetId")
	}

	var r0 *billing.GetBudgetConfigurationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*billing.GetBudgetConfigurationResponse, error)); ok {
		return rf(ctx, budgetId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *billing.GetBudgetConfigurationResponse); ok {
		r0 = rf(ctx, budgetId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.GetBudgetConfigurationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, budgetId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBudgetsInterface_GetByBudgetId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByBudgetId'
type MockBudgetsInterface_GetByBudgetId_Call struct {
	*mock.Call
}

// GetByBudgetId is a helper method to define mock.On call
//   - ctx context.Context
//   - budgetId string
func (_e *MockBudgetsInterface_Expecter) GetByBudgetId(ctx interface{}, budgetId interface{}) *MockBudgetsInterface_GetByBudgetId_Call {
	return &MockBudgetsInterface_GetByBudgetId_Call{Call: _e.mock.On("GetByBudgetId", ctx, budgetId)}
}

func (_c *MockBudgetsInterface_GetByBudgetId_Call) Run(run func(ctx context.Context, budgetId string)) *MockBudgetsInterface_GetByBudgetId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockBudgetsInterface_GetByBudgetId_Call) Return(_a0 *billing.GetBudgetConfigurationResponse, _a1 error) *MockBudgetsInterface_GetByBudgetId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBudgetsInterface_GetByBudgetId_Call) RunAndReturn(run func(context.Context, string) (*billing.GetBudgetConfigurationResponse, error)) *MockBudgetsInterface_GetByBudgetId_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, request
func (_m *MockBudgetsInterface) List(ctx context.Context, request billing.ListBudgetConfigurationsRequest) listing.Iterator[billing.BudgetConfiguration] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 listing.Iterator[billing.BudgetConfiguration]
	if rf, ok := ret.Get(0).(func(context.Context, billing.ListBudgetConfigurationsRequest) listing.Iterator[billing.BudgetConfiguration]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listing.Iterator[billing.BudgetConfiguration])
		}
	}

	return r0
}

// MockBudgetsInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockBudgetsInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - request billing.ListBudgetConfigurationsRequest
func (_e *MockBudgetsInterface_Expecter) List(ctx interface{}, request interface{}) *MockBudgetsInterface_List_Call {
	return &MockBudgetsInterface_List_Call{Call: _e.mock.On("List", ctx, request)}
}

func (_c *MockBudgetsInterface_List_Call) Run(run func(ctx context.Context, request billing.ListBudgetConfigurationsRequest)) *MockBudgetsInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(billing.ListBudgetConfigurationsRequest))
	})
	return _c
}

func (_c *MockBudgetsInterface_List_Call) Return(_a0 listing.Iterator[billing.BudgetConfiguration]) *MockBudgetsInterface_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBudgetsInterface_List_Call) RunAndReturn(run func(context.Context, billing.ListBudgetConfigurationsRequest) listing.Iterator[billing.BudgetConfiguration]) *MockBudgetsInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListAll provides a mock function with given fields: ctx, request
func (_m *MockBudgetsInterface) ListAll(ctx context.Context, request billing.ListBudgetConfigurationsRequest) ([]billing.BudgetConfiguration, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListAll")
	}

	var r0 []billing.BudgetConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, billing.ListBudgetConfigurationsRequest) ([]billing.BudgetConfiguration, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, billing.ListBudgetConfigurationsRequest) []billing.BudgetConfiguration); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]billing.BudgetConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, billing.ListBudgetConfigurationsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBudgetsInterface_ListAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAll'
type MockBudgetsInterface_ListAll_Call struct {
	*mock.Call
}

// ListAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request billing.ListBudgetConfigurationsRequest
func (_e *MockBudgetsInterface_Expecter) ListAll(ctx interface{}, request interface{}) *MockBudgetsInterface_ListAll_Call {
	return &MockBudgetsInterface_ListAll_Call{Call: _e.mock.On("ListAll", ctx, request)}
}

func (_c *MockBudgetsInterface_ListAll_Call) Run(run func(ctx context.Context, request billing.ListBudgetConfigurationsRequest)) *MockBudgetsInterface_ListAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(billing.ListBudgetConfigurationsRequest))
	})
	return _c
}

func (_c *MockBudgetsInterface_ListAll_Call) Return(_a0 []billing.BudgetConfiguration, _a1 error) *MockBudgetsInterface_ListAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBudgetsInterface_ListAll_Call) RunAndReturn(run func(context.Context, billing.ListBudgetConfigurationsRequest) ([]billing.BudgetConfiguration, error)) *MockBudgetsInterface_ListAll_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, request
func (_m *MockBudgetsInterface) Update(ctx context.Context, request billing.UpdateBudgetConfigurationRequest) (*billing.UpdateBudgetConfigurationResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *billing.UpdateBudgetConfigurationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, billing.UpdateBudgetConfigurationRequest) (*billing.UpdateBudgetConfigurationResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, billing.UpdateBudgetConfigurationRequest) *billing.UpdateBudgetConfigurationResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.UpdateBudgetConfigurationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, billing.UpdateBudgetConfigurationRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBudgetsInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockBudgetsInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - request billing.UpdateBudgetConfigurationRequest
func (_e *MockBudgetsInterface_Expecter) Update(ctx interface{}, request interface{}) *MockBudgetsInterface_Update_Call {
	return &MockBudgetsInterface_Update_Call{Call: _e.mock.On("Update", ctx, request)}
}

func (_c *MockBudgetsInterface_Update_Call) Run(run func(ctx context.Context, request billing.UpdateBudgetConfigurationRequest)) *MockBudgetsInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(billing.UpdateBudgetConfigurationRequest))
	})
	return _c
}

func (_c *MockBudgetsInterface_Update_Call) Return(_a0 *billing.UpdateBudgetConfigurationResponse, _a1 error) *MockBudgetsInterface_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBudgetsInterface_Update_Call) RunAndReturn(run func(context.Context, billing.UpdateBudgetConfigurationRequest) (*billing.UpdateBudgetConfigurationResponse, error)) *MockBudgetsInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBudgetsInterface creates a new instance of MockBudgetsInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBudgetsInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBudgetsInterface {
	mock := &MockBudgetsInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
