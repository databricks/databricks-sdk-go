// Code generated by mockery v2.53.2. DO NOT EDIT.

package billing

import (
	context "context"

	billing "github.com/databricks/databricks-sdk-go/service/billing"

	listing "github.com/databricks/databricks-sdk-go/listing"

	mock "github.com/stretchr/testify/mock"
)

// MockBudgetPolicyInterface is an autogenerated mock type for the BudgetPolicyInterface type
type MockBudgetPolicyInterface struct {
	mock.Mock
}

type MockBudgetPolicyInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBudgetPolicyInterface) EXPECT() *MockBudgetPolicyInterface_Expecter {
	return &MockBudgetPolicyInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, request
func (_m *MockBudgetPolicyInterface) Create(ctx context.Context, request billing.CreateBudgetPolicyRequest) (*billing.BudgetPolicy, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *billing.BudgetPolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, billing.CreateBudgetPolicyRequest) (*billing.BudgetPolicy, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, billing.CreateBudgetPolicyRequest) *billing.BudgetPolicy); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.BudgetPolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, billing.CreateBudgetPolicyRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBudgetPolicyInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockBudgetPolicyInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - request billing.CreateBudgetPolicyRequest
func (_e *MockBudgetPolicyInterface_Expecter) Create(ctx interface{}, request interface{}) *MockBudgetPolicyInterface_Create_Call {
	return &MockBudgetPolicyInterface_Create_Call{Call: _e.mock.On("Create", ctx, request)}
}

func (_c *MockBudgetPolicyInterface_Create_Call) Run(run func(ctx context.Context, request billing.CreateBudgetPolicyRequest)) *MockBudgetPolicyInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(billing.CreateBudgetPolicyRequest))
	})
	return _c
}

func (_c *MockBudgetPolicyInterface_Create_Call) Return(_a0 *billing.BudgetPolicy, _a1 error) *MockBudgetPolicyInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBudgetPolicyInterface_Create_Call) RunAndReturn(run func(context.Context, billing.CreateBudgetPolicyRequest) (*billing.BudgetPolicy, error)) *MockBudgetPolicyInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, request
func (_m *MockBudgetPolicyInterface) Delete(ctx context.Context, request billing.DeleteBudgetPolicyRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, billing.DeleteBudgetPolicyRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBudgetPolicyInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockBudgetPolicyInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - request billing.DeleteBudgetPolicyRequest
func (_e *MockBudgetPolicyInterface_Expecter) Delete(ctx interface{}, request interface{}) *MockBudgetPolicyInterface_Delete_Call {
	return &MockBudgetPolicyInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, request)}
}

func (_c *MockBudgetPolicyInterface_Delete_Call) Run(run func(ctx context.Context, request billing.DeleteBudgetPolicyRequest)) *MockBudgetPolicyInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(billing.DeleteBudgetPolicyRequest))
	})
	return _c
}

func (_c *MockBudgetPolicyInterface_Delete_Call) Return(_a0 error) *MockBudgetPolicyInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBudgetPolicyInterface_Delete_Call) RunAndReturn(run func(context.Context, billing.DeleteBudgetPolicyRequest) error) *MockBudgetPolicyInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByPolicyId provides a mock function with given fields: ctx, policyId
func (_m *MockBudgetPolicyInterface) DeleteByPolicyId(ctx context.Context, policyId string) error {
	ret := _m.Called(ctx, policyId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByPolicyId")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, policyId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBudgetPolicyInterface_DeleteByPolicyId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByPolicyId'
type MockBudgetPolicyInterface_DeleteByPolicyId_Call struct {
	*mock.Call
}

// DeleteByPolicyId is a helper method to define mock.On call
//   - ctx context.Context
//   - policyId string
func (_e *MockBudgetPolicyInterface_Expecter) DeleteByPolicyId(ctx interface{}, policyId interface{}) *MockBudgetPolicyInterface_DeleteByPolicyId_Call {
	return &MockBudgetPolicyInterface_DeleteByPolicyId_Call{Call: _e.mock.On("DeleteByPolicyId", ctx, policyId)}
}

func (_c *MockBudgetPolicyInterface_DeleteByPolicyId_Call) Run(run func(ctx context.Context, policyId string)) *MockBudgetPolicyInterface_DeleteByPolicyId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockBudgetPolicyInterface_DeleteByPolicyId_Call) Return(_a0 error) *MockBudgetPolicyInterface_DeleteByPolicyId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBudgetPolicyInterface_DeleteByPolicyId_Call) RunAndReturn(run func(context.Context, string) error) *MockBudgetPolicyInterface_DeleteByPolicyId_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, request
func (_m *MockBudgetPolicyInterface) Get(ctx context.Context, request billing.GetBudgetPolicyRequest) (*billing.BudgetPolicy, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *billing.BudgetPolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, billing.GetBudgetPolicyRequest) (*billing.BudgetPolicy, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, billing.GetBudgetPolicyRequest) *billing.BudgetPolicy); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.BudgetPolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, billing.GetBudgetPolicyRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBudgetPolicyInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockBudgetPolicyInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - request billing.GetBudgetPolicyRequest
func (_e *MockBudgetPolicyInterface_Expecter) Get(ctx interface{}, request interface{}) *MockBudgetPolicyInterface_Get_Call {
	return &MockBudgetPolicyInterface_Get_Call{Call: _e.mock.On("Get", ctx, request)}
}

func (_c *MockBudgetPolicyInterface_Get_Call) Run(run func(ctx context.Context, request billing.GetBudgetPolicyRequest)) *MockBudgetPolicyInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(billing.GetBudgetPolicyRequest))
	})
	return _c
}

func (_c *MockBudgetPolicyInterface_Get_Call) Return(_a0 *billing.BudgetPolicy, _a1 error) *MockBudgetPolicyInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBudgetPolicyInterface_Get_Call) RunAndReturn(run func(context.Context, billing.GetBudgetPolicyRequest) (*billing.BudgetPolicy, error)) *MockBudgetPolicyInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByPolicyId provides a mock function with given fields: ctx, policyId
func (_m *MockBudgetPolicyInterface) GetByPolicyId(ctx context.Context, policyId string) (*billing.BudgetPolicy, error) {
	ret := _m.Called(ctx, policyId)

	if len(ret) == 0 {
		panic("no return value specified for GetByPolicyId")
	}

	var r0 *billing.BudgetPolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*billing.BudgetPolicy, error)); ok {
		return rf(ctx, policyId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *billing.BudgetPolicy); ok {
		r0 = rf(ctx, policyId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.BudgetPolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, policyId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBudgetPolicyInterface_GetByPolicyId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByPolicyId'
type MockBudgetPolicyInterface_GetByPolicyId_Call struct {
	*mock.Call
}

// GetByPolicyId is a helper method to define mock.On call
//   - ctx context.Context
//   - policyId string
func (_e *MockBudgetPolicyInterface_Expecter) GetByPolicyId(ctx interface{}, policyId interface{}) *MockBudgetPolicyInterface_GetByPolicyId_Call {
	return &MockBudgetPolicyInterface_GetByPolicyId_Call{Call: _e.mock.On("GetByPolicyId", ctx, policyId)}
}

func (_c *MockBudgetPolicyInterface_GetByPolicyId_Call) Run(run func(ctx context.Context, policyId string)) *MockBudgetPolicyInterface_GetByPolicyId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockBudgetPolicyInterface_GetByPolicyId_Call) Return(_a0 *billing.BudgetPolicy, _a1 error) *MockBudgetPolicyInterface_GetByPolicyId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBudgetPolicyInterface_GetByPolicyId_Call) RunAndReturn(run func(context.Context, string) (*billing.BudgetPolicy, error)) *MockBudgetPolicyInterface_GetByPolicyId_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, request
func (_m *MockBudgetPolicyInterface) List(ctx context.Context, request billing.ListBudgetPoliciesRequest) listing.Iterator[billing.BudgetPolicy] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 listing.Iterator[billing.BudgetPolicy]
	if rf, ok := ret.Get(0).(func(context.Context, billing.ListBudgetPoliciesRequest) listing.Iterator[billing.BudgetPolicy]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listing.Iterator[billing.BudgetPolicy])
		}
	}

	return r0
}

// MockBudgetPolicyInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockBudgetPolicyInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - request billing.ListBudgetPoliciesRequest
func (_e *MockBudgetPolicyInterface_Expecter) List(ctx interface{}, request interface{}) *MockBudgetPolicyInterface_List_Call {
	return &MockBudgetPolicyInterface_List_Call{Call: _e.mock.On("List", ctx, request)}
}

func (_c *MockBudgetPolicyInterface_List_Call) Run(run func(ctx context.Context, request billing.ListBudgetPoliciesRequest)) *MockBudgetPolicyInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(billing.ListBudgetPoliciesRequest))
	})
	return _c
}

func (_c *MockBudgetPolicyInterface_List_Call) Return(_a0 listing.Iterator[billing.BudgetPolicy]) *MockBudgetPolicyInterface_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBudgetPolicyInterface_List_Call) RunAndReturn(run func(context.Context, billing.ListBudgetPoliciesRequest) listing.Iterator[billing.BudgetPolicy]) *MockBudgetPolicyInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListAll provides a mock function with given fields: ctx, request
func (_m *MockBudgetPolicyInterface) ListAll(ctx context.Context, request billing.ListBudgetPoliciesRequest) ([]billing.BudgetPolicy, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListAll")
	}

	var r0 []billing.BudgetPolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, billing.ListBudgetPoliciesRequest) ([]billing.BudgetPolicy, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, billing.ListBudgetPoliciesRequest) []billing.BudgetPolicy); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]billing.BudgetPolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, billing.ListBudgetPoliciesRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBudgetPolicyInterface_ListAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAll'
type MockBudgetPolicyInterface_ListAll_Call struct {
	*mock.Call
}

// ListAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request billing.ListBudgetPoliciesRequest
func (_e *MockBudgetPolicyInterface_Expecter) ListAll(ctx interface{}, request interface{}) *MockBudgetPolicyInterface_ListAll_Call {
	return &MockBudgetPolicyInterface_ListAll_Call{Call: _e.mock.On("ListAll", ctx, request)}
}

func (_c *MockBudgetPolicyInterface_ListAll_Call) Run(run func(ctx context.Context, request billing.ListBudgetPoliciesRequest)) *MockBudgetPolicyInterface_ListAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(billing.ListBudgetPoliciesRequest))
	})
	return _c
}

func (_c *MockBudgetPolicyInterface_ListAll_Call) Return(_a0 []billing.BudgetPolicy, _a1 error) *MockBudgetPolicyInterface_ListAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBudgetPolicyInterface_ListAll_Call) RunAndReturn(run func(context.Context, billing.ListBudgetPoliciesRequest) ([]billing.BudgetPolicy, error)) *MockBudgetPolicyInterface_ListAll_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, request
func (_m *MockBudgetPolicyInterface) Update(ctx context.Context, request billing.UpdateBudgetPolicyRequest) (*billing.BudgetPolicy, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *billing.BudgetPolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, billing.UpdateBudgetPolicyRequest) (*billing.BudgetPolicy, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, billing.UpdateBudgetPolicyRequest) *billing.BudgetPolicy); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.BudgetPolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, billing.UpdateBudgetPolicyRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBudgetPolicyInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockBudgetPolicyInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - request billing.UpdateBudgetPolicyRequest
func (_e *MockBudgetPolicyInterface_Expecter) Update(ctx interface{}, request interface{}) *MockBudgetPolicyInterface_Update_Call {
	return &MockBudgetPolicyInterface_Update_Call{Call: _e.mock.On("Update", ctx, request)}
}

func (_c *MockBudgetPolicyInterface_Update_Call) Run(run func(ctx context.Context, request billing.UpdateBudgetPolicyRequest)) *MockBudgetPolicyInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(billing.UpdateBudgetPolicyRequest))
	})
	return _c
}

func (_c *MockBudgetPolicyInterface_Update_Call) Return(_a0 *billing.BudgetPolicy, _a1 error) *MockBudgetPolicyInterface_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBudgetPolicyInterface_Update_Call) RunAndReturn(run func(context.Context, billing.UpdateBudgetPolicyRequest) (*billing.BudgetPolicy, error)) *MockBudgetPolicyInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBudgetPolicyInterface creates a new instance of MockBudgetPolicyInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBudgetPolicyInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBudgetPolicyInterface {
	mock := &MockBudgetPolicyInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
