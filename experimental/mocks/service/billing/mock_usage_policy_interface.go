// Code generated by mockery v2.53.2. DO NOT EDIT.

package billing

import (
	context "context"

	billing "github.com/databricks/databricks-sdk-go/service/billing"

	listing "github.com/databricks/databricks-sdk-go/listing"

	mock "github.com/stretchr/testify/mock"
)

// MockUsagePolicyInterface is an autogenerated mock type for the UsagePolicyInterface type
type MockUsagePolicyInterface struct {
	mock.Mock
}

type MockUsagePolicyInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUsagePolicyInterface) EXPECT() *MockUsagePolicyInterface_Expecter {
	return &MockUsagePolicyInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, request
func (_m *MockUsagePolicyInterface) Create(ctx context.Context, request billing.CreateUsagePolicyRequest) (*billing.UsagePolicy, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *billing.UsagePolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, billing.CreateUsagePolicyRequest) (*billing.UsagePolicy, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, billing.CreateUsagePolicyRequest) *billing.UsagePolicy); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.UsagePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, billing.CreateUsagePolicyRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUsagePolicyInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockUsagePolicyInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - request billing.CreateUsagePolicyRequest
func (_e *MockUsagePolicyInterface_Expecter) Create(ctx interface{}, request interface{}) *MockUsagePolicyInterface_Create_Call {
	return &MockUsagePolicyInterface_Create_Call{Call: _e.mock.On("Create", ctx, request)}
}

func (_c *MockUsagePolicyInterface_Create_Call) Run(run func(ctx context.Context, request billing.CreateUsagePolicyRequest)) *MockUsagePolicyInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(billing.CreateUsagePolicyRequest))
	})
	return _c
}

func (_c *MockUsagePolicyInterface_Create_Call) Return(_a0 *billing.UsagePolicy, _a1 error) *MockUsagePolicyInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUsagePolicyInterface_Create_Call) RunAndReturn(run func(context.Context, billing.CreateUsagePolicyRequest) (*billing.UsagePolicy, error)) *MockUsagePolicyInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, request
func (_m *MockUsagePolicyInterface) Delete(ctx context.Context, request billing.DeleteUsagePolicyRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, billing.DeleteUsagePolicyRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUsagePolicyInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockUsagePolicyInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - request billing.DeleteUsagePolicyRequest
func (_e *MockUsagePolicyInterface_Expecter) Delete(ctx interface{}, request interface{}) *MockUsagePolicyInterface_Delete_Call {
	return &MockUsagePolicyInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, request)}
}

func (_c *MockUsagePolicyInterface_Delete_Call) Run(run func(ctx context.Context, request billing.DeleteUsagePolicyRequest)) *MockUsagePolicyInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(billing.DeleteUsagePolicyRequest))
	})
	return _c
}

func (_c *MockUsagePolicyInterface_Delete_Call) Return(_a0 error) *MockUsagePolicyInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUsagePolicyInterface_Delete_Call) RunAndReturn(run func(context.Context, billing.DeleteUsagePolicyRequest) error) *MockUsagePolicyInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByPolicyId provides a mock function with given fields: ctx, policyId
func (_m *MockUsagePolicyInterface) DeleteByPolicyId(ctx context.Context, policyId string) error {
	ret := _m.Called(ctx, policyId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByPolicyId")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, policyId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUsagePolicyInterface_DeleteByPolicyId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByPolicyId'
type MockUsagePolicyInterface_DeleteByPolicyId_Call struct {
	*mock.Call
}

// DeleteByPolicyId is a helper method to define mock.On call
//   - ctx context.Context
//   - policyId string
func (_e *MockUsagePolicyInterface_Expecter) DeleteByPolicyId(ctx interface{}, policyId interface{}) *MockUsagePolicyInterface_DeleteByPolicyId_Call {
	return &MockUsagePolicyInterface_DeleteByPolicyId_Call{Call: _e.mock.On("DeleteByPolicyId", ctx, policyId)}
}

func (_c *MockUsagePolicyInterface_DeleteByPolicyId_Call) Run(run func(ctx context.Context, policyId string)) *MockUsagePolicyInterface_DeleteByPolicyId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUsagePolicyInterface_DeleteByPolicyId_Call) Return(_a0 error) *MockUsagePolicyInterface_DeleteByPolicyId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUsagePolicyInterface_DeleteByPolicyId_Call) RunAndReturn(run func(context.Context, string) error) *MockUsagePolicyInterface_DeleteByPolicyId_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, request
func (_m *MockUsagePolicyInterface) Get(ctx context.Context, request billing.GetUsagePolicyRequest) (*billing.UsagePolicy, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *billing.UsagePolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, billing.GetUsagePolicyRequest) (*billing.UsagePolicy, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, billing.GetUsagePolicyRequest) *billing.UsagePolicy); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.UsagePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, billing.GetUsagePolicyRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUsagePolicyInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockUsagePolicyInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - request billing.GetUsagePolicyRequest
func (_e *MockUsagePolicyInterface_Expecter) Get(ctx interface{}, request interface{}) *MockUsagePolicyInterface_Get_Call {
	return &MockUsagePolicyInterface_Get_Call{Call: _e.mock.On("Get", ctx, request)}
}

func (_c *MockUsagePolicyInterface_Get_Call) Run(run func(ctx context.Context, request billing.GetUsagePolicyRequest)) *MockUsagePolicyInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(billing.GetUsagePolicyRequest))
	})
	return _c
}

func (_c *MockUsagePolicyInterface_Get_Call) Return(_a0 *billing.UsagePolicy, _a1 error) *MockUsagePolicyInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUsagePolicyInterface_Get_Call) RunAndReturn(run func(context.Context, billing.GetUsagePolicyRequest) (*billing.UsagePolicy, error)) *MockUsagePolicyInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByPolicyId provides a mock function with given fields: ctx, policyId
func (_m *MockUsagePolicyInterface) GetByPolicyId(ctx context.Context, policyId string) (*billing.UsagePolicy, error) {
	ret := _m.Called(ctx, policyId)

	if len(ret) == 0 {
		panic("no return value specified for GetByPolicyId")
	}

	var r0 *billing.UsagePolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*billing.UsagePolicy, error)); ok {
		return rf(ctx, policyId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *billing.UsagePolicy); ok {
		r0 = rf(ctx, policyId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.UsagePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, policyId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUsagePolicyInterface_GetByPolicyId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByPolicyId'
type MockUsagePolicyInterface_GetByPolicyId_Call struct {
	*mock.Call
}

// GetByPolicyId is a helper method to define mock.On call
//   - ctx context.Context
//   - policyId string
func (_e *MockUsagePolicyInterface_Expecter) GetByPolicyId(ctx interface{}, policyId interface{}) *MockUsagePolicyInterface_GetByPolicyId_Call {
	return &MockUsagePolicyInterface_GetByPolicyId_Call{Call: _e.mock.On("GetByPolicyId", ctx, policyId)}
}

func (_c *MockUsagePolicyInterface_GetByPolicyId_Call) Run(run func(ctx context.Context, policyId string)) *MockUsagePolicyInterface_GetByPolicyId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUsagePolicyInterface_GetByPolicyId_Call) Return(_a0 *billing.UsagePolicy, _a1 error) *MockUsagePolicyInterface_GetByPolicyId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUsagePolicyInterface_GetByPolicyId_Call) RunAndReturn(run func(context.Context, string) (*billing.UsagePolicy, error)) *MockUsagePolicyInterface_GetByPolicyId_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, request
func (_m *MockUsagePolicyInterface) List(ctx context.Context, request billing.ListUsagePoliciesRequest) listing.Iterator[billing.UsagePolicy] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 listing.Iterator[billing.UsagePolicy]
	if rf, ok := ret.Get(0).(func(context.Context, billing.ListUsagePoliciesRequest) listing.Iterator[billing.UsagePolicy]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listing.Iterator[billing.UsagePolicy])
		}
	}

	return r0
}

// MockUsagePolicyInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockUsagePolicyInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - request billing.ListUsagePoliciesRequest
func (_e *MockUsagePolicyInterface_Expecter) List(ctx interface{}, request interface{}) *MockUsagePolicyInterface_List_Call {
	return &MockUsagePolicyInterface_List_Call{Call: _e.mock.On("List", ctx, request)}
}

func (_c *MockUsagePolicyInterface_List_Call) Run(run func(ctx context.Context, request billing.ListUsagePoliciesRequest)) *MockUsagePolicyInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(billing.ListUsagePoliciesRequest))
	})
	return _c
}

func (_c *MockUsagePolicyInterface_List_Call) Return(_a0 listing.Iterator[billing.UsagePolicy]) *MockUsagePolicyInterface_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUsagePolicyInterface_List_Call) RunAndReturn(run func(context.Context, billing.ListUsagePoliciesRequest) listing.Iterator[billing.UsagePolicy]) *MockUsagePolicyInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListAll provides a mock function with given fields: ctx, request
func (_m *MockUsagePolicyInterface) ListAll(ctx context.Context, request billing.ListUsagePoliciesRequest) ([]billing.UsagePolicy, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListAll")
	}

	var r0 []billing.UsagePolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, billing.ListUsagePoliciesRequest) ([]billing.UsagePolicy, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, billing.ListUsagePoliciesRequest) []billing.UsagePolicy); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]billing.UsagePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, billing.ListUsagePoliciesRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUsagePolicyInterface_ListAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAll'
type MockUsagePolicyInterface_ListAll_Call struct {
	*mock.Call
}

// ListAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request billing.ListUsagePoliciesRequest
func (_e *MockUsagePolicyInterface_Expecter) ListAll(ctx interface{}, request interface{}) *MockUsagePolicyInterface_ListAll_Call {
	return &MockUsagePolicyInterface_ListAll_Call{Call: _e.mock.On("ListAll", ctx, request)}
}

func (_c *MockUsagePolicyInterface_ListAll_Call) Run(run func(ctx context.Context, request billing.ListUsagePoliciesRequest)) *MockUsagePolicyInterface_ListAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(billing.ListUsagePoliciesRequest))
	})
	return _c
}

func (_c *MockUsagePolicyInterface_ListAll_Call) Return(_a0 []billing.UsagePolicy, _a1 error) *MockUsagePolicyInterface_ListAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUsagePolicyInterface_ListAll_Call) RunAndReturn(run func(context.Context, billing.ListUsagePoliciesRequest) ([]billing.UsagePolicy, error)) *MockUsagePolicyInterface_ListAll_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, request
func (_m *MockUsagePolicyInterface) Update(ctx context.Context, request billing.UpdateUsagePolicyRequest) (*billing.UsagePolicy, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *billing.UsagePolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, billing.UpdateUsagePolicyRequest) (*billing.UsagePolicy, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, billing.UpdateUsagePolicyRequest) *billing.UsagePolicy); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.UsagePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, billing.UpdateUsagePolicyRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUsagePolicyInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockUsagePolicyInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - request billing.UpdateUsagePolicyRequest
func (_e *MockUsagePolicyInterface_Expecter) Update(ctx interface{}, request interface{}) *MockUsagePolicyInterface_Update_Call {
	return &MockUsagePolicyInterface_Update_Call{Call: _e.mock.On("Update", ctx, request)}
}

func (_c *MockUsagePolicyInterface_Update_Call) Run(run func(ctx context.Context, request billing.UpdateUsagePolicyRequest)) *MockUsagePolicyInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(billing.UpdateUsagePolicyRequest))
	})
	return _c
}

func (_c *MockUsagePolicyInterface_Update_Call) Return(_a0 *billing.UsagePolicy, _a1 error) *MockUsagePolicyInterface_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUsagePolicyInterface_Update_Call) RunAndReturn(run func(context.Context, billing.UpdateUsagePolicyRequest) (*billing.UsagePolicy, error)) *MockUsagePolicyInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUsagePolicyInterface creates a new instance of MockUsagePolicyInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUsagePolicyInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUsagePolicyInterface {
	mock := &MockUsagePolicyInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
