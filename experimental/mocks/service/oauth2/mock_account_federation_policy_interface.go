// Code generated by mockery v2.43.0. DO NOT EDIT.

package oauth2

import (
	context "context"

	listing "github.com/databricks/databricks-sdk-go/listing"
	mock "github.com/stretchr/testify/mock"

	oauth2 "github.com/databricks/databricks-sdk-go/service/oauth2"
)

// MockAccountFederationPolicyInterface is an autogenerated mock type for the AccountFederationPolicyInterface type
type MockAccountFederationPolicyInterface struct {
	mock.Mock
}

type MockAccountFederationPolicyInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccountFederationPolicyInterface) EXPECT() *MockAccountFederationPolicyInterface_Expecter {
	return &MockAccountFederationPolicyInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, request
func (_m *MockAccountFederationPolicyInterface) Create(ctx context.Context, request oauth2.CreateAccountFederationPolicyRequest) (*oauth2.FederationPolicy, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *oauth2.FederationPolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, oauth2.CreateAccountFederationPolicyRequest) (*oauth2.FederationPolicy, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, oauth2.CreateAccountFederationPolicyRequest) *oauth2.FederationPolicy); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oauth2.FederationPolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, oauth2.CreateAccountFederationPolicyRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountFederationPolicyInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockAccountFederationPolicyInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - request oauth2.CreateAccountFederationPolicyRequest
func (_e *MockAccountFederationPolicyInterface_Expecter) Create(ctx interface{}, request interface{}) *MockAccountFederationPolicyInterface_Create_Call {
	return &MockAccountFederationPolicyInterface_Create_Call{Call: _e.mock.On("Create", ctx, request)}
}

func (_c *MockAccountFederationPolicyInterface_Create_Call) Run(run func(ctx context.Context, request oauth2.CreateAccountFederationPolicyRequest)) *MockAccountFederationPolicyInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(oauth2.CreateAccountFederationPolicyRequest))
	})
	return _c
}

func (_c *MockAccountFederationPolicyInterface_Create_Call) Return(_a0 *oauth2.FederationPolicy, _a1 error) *MockAccountFederationPolicyInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountFederationPolicyInterface_Create_Call) RunAndReturn(run func(context.Context, oauth2.CreateAccountFederationPolicyRequest) (*oauth2.FederationPolicy, error)) *MockAccountFederationPolicyInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, request
func (_m *MockAccountFederationPolicyInterface) Delete(ctx context.Context, request oauth2.DeleteAccountFederationPolicyRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, oauth2.DeleteAccountFederationPolicyRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccountFederationPolicyInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockAccountFederationPolicyInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - request oauth2.DeleteAccountFederationPolicyRequest
func (_e *MockAccountFederationPolicyInterface_Expecter) Delete(ctx interface{}, request interface{}) *MockAccountFederationPolicyInterface_Delete_Call {
	return &MockAccountFederationPolicyInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, request)}
}

func (_c *MockAccountFederationPolicyInterface_Delete_Call) Run(run func(ctx context.Context, request oauth2.DeleteAccountFederationPolicyRequest)) *MockAccountFederationPolicyInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(oauth2.DeleteAccountFederationPolicyRequest))
	})
	return _c
}

func (_c *MockAccountFederationPolicyInterface_Delete_Call) Return(_a0 error) *MockAccountFederationPolicyInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountFederationPolicyInterface_Delete_Call) RunAndReturn(run func(context.Context, oauth2.DeleteAccountFederationPolicyRequest) error) *MockAccountFederationPolicyInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByPolicyId provides a mock function with given fields: ctx, policyId
func (_m *MockAccountFederationPolicyInterface) DeleteByPolicyId(ctx context.Context, policyId string) error {
	ret := _m.Called(ctx, policyId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByPolicyId")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, policyId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccountFederationPolicyInterface_DeleteByPolicyId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByPolicyId'
type MockAccountFederationPolicyInterface_DeleteByPolicyId_Call struct {
	*mock.Call
}

// DeleteByPolicyId is a helper method to define mock.On call
//   - ctx context.Context
//   - policyId string
func (_e *MockAccountFederationPolicyInterface_Expecter) DeleteByPolicyId(ctx interface{}, policyId interface{}) *MockAccountFederationPolicyInterface_DeleteByPolicyId_Call {
	return &MockAccountFederationPolicyInterface_DeleteByPolicyId_Call{Call: _e.mock.On("DeleteByPolicyId", ctx, policyId)}
}

func (_c *MockAccountFederationPolicyInterface_DeleteByPolicyId_Call) Run(run func(ctx context.Context, policyId string)) *MockAccountFederationPolicyInterface_DeleteByPolicyId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAccountFederationPolicyInterface_DeleteByPolicyId_Call) Return(_a0 error) *MockAccountFederationPolicyInterface_DeleteByPolicyId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountFederationPolicyInterface_DeleteByPolicyId_Call) RunAndReturn(run func(context.Context, string) error) *MockAccountFederationPolicyInterface_DeleteByPolicyId_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, request
func (_m *MockAccountFederationPolicyInterface) Get(ctx context.Context, request oauth2.GetAccountFederationPolicyRequest) (*oauth2.FederationPolicy, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *oauth2.FederationPolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, oauth2.GetAccountFederationPolicyRequest) (*oauth2.FederationPolicy, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, oauth2.GetAccountFederationPolicyRequest) *oauth2.FederationPolicy); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oauth2.FederationPolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, oauth2.GetAccountFederationPolicyRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountFederationPolicyInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockAccountFederationPolicyInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - request oauth2.GetAccountFederationPolicyRequest
func (_e *MockAccountFederationPolicyInterface_Expecter) Get(ctx interface{}, request interface{}) *MockAccountFederationPolicyInterface_Get_Call {
	return &MockAccountFederationPolicyInterface_Get_Call{Call: _e.mock.On("Get", ctx, request)}
}

func (_c *MockAccountFederationPolicyInterface_Get_Call) Run(run func(ctx context.Context, request oauth2.GetAccountFederationPolicyRequest)) *MockAccountFederationPolicyInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(oauth2.GetAccountFederationPolicyRequest))
	})
	return _c
}

func (_c *MockAccountFederationPolicyInterface_Get_Call) Return(_a0 *oauth2.FederationPolicy, _a1 error) *MockAccountFederationPolicyInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountFederationPolicyInterface_Get_Call) RunAndReturn(run func(context.Context, oauth2.GetAccountFederationPolicyRequest) (*oauth2.FederationPolicy, error)) *MockAccountFederationPolicyInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByPolicyId provides a mock function with given fields: ctx, policyId
func (_m *MockAccountFederationPolicyInterface) GetByPolicyId(ctx context.Context, policyId string) (*oauth2.FederationPolicy, error) {
	ret := _m.Called(ctx, policyId)

	if len(ret) == 0 {
		panic("no return value specified for GetByPolicyId")
	}

	var r0 *oauth2.FederationPolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*oauth2.FederationPolicy, error)); ok {
		return rf(ctx, policyId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *oauth2.FederationPolicy); ok {
		r0 = rf(ctx, policyId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oauth2.FederationPolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, policyId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountFederationPolicyInterface_GetByPolicyId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByPolicyId'
type MockAccountFederationPolicyInterface_GetByPolicyId_Call struct {
	*mock.Call
}

// GetByPolicyId is a helper method to define mock.On call
//   - ctx context.Context
//   - policyId string
func (_e *MockAccountFederationPolicyInterface_Expecter) GetByPolicyId(ctx interface{}, policyId interface{}) *MockAccountFederationPolicyInterface_GetByPolicyId_Call {
	return &MockAccountFederationPolicyInterface_GetByPolicyId_Call{Call: _e.mock.On("GetByPolicyId", ctx, policyId)}
}

func (_c *MockAccountFederationPolicyInterface_GetByPolicyId_Call) Run(run func(ctx context.Context, policyId string)) *MockAccountFederationPolicyInterface_GetByPolicyId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAccountFederationPolicyInterface_GetByPolicyId_Call) Return(_a0 *oauth2.FederationPolicy, _a1 error) *MockAccountFederationPolicyInterface_GetByPolicyId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountFederationPolicyInterface_GetByPolicyId_Call) RunAndReturn(run func(context.Context, string) (*oauth2.FederationPolicy, error)) *MockAccountFederationPolicyInterface_GetByPolicyId_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, request
func (_m *MockAccountFederationPolicyInterface) List(ctx context.Context, request oauth2.ListAccountFederationPoliciesRequest) listing.Iterator[oauth2.FederationPolicy] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 listing.Iterator[oauth2.FederationPolicy]
	if rf, ok := ret.Get(0).(func(context.Context, oauth2.ListAccountFederationPoliciesRequest) listing.Iterator[oauth2.FederationPolicy]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listing.Iterator[oauth2.FederationPolicy])
		}
	}

	return r0
}

// MockAccountFederationPolicyInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockAccountFederationPolicyInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - request oauth2.ListAccountFederationPoliciesRequest
func (_e *MockAccountFederationPolicyInterface_Expecter) List(ctx interface{}, request interface{}) *MockAccountFederationPolicyInterface_List_Call {
	return &MockAccountFederationPolicyInterface_List_Call{Call: _e.mock.On("List", ctx, request)}
}

func (_c *MockAccountFederationPolicyInterface_List_Call) Run(run func(ctx context.Context, request oauth2.ListAccountFederationPoliciesRequest)) *MockAccountFederationPolicyInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(oauth2.ListAccountFederationPoliciesRequest))
	})
	return _c
}

func (_c *MockAccountFederationPolicyInterface_List_Call) Return(_a0 listing.Iterator[oauth2.FederationPolicy]) *MockAccountFederationPolicyInterface_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountFederationPolicyInterface_List_Call) RunAndReturn(run func(context.Context, oauth2.ListAccountFederationPoliciesRequest) listing.Iterator[oauth2.FederationPolicy]) *MockAccountFederationPolicyInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListAll provides a mock function with given fields: ctx, request
func (_m *MockAccountFederationPolicyInterface) ListAll(ctx context.Context, request oauth2.ListAccountFederationPoliciesRequest) ([]oauth2.FederationPolicy, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListAll")
	}

	var r0 []oauth2.FederationPolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, oauth2.ListAccountFederationPoliciesRequest) ([]oauth2.FederationPolicy, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, oauth2.ListAccountFederationPoliciesRequest) []oauth2.FederationPolicy); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]oauth2.FederationPolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, oauth2.ListAccountFederationPoliciesRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountFederationPolicyInterface_ListAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAll'
type MockAccountFederationPolicyInterface_ListAll_Call struct {
	*mock.Call
}

// ListAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request oauth2.ListAccountFederationPoliciesRequest
func (_e *MockAccountFederationPolicyInterface_Expecter) ListAll(ctx interface{}, request interface{}) *MockAccountFederationPolicyInterface_ListAll_Call {
	return &MockAccountFederationPolicyInterface_ListAll_Call{Call: _e.mock.On("ListAll", ctx, request)}
}

func (_c *MockAccountFederationPolicyInterface_ListAll_Call) Run(run func(ctx context.Context, request oauth2.ListAccountFederationPoliciesRequest)) *MockAccountFederationPolicyInterface_ListAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(oauth2.ListAccountFederationPoliciesRequest))
	})
	return _c
}

func (_c *MockAccountFederationPolicyInterface_ListAll_Call) Return(_a0 []oauth2.FederationPolicy, _a1 error) *MockAccountFederationPolicyInterface_ListAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountFederationPolicyInterface_ListAll_Call) RunAndReturn(run func(context.Context, oauth2.ListAccountFederationPoliciesRequest) ([]oauth2.FederationPolicy, error)) *MockAccountFederationPolicyInterface_ListAll_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, request
func (_m *MockAccountFederationPolicyInterface) Update(ctx context.Context, request oauth2.UpdateAccountFederationPolicyRequest) (*oauth2.FederationPolicy, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *oauth2.FederationPolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, oauth2.UpdateAccountFederationPolicyRequest) (*oauth2.FederationPolicy, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, oauth2.UpdateAccountFederationPolicyRequest) *oauth2.FederationPolicy); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oauth2.FederationPolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, oauth2.UpdateAccountFederationPolicyRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountFederationPolicyInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockAccountFederationPolicyInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - request oauth2.UpdateAccountFederationPolicyRequest
func (_e *MockAccountFederationPolicyInterface_Expecter) Update(ctx interface{}, request interface{}) *MockAccountFederationPolicyInterface_Update_Call {
	return &MockAccountFederationPolicyInterface_Update_Call{Call: _e.mock.On("Update", ctx, request)}
}

func (_c *MockAccountFederationPolicyInterface_Update_Call) Run(run func(ctx context.Context, request oauth2.UpdateAccountFederationPolicyRequest)) *MockAccountFederationPolicyInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(oauth2.UpdateAccountFederationPolicyRequest))
	})
	return _c
}

func (_c *MockAccountFederationPolicyInterface_Update_Call) Return(_a0 *oauth2.FederationPolicy, _a1 error) *MockAccountFederationPolicyInterface_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountFederationPolicyInterface_Update_Call) RunAndReturn(run func(context.Context, oauth2.UpdateAccountFederationPolicyRequest) (*oauth2.FederationPolicy, error)) *MockAccountFederationPolicyInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAccountFederationPolicyInterface creates a new instance of MockAccountFederationPolicyInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccountFederationPolicyInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccountFederationPolicyInterface {
	mock := &MockAccountFederationPolicyInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
