// Code generated by mockery v2.53.2. DO NOT EDIT.

package oauth2

import (
	context "context"

	listing "github.com/databricks/databricks-sdk-go/listing"
	mock "github.com/stretchr/testify/mock"

	oauth2 "github.com/databricks/databricks-sdk-go/service/oauth2"
)

// MockServicePrincipalSecretsProxyInterface is an autogenerated mock type for the ServicePrincipalSecretsProxyInterface type
type MockServicePrincipalSecretsProxyInterface struct {
	mock.Mock
}

type MockServicePrincipalSecretsProxyInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServicePrincipalSecretsProxyInterface) EXPECT() *MockServicePrincipalSecretsProxyInterface_Expecter {
	return &MockServicePrincipalSecretsProxyInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, request
func (_m *MockServicePrincipalSecretsProxyInterface) Create(ctx context.Context, request oauth2.CreateServicePrincipalSecretRequest) (*oauth2.CreateServicePrincipalSecretResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *oauth2.CreateServicePrincipalSecretResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, oauth2.CreateServicePrincipalSecretRequest) (*oauth2.CreateServicePrincipalSecretResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, oauth2.CreateServicePrincipalSecretRequest) *oauth2.CreateServicePrincipalSecretResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oauth2.CreateServicePrincipalSecretResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, oauth2.CreateServicePrincipalSecretRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServicePrincipalSecretsProxyInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockServicePrincipalSecretsProxyInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - request oauth2.CreateServicePrincipalSecretRequest
func (_e *MockServicePrincipalSecretsProxyInterface_Expecter) Create(ctx interface{}, request interface{}) *MockServicePrincipalSecretsProxyInterface_Create_Call {
	return &MockServicePrincipalSecretsProxyInterface_Create_Call{Call: _e.mock.On("Create", ctx, request)}
}

func (_c *MockServicePrincipalSecretsProxyInterface_Create_Call) Run(run func(ctx context.Context, request oauth2.CreateServicePrincipalSecretRequest)) *MockServicePrincipalSecretsProxyInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(oauth2.CreateServicePrincipalSecretRequest))
	})
	return _c
}

func (_c *MockServicePrincipalSecretsProxyInterface_Create_Call) Return(_a0 *oauth2.CreateServicePrincipalSecretResponse, _a1 error) *MockServicePrincipalSecretsProxyInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServicePrincipalSecretsProxyInterface_Create_Call) RunAndReturn(run func(context.Context, oauth2.CreateServicePrincipalSecretRequest) (*oauth2.CreateServicePrincipalSecretResponse, error)) *MockServicePrincipalSecretsProxyInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, request
func (_m *MockServicePrincipalSecretsProxyInterface) Delete(ctx context.Context, request oauth2.DeleteServicePrincipalSecretRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, oauth2.DeleteServicePrincipalSecretRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServicePrincipalSecretsProxyInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockServicePrincipalSecretsProxyInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - request oauth2.DeleteServicePrincipalSecretRequest
func (_e *MockServicePrincipalSecretsProxyInterface_Expecter) Delete(ctx interface{}, request interface{}) *MockServicePrincipalSecretsProxyInterface_Delete_Call {
	return &MockServicePrincipalSecretsProxyInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, request)}
}

func (_c *MockServicePrincipalSecretsProxyInterface_Delete_Call) Run(run func(ctx context.Context, request oauth2.DeleteServicePrincipalSecretRequest)) *MockServicePrincipalSecretsProxyInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(oauth2.DeleteServicePrincipalSecretRequest))
	})
	return _c
}

func (_c *MockServicePrincipalSecretsProxyInterface_Delete_Call) Return(_a0 error) *MockServicePrincipalSecretsProxyInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServicePrincipalSecretsProxyInterface_Delete_Call) RunAndReturn(run func(context.Context, oauth2.DeleteServicePrincipalSecretRequest) error) *MockServicePrincipalSecretsProxyInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, request
func (_m *MockServicePrincipalSecretsProxyInterface) List(ctx context.Context, request oauth2.ListServicePrincipalSecretsRequest) listing.Iterator[oauth2.SecretInfo] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 listing.Iterator[oauth2.SecretInfo]
	if rf, ok := ret.Get(0).(func(context.Context, oauth2.ListServicePrincipalSecretsRequest) listing.Iterator[oauth2.SecretInfo]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listing.Iterator[oauth2.SecretInfo])
		}
	}

	return r0
}

// MockServicePrincipalSecretsProxyInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockServicePrincipalSecretsProxyInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - request oauth2.ListServicePrincipalSecretsRequest
func (_e *MockServicePrincipalSecretsProxyInterface_Expecter) List(ctx interface{}, request interface{}) *MockServicePrincipalSecretsProxyInterface_List_Call {
	return &MockServicePrincipalSecretsProxyInterface_List_Call{Call: _e.mock.On("List", ctx, request)}
}

func (_c *MockServicePrincipalSecretsProxyInterface_List_Call) Run(run func(ctx context.Context, request oauth2.ListServicePrincipalSecretsRequest)) *MockServicePrincipalSecretsProxyInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(oauth2.ListServicePrincipalSecretsRequest))
	})
	return _c
}

func (_c *MockServicePrincipalSecretsProxyInterface_List_Call) Return(_a0 listing.Iterator[oauth2.SecretInfo]) *MockServicePrincipalSecretsProxyInterface_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServicePrincipalSecretsProxyInterface_List_Call) RunAndReturn(run func(context.Context, oauth2.ListServicePrincipalSecretsRequest) listing.Iterator[oauth2.SecretInfo]) *MockServicePrincipalSecretsProxyInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListAll provides a mock function with given fields: ctx, request
func (_m *MockServicePrincipalSecretsProxyInterface) ListAll(ctx context.Context, request oauth2.ListServicePrincipalSecretsRequest) ([]oauth2.SecretInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListAll")
	}

	var r0 []oauth2.SecretInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, oauth2.ListServicePrincipalSecretsRequest) ([]oauth2.SecretInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, oauth2.ListServicePrincipalSecretsRequest) []oauth2.SecretInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]oauth2.SecretInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, oauth2.ListServicePrincipalSecretsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServicePrincipalSecretsProxyInterface_ListAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAll'
type MockServicePrincipalSecretsProxyInterface_ListAll_Call struct {
	*mock.Call
}

// ListAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request oauth2.ListServicePrincipalSecretsRequest
func (_e *MockServicePrincipalSecretsProxyInterface_Expecter) ListAll(ctx interface{}, request interface{}) *MockServicePrincipalSecretsProxyInterface_ListAll_Call {
	return &MockServicePrincipalSecretsProxyInterface_ListAll_Call{Call: _e.mock.On("ListAll", ctx, request)}
}

func (_c *MockServicePrincipalSecretsProxyInterface_ListAll_Call) Run(run func(ctx context.Context, request oauth2.ListServicePrincipalSecretsRequest)) *MockServicePrincipalSecretsProxyInterface_ListAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(oauth2.ListServicePrincipalSecretsRequest))
	})
	return _c
}

func (_c *MockServicePrincipalSecretsProxyInterface_ListAll_Call) Return(_a0 []oauth2.SecretInfo, _a1 error) *MockServicePrincipalSecretsProxyInterface_ListAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServicePrincipalSecretsProxyInterface_ListAll_Call) RunAndReturn(run func(context.Context, oauth2.ListServicePrincipalSecretsRequest) ([]oauth2.SecretInfo, error)) *MockServicePrincipalSecretsProxyInterface_ListAll_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockServicePrincipalSecretsProxyInterface creates a new instance of MockServicePrincipalSecretsProxyInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServicePrincipalSecretsProxyInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServicePrincipalSecretsProxyInterface {
	mock := &MockServicePrincipalSecretsProxyInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
