// Code generated by mockery v2.43.0. DO NOT EDIT.

package oauth2

import (
	context "context"

	listing "github.com/databricks/databricks-sdk-go/listing"
	mock "github.com/stretchr/testify/mock"

	oauth2 "github.com/databricks/databricks-sdk-go/service/oauth2"
)

// MockServicePrincipalSecretsInterface is an autogenerated mock type for the ServicePrincipalSecretsInterface type
type MockServicePrincipalSecretsInterface struct {
	mock.Mock
}

type MockServicePrincipalSecretsInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServicePrincipalSecretsInterface) EXPECT() *MockServicePrincipalSecretsInterface_Expecter {
	return &MockServicePrincipalSecretsInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, request
func (_m *MockServicePrincipalSecretsInterface) Create(ctx context.Context, request oauth2.CreateServicePrincipalSecretRequest) (*oauth2.CreateServicePrincipalSecretResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *oauth2.CreateServicePrincipalSecretResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, oauth2.CreateServicePrincipalSecretRequest) (*oauth2.CreateServicePrincipalSecretResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, oauth2.CreateServicePrincipalSecretRequest) *oauth2.CreateServicePrincipalSecretResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oauth2.CreateServicePrincipalSecretResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, oauth2.CreateServicePrincipalSecretRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServicePrincipalSecretsInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockServicePrincipalSecretsInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - request oauth2.CreateServicePrincipalSecretRequest
func (_e *MockServicePrincipalSecretsInterface_Expecter) Create(ctx interface{}, request interface{}) *MockServicePrincipalSecretsInterface_Create_Call {
	return &MockServicePrincipalSecretsInterface_Create_Call{Call: _e.mock.On("Create", ctx, request)}
}

func (_c *MockServicePrincipalSecretsInterface_Create_Call) Run(run func(ctx context.Context, request oauth2.CreateServicePrincipalSecretRequest)) *MockServicePrincipalSecretsInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(oauth2.CreateServicePrincipalSecretRequest))
	})
	return _c
}

func (_c *MockServicePrincipalSecretsInterface_Create_Call) Return(_a0 *oauth2.CreateServicePrincipalSecretResponse, _a1 error) *MockServicePrincipalSecretsInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServicePrincipalSecretsInterface_Create_Call) RunAndReturn(run func(context.Context, oauth2.CreateServicePrincipalSecretRequest) (*oauth2.CreateServicePrincipalSecretResponse, error)) *MockServicePrincipalSecretsInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, request
func (_m *MockServicePrincipalSecretsInterface) Delete(ctx context.Context, request oauth2.DeleteServicePrincipalSecretRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, oauth2.DeleteServicePrincipalSecretRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServicePrincipalSecretsInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockServicePrincipalSecretsInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - request oauth2.DeleteServicePrincipalSecretRequest
func (_e *MockServicePrincipalSecretsInterface_Expecter) Delete(ctx interface{}, request interface{}) *MockServicePrincipalSecretsInterface_Delete_Call {
	return &MockServicePrincipalSecretsInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, request)}
}

func (_c *MockServicePrincipalSecretsInterface_Delete_Call) Run(run func(ctx context.Context, request oauth2.DeleteServicePrincipalSecretRequest)) *MockServicePrincipalSecretsInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(oauth2.DeleteServicePrincipalSecretRequest))
	})
	return _c
}

func (_c *MockServicePrincipalSecretsInterface_Delete_Call) Return(_a0 error) *MockServicePrincipalSecretsInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServicePrincipalSecretsInterface_Delete_Call) RunAndReturn(run func(context.Context, oauth2.DeleteServicePrincipalSecretRequest) error) *MockServicePrincipalSecretsInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByServicePrincipalIdAndSecretId provides a mock function with given fields: ctx, servicePrincipalId, secretId
func (_m *MockServicePrincipalSecretsInterface) DeleteByServicePrincipalIdAndSecretId(ctx context.Context, servicePrincipalId int64, secretId string) error {
	ret := _m.Called(ctx, servicePrincipalId, secretId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByServicePrincipalIdAndSecretId")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) error); ok {
		r0 = rf(ctx, servicePrincipalId, secretId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServicePrincipalSecretsInterface_DeleteByServicePrincipalIdAndSecretId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByServicePrincipalIdAndSecretId'
type MockServicePrincipalSecretsInterface_DeleteByServicePrincipalIdAndSecretId_Call struct {
	*mock.Call
}

// DeleteByServicePrincipalIdAndSecretId is a helper method to define mock.On call
//   - ctx context.Context
//   - servicePrincipalId int64
//   - secretId string
func (_e *MockServicePrincipalSecretsInterface_Expecter) DeleteByServicePrincipalIdAndSecretId(ctx interface{}, servicePrincipalId interface{}, secretId interface{}) *MockServicePrincipalSecretsInterface_DeleteByServicePrincipalIdAndSecretId_Call {
	return &MockServicePrincipalSecretsInterface_DeleteByServicePrincipalIdAndSecretId_Call{Call: _e.mock.On("DeleteByServicePrincipalIdAndSecretId", ctx, servicePrincipalId, secretId)}
}

func (_c *MockServicePrincipalSecretsInterface_DeleteByServicePrincipalIdAndSecretId_Call) Run(run func(ctx context.Context, servicePrincipalId int64, secretId string)) *MockServicePrincipalSecretsInterface_DeleteByServicePrincipalIdAndSecretId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(string))
	})
	return _c
}

func (_c *MockServicePrincipalSecretsInterface_DeleteByServicePrincipalIdAndSecretId_Call) Return(_a0 error) *MockServicePrincipalSecretsInterface_DeleteByServicePrincipalIdAndSecretId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServicePrincipalSecretsInterface_DeleteByServicePrincipalIdAndSecretId_Call) RunAndReturn(run func(context.Context, int64, string) error) *MockServicePrincipalSecretsInterface_DeleteByServicePrincipalIdAndSecretId_Call {
	_c.Call.Return(run)
	return _c
}

// Impl provides a mock function with given fields:
func (_m *MockServicePrincipalSecretsInterface) Impl() oauth2.ServicePrincipalSecretsService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 oauth2.ServicePrincipalSecretsService
	if rf, ok := ret.Get(0).(func() oauth2.ServicePrincipalSecretsService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(oauth2.ServicePrincipalSecretsService)
		}
	}

	return r0
}

// MockServicePrincipalSecretsInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockServicePrincipalSecretsInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockServicePrincipalSecretsInterface_Expecter) Impl() *MockServicePrincipalSecretsInterface_Impl_Call {
	return &MockServicePrincipalSecretsInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockServicePrincipalSecretsInterface_Impl_Call) Run(run func()) *MockServicePrincipalSecretsInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockServicePrincipalSecretsInterface_Impl_Call) Return(_a0 oauth2.ServicePrincipalSecretsService) *MockServicePrincipalSecretsInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServicePrincipalSecretsInterface_Impl_Call) RunAndReturn(run func() oauth2.ServicePrincipalSecretsService) *MockServicePrincipalSecretsInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, request
func (_m *MockServicePrincipalSecretsInterface) List(ctx context.Context, request oauth2.ListServicePrincipalSecretsRequest) listing.Iterator[oauth2.SecretInfo] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 listing.Iterator[oauth2.SecretInfo]
	if rf, ok := ret.Get(0).(func(context.Context, oauth2.ListServicePrincipalSecretsRequest) listing.Iterator[oauth2.SecretInfo]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listing.Iterator[oauth2.SecretInfo])
		}
	}

	return r0
}

// MockServicePrincipalSecretsInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockServicePrincipalSecretsInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - request oauth2.ListServicePrincipalSecretsRequest
func (_e *MockServicePrincipalSecretsInterface_Expecter) List(ctx interface{}, request interface{}) *MockServicePrincipalSecretsInterface_List_Call {
	return &MockServicePrincipalSecretsInterface_List_Call{Call: _e.mock.On("List", ctx, request)}
}

func (_c *MockServicePrincipalSecretsInterface_List_Call) Run(run func(ctx context.Context, request oauth2.ListServicePrincipalSecretsRequest)) *MockServicePrincipalSecretsInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(oauth2.ListServicePrincipalSecretsRequest))
	})
	return _c
}

func (_c *MockServicePrincipalSecretsInterface_List_Call) Return(_a0 listing.Iterator[oauth2.SecretInfo]) *MockServicePrincipalSecretsInterface_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServicePrincipalSecretsInterface_List_Call) RunAndReturn(run func(context.Context, oauth2.ListServicePrincipalSecretsRequest) listing.Iterator[oauth2.SecretInfo]) *MockServicePrincipalSecretsInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListAll provides a mock function with given fields: ctx, request
func (_m *MockServicePrincipalSecretsInterface) ListAll(ctx context.Context, request oauth2.ListServicePrincipalSecretsRequest) ([]oauth2.SecretInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListAll")
	}

	var r0 []oauth2.SecretInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, oauth2.ListServicePrincipalSecretsRequest) ([]oauth2.SecretInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, oauth2.ListServicePrincipalSecretsRequest) []oauth2.SecretInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]oauth2.SecretInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, oauth2.ListServicePrincipalSecretsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServicePrincipalSecretsInterface_ListAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAll'
type MockServicePrincipalSecretsInterface_ListAll_Call struct {
	*mock.Call
}

// ListAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request oauth2.ListServicePrincipalSecretsRequest
func (_e *MockServicePrincipalSecretsInterface_Expecter) ListAll(ctx interface{}, request interface{}) *MockServicePrincipalSecretsInterface_ListAll_Call {
	return &MockServicePrincipalSecretsInterface_ListAll_Call{Call: _e.mock.On("ListAll", ctx, request)}
}

func (_c *MockServicePrincipalSecretsInterface_ListAll_Call) Run(run func(ctx context.Context, request oauth2.ListServicePrincipalSecretsRequest)) *MockServicePrincipalSecretsInterface_ListAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(oauth2.ListServicePrincipalSecretsRequest))
	})
	return _c
}

func (_c *MockServicePrincipalSecretsInterface_ListAll_Call) Return(_a0 []oauth2.SecretInfo, _a1 error) *MockServicePrincipalSecretsInterface_ListAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServicePrincipalSecretsInterface_ListAll_Call) RunAndReturn(run func(context.Context, oauth2.ListServicePrincipalSecretsRequest) ([]oauth2.SecretInfo, error)) *MockServicePrincipalSecretsInterface_ListAll_Call {
	_c.Call.Return(run)
	return _c
}

// ListByServicePrincipalId provides a mock function with given fields: ctx, servicePrincipalId
func (_m *MockServicePrincipalSecretsInterface) ListByServicePrincipalId(ctx context.Context, servicePrincipalId int64) (*oauth2.ListServicePrincipalSecretsResponse, error) {
	ret := _m.Called(ctx, servicePrincipalId)

	if len(ret) == 0 {
		panic("no return value specified for ListByServicePrincipalId")
	}

	var r0 *oauth2.ListServicePrincipalSecretsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*oauth2.ListServicePrincipalSecretsResponse, error)); ok {
		return rf(ctx, servicePrincipalId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *oauth2.ListServicePrincipalSecretsResponse); ok {
		r0 = rf(ctx, servicePrincipalId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oauth2.ListServicePrincipalSecretsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, servicePrincipalId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServicePrincipalSecretsInterface_ListByServicePrincipalId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByServicePrincipalId'
type MockServicePrincipalSecretsInterface_ListByServicePrincipalId_Call struct {
	*mock.Call
}

// ListByServicePrincipalId is a helper method to define mock.On call
//   - ctx context.Context
//   - servicePrincipalId int64
func (_e *MockServicePrincipalSecretsInterface_Expecter) ListByServicePrincipalId(ctx interface{}, servicePrincipalId interface{}) *MockServicePrincipalSecretsInterface_ListByServicePrincipalId_Call {
	return &MockServicePrincipalSecretsInterface_ListByServicePrincipalId_Call{Call: _e.mock.On("ListByServicePrincipalId", ctx, servicePrincipalId)}
}

func (_c *MockServicePrincipalSecretsInterface_ListByServicePrincipalId_Call) Run(run func(ctx context.Context, servicePrincipalId int64)) *MockServicePrincipalSecretsInterface_ListByServicePrincipalId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockServicePrincipalSecretsInterface_ListByServicePrincipalId_Call) Return(_a0 *oauth2.ListServicePrincipalSecretsResponse, _a1 error) *MockServicePrincipalSecretsInterface_ListByServicePrincipalId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServicePrincipalSecretsInterface_ListByServicePrincipalId_Call) RunAndReturn(run func(context.Context, int64) (*oauth2.ListServicePrincipalSecretsResponse, error)) *MockServicePrincipalSecretsInterface_ListByServicePrincipalId_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockServicePrincipalSecretsInterface) WithImpl(impl oauth2.ServicePrincipalSecretsService) oauth2.ServicePrincipalSecretsInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 oauth2.ServicePrincipalSecretsInterface
	if rf, ok := ret.Get(0).(func(oauth2.ServicePrincipalSecretsService) oauth2.ServicePrincipalSecretsInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(oauth2.ServicePrincipalSecretsInterface)
		}
	}

	return r0
}

// MockServicePrincipalSecretsInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockServicePrincipalSecretsInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl oauth2.ServicePrincipalSecretsService
func (_e *MockServicePrincipalSecretsInterface_Expecter) WithImpl(impl interface{}) *MockServicePrincipalSecretsInterface_WithImpl_Call {
	return &MockServicePrincipalSecretsInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockServicePrincipalSecretsInterface_WithImpl_Call) Run(run func(impl oauth2.ServicePrincipalSecretsService)) *MockServicePrincipalSecretsInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(oauth2.ServicePrincipalSecretsService))
	})
	return _c
}

func (_c *MockServicePrincipalSecretsInterface_WithImpl_Call) Return(_a0 oauth2.ServicePrincipalSecretsInterface) *MockServicePrincipalSecretsInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServicePrincipalSecretsInterface_WithImpl_Call) RunAndReturn(run func(oauth2.ServicePrincipalSecretsService) oauth2.ServicePrincipalSecretsInterface) *MockServicePrincipalSecretsInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockServicePrincipalSecretsInterface creates a new instance of MockServicePrincipalSecretsInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServicePrincipalSecretsInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServicePrincipalSecretsInterface {
	mock := &MockServicePrincipalSecretsInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
