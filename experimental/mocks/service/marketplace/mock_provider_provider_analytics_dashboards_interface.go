// Code generated by mockery v2.43.0. DO NOT EDIT.

package marketplace

import (
	context "context"

	marketplace "github.com/databricks/databricks-sdk-go/service/marketplace"
	mock "github.com/stretchr/testify/mock"
)

// MockProviderProviderAnalyticsDashboardsInterface is an autogenerated mock type for the ProviderProviderAnalyticsDashboardsInterface type
type MockProviderProviderAnalyticsDashboardsInterface struct {
	mock.Mock
}

type MockProviderProviderAnalyticsDashboardsInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProviderProviderAnalyticsDashboardsInterface) EXPECT() *MockProviderProviderAnalyticsDashboardsInterface_Expecter {
	return &MockProviderProviderAnalyticsDashboardsInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx
func (_m *MockProviderProviderAnalyticsDashboardsInterface) Create(ctx context.Context) (*marketplace.ProviderAnalyticsDashboard, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *marketplace.ProviderAnalyticsDashboard
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*marketplace.ProviderAnalyticsDashboard, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *marketplace.ProviderAnalyticsDashboard); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*marketplace.ProviderAnalyticsDashboard)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProviderProviderAnalyticsDashboardsInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockProviderProviderAnalyticsDashboardsInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockProviderProviderAnalyticsDashboardsInterface_Expecter) Create(ctx interface{}) *MockProviderProviderAnalyticsDashboardsInterface_Create_Call {
	return &MockProviderProviderAnalyticsDashboardsInterface_Create_Call{Call: _e.mock.On("Create", ctx)}
}

func (_c *MockProviderProviderAnalyticsDashboardsInterface_Create_Call) Run(run func(ctx context.Context)) *MockProviderProviderAnalyticsDashboardsInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockProviderProviderAnalyticsDashboardsInterface_Create_Call) Return(_a0 *marketplace.ProviderAnalyticsDashboard, _a1 error) *MockProviderProviderAnalyticsDashboardsInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProviderProviderAnalyticsDashboardsInterface_Create_Call) RunAndReturn(run func(context.Context) (*marketplace.ProviderAnalyticsDashboard, error)) *MockProviderProviderAnalyticsDashboardsInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx
func (_m *MockProviderProviderAnalyticsDashboardsInterface) Get(ctx context.Context) (*marketplace.ListProviderAnalyticsDashboardResponse, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *marketplace.ListProviderAnalyticsDashboardResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*marketplace.ListProviderAnalyticsDashboardResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *marketplace.ListProviderAnalyticsDashboardResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*marketplace.ListProviderAnalyticsDashboardResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProviderProviderAnalyticsDashboardsInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockProviderProviderAnalyticsDashboardsInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockProviderProviderAnalyticsDashboardsInterface_Expecter) Get(ctx interface{}) *MockProviderProviderAnalyticsDashboardsInterface_Get_Call {
	return &MockProviderProviderAnalyticsDashboardsInterface_Get_Call{Call: _e.mock.On("Get", ctx)}
}

func (_c *MockProviderProviderAnalyticsDashboardsInterface_Get_Call) Run(run func(ctx context.Context)) *MockProviderProviderAnalyticsDashboardsInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockProviderProviderAnalyticsDashboardsInterface_Get_Call) Return(_a0 *marketplace.ListProviderAnalyticsDashboardResponse, _a1 error) *MockProviderProviderAnalyticsDashboardsInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProviderProviderAnalyticsDashboardsInterface_Get_Call) RunAndReturn(run func(context.Context) (*marketplace.ListProviderAnalyticsDashboardResponse, error)) *MockProviderProviderAnalyticsDashboardsInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestVersion provides a mock function with given fields: ctx
func (_m *MockProviderProviderAnalyticsDashboardsInterface) GetLatestVersion(ctx context.Context) (*marketplace.GetLatestVersionProviderAnalyticsDashboardResponse, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestVersion")
	}

	var r0 *marketplace.GetLatestVersionProviderAnalyticsDashboardResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*marketplace.GetLatestVersionProviderAnalyticsDashboardResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *marketplace.GetLatestVersionProviderAnalyticsDashboardResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*marketplace.GetLatestVersionProviderAnalyticsDashboardResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProviderProviderAnalyticsDashboardsInterface_GetLatestVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestVersion'
type MockProviderProviderAnalyticsDashboardsInterface_GetLatestVersion_Call struct {
	*mock.Call
}

// GetLatestVersion is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockProviderProviderAnalyticsDashboardsInterface_Expecter) GetLatestVersion(ctx interface{}) *MockProviderProviderAnalyticsDashboardsInterface_GetLatestVersion_Call {
	return &MockProviderProviderAnalyticsDashboardsInterface_GetLatestVersion_Call{Call: _e.mock.On("GetLatestVersion", ctx)}
}

func (_c *MockProviderProviderAnalyticsDashboardsInterface_GetLatestVersion_Call) Run(run func(ctx context.Context)) *MockProviderProviderAnalyticsDashboardsInterface_GetLatestVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockProviderProviderAnalyticsDashboardsInterface_GetLatestVersion_Call) Return(_a0 *marketplace.GetLatestVersionProviderAnalyticsDashboardResponse, _a1 error) *MockProviderProviderAnalyticsDashboardsInterface_GetLatestVersion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProviderProviderAnalyticsDashboardsInterface_GetLatestVersion_Call) RunAndReturn(run func(context.Context) (*marketplace.GetLatestVersionProviderAnalyticsDashboardResponse, error)) *MockProviderProviderAnalyticsDashboardsInterface_GetLatestVersion_Call {
	_c.Call.Return(run)
	return _c
}

// Impl provides a mock function with given fields:
func (_m *MockProviderProviderAnalyticsDashboardsInterface) Impl() marketplace.ProviderProviderAnalyticsDashboardsService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 marketplace.ProviderProviderAnalyticsDashboardsService
	if rf, ok := ret.Get(0).(func() marketplace.ProviderProviderAnalyticsDashboardsService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(marketplace.ProviderProviderAnalyticsDashboardsService)
		}
	}

	return r0
}

// MockProviderProviderAnalyticsDashboardsInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockProviderProviderAnalyticsDashboardsInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockProviderProviderAnalyticsDashboardsInterface_Expecter) Impl() *MockProviderProviderAnalyticsDashboardsInterface_Impl_Call {
	return &MockProviderProviderAnalyticsDashboardsInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockProviderProviderAnalyticsDashboardsInterface_Impl_Call) Run(run func()) *MockProviderProviderAnalyticsDashboardsInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockProviderProviderAnalyticsDashboardsInterface_Impl_Call) Return(_a0 marketplace.ProviderProviderAnalyticsDashboardsService) *MockProviderProviderAnalyticsDashboardsInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProviderProviderAnalyticsDashboardsInterface_Impl_Call) RunAndReturn(run func() marketplace.ProviderProviderAnalyticsDashboardsService) *MockProviderProviderAnalyticsDashboardsInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, request
func (_m *MockProviderProviderAnalyticsDashboardsInterface) Update(ctx context.Context, request marketplace.UpdateProviderAnalyticsDashboardRequest) (*marketplace.UpdateProviderAnalyticsDashboardResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *marketplace.UpdateProviderAnalyticsDashboardResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, marketplace.UpdateProviderAnalyticsDashboardRequest) (*marketplace.UpdateProviderAnalyticsDashboardResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, marketplace.UpdateProviderAnalyticsDashboardRequest) *marketplace.UpdateProviderAnalyticsDashboardResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*marketplace.UpdateProviderAnalyticsDashboardResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, marketplace.UpdateProviderAnalyticsDashboardRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProviderProviderAnalyticsDashboardsInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockProviderProviderAnalyticsDashboardsInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - request marketplace.UpdateProviderAnalyticsDashboardRequest
func (_e *MockProviderProviderAnalyticsDashboardsInterface_Expecter) Update(ctx interface{}, request interface{}) *MockProviderProviderAnalyticsDashboardsInterface_Update_Call {
	return &MockProviderProviderAnalyticsDashboardsInterface_Update_Call{Call: _e.mock.On("Update", ctx, request)}
}

func (_c *MockProviderProviderAnalyticsDashboardsInterface_Update_Call) Run(run func(ctx context.Context, request marketplace.UpdateProviderAnalyticsDashboardRequest)) *MockProviderProviderAnalyticsDashboardsInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(marketplace.UpdateProviderAnalyticsDashboardRequest))
	})
	return _c
}

func (_c *MockProviderProviderAnalyticsDashboardsInterface_Update_Call) Return(_a0 *marketplace.UpdateProviderAnalyticsDashboardResponse, _a1 error) *MockProviderProviderAnalyticsDashboardsInterface_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProviderProviderAnalyticsDashboardsInterface_Update_Call) RunAndReturn(run func(context.Context, marketplace.UpdateProviderAnalyticsDashboardRequest) (*marketplace.UpdateProviderAnalyticsDashboardResponse, error)) *MockProviderProviderAnalyticsDashboardsInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockProviderProviderAnalyticsDashboardsInterface) WithImpl(impl marketplace.ProviderProviderAnalyticsDashboardsService) marketplace.ProviderProviderAnalyticsDashboardsInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 marketplace.ProviderProviderAnalyticsDashboardsInterface
	if rf, ok := ret.Get(0).(func(marketplace.ProviderProviderAnalyticsDashboardsService) marketplace.ProviderProviderAnalyticsDashboardsInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(marketplace.ProviderProviderAnalyticsDashboardsInterface)
		}
	}

	return r0
}

// MockProviderProviderAnalyticsDashboardsInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockProviderProviderAnalyticsDashboardsInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl marketplace.ProviderProviderAnalyticsDashboardsService
func (_e *MockProviderProviderAnalyticsDashboardsInterface_Expecter) WithImpl(impl interface{}) *MockProviderProviderAnalyticsDashboardsInterface_WithImpl_Call {
	return &MockProviderProviderAnalyticsDashboardsInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockProviderProviderAnalyticsDashboardsInterface_WithImpl_Call) Run(run func(impl marketplace.ProviderProviderAnalyticsDashboardsService)) *MockProviderProviderAnalyticsDashboardsInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(marketplace.ProviderProviderAnalyticsDashboardsService))
	})
	return _c
}

func (_c *MockProviderProviderAnalyticsDashboardsInterface_WithImpl_Call) Return(_a0 marketplace.ProviderProviderAnalyticsDashboardsInterface) *MockProviderProviderAnalyticsDashboardsInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProviderProviderAnalyticsDashboardsInterface_WithImpl_Call) RunAndReturn(run func(marketplace.ProviderProviderAnalyticsDashboardsService) marketplace.ProviderProviderAnalyticsDashboardsInterface) *MockProviderProviderAnalyticsDashboardsInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProviderProviderAnalyticsDashboardsInterface creates a new instance of MockProviderProviderAnalyticsDashboardsInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProviderProviderAnalyticsDashboardsInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProviderProviderAnalyticsDashboardsInterface {
	mock := &MockProviderProviderAnalyticsDashboardsInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
