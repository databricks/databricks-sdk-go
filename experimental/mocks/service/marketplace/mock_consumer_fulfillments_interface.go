// Code generated by mockery v2.39.1. DO NOT EDIT.

package marketplace

import (
	context "context"

	listing "github.com/databricks/databricks-sdk-go/listing"
	marketplace "github.com/databricks/databricks-sdk-go/service/marketplace"

	mock "github.com/stretchr/testify/mock"
)

// MockConsumerFulfillmentsInterface is an autogenerated mock type for the ConsumerFulfillmentsInterface type
type MockConsumerFulfillmentsInterface struct {
	mock.Mock
}

type MockConsumerFulfillmentsInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConsumerFulfillmentsInterface) EXPECT() *MockConsumerFulfillmentsInterface_Expecter {
	return &MockConsumerFulfillmentsInterface_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: ctx, request
func (_m *MockConsumerFulfillmentsInterface) Get(ctx context.Context, request marketplace.GetListingContentMetadataRequest) listing.Iterator[marketplace.SharedDataObject] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 listing.Iterator[marketplace.SharedDataObject]
	if rf, ok := ret.Get(0).(func(context.Context, marketplace.GetListingContentMetadataRequest) listing.Iterator[marketplace.SharedDataObject]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listing.Iterator[marketplace.SharedDataObject])
		}
	}

	return r0
}

// MockConsumerFulfillmentsInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockConsumerFulfillmentsInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - request marketplace.GetListingContentMetadataRequest
func (_e *MockConsumerFulfillmentsInterface_Expecter) Get(ctx interface{}, request interface{}) *MockConsumerFulfillmentsInterface_Get_Call {
	return &MockConsumerFulfillmentsInterface_Get_Call{Call: _e.mock.On("Get", ctx, request)}
}

func (_c *MockConsumerFulfillmentsInterface_Get_Call) Run(run func(ctx context.Context, request marketplace.GetListingContentMetadataRequest)) *MockConsumerFulfillmentsInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(marketplace.GetListingContentMetadataRequest))
	})
	return _c
}

func (_c *MockConsumerFulfillmentsInterface_Get_Call) Return(_a0 listing.Iterator[marketplace.SharedDataObject]) *MockConsumerFulfillmentsInterface_Get_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConsumerFulfillmentsInterface_Get_Call) RunAndReturn(run func(context.Context, marketplace.GetListingContentMetadataRequest) listing.Iterator[marketplace.SharedDataObject]) *MockConsumerFulfillmentsInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields: ctx, request
func (_m *MockConsumerFulfillmentsInterface) GetAll(ctx context.Context, request marketplace.GetListingContentMetadataRequest) ([]marketplace.SharedDataObject, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []marketplace.SharedDataObject
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, marketplace.GetListingContentMetadataRequest) ([]marketplace.SharedDataObject, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, marketplace.GetListingContentMetadataRequest) []marketplace.SharedDataObject); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]marketplace.SharedDataObject)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, marketplace.GetListingContentMetadataRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConsumerFulfillmentsInterface_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockConsumerFulfillmentsInterface_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request marketplace.GetListingContentMetadataRequest
func (_e *MockConsumerFulfillmentsInterface_Expecter) GetAll(ctx interface{}, request interface{}) *MockConsumerFulfillmentsInterface_GetAll_Call {
	return &MockConsumerFulfillmentsInterface_GetAll_Call{Call: _e.mock.On("GetAll", ctx, request)}
}

func (_c *MockConsumerFulfillmentsInterface_GetAll_Call) Run(run func(ctx context.Context, request marketplace.GetListingContentMetadataRequest)) *MockConsumerFulfillmentsInterface_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(marketplace.GetListingContentMetadataRequest))
	})
	return _c
}

func (_c *MockConsumerFulfillmentsInterface_GetAll_Call) Return(_a0 []marketplace.SharedDataObject, _a1 error) *MockConsumerFulfillmentsInterface_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConsumerFulfillmentsInterface_GetAll_Call) RunAndReturn(run func(context.Context, marketplace.GetListingContentMetadataRequest) ([]marketplace.SharedDataObject, error)) *MockConsumerFulfillmentsInterface_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetByListingId provides a mock function with given fields: ctx, listingId
func (_m *MockConsumerFulfillmentsInterface) GetByListingId(ctx context.Context, listingId string) (*marketplace.GetListingContentMetadataResponse, error) {
	ret := _m.Called(ctx, listingId)

	if len(ret) == 0 {
		panic("no return value specified for GetByListingId")
	}

	var r0 *marketplace.GetListingContentMetadataResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*marketplace.GetListingContentMetadataResponse, error)); ok {
		return rf(ctx, listingId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *marketplace.GetListingContentMetadataResponse); ok {
		r0 = rf(ctx, listingId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*marketplace.GetListingContentMetadataResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, listingId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConsumerFulfillmentsInterface_GetByListingId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByListingId'
type MockConsumerFulfillmentsInterface_GetByListingId_Call struct {
	*mock.Call
}

// GetByListingId is a helper method to define mock.On call
//   - ctx context.Context
//   - listingId string
func (_e *MockConsumerFulfillmentsInterface_Expecter) GetByListingId(ctx interface{}, listingId interface{}) *MockConsumerFulfillmentsInterface_GetByListingId_Call {
	return &MockConsumerFulfillmentsInterface_GetByListingId_Call{Call: _e.mock.On("GetByListingId", ctx, listingId)}
}

func (_c *MockConsumerFulfillmentsInterface_GetByListingId_Call) Run(run func(ctx context.Context, listingId string)) *MockConsumerFulfillmentsInterface_GetByListingId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockConsumerFulfillmentsInterface_GetByListingId_Call) Return(_a0 *marketplace.GetListingContentMetadataResponse, _a1 error) *MockConsumerFulfillmentsInterface_GetByListingId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConsumerFulfillmentsInterface_GetByListingId_Call) RunAndReturn(run func(context.Context, string) (*marketplace.GetListingContentMetadataResponse, error)) *MockConsumerFulfillmentsInterface_GetByListingId_Call {
	_c.Call.Return(run)
	return _c
}

// Impl provides a mock function with given fields:
func (_m *MockConsumerFulfillmentsInterface) Impl() marketplace.ConsumerFulfillmentsService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 marketplace.ConsumerFulfillmentsService
	if rf, ok := ret.Get(0).(func() marketplace.ConsumerFulfillmentsService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(marketplace.ConsumerFulfillmentsService)
		}
	}

	return r0
}

// MockConsumerFulfillmentsInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockConsumerFulfillmentsInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockConsumerFulfillmentsInterface_Expecter) Impl() *MockConsumerFulfillmentsInterface_Impl_Call {
	return &MockConsumerFulfillmentsInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockConsumerFulfillmentsInterface_Impl_Call) Run(run func()) *MockConsumerFulfillmentsInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConsumerFulfillmentsInterface_Impl_Call) Return(_a0 marketplace.ConsumerFulfillmentsService) *MockConsumerFulfillmentsInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConsumerFulfillmentsInterface_Impl_Call) RunAndReturn(run func() marketplace.ConsumerFulfillmentsService) *MockConsumerFulfillmentsInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, request
func (_m *MockConsumerFulfillmentsInterface) List(ctx context.Context, request marketplace.ListFulfillmentsRequest) listing.Iterator[marketplace.ListingFulfillment] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 listing.Iterator[marketplace.ListingFulfillment]
	if rf, ok := ret.Get(0).(func(context.Context, marketplace.ListFulfillmentsRequest) listing.Iterator[marketplace.ListingFulfillment]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listing.Iterator[marketplace.ListingFulfillment])
		}
	}

	return r0
}

// MockConsumerFulfillmentsInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockConsumerFulfillmentsInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - request marketplace.ListFulfillmentsRequest
func (_e *MockConsumerFulfillmentsInterface_Expecter) List(ctx interface{}, request interface{}) *MockConsumerFulfillmentsInterface_List_Call {
	return &MockConsumerFulfillmentsInterface_List_Call{Call: _e.mock.On("List", ctx, request)}
}

func (_c *MockConsumerFulfillmentsInterface_List_Call) Run(run func(ctx context.Context, request marketplace.ListFulfillmentsRequest)) *MockConsumerFulfillmentsInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(marketplace.ListFulfillmentsRequest))
	})
	return _c
}

func (_c *MockConsumerFulfillmentsInterface_List_Call) Return(_a0 listing.Iterator[marketplace.ListingFulfillment]) *MockConsumerFulfillmentsInterface_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConsumerFulfillmentsInterface_List_Call) RunAndReturn(run func(context.Context, marketplace.ListFulfillmentsRequest) listing.Iterator[marketplace.ListingFulfillment]) *MockConsumerFulfillmentsInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListAll provides a mock function with given fields: ctx, request
func (_m *MockConsumerFulfillmentsInterface) ListAll(ctx context.Context, request marketplace.ListFulfillmentsRequest) ([]marketplace.ListingFulfillment, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListAll")
	}

	var r0 []marketplace.ListingFulfillment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, marketplace.ListFulfillmentsRequest) ([]marketplace.ListingFulfillment, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, marketplace.ListFulfillmentsRequest) []marketplace.ListingFulfillment); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]marketplace.ListingFulfillment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, marketplace.ListFulfillmentsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConsumerFulfillmentsInterface_ListAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAll'
type MockConsumerFulfillmentsInterface_ListAll_Call struct {
	*mock.Call
}

// ListAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request marketplace.ListFulfillmentsRequest
func (_e *MockConsumerFulfillmentsInterface_Expecter) ListAll(ctx interface{}, request interface{}) *MockConsumerFulfillmentsInterface_ListAll_Call {
	return &MockConsumerFulfillmentsInterface_ListAll_Call{Call: _e.mock.On("ListAll", ctx, request)}
}

func (_c *MockConsumerFulfillmentsInterface_ListAll_Call) Run(run func(ctx context.Context, request marketplace.ListFulfillmentsRequest)) *MockConsumerFulfillmentsInterface_ListAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(marketplace.ListFulfillmentsRequest))
	})
	return _c
}

func (_c *MockConsumerFulfillmentsInterface_ListAll_Call) Return(_a0 []marketplace.ListingFulfillment, _a1 error) *MockConsumerFulfillmentsInterface_ListAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConsumerFulfillmentsInterface_ListAll_Call) RunAndReturn(run func(context.Context, marketplace.ListFulfillmentsRequest) ([]marketplace.ListingFulfillment, error)) *MockConsumerFulfillmentsInterface_ListAll_Call {
	_c.Call.Return(run)
	return _c
}

// ListByListingId provides a mock function with given fields: ctx, listingId
func (_m *MockConsumerFulfillmentsInterface) ListByListingId(ctx context.Context, listingId string) (*marketplace.ListFulfillmentsResponse, error) {
	ret := _m.Called(ctx, listingId)

	if len(ret) == 0 {
		panic("no return value specified for ListByListingId")
	}

	var r0 *marketplace.ListFulfillmentsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*marketplace.ListFulfillmentsResponse, error)); ok {
		return rf(ctx, listingId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *marketplace.ListFulfillmentsResponse); ok {
		r0 = rf(ctx, listingId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*marketplace.ListFulfillmentsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, listingId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConsumerFulfillmentsInterface_ListByListingId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByListingId'
type MockConsumerFulfillmentsInterface_ListByListingId_Call struct {
	*mock.Call
}

// ListByListingId is a helper method to define mock.On call
//   - ctx context.Context
//   - listingId string
func (_e *MockConsumerFulfillmentsInterface_Expecter) ListByListingId(ctx interface{}, listingId interface{}) *MockConsumerFulfillmentsInterface_ListByListingId_Call {
	return &MockConsumerFulfillmentsInterface_ListByListingId_Call{Call: _e.mock.On("ListByListingId", ctx, listingId)}
}

func (_c *MockConsumerFulfillmentsInterface_ListByListingId_Call) Run(run func(ctx context.Context, listingId string)) *MockConsumerFulfillmentsInterface_ListByListingId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockConsumerFulfillmentsInterface_ListByListingId_Call) Return(_a0 *marketplace.ListFulfillmentsResponse, _a1 error) *MockConsumerFulfillmentsInterface_ListByListingId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConsumerFulfillmentsInterface_ListByListingId_Call) RunAndReturn(run func(context.Context, string) (*marketplace.ListFulfillmentsResponse, error)) *MockConsumerFulfillmentsInterface_ListByListingId_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockConsumerFulfillmentsInterface) WithImpl(impl marketplace.ConsumerFulfillmentsService) marketplace.ConsumerFulfillmentsInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 marketplace.ConsumerFulfillmentsInterface
	if rf, ok := ret.Get(0).(func(marketplace.ConsumerFulfillmentsService) marketplace.ConsumerFulfillmentsInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(marketplace.ConsumerFulfillmentsInterface)
		}
	}

	return r0
}

// MockConsumerFulfillmentsInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockConsumerFulfillmentsInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl marketplace.ConsumerFulfillmentsService
func (_e *MockConsumerFulfillmentsInterface_Expecter) WithImpl(impl interface{}) *MockConsumerFulfillmentsInterface_WithImpl_Call {
	return &MockConsumerFulfillmentsInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockConsumerFulfillmentsInterface_WithImpl_Call) Run(run func(impl marketplace.ConsumerFulfillmentsService)) *MockConsumerFulfillmentsInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(marketplace.ConsumerFulfillmentsService))
	})
	return _c
}

func (_c *MockConsumerFulfillmentsInterface_WithImpl_Call) Return(_a0 marketplace.ConsumerFulfillmentsInterface) *MockConsumerFulfillmentsInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConsumerFulfillmentsInterface_WithImpl_Call) RunAndReturn(run func(marketplace.ConsumerFulfillmentsService) marketplace.ConsumerFulfillmentsInterface) *MockConsumerFulfillmentsInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConsumerFulfillmentsInterface creates a new instance of MockConsumerFulfillmentsInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConsumerFulfillmentsInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConsumerFulfillmentsInterface {
	mock := &MockConsumerFulfillmentsInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
