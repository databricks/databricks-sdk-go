// Code generated by mockery v2.39.1. DO NOT EDIT.

package marketplace

import (
	context "context"

	listing "github.com/databricks/databricks-sdk-go/listing"
	marketplace "github.com/databricks/databricks-sdk-go/service/marketplace"

	mock "github.com/stretchr/testify/mock"
)

// MockProviderPersonalizationRequestsInterface is an autogenerated mock type for the ProviderPersonalizationRequestsInterface type
type MockProviderPersonalizationRequestsInterface struct {
	mock.Mock
}

type MockProviderPersonalizationRequestsInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProviderPersonalizationRequestsInterface) EXPECT() *MockProviderPersonalizationRequestsInterface_Expecter {
	return &MockProviderPersonalizationRequestsInterface_Expecter{mock: &_m.Mock}
}

// Impl provides a mock function with given fields:
func (_m *MockProviderPersonalizationRequestsInterface) Impl() marketplace.ProviderPersonalizationRequestsService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 marketplace.ProviderPersonalizationRequestsService
	if rf, ok := ret.Get(0).(func() marketplace.ProviderPersonalizationRequestsService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(marketplace.ProviderPersonalizationRequestsService)
		}
	}

	return r0
}

// MockProviderPersonalizationRequestsInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockProviderPersonalizationRequestsInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockProviderPersonalizationRequestsInterface_Expecter) Impl() *MockProviderPersonalizationRequestsInterface_Impl_Call {
	return &MockProviderPersonalizationRequestsInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockProviderPersonalizationRequestsInterface_Impl_Call) Run(run func()) *MockProviderPersonalizationRequestsInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockProviderPersonalizationRequestsInterface_Impl_Call) Return(_a0 marketplace.ProviderPersonalizationRequestsService) *MockProviderPersonalizationRequestsInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProviderPersonalizationRequestsInterface_Impl_Call) RunAndReturn(run func() marketplace.ProviderPersonalizationRequestsService) *MockProviderPersonalizationRequestsInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, request
func (_m *MockProviderPersonalizationRequestsInterface) List(ctx context.Context, request marketplace.ListAllPersonalizationRequestsRequest) listing.Iterator[marketplace.PersonalizationRequest] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 listing.Iterator[marketplace.PersonalizationRequest]
	if rf, ok := ret.Get(0).(func(context.Context, marketplace.ListAllPersonalizationRequestsRequest) listing.Iterator[marketplace.PersonalizationRequest]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listing.Iterator[marketplace.PersonalizationRequest])
		}
	}

	return r0
}

// MockProviderPersonalizationRequestsInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockProviderPersonalizationRequestsInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - request marketplace.ListAllPersonalizationRequestsRequest
func (_e *MockProviderPersonalizationRequestsInterface_Expecter) List(ctx interface{}, request interface{}) *MockProviderPersonalizationRequestsInterface_List_Call {
	return &MockProviderPersonalizationRequestsInterface_List_Call{Call: _e.mock.On("List", ctx, request)}
}

func (_c *MockProviderPersonalizationRequestsInterface_List_Call) Run(run func(ctx context.Context, request marketplace.ListAllPersonalizationRequestsRequest)) *MockProviderPersonalizationRequestsInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(marketplace.ListAllPersonalizationRequestsRequest))
	})
	return _c
}

func (_c *MockProviderPersonalizationRequestsInterface_List_Call) Return(_a0 listing.Iterator[marketplace.PersonalizationRequest]) *MockProviderPersonalizationRequestsInterface_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProviderPersonalizationRequestsInterface_List_Call) RunAndReturn(run func(context.Context, marketplace.ListAllPersonalizationRequestsRequest) listing.Iterator[marketplace.PersonalizationRequest]) *MockProviderPersonalizationRequestsInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListAll provides a mock function with given fields: ctx, request
func (_m *MockProviderPersonalizationRequestsInterface) ListAll(ctx context.Context, request marketplace.ListAllPersonalizationRequestsRequest) ([]marketplace.PersonalizationRequest, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListAll")
	}

	var r0 []marketplace.PersonalizationRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, marketplace.ListAllPersonalizationRequestsRequest) ([]marketplace.PersonalizationRequest, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, marketplace.ListAllPersonalizationRequestsRequest) []marketplace.PersonalizationRequest); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]marketplace.PersonalizationRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, marketplace.ListAllPersonalizationRequestsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProviderPersonalizationRequestsInterface_ListAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAll'
type MockProviderPersonalizationRequestsInterface_ListAll_Call struct {
	*mock.Call
}

// ListAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request marketplace.ListAllPersonalizationRequestsRequest
func (_e *MockProviderPersonalizationRequestsInterface_Expecter) ListAll(ctx interface{}, request interface{}) *MockProviderPersonalizationRequestsInterface_ListAll_Call {
	return &MockProviderPersonalizationRequestsInterface_ListAll_Call{Call: _e.mock.On("ListAll", ctx, request)}
}

func (_c *MockProviderPersonalizationRequestsInterface_ListAll_Call) Run(run func(ctx context.Context, request marketplace.ListAllPersonalizationRequestsRequest)) *MockProviderPersonalizationRequestsInterface_ListAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(marketplace.ListAllPersonalizationRequestsRequest))
	})
	return _c
}

func (_c *MockProviderPersonalizationRequestsInterface_ListAll_Call) Return(_a0 []marketplace.PersonalizationRequest, _a1 error) *MockProviderPersonalizationRequestsInterface_ListAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProviderPersonalizationRequestsInterface_ListAll_Call) RunAndReturn(run func(context.Context, marketplace.ListAllPersonalizationRequestsRequest) ([]marketplace.PersonalizationRequest, error)) *MockProviderPersonalizationRequestsInterface_ListAll_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, request
func (_m *MockProviderPersonalizationRequestsInterface) Update(ctx context.Context, request marketplace.UpdatePersonalizationRequestRequest) (*marketplace.UpdatePersonalizationRequestResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *marketplace.UpdatePersonalizationRequestResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, marketplace.UpdatePersonalizationRequestRequest) (*marketplace.UpdatePersonalizationRequestResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, marketplace.UpdatePersonalizationRequestRequest) *marketplace.UpdatePersonalizationRequestResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*marketplace.UpdatePersonalizationRequestResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, marketplace.UpdatePersonalizationRequestRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProviderPersonalizationRequestsInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockProviderPersonalizationRequestsInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - request marketplace.UpdatePersonalizationRequestRequest
func (_e *MockProviderPersonalizationRequestsInterface_Expecter) Update(ctx interface{}, request interface{}) *MockProviderPersonalizationRequestsInterface_Update_Call {
	return &MockProviderPersonalizationRequestsInterface_Update_Call{Call: _e.mock.On("Update", ctx, request)}
}

func (_c *MockProviderPersonalizationRequestsInterface_Update_Call) Run(run func(ctx context.Context, request marketplace.UpdatePersonalizationRequestRequest)) *MockProviderPersonalizationRequestsInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(marketplace.UpdatePersonalizationRequestRequest))
	})
	return _c
}

func (_c *MockProviderPersonalizationRequestsInterface_Update_Call) Return(_a0 *marketplace.UpdatePersonalizationRequestResponse, _a1 error) *MockProviderPersonalizationRequestsInterface_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProviderPersonalizationRequestsInterface_Update_Call) RunAndReturn(run func(context.Context, marketplace.UpdatePersonalizationRequestRequest) (*marketplace.UpdatePersonalizationRequestResponse, error)) *MockProviderPersonalizationRequestsInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockProviderPersonalizationRequestsInterface) WithImpl(impl marketplace.ProviderPersonalizationRequestsService) marketplace.ProviderPersonalizationRequestsInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 marketplace.ProviderPersonalizationRequestsInterface
	if rf, ok := ret.Get(0).(func(marketplace.ProviderPersonalizationRequestsService) marketplace.ProviderPersonalizationRequestsInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(marketplace.ProviderPersonalizationRequestsInterface)
		}
	}

	return r0
}

// MockProviderPersonalizationRequestsInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockProviderPersonalizationRequestsInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl marketplace.ProviderPersonalizationRequestsService
func (_e *MockProviderPersonalizationRequestsInterface_Expecter) WithImpl(impl interface{}) *MockProviderPersonalizationRequestsInterface_WithImpl_Call {
	return &MockProviderPersonalizationRequestsInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockProviderPersonalizationRequestsInterface_WithImpl_Call) Run(run func(impl marketplace.ProviderPersonalizationRequestsService)) *MockProviderPersonalizationRequestsInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(marketplace.ProviderPersonalizationRequestsService))
	})
	return _c
}

func (_c *MockProviderPersonalizationRequestsInterface_WithImpl_Call) Return(_a0 marketplace.ProviderPersonalizationRequestsInterface) *MockProviderPersonalizationRequestsInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProviderPersonalizationRequestsInterface_WithImpl_Call) RunAndReturn(run func(marketplace.ProviderPersonalizationRequestsService) marketplace.ProviderPersonalizationRequestsInterface) *MockProviderPersonalizationRequestsInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProviderPersonalizationRequestsInterface creates a new instance of MockProviderPersonalizationRequestsInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProviderPersonalizationRequestsInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProviderPersonalizationRequestsInterface {
	mock := &MockProviderPersonalizationRequestsInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
