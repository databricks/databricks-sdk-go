// Code generated by mockery v2.43.0. DO NOT EDIT.

package marketplace

import (
	context "context"

	listing "github.com/databricks/databricks-sdk-go/listing"
	marketplace "github.com/databricks/databricks-sdk-go/service/marketplace"

	mock "github.com/stretchr/testify/mock"
)

// MockProviderFilesInterface is an autogenerated mock type for the ProviderFilesInterface type
type MockProviderFilesInterface struct {
	mock.Mock
}

type MockProviderFilesInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProviderFilesInterface) EXPECT() *MockProviderFilesInterface_Expecter {
	return &MockProviderFilesInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, request
func (_m *MockProviderFilesInterface) Create(ctx context.Context, request marketplace.CreateFileRequest) (*marketplace.CreateFileResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *marketplace.CreateFileResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, marketplace.CreateFileRequest) (*marketplace.CreateFileResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, marketplace.CreateFileRequest) *marketplace.CreateFileResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*marketplace.CreateFileResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, marketplace.CreateFileRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProviderFilesInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockProviderFilesInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - request marketplace.CreateFileRequest
func (_e *MockProviderFilesInterface_Expecter) Create(ctx interface{}, request interface{}) *MockProviderFilesInterface_Create_Call {
	return &MockProviderFilesInterface_Create_Call{Call: _e.mock.On("Create", ctx, request)}
}

func (_c *MockProviderFilesInterface_Create_Call) Run(run func(ctx context.Context, request marketplace.CreateFileRequest)) *MockProviderFilesInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(marketplace.CreateFileRequest))
	})
	return _c
}

func (_c *MockProviderFilesInterface_Create_Call) Return(_a0 *marketplace.CreateFileResponse, _a1 error) *MockProviderFilesInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProviderFilesInterface_Create_Call) RunAndReturn(run func(context.Context, marketplace.CreateFileRequest) (*marketplace.CreateFileResponse, error)) *MockProviderFilesInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, request
func (_m *MockProviderFilesInterface) Delete(ctx context.Context, request marketplace.DeleteFileRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, marketplace.DeleteFileRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockProviderFilesInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockProviderFilesInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - request marketplace.DeleteFileRequest
func (_e *MockProviderFilesInterface_Expecter) Delete(ctx interface{}, request interface{}) *MockProviderFilesInterface_Delete_Call {
	return &MockProviderFilesInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, request)}
}

func (_c *MockProviderFilesInterface_Delete_Call) Run(run func(ctx context.Context, request marketplace.DeleteFileRequest)) *MockProviderFilesInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(marketplace.DeleteFileRequest))
	})
	return _c
}

func (_c *MockProviderFilesInterface_Delete_Call) Return(_a0 error) *MockProviderFilesInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProviderFilesInterface_Delete_Call) RunAndReturn(run func(context.Context, marketplace.DeleteFileRequest) error) *MockProviderFilesInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByFileId provides a mock function with given fields: ctx, fileId
func (_m *MockProviderFilesInterface) DeleteByFileId(ctx context.Context, fileId string) error {
	ret := _m.Called(ctx, fileId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByFileId")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, fileId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockProviderFilesInterface_DeleteByFileId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByFileId'
type MockProviderFilesInterface_DeleteByFileId_Call struct {
	*mock.Call
}

// DeleteByFileId is a helper method to define mock.On call
//   - ctx context.Context
//   - fileId string
func (_e *MockProviderFilesInterface_Expecter) DeleteByFileId(ctx interface{}, fileId interface{}) *MockProviderFilesInterface_DeleteByFileId_Call {
	return &MockProviderFilesInterface_DeleteByFileId_Call{Call: _e.mock.On("DeleteByFileId", ctx, fileId)}
}

func (_c *MockProviderFilesInterface_DeleteByFileId_Call) Run(run func(ctx context.Context, fileId string)) *MockProviderFilesInterface_DeleteByFileId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockProviderFilesInterface_DeleteByFileId_Call) Return(_a0 error) *MockProviderFilesInterface_DeleteByFileId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProviderFilesInterface_DeleteByFileId_Call) RunAndReturn(run func(context.Context, string) error) *MockProviderFilesInterface_DeleteByFileId_Call {
	_c.Call.Return(run)
	return _c
}

// FileInfoDisplayNameToIdMap provides a mock function with given fields: ctx, request
func (_m *MockProviderFilesInterface) FileInfoDisplayNameToIdMap(ctx context.Context, request marketplace.ListFilesRequest) (map[string]string, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for FileInfoDisplayNameToIdMap")
	}

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, marketplace.ListFilesRequest) (map[string]string, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, marketplace.ListFilesRequest) map[string]string); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, marketplace.ListFilesRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProviderFilesInterface_FileInfoDisplayNameToIdMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FileInfoDisplayNameToIdMap'
type MockProviderFilesInterface_FileInfoDisplayNameToIdMap_Call struct {
	*mock.Call
}

// FileInfoDisplayNameToIdMap is a helper method to define mock.On call
//   - ctx context.Context
//   - request marketplace.ListFilesRequest
func (_e *MockProviderFilesInterface_Expecter) FileInfoDisplayNameToIdMap(ctx interface{}, request interface{}) *MockProviderFilesInterface_FileInfoDisplayNameToIdMap_Call {
	return &MockProviderFilesInterface_FileInfoDisplayNameToIdMap_Call{Call: _e.mock.On("FileInfoDisplayNameToIdMap", ctx, request)}
}

func (_c *MockProviderFilesInterface_FileInfoDisplayNameToIdMap_Call) Run(run func(ctx context.Context, request marketplace.ListFilesRequest)) *MockProviderFilesInterface_FileInfoDisplayNameToIdMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(marketplace.ListFilesRequest))
	})
	return _c
}

func (_c *MockProviderFilesInterface_FileInfoDisplayNameToIdMap_Call) Return(_a0 map[string]string, _a1 error) *MockProviderFilesInterface_FileInfoDisplayNameToIdMap_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProviderFilesInterface_FileInfoDisplayNameToIdMap_Call) RunAndReturn(run func(context.Context, marketplace.ListFilesRequest) (map[string]string, error)) *MockProviderFilesInterface_FileInfoDisplayNameToIdMap_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, request
func (_m *MockProviderFilesInterface) Get(ctx context.Context, request marketplace.GetFileRequest) (*marketplace.GetFileResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *marketplace.GetFileResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, marketplace.GetFileRequest) (*marketplace.GetFileResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, marketplace.GetFileRequest) *marketplace.GetFileResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*marketplace.GetFileResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, marketplace.GetFileRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProviderFilesInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockProviderFilesInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - request marketplace.GetFileRequest
func (_e *MockProviderFilesInterface_Expecter) Get(ctx interface{}, request interface{}) *MockProviderFilesInterface_Get_Call {
	return &MockProviderFilesInterface_Get_Call{Call: _e.mock.On("Get", ctx, request)}
}

func (_c *MockProviderFilesInterface_Get_Call) Run(run func(ctx context.Context, request marketplace.GetFileRequest)) *MockProviderFilesInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(marketplace.GetFileRequest))
	})
	return _c
}

func (_c *MockProviderFilesInterface_Get_Call) Return(_a0 *marketplace.GetFileResponse, _a1 error) *MockProviderFilesInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProviderFilesInterface_Get_Call) RunAndReturn(run func(context.Context, marketplace.GetFileRequest) (*marketplace.GetFileResponse, error)) *MockProviderFilesInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByDisplayName provides a mock function with given fields: ctx, name
func (_m *MockProviderFilesInterface) GetByDisplayName(ctx context.Context, name string) (*marketplace.FileInfo, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetByDisplayName")
	}

	var r0 *marketplace.FileInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*marketplace.FileInfo, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *marketplace.FileInfo); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*marketplace.FileInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProviderFilesInterface_GetByDisplayName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByDisplayName'
type MockProviderFilesInterface_GetByDisplayName_Call struct {
	*mock.Call
}

// GetByDisplayName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockProviderFilesInterface_Expecter) GetByDisplayName(ctx interface{}, name interface{}) *MockProviderFilesInterface_GetByDisplayName_Call {
	return &MockProviderFilesInterface_GetByDisplayName_Call{Call: _e.mock.On("GetByDisplayName", ctx, name)}
}

func (_c *MockProviderFilesInterface_GetByDisplayName_Call) Run(run func(ctx context.Context, name string)) *MockProviderFilesInterface_GetByDisplayName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockProviderFilesInterface_GetByDisplayName_Call) Return(_a0 *marketplace.FileInfo, _a1 error) *MockProviderFilesInterface_GetByDisplayName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProviderFilesInterface_GetByDisplayName_Call) RunAndReturn(run func(context.Context, string) (*marketplace.FileInfo, error)) *MockProviderFilesInterface_GetByDisplayName_Call {
	_c.Call.Return(run)
	return _c
}

// GetByFileId provides a mock function with given fields: ctx, fileId
func (_m *MockProviderFilesInterface) GetByFileId(ctx context.Context, fileId string) (*marketplace.GetFileResponse, error) {
	ret := _m.Called(ctx, fileId)

	if len(ret) == 0 {
		panic("no return value specified for GetByFileId")
	}

	var r0 *marketplace.GetFileResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*marketplace.GetFileResponse, error)); ok {
		return rf(ctx, fileId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *marketplace.GetFileResponse); ok {
		r0 = rf(ctx, fileId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*marketplace.GetFileResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, fileId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProviderFilesInterface_GetByFileId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByFileId'
type MockProviderFilesInterface_GetByFileId_Call struct {
	*mock.Call
}

// GetByFileId is a helper method to define mock.On call
//   - ctx context.Context
//   - fileId string
func (_e *MockProviderFilesInterface_Expecter) GetByFileId(ctx interface{}, fileId interface{}) *MockProviderFilesInterface_GetByFileId_Call {
	return &MockProviderFilesInterface_GetByFileId_Call{Call: _e.mock.On("GetByFileId", ctx, fileId)}
}

func (_c *MockProviderFilesInterface_GetByFileId_Call) Run(run func(ctx context.Context, fileId string)) *MockProviderFilesInterface_GetByFileId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockProviderFilesInterface_GetByFileId_Call) Return(_a0 *marketplace.GetFileResponse, _a1 error) *MockProviderFilesInterface_GetByFileId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProviderFilesInterface_GetByFileId_Call) RunAndReturn(run func(context.Context, string) (*marketplace.GetFileResponse, error)) *MockProviderFilesInterface_GetByFileId_Call {
	_c.Call.Return(run)
	return _c
}

// Impl provides a mock function with given fields:
func (_m *MockProviderFilesInterface) Impl() marketplace.ProviderFilesService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 marketplace.ProviderFilesService
	if rf, ok := ret.Get(0).(func() marketplace.ProviderFilesService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(marketplace.ProviderFilesService)
		}
	}

	return r0
}

// MockProviderFilesInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockProviderFilesInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockProviderFilesInterface_Expecter) Impl() *MockProviderFilesInterface_Impl_Call {
	return &MockProviderFilesInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockProviderFilesInterface_Impl_Call) Run(run func()) *MockProviderFilesInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockProviderFilesInterface_Impl_Call) Return(_a0 marketplace.ProviderFilesService) *MockProviderFilesInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProviderFilesInterface_Impl_Call) RunAndReturn(run func() marketplace.ProviderFilesService) *MockProviderFilesInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, request
func (_m *MockProviderFilesInterface) List(ctx context.Context, request marketplace.ListFilesRequest) listing.Iterator[marketplace.FileInfo] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 listing.Iterator[marketplace.FileInfo]
	if rf, ok := ret.Get(0).(func(context.Context, marketplace.ListFilesRequest) listing.Iterator[marketplace.FileInfo]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listing.Iterator[marketplace.FileInfo])
		}
	}

	return r0
}

// MockProviderFilesInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockProviderFilesInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - request marketplace.ListFilesRequest
func (_e *MockProviderFilesInterface_Expecter) List(ctx interface{}, request interface{}) *MockProviderFilesInterface_List_Call {
	return &MockProviderFilesInterface_List_Call{Call: _e.mock.On("List", ctx, request)}
}

func (_c *MockProviderFilesInterface_List_Call) Run(run func(ctx context.Context, request marketplace.ListFilesRequest)) *MockProviderFilesInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(marketplace.ListFilesRequest))
	})
	return _c
}

func (_c *MockProviderFilesInterface_List_Call) Return(_a0 listing.Iterator[marketplace.FileInfo]) *MockProviderFilesInterface_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProviderFilesInterface_List_Call) RunAndReturn(run func(context.Context, marketplace.ListFilesRequest) listing.Iterator[marketplace.FileInfo]) *MockProviderFilesInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListAll provides a mock function with given fields: ctx, request
func (_m *MockProviderFilesInterface) ListAll(ctx context.Context, request marketplace.ListFilesRequest) ([]marketplace.FileInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListAll")
	}

	var r0 []marketplace.FileInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, marketplace.ListFilesRequest) ([]marketplace.FileInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, marketplace.ListFilesRequest) []marketplace.FileInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]marketplace.FileInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, marketplace.ListFilesRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProviderFilesInterface_ListAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAll'
type MockProviderFilesInterface_ListAll_Call struct {
	*mock.Call
}

// ListAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request marketplace.ListFilesRequest
func (_e *MockProviderFilesInterface_Expecter) ListAll(ctx interface{}, request interface{}) *MockProviderFilesInterface_ListAll_Call {
	return &MockProviderFilesInterface_ListAll_Call{Call: _e.mock.On("ListAll", ctx, request)}
}

func (_c *MockProviderFilesInterface_ListAll_Call) Run(run func(ctx context.Context, request marketplace.ListFilesRequest)) *MockProviderFilesInterface_ListAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(marketplace.ListFilesRequest))
	})
	return _c
}

func (_c *MockProviderFilesInterface_ListAll_Call) Return(_a0 []marketplace.FileInfo, _a1 error) *MockProviderFilesInterface_ListAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProviderFilesInterface_ListAll_Call) RunAndReturn(run func(context.Context, marketplace.ListFilesRequest) ([]marketplace.FileInfo, error)) *MockProviderFilesInterface_ListAll_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockProviderFilesInterface) WithImpl(impl marketplace.ProviderFilesService) marketplace.ProviderFilesInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 marketplace.ProviderFilesInterface
	if rf, ok := ret.Get(0).(func(marketplace.ProviderFilesService) marketplace.ProviderFilesInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(marketplace.ProviderFilesInterface)
		}
	}

	return r0
}

// MockProviderFilesInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockProviderFilesInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl marketplace.ProviderFilesService
func (_e *MockProviderFilesInterface_Expecter) WithImpl(impl interface{}) *MockProviderFilesInterface_WithImpl_Call {
	return &MockProviderFilesInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockProviderFilesInterface_WithImpl_Call) Run(run func(impl marketplace.ProviderFilesService)) *MockProviderFilesInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(marketplace.ProviderFilesService))
	})
	return _c
}

func (_c *MockProviderFilesInterface_WithImpl_Call) Return(_a0 marketplace.ProviderFilesInterface) *MockProviderFilesInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProviderFilesInterface_WithImpl_Call) RunAndReturn(run func(marketplace.ProviderFilesService) marketplace.ProviderFilesInterface) *MockProviderFilesInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProviderFilesInterface creates a new instance of MockProviderFilesInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProviderFilesInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProviderFilesInterface {
	mock := &MockProviderFilesInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
