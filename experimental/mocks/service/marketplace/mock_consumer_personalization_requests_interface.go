// Code generated by mockery v2.43.0. DO NOT EDIT.

package marketplace

import (
	context "context"

	listing "github.com/databricks/databricks-sdk-go/listing"
	marketplace "github.com/databricks/databricks-sdk-go/service/marketplace"

	mock "github.com/stretchr/testify/mock"
)

// MockConsumerPersonalizationRequestsInterface is an autogenerated mock type for the ConsumerPersonalizationRequestsInterface type
type MockConsumerPersonalizationRequestsInterface struct {
	mock.Mock
}

type MockConsumerPersonalizationRequestsInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConsumerPersonalizationRequestsInterface) EXPECT() *MockConsumerPersonalizationRequestsInterface_Expecter {
	return &MockConsumerPersonalizationRequestsInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, request
func (_m *MockConsumerPersonalizationRequestsInterface) Create(ctx context.Context, request marketplace.CreatePersonalizationRequest) (*marketplace.CreatePersonalizationRequestResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *marketplace.CreatePersonalizationRequestResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, marketplace.CreatePersonalizationRequest) (*marketplace.CreatePersonalizationRequestResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, marketplace.CreatePersonalizationRequest) *marketplace.CreatePersonalizationRequestResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*marketplace.CreatePersonalizationRequestResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, marketplace.CreatePersonalizationRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConsumerPersonalizationRequestsInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockConsumerPersonalizationRequestsInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - request marketplace.CreatePersonalizationRequest
func (_e *MockConsumerPersonalizationRequestsInterface_Expecter) Create(ctx interface{}, request interface{}) *MockConsumerPersonalizationRequestsInterface_Create_Call {
	return &MockConsumerPersonalizationRequestsInterface_Create_Call{Call: _e.mock.On("Create", ctx, request)}
}

func (_c *MockConsumerPersonalizationRequestsInterface_Create_Call) Run(run func(ctx context.Context, request marketplace.CreatePersonalizationRequest)) *MockConsumerPersonalizationRequestsInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(marketplace.CreatePersonalizationRequest))
	})
	return _c
}

func (_c *MockConsumerPersonalizationRequestsInterface_Create_Call) Return(_a0 *marketplace.CreatePersonalizationRequestResponse, _a1 error) *MockConsumerPersonalizationRequestsInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConsumerPersonalizationRequestsInterface_Create_Call) RunAndReturn(run func(context.Context, marketplace.CreatePersonalizationRequest) (*marketplace.CreatePersonalizationRequestResponse, error)) *MockConsumerPersonalizationRequestsInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, request
func (_m *MockConsumerPersonalizationRequestsInterface) Get(ctx context.Context, request marketplace.GetPersonalizationRequestRequest) (*marketplace.GetPersonalizationRequestResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *marketplace.GetPersonalizationRequestResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, marketplace.GetPersonalizationRequestRequest) (*marketplace.GetPersonalizationRequestResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, marketplace.GetPersonalizationRequestRequest) *marketplace.GetPersonalizationRequestResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*marketplace.GetPersonalizationRequestResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, marketplace.GetPersonalizationRequestRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConsumerPersonalizationRequestsInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockConsumerPersonalizationRequestsInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - request marketplace.GetPersonalizationRequestRequest
func (_e *MockConsumerPersonalizationRequestsInterface_Expecter) Get(ctx interface{}, request interface{}) *MockConsumerPersonalizationRequestsInterface_Get_Call {
	return &MockConsumerPersonalizationRequestsInterface_Get_Call{Call: _e.mock.On("Get", ctx, request)}
}

func (_c *MockConsumerPersonalizationRequestsInterface_Get_Call) Run(run func(ctx context.Context, request marketplace.GetPersonalizationRequestRequest)) *MockConsumerPersonalizationRequestsInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(marketplace.GetPersonalizationRequestRequest))
	})
	return _c
}

func (_c *MockConsumerPersonalizationRequestsInterface_Get_Call) Return(_a0 *marketplace.GetPersonalizationRequestResponse, _a1 error) *MockConsumerPersonalizationRequestsInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConsumerPersonalizationRequestsInterface_Get_Call) RunAndReturn(run func(context.Context, marketplace.GetPersonalizationRequestRequest) (*marketplace.GetPersonalizationRequestResponse, error)) *MockConsumerPersonalizationRequestsInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByListingId provides a mock function with given fields: ctx, listingId
func (_m *MockConsumerPersonalizationRequestsInterface) GetByListingId(ctx context.Context, listingId string) (*marketplace.GetPersonalizationRequestResponse, error) {
	ret := _m.Called(ctx, listingId)

	if len(ret) == 0 {
		panic("no return value specified for GetByListingId")
	}

	var r0 *marketplace.GetPersonalizationRequestResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*marketplace.GetPersonalizationRequestResponse, error)); ok {
		return rf(ctx, listingId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *marketplace.GetPersonalizationRequestResponse); ok {
		r0 = rf(ctx, listingId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*marketplace.GetPersonalizationRequestResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, listingId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConsumerPersonalizationRequestsInterface_GetByListingId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByListingId'
type MockConsumerPersonalizationRequestsInterface_GetByListingId_Call struct {
	*mock.Call
}

// GetByListingId is a helper method to define mock.On call
//   - ctx context.Context
//   - listingId string
func (_e *MockConsumerPersonalizationRequestsInterface_Expecter) GetByListingId(ctx interface{}, listingId interface{}) *MockConsumerPersonalizationRequestsInterface_GetByListingId_Call {
	return &MockConsumerPersonalizationRequestsInterface_GetByListingId_Call{Call: _e.mock.On("GetByListingId", ctx, listingId)}
}

func (_c *MockConsumerPersonalizationRequestsInterface_GetByListingId_Call) Run(run func(ctx context.Context, listingId string)) *MockConsumerPersonalizationRequestsInterface_GetByListingId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockConsumerPersonalizationRequestsInterface_GetByListingId_Call) Return(_a0 *marketplace.GetPersonalizationRequestResponse, _a1 error) *MockConsumerPersonalizationRequestsInterface_GetByListingId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConsumerPersonalizationRequestsInterface_GetByListingId_Call) RunAndReturn(run func(context.Context, string) (*marketplace.GetPersonalizationRequestResponse, error)) *MockConsumerPersonalizationRequestsInterface_GetByListingId_Call {
	_c.Call.Return(run)
	return _c
}

// Impl provides a mock function with given fields:
func (_m *MockConsumerPersonalizationRequestsInterface) Impl() marketplace.ConsumerPersonalizationRequestsService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 marketplace.ConsumerPersonalizationRequestsService
	if rf, ok := ret.Get(0).(func() marketplace.ConsumerPersonalizationRequestsService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(marketplace.ConsumerPersonalizationRequestsService)
		}
	}

	return r0
}

// MockConsumerPersonalizationRequestsInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockConsumerPersonalizationRequestsInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockConsumerPersonalizationRequestsInterface_Expecter) Impl() *MockConsumerPersonalizationRequestsInterface_Impl_Call {
	return &MockConsumerPersonalizationRequestsInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockConsumerPersonalizationRequestsInterface_Impl_Call) Run(run func()) *MockConsumerPersonalizationRequestsInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConsumerPersonalizationRequestsInterface_Impl_Call) Return(_a0 marketplace.ConsumerPersonalizationRequestsService) *MockConsumerPersonalizationRequestsInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConsumerPersonalizationRequestsInterface_Impl_Call) RunAndReturn(run func() marketplace.ConsumerPersonalizationRequestsService) *MockConsumerPersonalizationRequestsInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, request
func (_m *MockConsumerPersonalizationRequestsInterface) List(ctx context.Context, request marketplace.ListAllPersonalizationRequestsRequest) listing.Iterator[marketplace.PersonalizationRequest] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 listing.Iterator[marketplace.PersonalizationRequest]
	if rf, ok := ret.Get(0).(func(context.Context, marketplace.ListAllPersonalizationRequestsRequest) listing.Iterator[marketplace.PersonalizationRequest]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listing.Iterator[marketplace.PersonalizationRequest])
		}
	}

	return r0
}

// MockConsumerPersonalizationRequestsInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockConsumerPersonalizationRequestsInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - request marketplace.ListAllPersonalizationRequestsRequest
func (_e *MockConsumerPersonalizationRequestsInterface_Expecter) List(ctx interface{}, request interface{}) *MockConsumerPersonalizationRequestsInterface_List_Call {
	return &MockConsumerPersonalizationRequestsInterface_List_Call{Call: _e.mock.On("List", ctx, request)}
}

func (_c *MockConsumerPersonalizationRequestsInterface_List_Call) Run(run func(ctx context.Context, request marketplace.ListAllPersonalizationRequestsRequest)) *MockConsumerPersonalizationRequestsInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(marketplace.ListAllPersonalizationRequestsRequest))
	})
	return _c
}

func (_c *MockConsumerPersonalizationRequestsInterface_List_Call) Return(_a0 listing.Iterator[marketplace.PersonalizationRequest]) *MockConsumerPersonalizationRequestsInterface_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConsumerPersonalizationRequestsInterface_List_Call) RunAndReturn(run func(context.Context, marketplace.ListAllPersonalizationRequestsRequest) listing.Iterator[marketplace.PersonalizationRequest]) *MockConsumerPersonalizationRequestsInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListAll provides a mock function with given fields: ctx, request
func (_m *MockConsumerPersonalizationRequestsInterface) ListAll(ctx context.Context, request marketplace.ListAllPersonalizationRequestsRequest) ([]marketplace.PersonalizationRequest, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListAll")
	}

	var r0 []marketplace.PersonalizationRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, marketplace.ListAllPersonalizationRequestsRequest) ([]marketplace.PersonalizationRequest, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, marketplace.ListAllPersonalizationRequestsRequest) []marketplace.PersonalizationRequest); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]marketplace.PersonalizationRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, marketplace.ListAllPersonalizationRequestsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConsumerPersonalizationRequestsInterface_ListAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAll'
type MockConsumerPersonalizationRequestsInterface_ListAll_Call struct {
	*mock.Call
}

// ListAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request marketplace.ListAllPersonalizationRequestsRequest
func (_e *MockConsumerPersonalizationRequestsInterface_Expecter) ListAll(ctx interface{}, request interface{}) *MockConsumerPersonalizationRequestsInterface_ListAll_Call {
	return &MockConsumerPersonalizationRequestsInterface_ListAll_Call{Call: _e.mock.On("ListAll", ctx, request)}
}

func (_c *MockConsumerPersonalizationRequestsInterface_ListAll_Call) Run(run func(ctx context.Context, request marketplace.ListAllPersonalizationRequestsRequest)) *MockConsumerPersonalizationRequestsInterface_ListAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(marketplace.ListAllPersonalizationRequestsRequest))
	})
	return _c
}

func (_c *MockConsumerPersonalizationRequestsInterface_ListAll_Call) Return(_a0 []marketplace.PersonalizationRequest, _a1 error) *MockConsumerPersonalizationRequestsInterface_ListAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConsumerPersonalizationRequestsInterface_ListAll_Call) RunAndReturn(run func(context.Context, marketplace.ListAllPersonalizationRequestsRequest) ([]marketplace.PersonalizationRequest, error)) *MockConsumerPersonalizationRequestsInterface_ListAll_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockConsumerPersonalizationRequestsInterface) WithImpl(impl marketplace.ConsumerPersonalizationRequestsService) marketplace.ConsumerPersonalizationRequestsInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 marketplace.ConsumerPersonalizationRequestsInterface
	if rf, ok := ret.Get(0).(func(marketplace.ConsumerPersonalizationRequestsService) marketplace.ConsumerPersonalizationRequestsInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(marketplace.ConsumerPersonalizationRequestsInterface)
		}
	}

	return r0
}

// MockConsumerPersonalizationRequestsInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockConsumerPersonalizationRequestsInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl marketplace.ConsumerPersonalizationRequestsService
func (_e *MockConsumerPersonalizationRequestsInterface_Expecter) WithImpl(impl interface{}) *MockConsumerPersonalizationRequestsInterface_WithImpl_Call {
	return &MockConsumerPersonalizationRequestsInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockConsumerPersonalizationRequestsInterface_WithImpl_Call) Run(run func(impl marketplace.ConsumerPersonalizationRequestsService)) *MockConsumerPersonalizationRequestsInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(marketplace.ConsumerPersonalizationRequestsService))
	})
	return _c
}

func (_c *MockConsumerPersonalizationRequestsInterface_WithImpl_Call) Return(_a0 marketplace.ConsumerPersonalizationRequestsInterface) *MockConsumerPersonalizationRequestsInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConsumerPersonalizationRequestsInterface_WithImpl_Call) RunAndReturn(run func(marketplace.ConsumerPersonalizationRequestsService) marketplace.ConsumerPersonalizationRequestsInterface) *MockConsumerPersonalizationRequestsInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConsumerPersonalizationRequestsInterface creates a new instance of MockConsumerPersonalizationRequestsInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConsumerPersonalizationRequestsInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConsumerPersonalizationRequestsInterface {
	mock := &MockConsumerPersonalizationRequestsInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
