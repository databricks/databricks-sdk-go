// Code generated by mockery v2.39.1. DO NOT EDIT.

package marketplace

import (
	context "context"

	listing "github.com/databricks/databricks-sdk-go/listing"
	marketplace "github.com/databricks/databricks-sdk-go/service/marketplace"

	mock "github.com/stretchr/testify/mock"
)

// MockConsumerInstallationsInterface is an autogenerated mock type for the ConsumerInstallationsInterface type
type MockConsumerInstallationsInterface struct {
	mock.Mock
}

type MockConsumerInstallationsInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConsumerInstallationsInterface) EXPECT() *MockConsumerInstallationsInterface_Expecter {
	return &MockConsumerInstallationsInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, request
func (_m *MockConsumerInstallationsInterface) Create(ctx context.Context, request marketplace.CreateInstallationRequest) (*marketplace.Installation, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *marketplace.Installation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, marketplace.CreateInstallationRequest) (*marketplace.Installation, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, marketplace.CreateInstallationRequest) *marketplace.Installation); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*marketplace.Installation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, marketplace.CreateInstallationRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConsumerInstallationsInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockConsumerInstallationsInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - request marketplace.CreateInstallationRequest
func (_e *MockConsumerInstallationsInterface_Expecter) Create(ctx interface{}, request interface{}) *MockConsumerInstallationsInterface_Create_Call {
	return &MockConsumerInstallationsInterface_Create_Call{Call: _e.mock.On("Create", ctx, request)}
}

func (_c *MockConsumerInstallationsInterface_Create_Call) Run(run func(ctx context.Context, request marketplace.CreateInstallationRequest)) *MockConsumerInstallationsInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(marketplace.CreateInstallationRequest))
	})
	return _c
}

func (_c *MockConsumerInstallationsInterface_Create_Call) Return(_a0 *marketplace.Installation, _a1 error) *MockConsumerInstallationsInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConsumerInstallationsInterface_Create_Call) RunAndReturn(run func(context.Context, marketplace.CreateInstallationRequest) (*marketplace.Installation, error)) *MockConsumerInstallationsInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, request
func (_m *MockConsumerInstallationsInterface) Delete(ctx context.Context, request marketplace.DeleteInstallationRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, marketplace.DeleteInstallationRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConsumerInstallationsInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockConsumerInstallationsInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - request marketplace.DeleteInstallationRequest
func (_e *MockConsumerInstallationsInterface_Expecter) Delete(ctx interface{}, request interface{}) *MockConsumerInstallationsInterface_Delete_Call {
	return &MockConsumerInstallationsInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, request)}
}

func (_c *MockConsumerInstallationsInterface_Delete_Call) Run(run func(ctx context.Context, request marketplace.DeleteInstallationRequest)) *MockConsumerInstallationsInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(marketplace.DeleteInstallationRequest))
	})
	return _c
}

func (_c *MockConsumerInstallationsInterface_Delete_Call) Return(_a0 error) *MockConsumerInstallationsInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConsumerInstallationsInterface_Delete_Call) RunAndReturn(run func(context.Context, marketplace.DeleteInstallationRequest) error) *MockConsumerInstallationsInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByListingIdAndInstallationId provides a mock function with given fields: ctx, listingId, installationId
func (_m *MockConsumerInstallationsInterface) DeleteByListingIdAndInstallationId(ctx context.Context, listingId string, installationId string) error {
	ret := _m.Called(ctx, listingId, installationId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByListingIdAndInstallationId")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, listingId, installationId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConsumerInstallationsInterface_DeleteByListingIdAndInstallationId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByListingIdAndInstallationId'
type MockConsumerInstallationsInterface_DeleteByListingIdAndInstallationId_Call struct {
	*mock.Call
}

// DeleteByListingIdAndInstallationId is a helper method to define mock.On call
//   - ctx context.Context
//   - listingId string
//   - installationId string
func (_e *MockConsumerInstallationsInterface_Expecter) DeleteByListingIdAndInstallationId(ctx interface{}, listingId interface{}, installationId interface{}) *MockConsumerInstallationsInterface_DeleteByListingIdAndInstallationId_Call {
	return &MockConsumerInstallationsInterface_DeleteByListingIdAndInstallationId_Call{Call: _e.mock.On("DeleteByListingIdAndInstallationId", ctx, listingId, installationId)}
}

func (_c *MockConsumerInstallationsInterface_DeleteByListingIdAndInstallationId_Call) Run(run func(ctx context.Context, listingId string, installationId string)) *MockConsumerInstallationsInterface_DeleteByListingIdAndInstallationId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockConsumerInstallationsInterface_DeleteByListingIdAndInstallationId_Call) Return(_a0 error) *MockConsumerInstallationsInterface_DeleteByListingIdAndInstallationId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConsumerInstallationsInterface_DeleteByListingIdAndInstallationId_Call) RunAndReturn(run func(context.Context, string, string) error) *MockConsumerInstallationsInterface_DeleteByListingIdAndInstallationId_Call {
	_c.Call.Return(run)
	return _c
}

// Impl provides a mock function with given fields:
func (_m *MockConsumerInstallationsInterface) Impl() marketplace.ConsumerInstallationsService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 marketplace.ConsumerInstallationsService
	if rf, ok := ret.Get(0).(func() marketplace.ConsumerInstallationsService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(marketplace.ConsumerInstallationsService)
		}
	}

	return r0
}

// MockConsumerInstallationsInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockConsumerInstallationsInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockConsumerInstallationsInterface_Expecter) Impl() *MockConsumerInstallationsInterface_Impl_Call {
	return &MockConsumerInstallationsInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockConsumerInstallationsInterface_Impl_Call) Run(run func()) *MockConsumerInstallationsInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConsumerInstallationsInterface_Impl_Call) Return(_a0 marketplace.ConsumerInstallationsService) *MockConsumerInstallationsInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConsumerInstallationsInterface_Impl_Call) RunAndReturn(run func() marketplace.ConsumerInstallationsService) *MockConsumerInstallationsInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, request
func (_m *MockConsumerInstallationsInterface) List(ctx context.Context, request marketplace.ListAllInstallationsRequest) listing.Iterator[marketplace.InstallationDetail] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 listing.Iterator[marketplace.InstallationDetail]
	if rf, ok := ret.Get(0).(func(context.Context, marketplace.ListAllInstallationsRequest) listing.Iterator[marketplace.InstallationDetail]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listing.Iterator[marketplace.InstallationDetail])
		}
	}

	return r0
}

// MockConsumerInstallationsInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockConsumerInstallationsInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - request marketplace.ListAllInstallationsRequest
func (_e *MockConsumerInstallationsInterface_Expecter) List(ctx interface{}, request interface{}) *MockConsumerInstallationsInterface_List_Call {
	return &MockConsumerInstallationsInterface_List_Call{Call: _e.mock.On("List", ctx, request)}
}

func (_c *MockConsumerInstallationsInterface_List_Call) Run(run func(ctx context.Context, request marketplace.ListAllInstallationsRequest)) *MockConsumerInstallationsInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(marketplace.ListAllInstallationsRequest))
	})
	return _c
}

func (_c *MockConsumerInstallationsInterface_List_Call) Return(_a0 listing.Iterator[marketplace.InstallationDetail]) *MockConsumerInstallationsInterface_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConsumerInstallationsInterface_List_Call) RunAndReturn(run func(context.Context, marketplace.ListAllInstallationsRequest) listing.Iterator[marketplace.InstallationDetail]) *MockConsumerInstallationsInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListAll provides a mock function with given fields: ctx, request
func (_m *MockConsumerInstallationsInterface) ListAll(ctx context.Context, request marketplace.ListAllInstallationsRequest) ([]marketplace.InstallationDetail, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListAll")
	}

	var r0 []marketplace.InstallationDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, marketplace.ListAllInstallationsRequest) ([]marketplace.InstallationDetail, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, marketplace.ListAllInstallationsRequest) []marketplace.InstallationDetail); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]marketplace.InstallationDetail)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, marketplace.ListAllInstallationsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConsumerInstallationsInterface_ListAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAll'
type MockConsumerInstallationsInterface_ListAll_Call struct {
	*mock.Call
}

// ListAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request marketplace.ListAllInstallationsRequest
func (_e *MockConsumerInstallationsInterface_Expecter) ListAll(ctx interface{}, request interface{}) *MockConsumerInstallationsInterface_ListAll_Call {
	return &MockConsumerInstallationsInterface_ListAll_Call{Call: _e.mock.On("ListAll", ctx, request)}
}

func (_c *MockConsumerInstallationsInterface_ListAll_Call) Run(run func(ctx context.Context, request marketplace.ListAllInstallationsRequest)) *MockConsumerInstallationsInterface_ListAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(marketplace.ListAllInstallationsRequest))
	})
	return _c
}

func (_c *MockConsumerInstallationsInterface_ListAll_Call) Return(_a0 []marketplace.InstallationDetail, _a1 error) *MockConsumerInstallationsInterface_ListAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConsumerInstallationsInterface_ListAll_Call) RunAndReturn(run func(context.Context, marketplace.ListAllInstallationsRequest) ([]marketplace.InstallationDetail, error)) *MockConsumerInstallationsInterface_ListAll_Call {
	_c.Call.Return(run)
	return _c
}

// ListListingInstallations provides a mock function with given fields: ctx, request
func (_m *MockConsumerInstallationsInterface) ListListingInstallations(ctx context.Context, request marketplace.ListInstallationsRequest) listing.Iterator[marketplace.InstallationDetail] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListListingInstallations")
	}

	var r0 listing.Iterator[marketplace.InstallationDetail]
	if rf, ok := ret.Get(0).(func(context.Context, marketplace.ListInstallationsRequest) listing.Iterator[marketplace.InstallationDetail]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listing.Iterator[marketplace.InstallationDetail])
		}
	}

	return r0
}

// MockConsumerInstallationsInterface_ListListingInstallations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListListingInstallations'
type MockConsumerInstallationsInterface_ListListingInstallations_Call struct {
	*mock.Call
}

// ListListingInstallations is a helper method to define mock.On call
//   - ctx context.Context
//   - request marketplace.ListInstallationsRequest
func (_e *MockConsumerInstallationsInterface_Expecter) ListListingInstallations(ctx interface{}, request interface{}) *MockConsumerInstallationsInterface_ListListingInstallations_Call {
	return &MockConsumerInstallationsInterface_ListListingInstallations_Call{Call: _e.mock.On("ListListingInstallations", ctx, request)}
}

func (_c *MockConsumerInstallationsInterface_ListListingInstallations_Call) Run(run func(ctx context.Context, request marketplace.ListInstallationsRequest)) *MockConsumerInstallationsInterface_ListListingInstallations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(marketplace.ListInstallationsRequest))
	})
	return _c
}

func (_c *MockConsumerInstallationsInterface_ListListingInstallations_Call) Return(_a0 listing.Iterator[marketplace.InstallationDetail]) *MockConsumerInstallationsInterface_ListListingInstallations_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConsumerInstallationsInterface_ListListingInstallations_Call) RunAndReturn(run func(context.Context, marketplace.ListInstallationsRequest) listing.Iterator[marketplace.InstallationDetail]) *MockConsumerInstallationsInterface_ListListingInstallations_Call {
	_c.Call.Return(run)
	return _c
}

// ListListingInstallationsAll provides a mock function with given fields: ctx, request
func (_m *MockConsumerInstallationsInterface) ListListingInstallationsAll(ctx context.Context, request marketplace.ListInstallationsRequest) ([]marketplace.InstallationDetail, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListListingInstallationsAll")
	}

	var r0 []marketplace.InstallationDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, marketplace.ListInstallationsRequest) ([]marketplace.InstallationDetail, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, marketplace.ListInstallationsRequest) []marketplace.InstallationDetail); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]marketplace.InstallationDetail)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, marketplace.ListInstallationsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConsumerInstallationsInterface_ListListingInstallationsAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListListingInstallationsAll'
type MockConsumerInstallationsInterface_ListListingInstallationsAll_Call struct {
	*mock.Call
}

// ListListingInstallationsAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request marketplace.ListInstallationsRequest
func (_e *MockConsumerInstallationsInterface_Expecter) ListListingInstallationsAll(ctx interface{}, request interface{}) *MockConsumerInstallationsInterface_ListListingInstallationsAll_Call {
	return &MockConsumerInstallationsInterface_ListListingInstallationsAll_Call{Call: _e.mock.On("ListListingInstallationsAll", ctx, request)}
}

func (_c *MockConsumerInstallationsInterface_ListListingInstallationsAll_Call) Run(run func(ctx context.Context, request marketplace.ListInstallationsRequest)) *MockConsumerInstallationsInterface_ListListingInstallationsAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(marketplace.ListInstallationsRequest))
	})
	return _c
}

func (_c *MockConsumerInstallationsInterface_ListListingInstallationsAll_Call) Return(_a0 []marketplace.InstallationDetail, _a1 error) *MockConsumerInstallationsInterface_ListListingInstallationsAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConsumerInstallationsInterface_ListListingInstallationsAll_Call) RunAndReturn(run func(context.Context, marketplace.ListInstallationsRequest) ([]marketplace.InstallationDetail, error)) *MockConsumerInstallationsInterface_ListListingInstallationsAll_Call {
	_c.Call.Return(run)
	return _c
}

// ListListingInstallationsByListingId provides a mock function with given fields: ctx, listingId
func (_m *MockConsumerInstallationsInterface) ListListingInstallationsByListingId(ctx context.Context, listingId string) (*marketplace.ListInstallationsResponse, error) {
	ret := _m.Called(ctx, listingId)

	if len(ret) == 0 {
		panic("no return value specified for ListListingInstallationsByListingId")
	}

	var r0 *marketplace.ListInstallationsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*marketplace.ListInstallationsResponse, error)); ok {
		return rf(ctx, listingId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *marketplace.ListInstallationsResponse); ok {
		r0 = rf(ctx, listingId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*marketplace.ListInstallationsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, listingId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConsumerInstallationsInterface_ListListingInstallationsByListingId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListListingInstallationsByListingId'
type MockConsumerInstallationsInterface_ListListingInstallationsByListingId_Call struct {
	*mock.Call
}

// ListListingInstallationsByListingId is a helper method to define mock.On call
//   - ctx context.Context
//   - listingId string
func (_e *MockConsumerInstallationsInterface_Expecter) ListListingInstallationsByListingId(ctx interface{}, listingId interface{}) *MockConsumerInstallationsInterface_ListListingInstallationsByListingId_Call {
	return &MockConsumerInstallationsInterface_ListListingInstallationsByListingId_Call{Call: _e.mock.On("ListListingInstallationsByListingId", ctx, listingId)}
}

func (_c *MockConsumerInstallationsInterface_ListListingInstallationsByListingId_Call) Run(run func(ctx context.Context, listingId string)) *MockConsumerInstallationsInterface_ListListingInstallationsByListingId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockConsumerInstallationsInterface_ListListingInstallationsByListingId_Call) Return(_a0 *marketplace.ListInstallationsResponse, _a1 error) *MockConsumerInstallationsInterface_ListListingInstallationsByListingId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConsumerInstallationsInterface_ListListingInstallationsByListingId_Call) RunAndReturn(run func(context.Context, string) (*marketplace.ListInstallationsResponse, error)) *MockConsumerInstallationsInterface_ListListingInstallationsByListingId_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, request
func (_m *MockConsumerInstallationsInterface) Update(ctx context.Context, request marketplace.UpdateInstallationRequest) (*marketplace.UpdateInstallationResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *marketplace.UpdateInstallationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, marketplace.UpdateInstallationRequest) (*marketplace.UpdateInstallationResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, marketplace.UpdateInstallationRequest) *marketplace.UpdateInstallationResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*marketplace.UpdateInstallationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, marketplace.UpdateInstallationRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConsumerInstallationsInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockConsumerInstallationsInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - request marketplace.UpdateInstallationRequest
func (_e *MockConsumerInstallationsInterface_Expecter) Update(ctx interface{}, request interface{}) *MockConsumerInstallationsInterface_Update_Call {
	return &MockConsumerInstallationsInterface_Update_Call{Call: _e.mock.On("Update", ctx, request)}
}

func (_c *MockConsumerInstallationsInterface_Update_Call) Run(run func(ctx context.Context, request marketplace.UpdateInstallationRequest)) *MockConsumerInstallationsInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(marketplace.UpdateInstallationRequest))
	})
	return _c
}

func (_c *MockConsumerInstallationsInterface_Update_Call) Return(_a0 *marketplace.UpdateInstallationResponse, _a1 error) *MockConsumerInstallationsInterface_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConsumerInstallationsInterface_Update_Call) RunAndReturn(run func(context.Context, marketplace.UpdateInstallationRequest) (*marketplace.UpdateInstallationResponse, error)) *MockConsumerInstallationsInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockConsumerInstallationsInterface) WithImpl(impl marketplace.ConsumerInstallationsService) marketplace.ConsumerInstallationsInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 marketplace.ConsumerInstallationsInterface
	if rf, ok := ret.Get(0).(func(marketplace.ConsumerInstallationsService) marketplace.ConsumerInstallationsInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(marketplace.ConsumerInstallationsInterface)
		}
	}

	return r0
}

// MockConsumerInstallationsInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockConsumerInstallationsInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl marketplace.ConsumerInstallationsService
func (_e *MockConsumerInstallationsInterface_Expecter) WithImpl(impl interface{}) *MockConsumerInstallationsInterface_WithImpl_Call {
	return &MockConsumerInstallationsInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockConsumerInstallationsInterface_WithImpl_Call) Run(run func(impl marketplace.ConsumerInstallationsService)) *MockConsumerInstallationsInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(marketplace.ConsumerInstallationsService))
	})
	return _c
}

func (_c *MockConsumerInstallationsInterface_WithImpl_Call) Return(_a0 marketplace.ConsumerInstallationsInterface) *MockConsumerInstallationsInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConsumerInstallationsInterface_WithImpl_Call) RunAndReturn(run func(marketplace.ConsumerInstallationsService) marketplace.ConsumerInstallationsInterface) *MockConsumerInstallationsInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConsumerInstallationsInterface creates a new instance of MockConsumerInstallationsInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConsumerInstallationsInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConsumerInstallationsInterface {
	mock := &MockConsumerInstallationsInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
