// Code generated by mockery v2.39.1. DO NOT EDIT.

package marketplace

import (
	context "context"

	listing "github.com/databricks/databricks-sdk-go/listing"
	marketplace "github.com/databricks/databricks-sdk-go/service/marketplace"

	mock "github.com/stretchr/testify/mock"
)

// MockProviderExchangesInterface is an autogenerated mock type for the ProviderExchangesInterface type
type MockProviderExchangesInterface struct {
	mock.Mock
}

type MockProviderExchangesInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProviderExchangesInterface) EXPECT() *MockProviderExchangesInterface_Expecter {
	return &MockProviderExchangesInterface_Expecter{mock: &_m.Mock}
}

// AddListingToExchange provides a mock function with given fields: ctx, request
func (_m *MockProviderExchangesInterface) AddListingToExchange(ctx context.Context, request marketplace.AddExchangeForListingRequest) (*marketplace.AddExchangeForListingResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for AddListingToExchange")
	}

	var r0 *marketplace.AddExchangeForListingResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, marketplace.AddExchangeForListingRequest) (*marketplace.AddExchangeForListingResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, marketplace.AddExchangeForListingRequest) *marketplace.AddExchangeForListingResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*marketplace.AddExchangeForListingResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, marketplace.AddExchangeForListingRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProviderExchangesInterface_AddListingToExchange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddListingToExchange'
type MockProviderExchangesInterface_AddListingToExchange_Call struct {
	*mock.Call
}

// AddListingToExchange is a helper method to define mock.On call
//   - ctx context.Context
//   - request marketplace.AddExchangeForListingRequest
func (_e *MockProviderExchangesInterface_Expecter) AddListingToExchange(ctx interface{}, request interface{}) *MockProviderExchangesInterface_AddListingToExchange_Call {
	return &MockProviderExchangesInterface_AddListingToExchange_Call{Call: _e.mock.On("AddListingToExchange", ctx, request)}
}

func (_c *MockProviderExchangesInterface_AddListingToExchange_Call) Run(run func(ctx context.Context, request marketplace.AddExchangeForListingRequest)) *MockProviderExchangesInterface_AddListingToExchange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(marketplace.AddExchangeForListingRequest))
	})
	return _c
}

func (_c *MockProviderExchangesInterface_AddListingToExchange_Call) Return(_a0 *marketplace.AddExchangeForListingResponse, _a1 error) *MockProviderExchangesInterface_AddListingToExchange_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProviderExchangesInterface_AddListingToExchange_Call) RunAndReturn(run func(context.Context, marketplace.AddExchangeForListingRequest) (*marketplace.AddExchangeForListingResponse, error)) *MockProviderExchangesInterface_AddListingToExchange_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, request
func (_m *MockProviderExchangesInterface) Create(ctx context.Context, request marketplace.CreateExchangeRequest) (*marketplace.CreateExchangeResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *marketplace.CreateExchangeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, marketplace.CreateExchangeRequest) (*marketplace.CreateExchangeResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, marketplace.CreateExchangeRequest) *marketplace.CreateExchangeResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*marketplace.CreateExchangeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, marketplace.CreateExchangeRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProviderExchangesInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockProviderExchangesInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - request marketplace.CreateExchangeRequest
func (_e *MockProviderExchangesInterface_Expecter) Create(ctx interface{}, request interface{}) *MockProviderExchangesInterface_Create_Call {
	return &MockProviderExchangesInterface_Create_Call{Call: _e.mock.On("Create", ctx, request)}
}

func (_c *MockProviderExchangesInterface_Create_Call) Run(run func(ctx context.Context, request marketplace.CreateExchangeRequest)) *MockProviderExchangesInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(marketplace.CreateExchangeRequest))
	})
	return _c
}

func (_c *MockProviderExchangesInterface_Create_Call) Return(_a0 *marketplace.CreateExchangeResponse, _a1 error) *MockProviderExchangesInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProviderExchangesInterface_Create_Call) RunAndReturn(run func(context.Context, marketplace.CreateExchangeRequest) (*marketplace.CreateExchangeResponse, error)) *MockProviderExchangesInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, request
func (_m *MockProviderExchangesInterface) Delete(ctx context.Context, request marketplace.DeleteExchangeRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, marketplace.DeleteExchangeRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockProviderExchangesInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockProviderExchangesInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - request marketplace.DeleteExchangeRequest
func (_e *MockProviderExchangesInterface_Expecter) Delete(ctx interface{}, request interface{}) *MockProviderExchangesInterface_Delete_Call {
	return &MockProviderExchangesInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, request)}
}

func (_c *MockProviderExchangesInterface_Delete_Call) Run(run func(ctx context.Context, request marketplace.DeleteExchangeRequest)) *MockProviderExchangesInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(marketplace.DeleteExchangeRequest))
	})
	return _c
}

func (_c *MockProviderExchangesInterface_Delete_Call) Return(_a0 error) *MockProviderExchangesInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProviderExchangesInterface_Delete_Call) RunAndReturn(run func(context.Context, marketplace.DeleteExchangeRequest) error) *MockProviderExchangesInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteById provides a mock function with given fields: ctx, id
func (_m *MockProviderExchangesInterface) DeleteById(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockProviderExchangesInterface_DeleteById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteById'
type MockProviderExchangesInterface_DeleteById_Call struct {
	*mock.Call
}

// DeleteById is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockProviderExchangesInterface_Expecter) DeleteById(ctx interface{}, id interface{}) *MockProviderExchangesInterface_DeleteById_Call {
	return &MockProviderExchangesInterface_DeleteById_Call{Call: _e.mock.On("DeleteById", ctx, id)}
}

func (_c *MockProviderExchangesInterface_DeleteById_Call) Run(run func(ctx context.Context, id string)) *MockProviderExchangesInterface_DeleteById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockProviderExchangesInterface_DeleteById_Call) Return(_a0 error) *MockProviderExchangesInterface_DeleteById_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProviderExchangesInterface_DeleteById_Call) RunAndReturn(run func(context.Context, string) error) *MockProviderExchangesInterface_DeleteById_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteListingFromExchange provides a mock function with given fields: ctx, request
func (_m *MockProviderExchangesInterface) DeleteListingFromExchange(ctx context.Context, request marketplace.RemoveExchangeForListingRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for DeleteListingFromExchange")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, marketplace.RemoveExchangeForListingRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockProviderExchangesInterface_DeleteListingFromExchange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteListingFromExchange'
type MockProviderExchangesInterface_DeleteListingFromExchange_Call struct {
	*mock.Call
}

// DeleteListingFromExchange is a helper method to define mock.On call
//   - ctx context.Context
//   - request marketplace.RemoveExchangeForListingRequest
func (_e *MockProviderExchangesInterface_Expecter) DeleteListingFromExchange(ctx interface{}, request interface{}) *MockProviderExchangesInterface_DeleteListingFromExchange_Call {
	return &MockProviderExchangesInterface_DeleteListingFromExchange_Call{Call: _e.mock.On("DeleteListingFromExchange", ctx, request)}
}

func (_c *MockProviderExchangesInterface_DeleteListingFromExchange_Call) Run(run func(ctx context.Context, request marketplace.RemoveExchangeForListingRequest)) *MockProviderExchangesInterface_DeleteListingFromExchange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(marketplace.RemoveExchangeForListingRequest))
	})
	return _c
}

func (_c *MockProviderExchangesInterface_DeleteListingFromExchange_Call) Return(_a0 error) *MockProviderExchangesInterface_DeleteListingFromExchange_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProviderExchangesInterface_DeleteListingFromExchange_Call) RunAndReturn(run func(context.Context, marketplace.RemoveExchangeForListingRequest) error) *MockProviderExchangesInterface_DeleteListingFromExchange_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteListingFromExchangeById provides a mock function with given fields: ctx, id
func (_m *MockProviderExchangesInterface) DeleteListingFromExchangeById(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteListingFromExchangeById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockProviderExchangesInterface_DeleteListingFromExchangeById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteListingFromExchangeById'
type MockProviderExchangesInterface_DeleteListingFromExchangeById_Call struct {
	*mock.Call
}

// DeleteListingFromExchangeById is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockProviderExchangesInterface_Expecter) DeleteListingFromExchangeById(ctx interface{}, id interface{}) *MockProviderExchangesInterface_DeleteListingFromExchangeById_Call {
	return &MockProviderExchangesInterface_DeleteListingFromExchangeById_Call{Call: _e.mock.On("DeleteListingFromExchangeById", ctx, id)}
}

func (_c *MockProviderExchangesInterface_DeleteListingFromExchangeById_Call) Run(run func(ctx context.Context, id string)) *MockProviderExchangesInterface_DeleteListingFromExchangeById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockProviderExchangesInterface_DeleteListingFromExchangeById_Call) Return(_a0 error) *MockProviderExchangesInterface_DeleteListingFromExchangeById_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProviderExchangesInterface_DeleteListingFromExchangeById_Call) RunAndReturn(run func(context.Context, string) error) *MockProviderExchangesInterface_DeleteListingFromExchangeById_Call {
	_c.Call.Return(run)
	return _c
}

// ExchangeListingExchangeNameToExchangeIdMap provides a mock function with given fields: ctx, request
func (_m *MockProviderExchangesInterface) ExchangeListingExchangeNameToExchangeIdMap(ctx context.Context, request marketplace.ListExchangesForListingRequest) (map[string]string, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ExchangeListingExchangeNameToExchangeIdMap")
	}

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, marketplace.ListExchangesForListingRequest) (map[string]string, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, marketplace.ListExchangesForListingRequest) map[string]string); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, marketplace.ListExchangesForListingRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProviderExchangesInterface_ExchangeListingExchangeNameToExchangeIdMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExchangeListingExchangeNameToExchangeIdMap'
type MockProviderExchangesInterface_ExchangeListingExchangeNameToExchangeIdMap_Call struct {
	*mock.Call
}

// ExchangeListingExchangeNameToExchangeIdMap is a helper method to define mock.On call
//   - ctx context.Context
//   - request marketplace.ListExchangesForListingRequest
func (_e *MockProviderExchangesInterface_Expecter) ExchangeListingExchangeNameToExchangeIdMap(ctx interface{}, request interface{}) *MockProviderExchangesInterface_ExchangeListingExchangeNameToExchangeIdMap_Call {
	return &MockProviderExchangesInterface_ExchangeListingExchangeNameToExchangeIdMap_Call{Call: _e.mock.On("ExchangeListingExchangeNameToExchangeIdMap", ctx, request)}
}

func (_c *MockProviderExchangesInterface_ExchangeListingExchangeNameToExchangeIdMap_Call) Run(run func(ctx context.Context, request marketplace.ListExchangesForListingRequest)) *MockProviderExchangesInterface_ExchangeListingExchangeNameToExchangeIdMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(marketplace.ListExchangesForListingRequest))
	})
	return _c
}

func (_c *MockProviderExchangesInterface_ExchangeListingExchangeNameToExchangeIdMap_Call) Return(_a0 map[string]string, _a1 error) *MockProviderExchangesInterface_ExchangeListingExchangeNameToExchangeIdMap_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProviderExchangesInterface_ExchangeListingExchangeNameToExchangeIdMap_Call) RunAndReturn(run func(context.Context, marketplace.ListExchangesForListingRequest) (map[string]string, error)) *MockProviderExchangesInterface_ExchangeListingExchangeNameToExchangeIdMap_Call {
	_c.Call.Return(run)
	return _c
}

// ExchangeListingListingNameToListingIdMap provides a mock function with given fields: ctx, request
func (_m *MockProviderExchangesInterface) ExchangeListingListingNameToListingIdMap(ctx context.Context, request marketplace.ListListingsForExchangeRequest) (map[string]string, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ExchangeListingListingNameToListingIdMap")
	}

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, marketplace.ListListingsForExchangeRequest) (map[string]string, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, marketplace.ListListingsForExchangeRequest) map[string]string); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, marketplace.ListListingsForExchangeRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProviderExchangesInterface_ExchangeListingListingNameToListingIdMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExchangeListingListingNameToListingIdMap'
type MockProviderExchangesInterface_ExchangeListingListingNameToListingIdMap_Call struct {
	*mock.Call
}

// ExchangeListingListingNameToListingIdMap is a helper method to define mock.On call
//   - ctx context.Context
//   - request marketplace.ListListingsForExchangeRequest
func (_e *MockProviderExchangesInterface_Expecter) ExchangeListingListingNameToListingIdMap(ctx interface{}, request interface{}) *MockProviderExchangesInterface_ExchangeListingListingNameToListingIdMap_Call {
	return &MockProviderExchangesInterface_ExchangeListingListingNameToListingIdMap_Call{Call: _e.mock.On("ExchangeListingListingNameToListingIdMap", ctx, request)}
}

func (_c *MockProviderExchangesInterface_ExchangeListingListingNameToListingIdMap_Call) Run(run func(ctx context.Context, request marketplace.ListListingsForExchangeRequest)) *MockProviderExchangesInterface_ExchangeListingListingNameToListingIdMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(marketplace.ListListingsForExchangeRequest))
	})
	return _c
}

func (_c *MockProviderExchangesInterface_ExchangeListingListingNameToListingIdMap_Call) Return(_a0 map[string]string, _a1 error) *MockProviderExchangesInterface_ExchangeListingListingNameToListingIdMap_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProviderExchangesInterface_ExchangeListingListingNameToListingIdMap_Call) RunAndReturn(run func(context.Context, marketplace.ListListingsForExchangeRequest) (map[string]string, error)) *MockProviderExchangesInterface_ExchangeListingListingNameToListingIdMap_Call {
	_c.Call.Return(run)
	return _c
}

// ExchangeNameToIdMap provides a mock function with given fields: ctx, request
func (_m *MockProviderExchangesInterface) ExchangeNameToIdMap(ctx context.Context, request marketplace.ListExchangesRequest) (map[string]string, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ExchangeNameToIdMap")
	}

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, marketplace.ListExchangesRequest) (map[string]string, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, marketplace.ListExchangesRequest) map[string]string); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, marketplace.ListExchangesRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProviderExchangesInterface_ExchangeNameToIdMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExchangeNameToIdMap'
type MockProviderExchangesInterface_ExchangeNameToIdMap_Call struct {
	*mock.Call
}

// ExchangeNameToIdMap is a helper method to define mock.On call
//   - ctx context.Context
//   - request marketplace.ListExchangesRequest
func (_e *MockProviderExchangesInterface_Expecter) ExchangeNameToIdMap(ctx interface{}, request interface{}) *MockProviderExchangesInterface_ExchangeNameToIdMap_Call {
	return &MockProviderExchangesInterface_ExchangeNameToIdMap_Call{Call: _e.mock.On("ExchangeNameToIdMap", ctx, request)}
}

func (_c *MockProviderExchangesInterface_ExchangeNameToIdMap_Call) Run(run func(ctx context.Context, request marketplace.ListExchangesRequest)) *MockProviderExchangesInterface_ExchangeNameToIdMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(marketplace.ListExchangesRequest))
	})
	return _c
}

func (_c *MockProviderExchangesInterface_ExchangeNameToIdMap_Call) Return(_a0 map[string]string, _a1 error) *MockProviderExchangesInterface_ExchangeNameToIdMap_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProviderExchangesInterface_ExchangeNameToIdMap_Call) RunAndReturn(run func(context.Context, marketplace.ListExchangesRequest) (map[string]string, error)) *MockProviderExchangesInterface_ExchangeNameToIdMap_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, request
func (_m *MockProviderExchangesInterface) Get(ctx context.Context, request marketplace.GetExchangeRequest) (*marketplace.GetExchangeResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *marketplace.GetExchangeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, marketplace.GetExchangeRequest) (*marketplace.GetExchangeResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, marketplace.GetExchangeRequest) *marketplace.GetExchangeResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*marketplace.GetExchangeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, marketplace.GetExchangeRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProviderExchangesInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockProviderExchangesInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - request marketplace.GetExchangeRequest
func (_e *MockProviderExchangesInterface_Expecter) Get(ctx interface{}, request interface{}) *MockProviderExchangesInterface_Get_Call {
	return &MockProviderExchangesInterface_Get_Call{Call: _e.mock.On("Get", ctx, request)}
}

func (_c *MockProviderExchangesInterface_Get_Call) Run(run func(ctx context.Context, request marketplace.GetExchangeRequest)) *MockProviderExchangesInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(marketplace.GetExchangeRequest))
	})
	return _c
}

func (_c *MockProviderExchangesInterface_Get_Call) Return(_a0 *marketplace.GetExchangeResponse, _a1 error) *MockProviderExchangesInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProviderExchangesInterface_Get_Call) RunAndReturn(run func(context.Context, marketplace.GetExchangeRequest) (*marketplace.GetExchangeResponse, error)) *MockProviderExchangesInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByExchangeName provides a mock function with given fields: ctx, name
func (_m *MockProviderExchangesInterface) GetByExchangeName(ctx context.Context, name string) (*marketplace.ExchangeListing, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetByExchangeName")
	}

	var r0 *marketplace.ExchangeListing
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*marketplace.ExchangeListing, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *marketplace.ExchangeListing); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*marketplace.ExchangeListing)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProviderExchangesInterface_GetByExchangeName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByExchangeName'
type MockProviderExchangesInterface_GetByExchangeName_Call struct {
	*mock.Call
}

// GetByExchangeName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockProviderExchangesInterface_Expecter) GetByExchangeName(ctx interface{}, name interface{}) *MockProviderExchangesInterface_GetByExchangeName_Call {
	return &MockProviderExchangesInterface_GetByExchangeName_Call{Call: _e.mock.On("GetByExchangeName", ctx, name)}
}

func (_c *MockProviderExchangesInterface_GetByExchangeName_Call) Run(run func(ctx context.Context, name string)) *MockProviderExchangesInterface_GetByExchangeName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockProviderExchangesInterface_GetByExchangeName_Call) Return(_a0 *marketplace.ExchangeListing, _a1 error) *MockProviderExchangesInterface_GetByExchangeName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProviderExchangesInterface_GetByExchangeName_Call) RunAndReturn(run func(context.Context, string) (*marketplace.ExchangeListing, error)) *MockProviderExchangesInterface_GetByExchangeName_Call {
	_c.Call.Return(run)
	return _c
}

// GetById provides a mock function with given fields: ctx, id
func (_m *MockProviderExchangesInterface) GetById(ctx context.Context, id string) (*marketplace.GetExchangeResponse, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 *marketplace.GetExchangeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*marketplace.GetExchangeResponse, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *marketplace.GetExchangeResponse); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*marketplace.GetExchangeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProviderExchangesInterface_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type MockProviderExchangesInterface_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockProviderExchangesInterface_Expecter) GetById(ctx interface{}, id interface{}) *MockProviderExchangesInterface_GetById_Call {
	return &MockProviderExchangesInterface_GetById_Call{Call: _e.mock.On("GetById", ctx, id)}
}

func (_c *MockProviderExchangesInterface_GetById_Call) Run(run func(ctx context.Context, id string)) *MockProviderExchangesInterface_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockProviderExchangesInterface_GetById_Call) Return(_a0 *marketplace.GetExchangeResponse, _a1 error) *MockProviderExchangesInterface_GetById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProviderExchangesInterface_GetById_Call) RunAndReturn(run func(context.Context, string) (*marketplace.GetExchangeResponse, error)) *MockProviderExchangesInterface_GetById_Call {
	_c.Call.Return(run)
	return _c
}

// GetByListingName provides a mock function with given fields: ctx, name
func (_m *MockProviderExchangesInterface) GetByListingName(ctx context.Context, name string) (*marketplace.ExchangeListing, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetByListingName")
	}

	var r0 *marketplace.ExchangeListing
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*marketplace.ExchangeListing, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *marketplace.ExchangeListing); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*marketplace.ExchangeListing)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProviderExchangesInterface_GetByListingName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByListingName'
type MockProviderExchangesInterface_GetByListingName_Call struct {
	*mock.Call
}

// GetByListingName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockProviderExchangesInterface_Expecter) GetByListingName(ctx interface{}, name interface{}) *MockProviderExchangesInterface_GetByListingName_Call {
	return &MockProviderExchangesInterface_GetByListingName_Call{Call: _e.mock.On("GetByListingName", ctx, name)}
}

func (_c *MockProviderExchangesInterface_GetByListingName_Call) Run(run func(ctx context.Context, name string)) *MockProviderExchangesInterface_GetByListingName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockProviderExchangesInterface_GetByListingName_Call) Return(_a0 *marketplace.ExchangeListing, _a1 error) *MockProviderExchangesInterface_GetByListingName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProviderExchangesInterface_GetByListingName_Call) RunAndReturn(run func(context.Context, string) (*marketplace.ExchangeListing, error)) *MockProviderExchangesInterface_GetByListingName_Call {
	_c.Call.Return(run)
	return _c
}

// GetByName provides a mock function with given fields: ctx, name
func (_m *MockProviderExchangesInterface) GetByName(ctx context.Context, name string) (*marketplace.Exchange, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetByName")
	}

	var r0 *marketplace.Exchange
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*marketplace.Exchange, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *marketplace.Exchange); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*marketplace.Exchange)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProviderExchangesInterface_GetByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByName'
type MockProviderExchangesInterface_GetByName_Call struct {
	*mock.Call
}

// GetByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockProviderExchangesInterface_Expecter) GetByName(ctx interface{}, name interface{}) *MockProviderExchangesInterface_GetByName_Call {
	return &MockProviderExchangesInterface_GetByName_Call{Call: _e.mock.On("GetByName", ctx, name)}
}

func (_c *MockProviderExchangesInterface_GetByName_Call) Run(run func(ctx context.Context, name string)) *MockProviderExchangesInterface_GetByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockProviderExchangesInterface_GetByName_Call) Return(_a0 *marketplace.Exchange, _a1 error) *MockProviderExchangesInterface_GetByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProviderExchangesInterface_GetByName_Call) RunAndReturn(run func(context.Context, string) (*marketplace.Exchange, error)) *MockProviderExchangesInterface_GetByName_Call {
	_c.Call.Return(run)
	return _c
}

// Impl provides a mock function with given fields:
func (_m *MockProviderExchangesInterface) Impl() marketplace.ProviderExchangesService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 marketplace.ProviderExchangesService
	if rf, ok := ret.Get(0).(func() marketplace.ProviderExchangesService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(marketplace.ProviderExchangesService)
		}
	}

	return r0
}

// MockProviderExchangesInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockProviderExchangesInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockProviderExchangesInterface_Expecter) Impl() *MockProviderExchangesInterface_Impl_Call {
	return &MockProviderExchangesInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockProviderExchangesInterface_Impl_Call) Run(run func()) *MockProviderExchangesInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockProviderExchangesInterface_Impl_Call) Return(_a0 marketplace.ProviderExchangesService) *MockProviderExchangesInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProviderExchangesInterface_Impl_Call) RunAndReturn(run func() marketplace.ProviderExchangesService) *MockProviderExchangesInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, request
func (_m *MockProviderExchangesInterface) List(ctx context.Context, request marketplace.ListExchangesRequest) listing.Iterator[marketplace.Exchange] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 listing.Iterator[marketplace.Exchange]
	if rf, ok := ret.Get(0).(func(context.Context, marketplace.ListExchangesRequest) listing.Iterator[marketplace.Exchange]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listing.Iterator[marketplace.Exchange])
		}
	}

	return r0
}

// MockProviderExchangesInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockProviderExchangesInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - request marketplace.ListExchangesRequest
func (_e *MockProviderExchangesInterface_Expecter) List(ctx interface{}, request interface{}) *MockProviderExchangesInterface_List_Call {
	return &MockProviderExchangesInterface_List_Call{Call: _e.mock.On("List", ctx, request)}
}

func (_c *MockProviderExchangesInterface_List_Call) Run(run func(ctx context.Context, request marketplace.ListExchangesRequest)) *MockProviderExchangesInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(marketplace.ListExchangesRequest))
	})
	return _c
}

func (_c *MockProviderExchangesInterface_List_Call) Return(_a0 listing.Iterator[marketplace.Exchange]) *MockProviderExchangesInterface_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProviderExchangesInterface_List_Call) RunAndReturn(run func(context.Context, marketplace.ListExchangesRequest) listing.Iterator[marketplace.Exchange]) *MockProviderExchangesInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListAll provides a mock function with given fields: ctx, request
func (_m *MockProviderExchangesInterface) ListAll(ctx context.Context, request marketplace.ListExchangesRequest) ([]marketplace.Exchange, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListAll")
	}

	var r0 []marketplace.Exchange
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, marketplace.ListExchangesRequest) ([]marketplace.Exchange, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, marketplace.ListExchangesRequest) []marketplace.Exchange); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]marketplace.Exchange)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, marketplace.ListExchangesRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProviderExchangesInterface_ListAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAll'
type MockProviderExchangesInterface_ListAll_Call struct {
	*mock.Call
}

// ListAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request marketplace.ListExchangesRequest
func (_e *MockProviderExchangesInterface_Expecter) ListAll(ctx interface{}, request interface{}) *MockProviderExchangesInterface_ListAll_Call {
	return &MockProviderExchangesInterface_ListAll_Call{Call: _e.mock.On("ListAll", ctx, request)}
}

func (_c *MockProviderExchangesInterface_ListAll_Call) Run(run func(ctx context.Context, request marketplace.ListExchangesRequest)) *MockProviderExchangesInterface_ListAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(marketplace.ListExchangesRequest))
	})
	return _c
}

func (_c *MockProviderExchangesInterface_ListAll_Call) Return(_a0 []marketplace.Exchange, _a1 error) *MockProviderExchangesInterface_ListAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProviderExchangesInterface_ListAll_Call) RunAndReturn(run func(context.Context, marketplace.ListExchangesRequest) ([]marketplace.Exchange, error)) *MockProviderExchangesInterface_ListAll_Call {
	_c.Call.Return(run)
	return _c
}

// ListExchangesForListing provides a mock function with given fields: ctx, request
func (_m *MockProviderExchangesInterface) ListExchangesForListing(ctx context.Context, request marketplace.ListExchangesForListingRequest) listing.Iterator[marketplace.ExchangeListing] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListExchangesForListing")
	}

	var r0 listing.Iterator[marketplace.ExchangeListing]
	if rf, ok := ret.Get(0).(func(context.Context, marketplace.ListExchangesForListingRequest) listing.Iterator[marketplace.ExchangeListing]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listing.Iterator[marketplace.ExchangeListing])
		}
	}

	return r0
}

// MockProviderExchangesInterface_ListExchangesForListing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListExchangesForListing'
type MockProviderExchangesInterface_ListExchangesForListing_Call struct {
	*mock.Call
}

// ListExchangesForListing is a helper method to define mock.On call
//   - ctx context.Context
//   - request marketplace.ListExchangesForListingRequest
func (_e *MockProviderExchangesInterface_Expecter) ListExchangesForListing(ctx interface{}, request interface{}) *MockProviderExchangesInterface_ListExchangesForListing_Call {
	return &MockProviderExchangesInterface_ListExchangesForListing_Call{Call: _e.mock.On("ListExchangesForListing", ctx, request)}
}

func (_c *MockProviderExchangesInterface_ListExchangesForListing_Call) Run(run func(ctx context.Context, request marketplace.ListExchangesForListingRequest)) *MockProviderExchangesInterface_ListExchangesForListing_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(marketplace.ListExchangesForListingRequest))
	})
	return _c
}

func (_c *MockProviderExchangesInterface_ListExchangesForListing_Call) Return(_a0 listing.Iterator[marketplace.ExchangeListing]) *MockProviderExchangesInterface_ListExchangesForListing_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProviderExchangesInterface_ListExchangesForListing_Call) RunAndReturn(run func(context.Context, marketplace.ListExchangesForListingRequest) listing.Iterator[marketplace.ExchangeListing]) *MockProviderExchangesInterface_ListExchangesForListing_Call {
	_c.Call.Return(run)
	return _c
}

// ListExchangesForListingAll provides a mock function with given fields: ctx, request
func (_m *MockProviderExchangesInterface) ListExchangesForListingAll(ctx context.Context, request marketplace.ListExchangesForListingRequest) ([]marketplace.ExchangeListing, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListExchangesForListingAll")
	}

	var r0 []marketplace.ExchangeListing
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, marketplace.ListExchangesForListingRequest) ([]marketplace.ExchangeListing, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, marketplace.ListExchangesForListingRequest) []marketplace.ExchangeListing); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]marketplace.ExchangeListing)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, marketplace.ListExchangesForListingRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProviderExchangesInterface_ListExchangesForListingAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListExchangesForListingAll'
type MockProviderExchangesInterface_ListExchangesForListingAll_Call struct {
	*mock.Call
}

// ListExchangesForListingAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request marketplace.ListExchangesForListingRequest
func (_e *MockProviderExchangesInterface_Expecter) ListExchangesForListingAll(ctx interface{}, request interface{}) *MockProviderExchangesInterface_ListExchangesForListingAll_Call {
	return &MockProviderExchangesInterface_ListExchangesForListingAll_Call{Call: _e.mock.On("ListExchangesForListingAll", ctx, request)}
}

func (_c *MockProviderExchangesInterface_ListExchangesForListingAll_Call) Run(run func(ctx context.Context, request marketplace.ListExchangesForListingRequest)) *MockProviderExchangesInterface_ListExchangesForListingAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(marketplace.ListExchangesForListingRequest))
	})
	return _c
}

func (_c *MockProviderExchangesInterface_ListExchangesForListingAll_Call) Return(_a0 []marketplace.ExchangeListing, _a1 error) *MockProviderExchangesInterface_ListExchangesForListingAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProviderExchangesInterface_ListExchangesForListingAll_Call) RunAndReturn(run func(context.Context, marketplace.ListExchangesForListingRequest) ([]marketplace.ExchangeListing, error)) *MockProviderExchangesInterface_ListExchangesForListingAll_Call {
	_c.Call.Return(run)
	return _c
}

// ListListingsForExchange provides a mock function with given fields: ctx, request
func (_m *MockProviderExchangesInterface) ListListingsForExchange(ctx context.Context, request marketplace.ListListingsForExchangeRequest) listing.Iterator[marketplace.ExchangeListing] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListListingsForExchange")
	}

	var r0 listing.Iterator[marketplace.ExchangeListing]
	if rf, ok := ret.Get(0).(func(context.Context, marketplace.ListListingsForExchangeRequest) listing.Iterator[marketplace.ExchangeListing]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listing.Iterator[marketplace.ExchangeListing])
		}
	}

	return r0
}

// MockProviderExchangesInterface_ListListingsForExchange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListListingsForExchange'
type MockProviderExchangesInterface_ListListingsForExchange_Call struct {
	*mock.Call
}

// ListListingsForExchange is a helper method to define mock.On call
//   - ctx context.Context
//   - request marketplace.ListListingsForExchangeRequest
func (_e *MockProviderExchangesInterface_Expecter) ListListingsForExchange(ctx interface{}, request interface{}) *MockProviderExchangesInterface_ListListingsForExchange_Call {
	return &MockProviderExchangesInterface_ListListingsForExchange_Call{Call: _e.mock.On("ListListingsForExchange", ctx, request)}
}

func (_c *MockProviderExchangesInterface_ListListingsForExchange_Call) Run(run func(ctx context.Context, request marketplace.ListListingsForExchangeRequest)) *MockProviderExchangesInterface_ListListingsForExchange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(marketplace.ListListingsForExchangeRequest))
	})
	return _c
}

func (_c *MockProviderExchangesInterface_ListListingsForExchange_Call) Return(_a0 listing.Iterator[marketplace.ExchangeListing]) *MockProviderExchangesInterface_ListListingsForExchange_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProviderExchangesInterface_ListListingsForExchange_Call) RunAndReturn(run func(context.Context, marketplace.ListListingsForExchangeRequest) listing.Iterator[marketplace.ExchangeListing]) *MockProviderExchangesInterface_ListListingsForExchange_Call {
	_c.Call.Return(run)
	return _c
}

// ListListingsForExchangeAll provides a mock function with given fields: ctx, request
func (_m *MockProviderExchangesInterface) ListListingsForExchangeAll(ctx context.Context, request marketplace.ListListingsForExchangeRequest) ([]marketplace.ExchangeListing, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListListingsForExchangeAll")
	}

	var r0 []marketplace.ExchangeListing
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, marketplace.ListListingsForExchangeRequest) ([]marketplace.ExchangeListing, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, marketplace.ListListingsForExchangeRequest) []marketplace.ExchangeListing); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]marketplace.ExchangeListing)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, marketplace.ListListingsForExchangeRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProviderExchangesInterface_ListListingsForExchangeAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListListingsForExchangeAll'
type MockProviderExchangesInterface_ListListingsForExchangeAll_Call struct {
	*mock.Call
}

// ListListingsForExchangeAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request marketplace.ListListingsForExchangeRequest
func (_e *MockProviderExchangesInterface_Expecter) ListListingsForExchangeAll(ctx interface{}, request interface{}) *MockProviderExchangesInterface_ListListingsForExchangeAll_Call {
	return &MockProviderExchangesInterface_ListListingsForExchangeAll_Call{Call: _e.mock.On("ListListingsForExchangeAll", ctx, request)}
}

func (_c *MockProviderExchangesInterface_ListListingsForExchangeAll_Call) Run(run func(ctx context.Context, request marketplace.ListListingsForExchangeRequest)) *MockProviderExchangesInterface_ListListingsForExchangeAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(marketplace.ListListingsForExchangeRequest))
	})
	return _c
}

func (_c *MockProviderExchangesInterface_ListListingsForExchangeAll_Call) Return(_a0 []marketplace.ExchangeListing, _a1 error) *MockProviderExchangesInterface_ListListingsForExchangeAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProviderExchangesInterface_ListListingsForExchangeAll_Call) RunAndReturn(run func(context.Context, marketplace.ListListingsForExchangeRequest) ([]marketplace.ExchangeListing, error)) *MockProviderExchangesInterface_ListListingsForExchangeAll_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, request
func (_m *MockProviderExchangesInterface) Update(ctx context.Context, request marketplace.UpdateExchangeRequest) (*marketplace.UpdateExchangeResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *marketplace.UpdateExchangeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, marketplace.UpdateExchangeRequest) (*marketplace.UpdateExchangeResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, marketplace.UpdateExchangeRequest) *marketplace.UpdateExchangeResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*marketplace.UpdateExchangeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, marketplace.UpdateExchangeRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProviderExchangesInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockProviderExchangesInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - request marketplace.UpdateExchangeRequest
func (_e *MockProviderExchangesInterface_Expecter) Update(ctx interface{}, request interface{}) *MockProviderExchangesInterface_Update_Call {
	return &MockProviderExchangesInterface_Update_Call{Call: _e.mock.On("Update", ctx, request)}
}

func (_c *MockProviderExchangesInterface_Update_Call) Run(run func(ctx context.Context, request marketplace.UpdateExchangeRequest)) *MockProviderExchangesInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(marketplace.UpdateExchangeRequest))
	})
	return _c
}

func (_c *MockProviderExchangesInterface_Update_Call) Return(_a0 *marketplace.UpdateExchangeResponse, _a1 error) *MockProviderExchangesInterface_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProviderExchangesInterface_Update_Call) RunAndReturn(run func(context.Context, marketplace.UpdateExchangeRequest) (*marketplace.UpdateExchangeResponse, error)) *MockProviderExchangesInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockProviderExchangesInterface) WithImpl(impl marketplace.ProviderExchangesService) marketplace.ProviderExchangesInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 marketplace.ProviderExchangesInterface
	if rf, ok := ret.Get(0).(func(marketplace.ProviderExchangesService) marketplace.ProviderExchangesInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(marketplace.ProviderExchangesInterface)
		}
	}

	return r0
}

// MockProviderExchangesInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockProviderExchangesInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl marketplace.ProviderExchangesService
func (_e *MockProviderExchangesInterface_Expecter) WithImpl(impl interface{}) *MockProviderExchangesInterface_WithImpl_Call {
	return &MockProviderExchangesInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockProviderExchangesInterface_WithImpl_Call) Run(run func(impl marketplace.ProviderExchangesService)) *MockProviderExchangesInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(marketplace.ProviderExchangesService))
	})
	return _c
}

func (_c *MockProviderExchangesInterface_WithImpl_Call) Return(_a0 marketplace.ProviderExchangesInterface) *MockProviderExchangesInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProviderExchangesInterface_WithImpl_Call) RunAndReturn(run func(marketplace.ProviderExchangesService) marketplace.ProviderExchangesInterface) *MockProviderExchangesInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProviderExchangesInterface creates a new instance of MockProviderExchangesInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProviderExchangesInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProviderExchangesInterface {
	mock := &MockProviderExchangesInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
