// Code generated by mockery v2.53.2. DO NOT EDIT.

package tags

import (
	context "context"

	listing "github.com/databricks/databricks-sdk-go/listing"
	mock "github.com/stretchr/testify/mock"

	tags "github.com/databricks/databricks-sdk-go/service/tags"
)

// MockTagPoliciesInterface is an autogenerated mock type for the TagPoliciesInterface type
type MockTagPoliciesInterface struct {
	mock.Mock
}

type MockTagPoliciesInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTagPoliciesInterface) EXPECT() *MockTagPoliciesInterface_Expecter {
	return &MockTagPoliciesInterface_Expecter{mock: &_m.Mock}
}

// CreateTagPolicy provides a mock function with given fields: ctx, request
func (_m *MockTagPoliciesInterface) CreateTagPolicy(ctx context.Context, request tags.CreateTagPolicyRequest) (*tags.TagPolicy, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateTagPolicy")
	}

	var r0 *tags.TagPolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, tags.CreateTagPolicyRequest) (*tags.TagPolicy, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, tags.CreateTagPolicyRequest) *tags.TagPolicy); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tags.TagPolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, tags.CreateTagPolicyRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTagPoliciesInterface_CreateTagPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTagPolicy'
type MockTagPoliciesInterface_CreateTagPolicy_Call struct {
	*mock.Call
}

// CreateTagPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - request tags.CreateTagPolicyRequest
func (_e *MockTagPoliciesInterface_Expecter) CreateTagPolicy(ctx interface{}, request interface{}) *MockTagPoliciesInterface_CreateTagPolicy_Call {
	return &MockTagPoliciesInterface_CreateTagPolicy_Call{Call: _e.mock.On("CreateTagPolicy", ctx, request)}
}

func (_c *MockTagPoliciesInterface_CreateTagPolicy_Call) Run(run func(ctx context.Context, request tags.CreateTagPolicyRequest)) *MockTagPoliciesInterface_CreateTagPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(tags.CreateTagPolicyRequest))
	})
	return _c
}

func (_c *MockTagPoliciesInterface_CreateTagPolicy_Call) Return(_a0 *tags.TagPolicy, _a1 error) *MockTagPoliciesInterface_CreateTagPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTagPoliciesInterface_CreateTagPolicy_Call) RunAndReturn(run func(context.Context, tags.CreateTagPolicyRequest) (*tags.TagPolicy, error)) *MockTagPoliciesInterface_CreateTagPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTagPolicy provides a mock function with given fields: ctx, request
func (_m *MockTagPoliciesInterface) DeleteTagPolicy(ctx context.Context, request tags.DeleteTagPolicyRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTagPolicy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, tags.DeleteTagPolicyRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTagPoliciesInterface_DeleteTagPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTagPolicy'
type MockTagPoliciesInterface_DeleteTagPolicy_Call struct {
	*mock.Call
}

// DeleteTagPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - request tags.DeleteTagPolicyRequest
func (_e *MockTagPoliciesInterface_Expecter) DeleteTagPolicy(ctx interface{}, request interface{}) *MockTagPoliciesInterface_DeleteTagPolicy_Call {
	return &MockTagPoliciesInterface_DeleteTagPolicy_Call{Call: _e.mock.On("DeleteTagPolicy", ctx, request)}
}

func (_c *MockTagPoliciesInterface_DeleteTagPolicy_Call) Run(run func(ctx context.Context, request tags.DeleteTagPolicyRequest)) *MockTagPoliciesInterface_DeleteTagPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(tags.DeleteTagPolicyRequest))
	})
	return _c
}

func (_c *MockTagPoliciesInterface_DeleteTagPolicy_Call) Return(_a0 error) *MockTagPoliciesInterface_DeleteTagPolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTagPoliciesInterface_DeleteTagPolicy_Call) RunAndReturn(run func(context.Context, tags.DeleteTagPolicyRequest) error) *MockTagPoliciesInterface_DeleteTagPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// GetTagPolicy provides a mock function with given fields: ctx, request
func (_m *MockTagPoliciesInterface) GetTagPolicy(ctx context.Context, request tags.GetTagPolicyRequest) (*tags.TagPolicy, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetTagPolicy")
	}

	var r0 *tags.TagPolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, tags.GetTagPolicyRequest) (*tags.TagPolicy, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, tags.GetTagPolicyRequest) *tags.TagPolicy); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tags.TagPolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, tags.GetTagPolicyRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTagPoliciesInterface_GetTagPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTagPolicy'
type MockTagPoliciesInterface_GetTagPolicy_Call struct {
	*mock.Call
}

// GetTagPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - request tags.GetTagPolicyRequest
func (_e *MockTagPoliciesInterface_Expecter) GetTagPolicy(ctx interface{}, request interface{}) *MockTagPoliciesInterface_GetTagPolicy_Call {
	return &MockTagPoliciesInterface_GetTagPolicy_Call{Call: _e.mock.On("GetTagPolicy", ctx, request)}
}

func (_c *MockTagPoliciesInterface_GetTagPolicy_Call) Run(run func(ctx context.Context, request tags.GetTagPolicyRequest)) *MockTagPoliciesInterface_GetTagPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(tags.GetTagPolicyRequest))
	})
	return _c
}

func (_c *MockTagPoliciesInterface_GetTagPolicy_Call) Return(_a0 *tags.TagPolicy, _a1 error) *MockTagPoliciesInterface_GetTagPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTagPoliciesInterface_GetTagPolicy_Call) RunAndReturn(run func(context.Context, tags.GetTagPolicyRequest) (*tags.TagPolicy, error)) *MockTagPoliciesInterface_GetTagPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// ListTagPolicies provides a mock function with given fields: ctx, request
func (_m *MockTagPoliciesInterface) ListTagPolicies(ctx context.Context, request tags.ListTagPoliciesRequest) listing.Iterator[tags.TagPolicy] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListTagPolicies")
	}

	var r0 listing.Iterator[tags.TagPolicy]
	if rf, ok := ret.Get(0).(func(context.Context, tags.ListTagPoliciesRequest) listing.Iterator[tags.TagPolicy]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listing.Iterator[tags.TagPolicy])
		}
	}

	return r0
}

// MockTagPoliciesInterface_ListTagPolicies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTagPolicies'
type MockTagPoliciesInterface_ListTagPolicies_Call struct {
	*mock.Call
}

// ListTagPolicies is a helper method to define mock.On call
//   - ctx context.Context
//   - request tags.ListTagPoliciesRequest
func (_e *MockTagPoliciesInterface_Expecter) ListTagPolicies(ctx interface{}, request interface{}) *MockTagPoliciesInterface_ListTagPolicies_Call {
	return &MockTagPoliciesInterface_ListTagPolicies_Call{Call: _e.mock.On("ListTagPolicies", ctx, request)}
}

func (_c *MockTagPoliciesInterface_ListTagPolicies_Call) Run(run func(ctx context.Context, request tags.ListTagPoliciesRequest)) *MockTagPoliciesInterface_ListTagPolicies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(tags.ListTagPoliciesRequest))
	})
	return _c
}

func (_c *MockTagPoliciesInterface_ListTagPolicies_Call) Return(_a0 listing.Iterator[tags.TagPolicy]) *MockTagPoliciesInterface_ListTagPolicies_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTagPoliciesInterface_ListTagPolicies_Call) RunAndReturn(run func(context.Context, tags.ListTagPoliciesRequest) listing.Iterator[tags.TagPolicy]) *MockTagPoliciesInterface_ListTagPolicies_Call {
	_c.Call.Return(run)
	return _c
}

// ListTagPoliciesAll provides a mock function with given fields: ctx, request
func (_m *MockTagPoliciesInterface) ListTagPoliciesAll(ctx context.Context, request tags.ListTagPoliciesRequest) ([]tags.TagPolicy, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListTagPoliciesAll")
	}

	var r0 []tags.TagPolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, tags.ListTagPoliciesRequest) ([]tags.TagPolicy, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, tags.ListTagPoliciesRequest) []tags.TagPolicy); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]tags.TagPolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, tags.ListTagPoliciesRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTagPoliciesInterface_ListTagPoliciesAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTagPoliciesAll'
type MockTagPoliciesInterface_ListTagPoliciesAll_Call struct {
	*mock.Call
}

// ListTagPoliciesAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request tags.ListTagPoliciesRequest
func (_e *MockTagPoliciesInterface_Expecter) ListTagPoliciesAll(ctx interface{}, request interface{}) *MockTagPoliciesInterface_ListTagPoliciesAll_Call {
	return &MockTagPoliciesInterface_ListTagPoliciesAll_Call{Call: _e.mock.On("ListTagPoliciesAll", ctx, request)}
}

func (_c *MockTagPoliciesInterface_ListTagPoliciesAll_Call) Run(run func(ctx context.Context, request tags.ListTagPoliciesRequest)) *MockTagPoliciesInterface_ListTagPoliciesAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(tags.ListTagPoliciesRequest))
	})
	return _c
}

func (_c *MockTagPoliciesInterface_ListTagPoliciesAll_Call) Return(_a0 []tags.TagPolicy, _a1 error) *MockTagPoliciesInterface_ListTagPoliciesAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTagPoliciesInterface_ListTagPoliciesAll_Call) RunAndReturn(run func(context.Context, tags.ListTagPoliciesRequest) ([]tags.TagPolicy, error)) *MockTagPoliciesInterface_ListTagPoliciesAll_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTagPolicy provides a mock function with given fields: ctx, request
func (_m *MockTagPoliciesInterface) UpdateTagPolicy(ctx context.Context, request tags.UpdateTagPolicyRequest) (*tags.TagPolicy, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTagPolicy")
	}

	var r0 *tags.TagPolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, tags.UpdateTagPolicyRequest) (*tags.TagPolicy, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, tags.UpdateTagPolicyRequest) *tags.TagPolicy); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tags.TagPolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, tags.UpdateTagPolicyRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTagPoliciesInterface_UpdateTagPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTagPolicy'
type MockTagPoliciesInterface_UpdateTagPolicy_Call struct {
	*mock.Call
}

// UpdateTagPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - request tags.UpdateTagPolicyRequest
func (_e *MockTagPoliciesInterface_Expecter) UpdateTagPolicy(ctx interface{}, request interface{}) *MockTagPoliciesInterface_UpdateTagPolicy_Call {
	return &MockTagPoliciesInterface_UpdateTagPolicy_Call{Call: _e.mock.On("UpdateTagPolicy", ctx, request)}
}

func (_c *MockTagPoliciesInterface_UpdateTagPolicy_Call) Run(run func(ctx context.Context, request tags.UpdateTagPolicyRequest)) *MockTagPoliciesInterface_UpdateTagPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(tags.UpdateTagPolicyRequest))
	})
	return _c
}

func (_c *MockTagPoliciesInterface_UpdateTagPolicy_Call) Return(_a0 *tags.TagPolicy, _a1 error) *MockTagPoliciesInterface_UpdateTagPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTagPoliciesInterface_UpdateTagPolicy_Call) RunAndReturn(run func(context.Context, tags.UpdateTagPolicyRequest) (*tags.TagPolicy, error)) *MockTagPoliciesInterface_UpdateTagPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTagPoliciesInterface creates a new instance of MockTagPoliciesInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTagPoliciesInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTagPoliciesInterface {
	mock := &MockTagPoliciesInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
