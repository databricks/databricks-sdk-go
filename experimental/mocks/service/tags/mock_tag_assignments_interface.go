// Code generated by mockery v2.53.2. DO NOT EDIT.

package tags

import (
	context "context"

	listing "github.com/databricks/databricks-sdk-go/listing"
	mock "github.com/stretchr/testify/mock"

	tags "github.com/databricks/databricks-sdk-go/service/tags"
)

// MockTagAssignmentsInterface is an autogenerated mock type for the TagAssignmentsInterface type
type MockTagAssignmentsInterface struct {
	mock.Mock
}

type MockTagAssignmentsInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTagAssignmentsInterface) EXPECT() *MockTagAssignmentsInterface_Expecter {
	return &MockTagAssignmentsInterface_Expecter{mock: &_m.Mock}
}

// CreateTagAssignment provides a mock function with given fields: ctx, request
func (_m *MockTagAssignmentsInterface) CreateTagAssignment(ctx context.Context, request tags.CreateTagAssignmentRequest) (*tags.TagAssignment, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateTagAssignment")
	}

	var r0 *tags.TagAssignment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, tags.CreateTagAssignmentRequest) (*tags.TagAssignment, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, tags.CreateTagAssignmentRequest) *tags.TagAssignment); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tags.TagAssignment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, tags.CreateTagAssignmentRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTagAssignmentsInterface_CreateTagAssignment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTagAssignment'
type MockTagAssignmentsInterface_CreateTagAssignment_Call struct {
	*mock.Call
}

// CreateTagAssignment is a helper method to define mock.On call
//   - ctx context.Context
//   - request tags.CreateTagAssignmentRequest
func (_e *MockTagAssignmentsInterface_Expecter) CreateTagAssignment(ctx interface{}, request interface{}) *MockTagAssignmentsInterface_CreateTagAssignment_Call {
	return &MockTagAssignmentsInterface_CreateTagAssignment_Call{Call: _e.mock.On("CreateTagAssignment", ctx, request)}
}

func (_c *MockTagAssignmentsInterface_CreateTagAssignment_Call) Run(run func(ctx context.Context, request tags.CreateTagAssignmentRequest)) *MockTagAssignmentsInterface_CreateTagAssignment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(tags.CreateTagAssignmentRequest))
	})
	return _c
}

func (_c *MockTagAssignmentsInterface_CreateTagAssignment_Call) Return(_a0 *tags.TagAssignment, _a1 error) *MockTagAssignmentsInterface_CreateTagAssignment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTagAssignmentsInterface_CreateTagAssignment_Call) RunAndReturn(run func(context.Context, tags.CreateTagAssignmentRequest) (*tags.TagAssignment, error)) *MockTagAssignmentsInterface_CreateTagAssignment_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTagAssignment provides a mock function with given fields: ctx, request
func (_m *MockTagAssignmentsInterface) DeleteTagAssignment(ctx context.Context, request tags.DeleteTagAssignmentRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTagAssignment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, tags.DeleteTagAssignmentRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTagAssignmentsInterface_DeleteTagAssignment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTagAssignment'
type MockTagAssignmentsInterface_DeleteTagAssignment_Call struct {
	*mock.Call
}

// DeleteTagAssignment is a helper method to define mock.On call
//   - ctx context.Context
//   - request tags.DeleteTagAssignmentRequest
func (_e *MockTagAssignmentsInterface_Expecter) DeleteTagAssignment(ctx interface{}, request interface{}) *MockTagAssignmentsInterface_DeleteTagAssignment_Call {
	return &MockTagAssignmentsInterface_DeleteTagAssignment_Call{Call: _e.mock.On("DeleteTagAssignment", ctx, request)}
}

func (_c *MockTagAssignmentsInterface_DeleteTagAssignment_Call) Run(run func(ctx context.Context, request tags.DeleteTagAssignmentRequest)) *MockTagAssignmentsInterface_DeleteTagAssignment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(tags.DeleteTagAssignmentRequest))
	})
	return _c
}

func (_c *MockTagAssignmentsInterface_DeleteTagAssignment_Call) Return(_a0 error) *MockTagAssignmentsInterface_DeleteTagAssignment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTagAssignmentsInterface_DeleteTagAssignment_Call) RunAndReturn(run func(context.Context, tags.DeleteTagAssignmentRequest) error) *MockTagAssignmentsInterface_DeleteTagAssignment_Call {
	_c.Call.Return(run)
	return _c
}

// GetTagAssignment provides a mock function with given fields: ctx, request
func (_m *MockTagAssignmentsInterface) GetTagAssignment(ctx context.Context, request tags.GetTagAssignmentRequest) (*tags.TagAssignment, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetTagAssignment")
	}

	var r0 *tags.TagAssignment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, tags.GetTagAssignmentRequest) (*tags.TagAssignment, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, tags.GetTagAssignmentRequest) *tags.TagAssignment); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tags.TagAssignment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, tags.GetTagAssignmentRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTagAssignmentsInterface_GetTagAssignment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTagAssignment'
type MockTagAssignmentsInterface_GetTagAssignment_Call struct {
	*mock.Call
}

// GetTagAssignment is a helper method to define mock.On call
//   - ctx context.Context
//   - request tags.GetTagAssignmentRequest
func (_e *MockTagAssignmentsInterface_Expecter) GetTagAssignment(ctx interface{}, request interface{}) *MockTagAssignmentsInterface_GetTagAssignment_Call {
	return &MockTagAssignmentsInterface_GetTagAssignment_Call{Call: _e.mock.On("GetTagAssignment", ctx, request)}
}

func (_c *MockTagAssignmentsInterface_GetTagAssignment_Call) Run(run func(ctx context.Context, request tags.GetTagAssignmentRequest)) *MockTagAssignmentsInterface_GetTagAssignment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(tags.GetTagAssignmentRequest))
	})
	return _c
}

func (_c *MockTagAssignmentsInterface_GetTagAssignment_Call) Return(_a0 *tags.TagAssignment, _a1 error) *MockTagAssignmentsInterface_GetTagAssignment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTagAssignmentsInterface_GetTagAssignment_Call) RunAndReturn(run func(context.Context, tags.GetTagAssignmentRequest) (*tags.TagAssignment, error)) *MockTagAssignmentsInterface_GetTagAssignment_Call {
	_c.Call.Return(run)
	return _c
}

// ListTagAssignments provides a mock function with given fields: ctx, request
func (_m *MockTagAssignmentsInterface) ListTagAssignments(ctx context.Context, request tags.ListTagAssignmentsRequest) listing.Iterator[tags.TagAssignment] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListTagAssignments")
	}

	var r0 listing.Iterator[tags.TagAssignment]
	if rf, ok := ret.Get(0).(func(context.Context, tags.ListTagAssignmentsRequest) listing.Iterator[tags.TagAssignment]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listing.Iterator[tags.TagAssignment])
		}
	}

	return r0
}

// MockTagAssignmentsInterface_ListTagAssignments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTagAssignments'
type MockTagAssignmentsInterface_ListTagAssignments_Call struct {
	*mock.Call
}

// ListTagAssignments is a helper method to define mock.On call
//   - ctx context.Context
//   - request tags.ListTagAssignmentsRequest
func (_e *MockTagAssignmentsInterface_Expecter) ListTagAssignments(ctx interface{}, request interface{}) *MockTagAssignmentsInterface_ListTagAssignments_Call {
	return &MockTagAssignmentsInterface_ListTagAssignments_Call{Call: _e.mock.On("ListTagAssignments", ctx, request)}
}

func (_c *MockTagAssignmentsInterface_ListTagAssignments_Call) Run(run func(ctx context.Context, request tags.ListTagAssignmentsRequest)) *MockTagAssignmentsInterface_ListTagAssignments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(tags.ListTagAssignmentsRequest))
	})
	return _c
}

func (_c *MockTagAssignmentsInterface_ListTagAssignments_Call) Return(_a0 listing.Iterator[tags.TagAssignment]) *MockTagAssignmentsInterface_ListTagAssignments_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTagAssignmentsInterface_ListTagAssignments_Call) RunAndReturn(run func(context.Context, tags.ListTagAssignmentsRequest) listing.Iterator[tags.TagAssignment]) *MockTagAssignmentsInterface_ListTagAssignments_Call {
	_c.Call.Return(run)
	return _c
}

// ListTagAssignmentsAll provides a mock function with given fields: ctx, request
func (_m *MockTagAssignmentsInterface) ListTagAssignmentsAll(ctx context.Context, request tags.ListTagAssignmentsRequest) ([]tags.TagAssignment, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListTagAssignmentsAll")
	}

	var r0 []tags.TagAssignment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, tags.ListTagAssignmentsRequest) ([]tags.TagAssignment, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, tags.ListTagAssignmentsRequest) []tags.TagAssignment); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]tags.TagAssignment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, tags.ListTagAssignmentsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTagAssignmentsInterface_ListTagAssignmentsAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTagAssignmentsAll'
type MockTagAssignmentsInterface_ListTagAssignmentsAll_Call struct {
	*mock.Call
}

// ListTagAssignmentsAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request tags.ListTagAssignmentsRequest
func (_e *MockTagAssignmentsInterface_Expecter) ListTagAssignmentsAll(ctx interface{}, request interface{}) *MockTagAssignmentsInterface_ListTagAssignmentsAll_Call {
	return &MockTagAssignmentsInterface_ListTagAssignmentsAll_Call{Call: _e.mock.On("ListTagAssignmentsAll", ctx, request)}
}

func (_c *MockTagAssignmentsInterface_ListTagAssignmentsAll_Call) Run(run func(ctx context.Context, request tags.ListTagAssignmentsRequest)) *MockTagAssignmentsInterface_ListTagAssignmentsAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(tags.ListTagAssignmentsRequest))
	})
	return _c
}

func (_c *MockTagAssignmentsInterface_ListTagAssignmentsAll_Call) Return(_a0 []tags.TagAssignment, _a1 error) *MockTagAssignmentsInterface_ListTagAssignmentsAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTagAssignmentsInterface_ListTagAssignmentsAll_Call) RunAndReturn(run func(context.Context, tags.ListTagAssignmentsRequest) ([]tags.TagAssignment, error)) *MockTagAssignmentsInterface_ListTagAssignmentsAll_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTagAssignment provides a mock function with given fields: ctx, request
func (_m *MockTagAssignmentsInterface) UpdateTagAssignment(ctx context.Context, request tags.UpdateTagAssignmentRequest) (*tags.TagAssignment, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTagAssignment")
	}

	var r0 *tags.TagAssignment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, tags.UpdateTagAssignmentRequest) (*tags.TagAssignment, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, tags.UpdateTagAssignmentRequest) *tags.TagAssignment); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tags.TagAssignment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, tags.UpdateTagAssignmentRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTagAssignmentsInterface_UpdateTagAssignment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTagAssignment'
type MockTagAssignmentsInterface_UpdateTagAssignment_Call struct {
	*mock.Call
}

// UpdateTagAssignment is a helper method to define mock.On call
//   - ctx context.Context
//   - request tags.UpdateTagAssignmentRequest
func (_e *MockTagAssignmentsInterface_Expecter) UpdateTagAssignment(ctx interface{}, request interface{}) *MockTagAssignmentsInterface_UpdateTagAssignment_Call {
	return &MockTagAssignmentsInterface_UpdateTagAssignment_Call{Call: _e.mock.On("UpdateTagAssignment", ctx, request)}
}

func (_c *MockTagAssignmentsInterface_UpdateTagAssignment_Call) Run(run func(ctx context.Context, request tags.UpdateTagAssignmentRequest)) *MockTagAssignmentsInterface_UpdateTagAssignment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(tags.UpdateTagAssignmentRequest))
	})
	return _c
}

func (_c *MockTagAssignmentsInterface_UpdateTagAssignment_Call) Return(_a0 *tags.TagAssignment, _a1 error) *MockTagAssignmentsInterface_UpdateTagAssignment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTagAssignmentsInterface_UpdateTagAssignment_Call) RunAndReturn(run func(context.Context, tags.UpdateTagAssignmentRequest) (*tags.TagAssignment, error)) *MockTagAssignmentsInterface_UpdateTagAssignment_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTagAssignmentsInterface creates a new instance of MockTagAssignmentsInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTagAssignmentsInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTagAssignmentsInterface {
	mock := &MockTagAssignmentsInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
