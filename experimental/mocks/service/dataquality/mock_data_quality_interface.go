// Code generated by mockery v2.53.2. DO NOT EDIT.

package dataquality

import (
	context "context"

	listing "github.com/databricks/databricks-sdk-go/listing"
	dataquality "github.com/databricks/databricks-sdk-go/service/dataquality"

	mock "github.com/stretchr/testify/mock"
)

// MockDataQualityInterface is an autogenerated mock type for the DataQualityInterface type
type MockDataQualityInterface struct {
	mock.Mock
}

type MockDataQualityInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDataQualityInterface) EXPECT() *MockDataQualityInterface_Expecter {
	return &MockDataQualityInterface_Expecter{mock: &_m.Mock}
}

// CancelRefresh provides a mock function with given fields: ctx, request
func (_m *MockDataQualityInterface) CancelRefresh(ctx context.Context, request dataquality.CancelRefreshRequest) (*dataquality.CancelRefreshResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CancelRefresh")
	}

	var r0 *dataquality.CancelRefreshResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dataquality.CancelRefreshRequest) (*dataquality.CancelRefreshResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dataquality.CancelRefreshRequest) *dataquality.CancelRefreshResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dataquality.CancelRefreshResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dataquality.CancelRefreshRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDataQualityInterface_CancelRefresh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelRefresh'
type MockDataQualityInterface_CancelRefresh_Call struct {
	*mock.Call
}

// CancelRefresh is a helper method to define mock.On call
//   - ctx context.Context
//   - request dataquality.CancelRefreshRequest
func (_e *MockDataQualityInterface_Expecter) CancelRefresh(ctx interface{}, request interface{}) *MockDataQualityInterface_CancelRefresh_Call {
	return &MockDataQualityInterface_CancelRefresh_Call{Call: _e.mock.On("CancelRefresh", ctx, request)}
}

func (_c *MockDataQualityInterface_CancelRefresh_Call) Run(run func(ctx context.Context, request dataquality.CancelRefreshRequest)) *MockDataQualityInterface_CancelRefresh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dataquality.CancelRefreshRequest))
	})
	return _c
}

func (_c *MockDataQualityInterface_CancelRefresh_Call) Return(_a0 *dataquality.CancelRefreshResponse, _a1 error) *MockDataQualityInterface_CancelRefresh_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDataQualityInterface_CancelRefresh_Call) RunAndReturn(run func(context.Context, dataquality.CancelRefreshRequest) (*dataquality.CancelRefreshResponse, error)) *MockDataQualityInterface_CancelRefresh_Call {
	_c.Call.Return(run)
	return _c
}

// CreateMonitor provides a mock function with given fields: ctx, request
func (_m *MockDataQualityInterface) CreateMonitor(ctx context.Context, request dataquality.CreateMonitorRequest) (*dataquality.Monitor, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateMonitor")
	}

	var r0 *dataquality.Monitor
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dataquality.CreateMonitorRequest) (*dataquality.Monitor, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dataquality.CreateMonitorRequest) *dataquality.Monitor); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dataquality.Monitor)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dataquality.CreateMonitorRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDataQualityInterface_CreateMonitor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMonitor'
type MockDataQualityInterface_CreateMonitor_Call struct {
	*mock.Call
}

// CreateMonitor is a helper method to define mock.On call
//   - ctx context.Context
//   - request dataquality.CreateMonitorRequest
func (_e *MockDataQualityInterface_Expecter) CreateMonitor(ctx interface{}, request interface{}) *MockDataQualityInterface_CreateMonitor_Call {
	return &MockDataQualityInterface_CreateMonitor_Call{Call: _e.mock.On("CreateMonitor", ctx, request)}
}

func (_c *MockDataQualityInterface_CreateMonitor_Call) Run(run func(ctx context.Context, request dataquality.CreateMonitorRequest)) *MockDataQualityInterface_CreateMonitor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dataquality.CreateMonitorRequest))
	})
	return _c
}

func (_c *MockDataQualityInterface_CreateMonitor_Call) Return(_a0 *dataquality.Monitor, _a1 error) *MockDataQualityInterface_CreateMonitor_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDataQualityInterface_CreateMonitor_Call) RunAndReturn(run func(context.Context, dataquality.CreateMonitorRequest) (*dataquality.Monitor, error)) *MockDataQualityInterface_CreateMonitor_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRefresh provides a mock function with given fields: ctx, request
func (_m *MockDataQualityInterface) CreateRefresh(ctx context.Context, request dataquality.CreateRefreshRequest) (*dataquality.Refresh, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateRefresh")
	}

	var r0 *dataquality.Refresh
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dataquality.CreateRefreshRequest) (*dataquality.Refresh, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dataquality.CreateRefreshRequest) *dataquality.Refresh); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dataquality.Refresh)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dataquality.CreateRefreshRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDataQualityInterface_CreateRefresh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRefresh'
type MockDataQualityInterface_CreateRefresh_Call struct {
	*mock.Call
}

// CreateRefresh is a helper method to define mock.On call
//   - ctx context.Context
//   - request dataquality.CreateRefreshRequest
func (_e *MockDataQualityInterface_Expecter) CreateRefresh(ctx interface{}, request interface{}) *MockDataQualityInterface_CreateRefresh_Call {
	return &MockDataQualityInterface_CreateRefresh_Call{Call: _e.mock.On("CreateRefresh", ctx, request)}
}

func (_c *MockDataQualityInterface_CreateRefresh_Call) Run(run func(ctx context.Context, request dataquality.CreateRefreshRequest)) *MockDataQualityInterface_CreateRefresh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dataquality.CreateRefreshRequest))
	})
	return _c
}

func (_c *MockDataQualityInterface_CreateRefresh_Call) Return(_a0 *dataquality.Refresh, _a1 error) *MockDataQualityInterface_CreateRefresh_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDataQualityInterface_CreateRefresh_Call) RunAndReturn(run func(context.Context, dataquality.CreateRefreshRequest) (*dataquality.Refresh, error)) *MockDataQualityInterface_CreateRefresh_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteMonitor provides a mock function with given fields: ctx, request
func (_m *MockDataQualityInterface) DeleteMonitor(ctx context.Context, request dataquality.DeleteMonitorRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMonitor")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dataquality.DeleteMonitorRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDataQualityInterface_DeleteMonitor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMonitor'
type MockDataQualityInterface_DeleteMonitor_Call struct {
	*mock.Call
}

// DeleteMonitor is a helper method to define mock.On call
//   - ctx context.Context
//   - request dataquality.DeleteMonitorRequest
func (_e *MockDataQualityInterface_Expecter) DeleteMonitor(ctx interface{}, request interface{}) *MockDataQualityInterface_DeleteMonitor_Call {
	return &MockDataQualityInterface_DeleteMonitor_Call{Call: _e.mock.On("DeleteMonitor", ctx, request)}
}

func (_c *MockDataQualityInterface_DeleteMonitor_Call) Run(run func(ctx context.Context, request dataquality.DeleteMonitorRequest)) *MockDataQualityInterface_DeleteMonitor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dataquality.DeleteMonitorRequest))
	})
	return _c
}

func (_c *MockDataQualityInterface_DeleteMonitor_Call) Return(_a0 error) *MockDataQualityInterface_DeleteMonitor_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDataQualityInterface_DeleteMonitor_Call) RunAndReturn(run func(context.Context, dataquality.DeleteMonitorRequest) error) *MockDataQualityInterface_DeleteMonitor_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRefresh provides a mock function with given fields: ctx, request
func (_m *MockDataQualityInterface) DeleteRefresh(ctx context.Context, request dataquality.DeleteRefreshRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRefresh")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dataquality.DeleteRefreshRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDataQualityInterface_DeleteRefresh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRefresh'
type MockDataQualityInterface_DeleteRefresh_Call struct {
	*mock.Call
}

// DeleteRefresh is a helper method to define mock.On call
//   - ctx context.Context
//   - request dataquality.DeleteRefreshRequest
func (_e *MockDataQualityInterface_Expecter) DeleteRefresh(ctx interface{}, request interface{}) *MockDataQualityInterface_DeleteRefresh_Call {
	return &MockDataQualityInterface_DeleteRefresh_Call{Call: _e.mock.On("DeleteRefresh", ctx, request)}
}

func (_c *MockDataQualityInterface_DeleteRefresh_Call) Run(run func(ctx context.Context, request dataquality.DeleteRefreshRequest)) *MockDataQualityInterface_DeleteRefresh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dataquality.DeleteRefreshRequest))
	})
	return _c
}

func (_c *MockDataQualityInterface_DeleteRefresh_Call) Return(_a0 error) *MockDataQualityInterface_DeleteRefresh_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDataQualityInterface_DeleteRefresh_Call) RunAndReturn(run func(context.Context, dataquality.DeleteRefreshRequest) error) *MockDataQualityInterface_DeleteRefresh_Call {
	_c.Call.Return(run)
	return _c
}

// GetMonitor provides a mock function with given fields: ctx, request
func (_m *MockDataQualityInterface) GetMonitor(ctx context.Context, request dataquality.GetMonitorRequest) (*dataquality.Monitor, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetMonitor")
	}

	var r0 *dataquality.Monitor
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dataquality.GetMonitorRequest) (*dataquality.Monitor, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dataquality.GetMonitorRequest) *dataquality.Monitor); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dataquality.Monitor)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dataquality.GetMonitorRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDataQualityInterface_GetMonitor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMonitor'
type MockDataQualityInterface_GetMonitor_Call struct {
	*mock.Call
}

// GetMonitor is a helper method to define mock.On call
//   - ctx context.Context
//   - request dataquality.GetMonitorRequest
func (_e *MockDataQualityInterface_Expecter) GetMonitor(ctx interface{}, request interface{}) *MockDataQualityInterface_GetMonitor_Call {
	return &MockDataQualityInterface_GetMonitor_Call{Call: _e.mock.On("GetMonitor", ctx, request)}
}

func (_c *MockDataQualityInterface_GetMonitor_Call) Run(run func(ctx context.Context, request dataquality.GetMonitorRequest)) *MockDataQualityInterface_GetMonitor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dataquality.GetMonitorRequest))
	})
	return _c
}

func (_c *MockDataQualityInterface_GetMonitor_Call) Return(_a0 *dataquality.Monitor, _a1 error) *MockDataQualityInterface_GetMonitor_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDataQualityInterface_GetMonitor_Call) RunAndReturn(run func(context.Context, dataquality.GetMonitorRequest) (*dataquality.Monitor, error)) *MockDataQualityInterface_GetMonitor_Call {
	_c.Call.Return(run)
	return _c
}

// GetRefresh provides a mock function with given fields: ctx, request
func (_m *MockDataQualityInterface) GetRefresh(ctx context.Context, request dataquality.GetRefreshRequest) (*dataquality.Refresh, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetRefresh")
	}

	var r0 *dataquality.Refresh
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dataquality.GetRefreshRequest) (*dataquality.Refresh, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dataquality.GetRefreshRequest) *dataquality.Refresh); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dataquality.Refresh)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dataquality.GetRefreshRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDataQualityInterface_GetRefresh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRefresh'
type MockDataQualityInterface_GetRefresh_Call struct {
	*mock.Call
}

// GetRefresh is a helper method to define mock.On call
//   - ctx context.Context
//   - request dataquality.GetRefreshRequest
func (_e *MockDataQualityInterface_Expecter) GetRefresh(ctx interface{}, request interface{}) *MockDataQualityInterface_GetRefresh_Call {
	return &MockDataQualityInterface_GetRefresh_Call{Call: _e.mock.On("GetRefresh", ctx, request)}
}

func (_c *MockDataQualityInterface_GetRefresh_Call) Run(run func(ctx context.Context, request dataquality.GetRefreshRequest)) *MockDataQualityInterface_GetRefresh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dataquality.GetRefreshRequest))
	})
	return _c
}

func (_c *MockDataQualityInterface_GetRefresh_Call) Return(_a0 *dataquality.Refresh, _a1 error) *MockDataQualityInterface_GetRefresh_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDataQualityInterface_GetRefresh_Call) RunAndReturn(run func(context.Context, dataquality.GetRefreshRequest) (*dataquality.Refresh, error)) *MockDataQualityInterface_GetRefresh_Call {
	_c.Call.Return(run)
	return _c
}

// ListMonitor provides a mock function with given fields: ctx, request
func (_m *MockDataQualityInterface) ListMonitor(ctx context.Context, request dataquality.ListMonitorRequest) listing.Iterator[dataquality.Monitor] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListMonitor")
	}

	var r0 listing.Iterator[dataquality.Monitor]
	if rf, ok := ret.Get(0).(func(context.Context, dataquality.ListMonitorRequest) listing.Iterator[dataquality.Monitor]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listing.Iterator[dataquality.Monitor])
		}
	}

	return r0
}

// MockDataQualityInterface_ListMonitor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListMonitor'
type MockDataQualityInterface_ListMonitor_Call struct {
	*mock.Call
}

// ListMonitor is a helper method to define mock.On call
//   - ctx context.Context
//   - request dataquality.ListMonitorRequest
func (_e *MockDataQualityInterface_Expecter) ListMonitor(ctx interface{}, request interface{}) *MockDataQualityInterface_ListMonitor_Call {
	return &MockDataQualityInterface_ListMonitor_Call{Call: _e.mock.On("ListMonitor", ctx, request)}
}

func (_c *MockDataQualityInterface_ListMonitor_Call) Run(run func(ctx context.Context, request dataquality.ListMonitorRequest)) *MockDataQualityInterface_ListMonitor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dataquality.ListMonitorRequest))
	})
	return _c
}

func (_c *MockDataQualityInterface_ListMonitor_Call) Return(_a0 listing.Iterator[dataquality.Monitor]) *MockDataQualityInterface_ListMonitor_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDataQualityInterface_ListMonitor_Call) RunAndReturn(run func(context.Context, dataquality.ListMonitorRequest) listing.Iterator[dataquality.Monitor]) *MockDataQualityInterface_ListMonitor_Call {
	_c.Call.Return(run)
	return _c
}

// ListMonitorAll provides a mock function with given fields: ctx, request
func (_m *MockDataQualityInterface) ListMonitorAll(ctx context.Context, request dataquality.ListMonitorRequest) ([]dataquality.Monitor, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListMonitorAll")
	}

	var r0 []dataquality.Monitor
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dataquality.ListMonitorRequest) ([]dataquality.Monitor, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dataquality.ListMonitorRequest) []dataquality.Monitor); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dataquality.Monitor)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dataquality.ListMonitorRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDataQualityInterface_ListMonitorAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListMonitorAll'
type MockDataQualityInterface_ListMonitorAll_Call struct {
	*mock.Call
}

// ListMonitorAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request dataquality.ListMonitorRequest
func (_e *MockDataQualityInterface_Expecter) ListMonitorAll(ctx interface{}, request interface{}) *MockDataQualityInterface_ListMonitorAll_Call {
	return &MockDataQualityInterface_ListMonitorAll_Call{Call: _e.mock.On("ListMonitorAll", ctx, request)}
}

func (_c *MockDataQualityInterface_ListMonitorAll_Call) Run(run func(ctx context.Context, request dataquality.ListMonitorRequest)) *MockDataQualityInterface_ListMonitorAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dataquality.ListMonitorRequest))
	})
	return _c
}

func (_c *MockDataQualityInterface_ListMonitorAll_Call) Return(_a0 []dataquality.Monitor, _a1 error) *MockDataQualityInterface_ListMonitorAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDataQualityInterface_ListMonitorAll_Call) RunAndReturn(run func(context.Context, dataquality.ListMonitorRequest) ([]dataquality.Monitor, error)) *MockDataQualityInterface_ListMonitorAll_Call {
	_c.Call.Return(run)
	return _c
}

// ListRefresh provides a mock function with given fields: ctx, request
func (_m *MockDataQualityInterface) ListRefresh(ctx context.Context, request dataquality.ListRefreshRequest) listing.Iterator[dataquality.Refresh] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListRefresh")
	}

	var r0 listing.Iterator[dataquality.Refresh]
	if rf, ok := ret.Get(0).(func(context.Context, dataquality.ListRefreshRequest) listing.Iterator[dataquality.Refresh]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listing.Iterator[dataquality.Refresh])
		}
	}

	return r0
}

// MockDataQualityInterface_ListRefresh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRefresh'
type MockDataQualityInterface_ListRefresh_Call struct {
	*mock.Call
}

// ListRefresh is a helper method to define mock.On call
//   - ctx context.Context
//   - request dataquality.ListRefreshRequest
func (_e *MockDataQualityInterface_Expecter) ListRefresh(ctx interface{}, request interface{}) *MockDataQualityInterface_ListRefresh_Call {
	return &MockDataQualityInterface_ListRefresh_Call{Call: _e.mock.On("ListRefresh", ctx, request)}
}

func (_c *MockDataQualityInterface_ListRefresh_Call) Run(run func(ctx context.Context, request dataquality.ListRefreshRequest)) *MockDataQualityInterface_ListRefresh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dataquality.ListRefreshRequest))
	})
	return _c
}

func (_c *MockDataQualityInterface_ListRefresh_Call) Return(_a0 listing.Iterator[dataquality.Refresh]) *MockDataQualityInterface_ListRefresh_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDataQualityInterface_ListRefresh_Call) RunAndReturn(run func(context.Context, dataquality.ListRefreshRequest) listing.Iterator[dataquality.Refresh]) *MockDataQualityInterface_ListRefresh_Call {
	_c.Call.Return(run)
	return _c
}

// ListRefreshAll provides a mock function with given fields: ctx, request
func (_m *MockDataQualityInterface) ListRefreshAll(ctx context.Context, request dataquality.ListRefreshRequest) ([]dataquality.Refresh, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListRefreshAll")
	}

	var r0 []dataquality.Refresh
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dataquality.ListRefreshRequest) ([]dataquality.Refresh, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dataquality.ListRefreshRequest) []dataquality.Refresh); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dataquality.Refresh)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dataquality.ListRefreshRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDataQualityInterface_ListRefreshAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRefreshAll'
type MockDataQualityInterface_ListRefreshAll_Call struct {
	*mock.Call
}

// ListRefreshAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request dataquality.ListRefreshRequest
func (_e *MockDataQualityInterface_Expecter) ListRefreshAll(ctx interface{}, request interface{}) *MockDataQualityInterface_ListRefreshAll_Call {
	return &MockDataQualityInterface_ListRefreshAll_Call{Call: _e.mock.On("ListRefreshAll", ctx, request)}
}

func (_c *MockDataQualityInterface_ListRefreshAll_Call) Run(run func(ctx context.Context, request dataquality.ListRefreshRequest)) *MockDataQualityInterface_ListRefreshAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dataquality.ListRefreshRequest))
	})
	return _c
}

func (_c *MockDataQualityInterface_ListRefreshAll_Call) Return(_a0 []dataquality.Refresh, _a1 error) *MockDataQualityInterface_ListRefreshAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDataQualityInterface_ListRefreshAll_Call) RunAndReturn(run func(context.Context, dataquality.ListRefreshRequest) ([]dataquality.Refresh, error)) *MockDataQualityInterface_ListRefreshAll_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateMonitor provides a mock function with given fields: ctx, request
func (_m *MockDataQualityInterface) UpdateMonitor(ctx context.Context, request dataquality.UpdateMonitorRequest) (*dataquality.Monitor, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMonitor")
	}

	var r0 *dataquality.Monitor
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dataquality.UpdateMonitorRequest) (*dataquality.Monitor, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dataquality.UpdateMonitorRequest) *dataquality.Monitor); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dataquality.Monitor)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dataquality.UpdateMonitorRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDataQualityInterface_UpdateMonitor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateMonitor'
type MockDataQualityInterface_UpdateMonitor_Call struct {
	*mock.Call
}

// UpdateMonitor is a helper method to define mock.On call
//   - ctx context.Context
//   - request dataquality.UpdateMonitorRequest
func (_e *MockDataQualityInterface_Expecter) UpdateMonitor(ctx interface{}, request interface{}) *MockDataQualityInterface_UpdateMonitor_Call {
	return &MockDataQualityInterface_UpdateMonitor_Call{Call: _e.mock.On("UpdateMonitor", ctx, request)}
}

func (_c *MockDataQualityInterface_UpdateMonitor_Call) Run(run func(ctx context.Context, request dataquality.UpdateMonitorRequest)) *MockDataQualityInterface_UpdateMonitor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dataquality.UpdateMonitorRequest))
	})
	return _c
}

func (_c *MockDataQualityInterface_UpdateMonitor_Call) Return(_a0 *dataquality.Monitor, _a1 error) *MockDataQualityInterface_UpdateMonitor_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDataQualityInterface_UpdateMonitor_Call) RunAndReturn(run func(context.Context, dataquality.UpdateMonitorRequest) (*dataquality.Monitor, error)) *MockDataQualityInterface_UpdateMonitor_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRefresh provides a mock function with given fields: ctx, request
func (_m *MockDataQualityInterface) UpdateRefresh(ctx context.Context, request dataquality.UpdateRefreshRequest) (*dataquality.Refresh, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRefresh")
	}

	var r0 *dataquality.Refresh
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dataquality.UpdateRefreshRequest) (*dataquality.Refresh, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dataquality.UpdateRefreshRequest) *dataquality.Refresh); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dataquality.Refresh)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dataquality.UpdateRefreshRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDataQualityInterface_UpdateRefresh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRefresh'
type MockDataQualityInterface_UpdateRefresh_Call struct {
	*mock.Call
}

// UpdateRefresh is a helper method to define mock.On call
//   - ctx context.Context
//   - request dataquality.UpdateRefreshRequest
func (_e *MockDataQualityInterface_Expecter) UpdateRefresh(ctx interface{}, request interface{}) *MockDataQualityInterface_UpdateRefresh_Call {
	return &MockDataQualityInterface_UpdateRefresh_Call{Call: _e.mock.On("UpdateRefresh", ctx, request)}
}

func (_c *MockDataQualityInterface_UpdateRefresh_Call) Run(run func(ctx context.Context, request dataquality.UpdateRefreshRequest)) *MockDataQualityInterface_UpdateRefresh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dataquality.UpdateRefreshRequest))
	})
	return _c
}

func (_c *MockDataQualityInterface_UpdateRefresh_Call) Return(_a0 *dataquality.Refresh, _a1 error) *MockDataQualityInterface_UpdateRefresh_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDataQualityInterface_UpdateRefresh_Call) RunAndReturn(run func(context.Context, dataquality.UpdateRefreshRequest) (*dataquality.Refresh, error)) *MockDataQualityInterface_UpdateRefresh_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDataQualityInterface creates a new instance of MockDataQualityInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDataQualityInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDataQualityInterface {
	mock := &MockDataQualityInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
