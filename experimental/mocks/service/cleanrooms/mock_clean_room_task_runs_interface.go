// Code generated by mockery v2.43.0. DO NOT EDIT.

package cleanrooms

import (
	context "context"

	cleanrooms "github.com/databricks/databricks-sdk-go/service/cleanrooms"

	listing "github.com/databricks/databricks-sdk-go/listing"

	mock "github.com/stretchr/testify/mock"
)

// MockCleanRoomTaskRunsInterface is an autogenerated mock type for the CleanRoomTaskRunsInterface type
type MockCleanRoomTaskRunsInterface struct {
	mock.Mock
}

type MockCleanRoomTaskRunsInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCleanRoomTaskRunsInterface) EXPECT() *MockCleanRoomTaskRunsInterface_Expecter {
	return &MockCleanRoomTaskRunsInterface_Expecter{mock: &_m.Mock}
}

// List provides a mock function with given fields: ctx, request
func (_m *MockCleanRoomTaskRunsInterface) List(ctx context.Context, request cleanrooms.ListCleanRoomNotebookTaskRunsRequest) listing.Iterator[cleanrooms.CleanRoomNotebookTaskRun] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 listing.Iterator[cleanrooms.CleanRoomNotebookTaskRun]
	if rf, ok := ret.Get(0).(func(context.Context, cleanrooms.ListCleanRoomNotebookTaskRunsRequest) listing.Iterator[cleanrooms.CleanRoomNotebookTaskRun]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listing.Iterator[cleanrooms.CleanRoomNotebookTaskRun])
		}
	}

	return r0
}

// MockCleanRoomTaskRunsInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockCleanRoomTaskRunsInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - request cleanrooms.ListCleanRoomNotebookTaskRunsRequest
func (_e *MockCleanRoomTaskRunsInterface_Expecter) List(ctx interface{}, request interface{}) *MockCleanRoomTaskRunsInterface_List_Call {
	return &MockCleanRoomTaskRunsInterface_List_Call{Call: _e.mock.On("List", ctx, request)}
}

func (_c *MockCleanRoomTaskRunsInterface_List_Call) Run(run func(ctx context.Context, request cleanrooms.ListCleanRoomNotebookTaskRunsRequest)) *MockCleanRoomTaskRunsInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(cleanrooms.ListCleanRoomNotebookTaskRunsRequest))
	})
	return _c
}

func (_c *MockCleanRoomTaskRunsInterface_List_Call) Return(_a0 listing.Iterator[cleanrooms.CleanRoomNotebookTaskRun]) *MockCleanRoomTaskRunsInterface_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCleanRoomTaskRunsInterface_List_Call) RunAndReturn(run func(context.Context, cleanrooms.ListCleanRoomNotebookTaskRunsRequest) listing.Iterator[cleanrooms.CleanRoomNotebookTaskRun]) *MockCleanRoomTaskRunsInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListAll provides a mock function with given fields: ctx, request
func (_m *MockCleanRoomTaskRunsInterface) ListAll(ctx context.Context, request cleanrooms.ListCleanRoomNotebookTaskRunsRequest) ([]cleanrooms.CleanRoomNotebookTaskRun, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListAll")
	}

	var r0 []cleanrooms.CleanRoomNotebookTaskRun
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, cleanrooms.ListCleanRoomNotebookTaskRunsRequest) ([]cleanrooms.CleanRoomNotebookTaskRun, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, cleanrooms.ListCleanRoomNotebookTaskRunsRequest) []cleanrooms.CleanRoomNotebookTaskRun); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]cleanrooms.CleanRoomNotebookTaskRun)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, cleanrooms.ListCleanRoomNotebookTaskRunsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCleanRoomTaskRunsInterface_ListAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAll'
type MockCleanRoomTaskRunsInterface_ListAll_Call struct {
	*mock.Call
}

// ListAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request cleanrooms.ListCleanRoomNotebookTaskRunsRequest
func (_e *MockCleanRoomTaskRunsInterface_Expecter) ListAll(ctx interface{}, request interface{}) *MockCleanRoomTaskRunsInterface_ListAll_Call {
	return &MockCleanRoomTaskRunsInterface_ListAll_Call{Call: _e.mock.On("ListAll", ctx, request)}
}

func (_c *MockCleanRoomTaskRunsInterface_ListAll_Call) Run(run func(ctx context.Context, request cleanrooms.ListCleanRoomNotebookTaskRunsRequest)) *MockCleanRoomTaskRunsInterface_ListAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(cleanrooms.ListCleanRoomNotebookTaskRunsRequest))
	})
	return _c
}

func (_c *MockCleanRoomTaskRunsInterface_ListAll_Call) Return(_a0 []cleanrooms.CleanRoomNotebookTaskRun, _a1 error) *MockCleanRoomTaskRunsInterface_ListAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCleanRoomTaskRunsInterface_ListAll_Call) RunAndReturn(run func(context.Context, cleanrooms.ListCleanRoomNotebookTaskRunsRequest) ([]cleanrooms.CleanRoomNotebookTaskRun, error)) *MockCleanRoomTaskRunsInterface_ListAll_Call {
	_c.Call.Return(run)
	return _c
}

// ListByCleanRoomName provides a mock function with given fields: ctx, cleanRoomName
func (_m *MockCleanRoomTaskRunsInterface) ListByCleanRoomName(ctx context.Context, cleanRoomName string) (*cleanrooms.ListCleanRoomNotebookTaskRunsResponse, error) {
	ret := _m.Called(ctx, cleanRoomName)

	if len(ret) == 0 {
		panic("no return value specified for ListByCleanRoomName")
	}

	var r0 *cleanrooms.ListCleanRoomNotebookTaskRunsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*cleanrooms.ListCleanRoomNotebookTaskRunsResponse, error)); ok {
		return rf(ctx, cleanRoomName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *cleanrooms.ListCleanRoomNotebookTaskRunsResponse); ok {
		r0 = rf(ctx, cleanRoomName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanrooms.ListCleanRoomNotebookTaskRunsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, cleanRoomName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCleanRoomTaskRunsInterface_ListByCleanRoomName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByCleanRoomName'
type MockCleanRoomTaskRunsInterface_ListByCleanRoomName_Call struct {
	*mock.Call
}

// ListByCleanRoomName is a helper method to define mock.On call
//   - ctx context.Context
//   - cleanRoomName string
func (_e *MockCleanRoomTaskRunsInterface_Expecter) ListByCleanRoomName(ctx interface{}, cleanRoomName interface{}) *MockCleanRoomTaskRunsInterface_ListByCleanRoomName_Call {
	return &MockCleanRoomTaskRunsInterface_ListByCleanRoomName_Call{Call: _e.mock.On("ListByCleanRoomName", ctx, cleanRoomName)}
}

func (_c *MockCleanRoomTaskRunsInterface_ListByCleanRoomName_Call) Run(run func(ctx context.Context, cleanRoomName string)) *MockCleanRoomTaskRunsInterface_ListByCleanRoomName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockCleanRoomTaskRunsInterface_ListByCleanRoomName_Call) Return(_a0 *cleanrooms.ListCleanRoomNotebookTaskRunsResponse, _a1 error) *MockCleanRoomTaskRunsInterface_ListByCleanRoomName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCleanRoomTaskRunsInterface_ListByCleanRoomName_Call) RunAndReturn(run func(context.Context, string) (*cleanrooms.ListCleanRoomNotebookTaskRunsResponse, error)) *MockCleanRoomTaskRunsInterface_ListByCleanRoomName_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCleanRoomTaskRunsInterface creates a new instance of MockCleanRoomTaskRunsInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCleanRoomTaskRunsInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCleanRoomTaskRunsInterface {
	mock := &MockCleanRoomTaskRunsInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
