// Code generated by mockery v2.53.2. DO NOT EDIT.

package cleanrooms

import (
	context "context"

	cleanrooms "github.com/databricks/databricks-sdk-go/service/cleanrooms"

	listing "github.com/databricks/databricks-sdk-go/listing"

	mock "github.com/stretchr/testify/mock"
)

// MockCleanRoomsInterface is an autogenerated mock type for the CleanRoomsInterface type
type MockCleanRoomsInterface struct {
	mock.Mock
}

type MockCleanRoomsInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCleanRoomsInterface) EXPECT() *MockCleanRoomsInterface_Expecter {
	return &MockCleanRoomsInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, request
func (_m *MockCleanRoomsInterface) Create(ctx context.Context, request cleanrooms.CreateCleanRoomRequest) (*cleanrooms.CleanRoom, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *cleanrooms.CleanRoom
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, cleanrooms.CreateCleanRoomRequest) (*cleanrooms.CleanRoom, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, cleanrooms.CreateCleanRoomRequest) *cleanrooms.CleanRoom); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanrooms.CleanRoom)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, cleanrooms.CreateCleanRoomRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCleanRoomsInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockCleanRoomsInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - request cleanrooms.CreateCleanRoomRequest
func (_e *MockCleanRoomsInterface_Expecter) Create(ctx interface{}, request interface{}) *MockCleanRoomsInterface_Create_Call {
	return &MockCleanRoomsInterface_Create_Call{Call: _e.mock.On("Create", ctx, request)}
}

func (_c *MockCleanRoomsInterface_Create_Call) Run(run func(ctx context.Context, request cleanrooms.CreateCleanRoomRequest)) *MockCleanRoomsInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(cleanrooms.CreateCleanRoomRequest))
	})
	return _c
}

func (_c *MockCleanRoomsInterface_Create_Call) Return(_a0 *cleanrooms.CleanRoom, _a1 error) *MockCleanRoomsInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCleanRoomsInterface_Create_Call) RunAndReturn(run func(context.Context, cleanrooms.CreateCleanRoomRequest) (*cleanrooms.CleanRoom, error)) *MockCleanRoomsInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOutputCatalog provides a mock function with given fields: ctx, request
func (_m *MockCleanRoomsInterface) CreateOutputCatalog(ctx context.Context, request cleanrooms.CreateCleanRoomOutputCatalogRequest) (*cleanrooms.CreateCleanRoomOutputCatalogResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateOutputCatalog")
	}

	var r0 *cleanrooms.CreateCleanRoomOutputCatalogResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, cleanrooms.CreateCleanRoomOutputCatalogRequest) (*cleanrooms.CreateCleanRoomOutputCatalogResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, cleanrooms.CreateCleanRoomOutputCatalogRequest) *cleanrooms.CreateCleanRoomOutputCatalogResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanrooms.CreateCleanRoomOutputCatalogResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, cleanrooms.CreateCleanRoomOutputCatalogRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCleanRoomsInterface_CreateOutputCatalog_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOutputCatalog'
type MockCleanRoomsInterface_CreateOutputCatalog_Call struct {
	*mock.Call
}

// CreateOutputCatalog is a helper method to define mock.On call
//   - ctx context.Context
//   - request cleanrooms.CreateCleanRoomOutputCatalogRequest
func (_e *MockCleanRoomsInterface_Expecter) CreateOutputCatalog(ctx interface{}, request interface{}) *MockCleanRoomsInterface_CreateOutputCatalog_Call {
	return &MockCleanRoomsInterface_CreateOutputCatalog_Call{Call: _e.mock.On("CreateOutputCatalog", ctx, request)}
}

func (_c *MockCleanRoomsInterface_CreateOutputCatalog_Call) Run(run func(ctx context.Context, request cleanrooms.CreateCleanRoomOutputCatalogRequest)) *MockCleanRoomsInterface_CreateOutputCatalog_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(cleanrooms.CreateCleanRoomOutputCatalogRequest))
	})
	return _c
}

func (_c *MockCleanRoomsInterface_CreateOutputCatalog_Call) Return(_a0 *cleanrooms.CreateCleanRoomOutputCatalogResponse, _a1 error) *MockCleanRoomsInterface_CreateOutputCatalog_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCleanRoomsInterface_CreateOutputCatalog_Call) RunAndReturn(run func(context.Context, cleanrooms.CreateCleanRoomOutputCatalogRequest) (*cleanrooms.CreateCleanRoomOutputCatalogResponse, error)) *MockCleanRoomsInterface_CreateOutputCatalog_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, request
func (_m *MockCleanRoomsInterface) Delete(ctx context.Context, request cleanrooms.DeleteCleanRoomRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, cleanrooms.DeleteCleanRoomRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCleanRoomsInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockCleanRoomsInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - request cleanrooms.DeleteCleanRoomRequest
func (_e *MockCleanRoomsInterface_Expecter) Delete(ctx interface{}, request interface{}) *MockCleanRoomsInterface_Delete_Call {
	return &MockCleanRoomsInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, request)}
}

func (_c *MockCleanRoomsInterface_Delete_Call) Run(run func(ctx context.Context, request cleanrooms.DeleteCleanRoomRequest)) *MockCleanRoomsInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(cleanrooms.DeleteCleanRoomRequest))
	})
	return _c
}

func (_c *MockCleanRoomsInterface_Delete_Call) Return(_a0 error) *MockCleanRoomsInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCleanRoomsInterface_Delete_Call) RunAndReturn(run func(context.Context, cleanrooms.DeleteCleanRoomRequest) error) *MockCleanRoomsInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByName provides a mock function with given fields: ctx, name
func (_m *MockCleanRoomsInterface) DeleteByName(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByName")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCleanRoomsInterface_DeleteByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByName'
type MockCleanRoomsInterface_DeleteByName_Call struct {
	*mock.Call
}

// DeleteByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockCleanRoomsInterface_Expecter) DeleteByName(ctx interface{}, name interface{}) *MockCleanRoomsInterface_DeleteByName_Call {
	return &MockCleanRoomsInterface_DeleteByName_Call{Call: _e.mock.On("DeleteByName", ctx, name)}
}

func (_c *MockCleanRoomsInterface_DeleteByName_Call) Run(run func(ctx context.Context, name string)) *MockCleanRoomsInterface_DeleteByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockCleanRoomsInterface_DeleteByName_Call) Return(_a0 error) *MockCleanRoomsInterface_DeleteByName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCleanRoomsInterface_DeleteByName_Call) RunAndReturn(run func(context.Context, string) error) *MockCleanRoomsInterface_DeleteByName_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, request
func (_m *MockCleanRoomsInterface) Get(ctx context.Context, request cleanrooms.GetCleanRoomRequest) (*cleanrooms.CleanRoom, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *cleanrooms.CleanRoom
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, cleanrooms.GetCleanRoomRequest) (*cleanrooms.CleanRoom, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, cleanrooms.GetCleanRoomRequest) *cleanrooms.CleanRoom); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanrooms.CleanRoom)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, cleanrooms.GetCleanRoomRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCleanRoomsInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockCleanRoomsInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - request cleanrooms.GetCleanRoomRequest
func (_e *MockCleanRoomsInterface_Expecter) Get(ctx interface{}, request interface{}) *MockCleanRoomsInterface_Get_Call {
	return &MockCleanRoomsInterface_Get_Call{Call: _e.mock.On("Get", ctx, request)}
}

func (_c *MockCleanRoomsInterface_Get_Call) Run(run func(ctx context.Context, request cleanrooms.GetCleanRoomRequest)) *MockCleanRoomsInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(cleanrooms.GetCleanRoomRequest))
	})
	return _c
}

func (_c *MockCleanRoomsInterface_Get_Call) Return(_a0 *cleanrooms.CleanRoom, _a1 error) *MockCleanRoomsInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCleanRoomsInterface_Get_Call) RunAndReturn(run func(context.Context, cleanrooms.GetCleanRoomRequest) (*cleanrooms.CleanRoom, error)) *MockCleanRoomsInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByName provides a mock function with given fields: ctx, name
func (_m *MockCleanRoomsInterface) GetByName(ctx context.Context, name string) (*cleanrooms.CleanRoom, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetByName")
	}

	var r0 *cleanrooms.CleanRoom
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*cleanrooms.CleanRoom, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *cleanrooms.CleanRoom); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanrooms.CleanRoom)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCleanRoomsInterface_GetByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByName'
type MockCleanRoomsInterface_GetByName_Call struct {
	*mock.Call
}

// GetByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockCleanRoomsInterface_Expecter) GetByName(ctx interface{}, name interface{}) *MockCleanRoomsInterface_GetByName_Call {
	return &MockCleanRoomsInterface_GetByName_Call{Call: _e.mock.On("GetByName", ctx, name)}
}

func (_c *MockCleanRoomsInterface_GetByName_Call) Run(run func(ctx context.Context, name string)) *MockCleanRoomsInterface_GetByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockCleanRoomsInterface_GetByName_Call) Return(_a0 *cleanrooms.CleanRoom, _a1 error) *MockCleanRoomsInterface_GetByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCleanRoomsInterface_GetByName_Call) RunAndReturn(run func(context.Context, string) (*cleanrooms.CleanRoom, error)) *MockCleanRoomsInterface_GetByName_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, request
func (_m *MockCleanRoomsInterface) List(ctx context.Context, request cleanrooms.ListCleanRoomsRequest) listing.Iterator[cleanrooms.CleanRoom] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 listing.Iterator[cleanrooms.CleanRoom]
	if rf, ok := ret.Get(0).(func(context.Context, cleanrooms.ListCleanRoomsRequest) listing.Iterator[cleanrooms.CleanRoom]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listing.Iterator[cleanrooms.CleanRoom])
		}
	}

	return r0
}

// MockCleanRoomsInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockCleanRoomsInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - request cleanrooms.ListCleanRoomsRequest
func (_e *MockCleanRoomsInterface_Expecter) List(ctx interface{}, request interface{}) *MockCleanRoomsInterface_List_Call {
	return &MockCleanRoomsInterface_List_Call{Call: _e.mock.On("List", ctx, request)}
}

func (_c *MockCleanRoomsInterface_List_Call) Run(run func(ctx context.Context, request cleanrooms.ListCleanRoomsRequest)) *MockCleanRoomsInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(cleanrooms.ListCleanRoomsRequest))
	})
	return _c
}

func (_c *MockCleanRoomsInterface_List_Call) Return(_a0 listing.Iterator[cleanrooms.CleanRoom]) *MockCleanRoomsInterface_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCleanRoomsInterface_List_Call) RunAndReturn(run func(context.Context, cleanrooms.ListCleanRoomsRequest) listing.Iterator[cleanrooms.CleanRoom]) *MockCleanRoomsInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListAll provides a mock function with given fields: ctx, request
func (_m *MockCleanRoomsInterface) ListAll(ctx context.Context, request cleanrooms.ListCleanRoomsRequest) ([]cleanrooms.CleanRoom, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListAll")
	}

	var r0 []cleanrooms.CleanRoom
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, cleanrooms.ListCleanRoomsRequest) ([]cleanrooms.CleanRoom, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, cleanrooms.ListCleanRoomsRequest) []cleanrooms.CleanRoom); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]cleanrooms.CleanRoom)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, cleanrooms.ListCleanRoomsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCleanRoomsInterface_ListAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAll'
type MockCleanRoomsInterface_ListAll_Call struct {
	*mock.Call
}

// ListAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request cleanrooms.ListCleanRoomsRequest
func (_e *MockCleanRoomsInterface_Expecter) ListAll(ctx interface{}, request interface{}) *MockCleanRoomsInterface_ListAll_Call {
	return &MockCleanRoomsInterface_ListAll_Call{Call: _e.mock.On("ListAll", ctx, request)}
}

func (_c *MockCleanRoomsInterface_ListAll_Call) Run(run func(ctx context.Context, request cleanrooms.ListCleanRoomsRequest)) *MockCleanRoomsInterface_ListAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(cleanrooms.ListCleanRoomsRequest))
	})
	return _c
}

func (_c *MockCleanRoomsInterface_ListAll_Call) Return(_a0 []cleanrooms.CleanRoom, _a1 error) *MockCleanRoomsInterface_ListAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCleanRoomsInterface_ListAll_Call) RunAndReturn(run func(context.Context, cleanrooms.ListCleanRoomsRequest) ([]cleanrooms.CleanRoom, error)) *MockCleanRoomsInterface_ListAll_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, request
func (_m *MockCleanRoomsInterface) Update(ctx context.Context, request cleanrooms.UpdateCleanRoomRequest) (*cleanrooms.CleanRoom, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *cleanrooms.CleanRoom
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, cleanrooms.UpdateCleanRoomRequest) (*cleanrooms.CleanRoom, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, cleanrooms.UpdateCleanRoomRequest) *cleanrooms.CleanRoom); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanrooms.CleanRoom)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, cleanrooms.UpdateCleanRoomRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCleanRoomsInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockCleanRoomsInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - request cleanrooms.UpdateCleanRoomRequest
func (_e *MockCleanRoomsInterface_Expecter) Update(ctx interface{}, request interface{}) *MockCleanRoomsInterface_Update_Call {
	return &MockCleanRoomsInterface_Update_Call{Call: _e.mock.On("Update", ctx, request)}
}

func (_c *MockCleanRoomsInterface_Update_Call) Run(run func(ctx context.Context, request cleanrooms.UpdateCleanRoomRequest)) *MockCleanRoomsInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(cleanrooms.UpdateCleanRoomRequest))
	})
	return _c
}

func (_c *MockCleanRoomsInterface_Update_Call) Return(_a0 *cleanrooms.CleanRoom, _a1 error) *MockCleanRoomsInterface_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCleanRoomsInterface_Update_Call) RunAndReturn(run func(context.Context, cleanrooms.UpdateCleanRoomRequest) (*cleanrooms.CleanRoom, error)) *MockCleanRoomsInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCleanRoomsInterface creates a new instance of MockCleanRoomsInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCleanRoomsInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCleanRoomsInterface {
	mock := &MockCleanRoomsInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
