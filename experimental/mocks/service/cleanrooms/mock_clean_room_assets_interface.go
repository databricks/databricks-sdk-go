// Code generated by mockery v2.53.2. DO NOT EDIT.

package cleanrooms

import (
	context "context"

	cleanrooms "github.com/databricks/databricks-sdk-go/service/cleanrooms"

	listing "github.com/databricks/databricks-sdk-go/listing"

	mock "github.com/stretchr/testify/mock"
)

// MockCleanRoomAssetsInterface is an autogenerated mock type for the CleanRoomAssetsInterface type
type MockCleanRoomAssetsInterface struct {
	mock.Mock
}

type MockCleanRoomAssetsInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCleanRoomAssetsInterface) EXPECT() *MockCleanRoomAssetsInterface_Expecter {
	return &MockCleanRoomAssetsInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, request
func (_m *MockCleanRoomAssetsInterface) Create(ctx context.Context, request cleanrooms.CreateCleanRoomAssetRequest) (*cleanrooms.CleanRoomAsset, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *cleanrooms.CleanRoomAsset
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, cleanrooms.CreateCleanRoomAssetRequest) (*cleanrooms.CleanRoomAsset, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, cleanrooms.CreateCleanRoomAssetRequest) *cleanrooms.CleanRoomAsset); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanrooms.CleanRoomAsset)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, cleanrooms.CreateCleanRoomAssetRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCleanRoomAssetsInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockCleanRoomAssetsInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - request cleanrooms.CreateCleanRoomAssetRequest
func (_e *MockCleanRoomAssetsInterface_Expecter) Create(ctx interface{}, request interface{}) *MockCleanRoomAssetsInterface_Create_Call {
	return &MockCleanRoomAssetsInterface_Create_Call{Call: _e.mock.On("Create", ctx, request)}
}

func (_c *MockCleanRoomAssetsInterface_Create_Call) Run(run func(ctx context.Context, request cleanrooms.CreateCleanRoomAssetRequest)) *MockCleanRoomAssetsInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(cleanrooms.CreateCleanRoomAssetRequest))
	})
	return _c
}

func (_c *MockCleanRoomAssetsInterface_Create_Call) Return(_a0 *cleanrooms.CleanRoomAsset, _a1 error) *MockCleanRoomAssetsInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCleanRoomAssetsInterface_Create_Call) RunAndReturn(run func(context.Context, cleanrooms.CreateCleanRoomAssetRequest) (*cleanrooms.CleanRoomAsset, error)) *MockCleanRoomAssetsInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, request
func (_m *MockCleanRoomAssetsInterface) Delete(ctx context.Context, request cleanrooms.DeleteCleanRoomAssetRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, cleanrooms.DeleteCleanRoomAssetRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCleanRoomAssetsInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockCleanRoomAssetsInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - request cleanrooms.DeleteCleanRoomAssetRequest
func (_e *MockCleanRoomAssetsInterface_Expecter) Delete(ctx interface{}, request interface{}) *MockCleanRoomAssetsInterface_Delete_Call {
	return &MockCleanRoomAssetsInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, request)}
}

func (_c *MockCleanRoomAssetsInterface_Delete_Call) Run(run func(ctx context.Context, request cleanrooms.DeleteCleanRoomAssetRequest)) *MockCleanRoomAssetsInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(cleanrooms.DeleteCleanRoomAssetRequest))
	})
	return _c
}

func (_c *MockCleanRoomAssetsInterface_Delete_Call) Return(_a0 error) *MockCleanRoomAssetsInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCleanRoomAssetsInterface_Delete_Call) RunAndReturn(run func(context.Context, cleanrooms.DeleteCleanRoomAssetRequest) error) *MockCleanRoomAssetsInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByCleanRoomNameAndAssetTypeAndAssetFullName provides a mock function with given fields: ctx, cleanRoomName, assetType, assetFullName
func (_m *MockCleanRoomAssetsInterface) DeleteByCleanRoomNameAndAssetTypeAndAssetFullName(ctx context.Context, cleanRoomName string, assetType cleanrooms.CleanRoomAssetAssetType, assetFullName string) error {
	ret := _m.Called(ctx, cleanRoomName, assetType, assetFullName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByCleanRoomNameAndAssetTypeAndAssetFullName")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, cleanrooms.CleanRoomAssetAssetType, string) error); ok {
		r0 = rf(ctx, cleanRoomName, assetType, assetFullName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCleanRoomAssetsInterface_DeleteByCleanRoomNameAndAssetTypeAndAssetFullName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByCleanRoomNameAndAssetTypeAndAssetFullName'
type MockCleanRoomAssetsInterface_DeleteByCleanRoomNameAndAssetTypeAndAssetFullName_Call struct {
	*mock.Call
}

// DeleteByCleanRoomNameAndAssetTypeAndAssetFullName is a helper method to define mock.On call
//   - ctx context.Context
//   - cleanRoomName string
//   - assetType cleanrooms.CleanRoomAssetAssetType
//   - assetFullName string
func (_e *MockCleanRoomAssetsInterface_Expecter) DeleteByCleanRoomNameAndAssetTypeAndAssetFullName(ctx interface{}, cleanRoomName interface{}, assetType interface{}, assetFullName interface{}) *MockCleanRoomAssetsInterface_DeleteByCleanRoomNameAndAssetTypeAndAssetFullName_Call {
	return &MockCleanRoomAssetsInterface_DeleteByCleanRoomNameAndAssetTypeAndAssetFullName_Call{Call: _e.mock.On("DeleteByCleanRoomNameAndAssetTypeAndAssetFullName", ctx, cleanRoomName, assetType, assetFullName)}
}

func (_c *MockCleanRoomAssetsInterface_DeleteByCleanRoomNameAndAssetTypeAndAssetFullName_Call) Run(run func(ctx context.Context, cleanRoomName string, assetType cleanrooms.CleanRoomAssetAssetType, assetFullName string)) *MockCleanRoomAssetsInterface_DeleteByCleanRoomNameAndAssetTypeAndAssetFullName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(cleanrooms.CleanRoomAssetAssetType), args[3].(string))
	})
	return _c
}

func (_c *MockCleanRoomAssetsInterface_DeleteByCleanRoomNameAndAssetTypeAndAssetFullName_Call) Return(_a0 error) *MockCleanRoomAssetsInterface_DeleteByCleanRoomNameAndAssetTypeAndAssetFullName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCleanRoomAssetsInterface_DeleteByCleanRoomNameAndAssetTypeAndAssetFullName_Call) RunAndReturn(run func(context.Context, string, cleanrooms.CleanRoomAssetAssetType, string) error) *MockCleanRoomAssetsInterface_DeleteByCleanRoomNameAndAssetTypeAndAssetFullName_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, request
func (_m *MockCleanRoomAssetsInterface) Get(ctx context.Context, request cleanrooms.GetCleanRoomAssetRequest) (*cleanrooms.CleanRoomAsset, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *cleanrooms.CleanRoomAsset
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, cleanrooms.GetCleanRoomAssetRequest) (*cleanrooms.CleanRoomAsset, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, cleanrooms.GetCleanRoomAssetRequest) *cleanrooms.CleanRoomAsset); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanrooms.CleanRoomAsset)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, cleanrooms.GetCleanRoomAssetRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCleanRoomAssetsInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockCleanRoomAssetsInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - request cleanrooms.GetCleanRoomAssetRequest
func (_e *MockCleanRoomAssetsInterface_Expecter) Get(ctx interface{}, request interface{}) *MockCleanRoomAssetsInterface_Get_Call {
	return &MockCleanRoomAssetsInterface_Get_Call{Call: _e.mock.On("Get", ctx, request)}
}

func (_c *MockCleanRoomAssetsInterface_Get_Call) Run(run func(ctx context.Context, request cleanrooms.GetCleanRoomAssetRequest)) *MockCleanRoomAssetsInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(cleanrooms.GetCleanRoomAssetRequest))
	})
	return _c
}

func (_c *MockCleanRoomAssetsInterface_Get_Call) Return(_a0 *cleanrooms.CleanRoomAsset, _a1 error) *MockCleanRoomAssetsInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCleanRoomAssetsInterface_Get_Call) RunAndReturn(run func(context.Context, cleanrooms.GetCleanRoomAssetRequest) (*cleanrooms.CleanRoomAsset, error)) *MockCleanRoomAssetsInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByCleanRoomNameAndAssetTypeAndAssetFullName provides a mock function with given fields: ctx, cleanRoomName, assetType, assetFullName
func (_m *MockCleanRoomAssetsInterface) GetByCleanRoomNameAndAssetTypeAndAssetFullName(ctx context.Context, cleanRoomName string, assetType cleanrooms.CleanRoomAssetAssetType, assetFullName string) (*cleanrooms.CleanRoomAsset, error) {
	ret := _m.Called(ctx, cleanRoomName, assetType, assetFullName)

	if len(ret) == 0 {
		panic("no return value specified for GetByCleanRoomNameAndAssetTypeAndAssetFullName")
	}

	var r0 *cleanrooms.CleanRoomAsset
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, cleanrooms.CleanRoomAssetAssetType, string) (*cleanrooms.CleanRoomAsset, error)); ok {
		return rf(ctx, cleanRoomName, assetType, assetFullName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, cleanrooms.CleanRoomAssetAssetType, string) *cleanrooms.CleanRoomAsset); ok {
		r0 = rf(ctx, cleanRoomName, assetType, assetFullName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanrooms.CleanRoomAsset)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, cleanrooms.CleanRoomAssetAssetType, string) error); ok {
		r1 = rf(ctx, cleanRoomName, assetType, assetFullName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCleanRoomAssetsInterface_GetByCleanRoomNameAndAssetTypeAndAssetFullName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByCleanRoomNameAndAssetTypeAndAssetFullName'
type MockCleanRoomAssetsInterface_GetByCleanRoomNameAndAssetTypeAndAssetFullName_Call struct {
	*mock.Call
}

// GetByCleanRoomNameAndAssetTypeAndAssetFullName is a helper method to define mock.On call
//   - ctx context.Context
//   - cleanRoomName string
//   - assetType cleanrooms.CleanRoomAssetAssetType
//   - assetFullName string
func (_e *MockCleanRoomAssetsInterface_Expecter) GetByCleanRoomNameAndAssetTypeAndAssetFullName(ctx interface{}, cleanRoomName interface{}, assetType interface{}, assetFullName interface{}) *MockCleanRoomAssetsInterface_GetByCleanRoomNameAndAssetTypeAndAssetFullName_Call {
	return &MockCleanRoomAssetsInterface_GetByCleanRoomNameAndAssetTypeAndAssetFullName_Call{Call: _e.mock.On("GetByCleanRoomNameAndAssetTypeAndAssetFullName", ctx, cleanRoomName, assetType, assetFullName)}
}

func (_c *MockCleanRoomAssetsInterface_GetByCleanRoomNameAndAssetTypeAndAssetFullName_Call) Run(run func(ctx context.Context, cleanRoomName string, assetType cleanrooms.CleanRoomAssetAssetType, assetFullName string)) *MockCleanRoomAssetsInterface_GetByCleanRoomNameAndAssetTypeAndAssetFullName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(cleanrooms.CleanRoomAssetAssetType), args[3].(string))
	})
	return _c
}

func (_c *MockCleanRoomAssetsInterface_GetByCleanRoomNameAndAssetTypeAndAssetFullName_Call) Return(_a0 *cleanrooms.CleanRoomAsset, _a1 error) *MockCleanRoomAssetsInterface_GetByCleanRoomNameAndAssetTypeAndAssetFullName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCleanRoomAssetsInterface_GetByCleanRoomNameAndAssetTypeAndAssetFullName_Call) RunAndReturn(run func(context.Context, string, cleanrooms.CleanRoomAssetAssetType, string) (*cleanrooms.CleanRoomAsset, error)) *MockCleanRoomAssetsInterface_GetByCleanRoomNameAndAssetTypeAndAssetFullName_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, request
func (_m *MockCleanRoomAssetsInterface) List(ctx context.Context, request cleanrooms.ListCleanRoomAssetsRequest) listing.Iterator[cleanrooms.CleanRoomAsset] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 listing.Iterator[cleanrooms.CleanRoomAsset]
	if rf, ok := ret.Get(0).(func(context.Context, cleanrooms.ListCleanRoomAssetsRequest) listing.Iterator[cleanrooms.CleanRoomAsset]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listing.Iterator[cleanrooms.CleanRoomAsset])
		}
	}

	return r0
}

// MockCleanRoomAssetsInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockCleanRoomAssetsInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - request cleanrooms.ListCleanRoomAssetsRequest
func (_e *MockCleanRoomAssetsInterface_Expecter) List(ctx interface{}, request interface{}) *MockCleanRoomAssetsInterface_List_Call {
	return &MockCleanRoomAssetsInterface_List_Call{Call: _e.mock.On("List", ctx, request)}
}

func (_c *MockCleanRoomAssetsInterface_List_Call) Run(run func(ctx context.Context, request cleanrooms.ListCleanRoomAssetsRequest)) *MockCleanRoomAssetsInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(cleanrooms.ListCleanRoomAssetsRequest))
	})
	return _c
}

func (_c *MockCleanRoomAssetsInterface_List_Call) Return(_a0 listing.Iterator[cleanrooms.CleanRoomAsset]) *MockCleanRoomAssetsInterface_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCleanRoomAssetsInterface_List_Call) RunAndReturn(run func(context.Context, cleanrooms.ListCleanRoomAssetsRequest) listing.Iterator[cleanrooms.CleanRoomAsset]) *MockCleanRoomAssetsInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListAll provides a mock function with given fields: ctx, request
func (_m *MockCleanRoomAssetsInterface) ListAll(ctx context.Context, request cleanrooms.ListCleanRoomAssetsRequest) ([]cleanrooms.CleanRoomAsset, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListAll")
	}

	var r0 []cleanrooms.CleanRoomAsset
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, cleanrooms.ListCleanRoomAssetsRequest) ([]cleanrooms.CleanRoomAsset, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, cleanrooms.ListCleanRoomAssetsRequest) []cleanrooms.CleanRoomAsset); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]cleanrooms.CleanRoomAsset)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, cleanrooms.ListCleanRoomAssetsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCleanRoomAssetsInterface_ListAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAll'
type MockCleanRoomAssetsInterface_ListAll_Call struct {
	*mock.Call
}

// ListAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request cleanrooms.ListCleanRoomAssetsRequest
func (_e *MockCleanRoomAssetsInterface_Expecter) ListAll(ctx interface{}, request interface{}) *MockCleanRoomAssetsInterface_ListAll_Call {
	return &MockCleanRoomAssetsInterface_ListAll_Call{Call: _e.mock.On("ListAll", ctx, request)}
}

func (_c *MockCleanRoomAssetsInterface_ListAll_Call) Run(run func(ctx context.Context, request cleanrooms.ListCleanRoomAssetsRequest)) *MockCleanRoomAssetsInterface_ListAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(cleanrooms.ListCleanRoomAssetsRequest))
	})
	return _c
}

func (_c *MockCleanRoomAssetsInterface_ListAll_Call) Return(_a0 []cleanrooms.CleanRoomAsset, _a1 error) *MockCleanRoomAssetsInterface_ListAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCleanRoomAssetsInterface_ListAll_Call) RunAndReturn(run func(context.Context, cleanrooms.ListCleanRoomAssetsRequest) ([]cleanrooms.CleanRoomAsset, error)) *MockCleanRoomAssetsInterface_ListAll_Call {
	_c.Call.Return(run)
	return _c
}

// ListByCleanRoomName provides a mock function with given fields: ctx, cleanRoomName
func (_m *MockCleanRoomAssetsInterface) ListByCleanRoomName(ctx context.Context, cleanRoomName string) (*cleanrooms.ListCleanRoomAssetsResponse, error) {
	ret := _m.Called(ctx, cleanRoomName)

	if len(ret) == 0 {
		panic("no return value specified for ListByCleanRoomName")
	}

	var r0 *cleanrooms.ListCleanRoomAssetsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*cleanrooms.ListCleanRoomAssetsResponse, error)); ok {
		return rf(ctx, cleanRoomName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *cleanrooms.ListCleanRoomAssetsResponse); ok {
		r0 = rf(ctx, cleanRoomName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanrooms.ListCleanRoomAssetsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, cleanRoomName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCleanRoomAssetsInterface_ListByCleanRoomName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByCleanRoomName'
type MockCleanRoomAssetsInterface_ListByCleanRoomName_Call struct {
	*mock.Call
}

// ListByCleanRoomName is a helper method to define mock.On call
//   - ctx context.Context
//   - cleanRoomName string
func (_e *MockCleanRoomAssetsInterface_Expecter) ListByCleanRoomName(ctx interface{}, cleanRoomName interface{}) *MockCleanRoomAssetsInterface_ListByCleanRoomName_Call {
	return &MockCleanRoomAssetsInterface_ListByCleanRoomName_Call{Call: _e.mock.On("ListByCleanRoomName", ctx, cleanRoomName)}
}

func (_c *MockCleanRoomAssetsInterface_ListByCleanRoomName_Call) Run(run func(ctx context.Context, cleanRoomName string)) *MockCleanRoomAssetsInterface_ListByCleanRoomName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockCleanRoomAssetsInterface_ListByCleanRoomName_Call) Return(_a0 *cleanrooms.ListCleanRoomAssetsResponse, _a1 error) *MockCleanRoomAssetsInterface_ListByCleanRoomName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCleanRoomAssetsInterface_ListByCleanRoomName_Call) RunAndReturn(run func(context.Context, string) (*cleanrooms.ListCleanRoomAssetsResponse, error)) *MockCleanRoomAssetsInterface_ListByCleanRoomName_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, request
func (_m *MockCleanRoomAssetsInterface) Update(ctx context.Context, request cleanrooms.UpdateCleanRoomAssetRequest) (*cleanrooms.CleanRoomAsset, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *cleanrooms.CleanRoomAsset
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, cleanrooms.UpdateCleanRoomAssetRequest) (*cleanrooms.CleanRoomAsset, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, cleanrooms.UpdateCleanRoomAssetRequest) *cleanrooms.CleanRoomAsset); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanrooms.CleanRoomAsset)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, cleanrooms.UpdateCleanRoomAssetRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCleanRoomAssetsInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockCleanRoomAssetsInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - request cleanrooms.UpdateCleanRoomAssetRequest
func (_e *MockCleanRoomAssetsInterface_Expecter) Update(ctx interface{}, request interface{}) *MockCleanRoomAssetsInterface_Update_Call {
	return &MockCleanRoomAssetsInterface_Update_Call{Call: _e.mock.On("Update", ctx, request)}
}

func (_c *MockCleanRoomAssetsInterface_Update_Call) Run(run func(ctx context.Context, request cleanrooms.UpdateCleanRoomAssetRequest)) *MockCleanRoomAssetsInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(cleanrooms.UpdateCleanRoomAssetRequest))
	})
	return _c
}

func (_c *MockCleanRoomAssetsInterface_Update_Call) Return(_a0 *cleanrooms.CleanRoomAsset, _a1 error) *MockCleanRoomAssetsInterface_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCleanRoomAssetsInterface_Update_Call) RunAndReturn(run func(context.Context, cleanrooms.UpdateCleanRoomAssetRequest) (*cleanrooms.CleanRoomAsset, error)) *MockCleanRoomAssetsInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCleanRoomAssetsInterface creates a new instance of MockCleanRoomAssetsInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCleanRoomAssetsInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCleanRoomAssetsInterface {
	mock := &MockCleanRoomAssetsInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
