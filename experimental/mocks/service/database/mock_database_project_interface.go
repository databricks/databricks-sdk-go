// Code generated by mockery v2.53.2. DO NOT EDIT.

package database

import (
	context "context"

	listing "github.com/databricks/databricks-sdk-go/listing"
	database "github.com/databricks/databricks-sdk-go/service/database"

	mock "github.com/stretchr/testify/mock"
)

// MockDatabaseProjectInterface is an autogenerated mock type for the DatabaseProjectInterface type
type MockDatabaseProjectInterface struct {
	mock.Mock
}

type MockDatabaseProjectInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDatabaseProjectInterface) EXPECT() *MockDatabaseProjectInterface_Expecter {
	return &MockDatabaseProjectInterface_Expecter{mock: &_m.Mock}
}

// CreateDatabaseBranch provides a mock function with given fields: ctx, request
func (_m *MockDatabaseProjectInterface) CreateDatabaseBranch(ctx context.Context, request database.CreateDatabaseBranchRequest) (*database.DatabaseBranch, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateDatabaseBranch")
	}

	var r0 *database.DatabaseBranch
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.CreateDatabaseBranchRequest) (*database.DatabaseBranch, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.CreateDatabaseBranchRequest) *database.DatabaseBranch); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.DatabaseBranch)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.CreateDatabaseBranchRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabaseProjectInterface_CreateDatabaseBranch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDatabaseBranch'
type MockDatabaseProjectInterface_CreateDatabaseBranch_Call struct {
	*mock.Call
}

// CreateDatabaseBranch is a helper method to define mock.On call
//   - ctx context.Context
//   - request database.CreateDatabaseBranchRequest
func (_e *MockDatabaseProjectInterface_Expecter) CreateDatabaseBranch(ctx interface{}, request interface{}) *MockDatabaseProjectInterface_CreateDatabaseBranch_Call {
	return &MockDatabaseProjectInterface_CreateDatabaseBranch_Call{Call: _e.mock.On("CreateDatabaseBranch", ctx, request)}
}

func (_c *MockDatabaseProjectInterface_CreateDatabaseBranch_Call) Run(run func(ctx context.Context, request database.CreateDatabaseBranchRequest)) *MockDatabaseProjectInterface_CreateDatabaseBranch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.CreateDatabaseBranchRequest))
	})
	return _c
}

func (_c *MockDatabaseProjectInterface_CreateDatabaseBranch_Call) Return(_a0 *database.DatabaseBranch, _a1 error) *MockDatabaseProjectInterface_CreateDatabaseBranch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabaseProjectInterface_CreateDatabaseBranch_Call) RunAndReturn(run func(context.Context, database.CreateDatabaseBranchRequest) (*database.DatabaseBranch, error)) *MockDatabaseProjectInterface_CreateDatabaseBranch_Call {
	_c.Call.Return(run)
	return _c
}

// CreateDatabaseEndpoint provides a mock function with given fields: ctx, request
func (_m *MockDatabaseProjectInterface) CreateDatabaseEndpoint(ctx context.Context, request database.CreateDatabaseEndpointRequest) (*database.DatabaseEndpoint, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateDatabaseEndpoint")
	}

	var r0 *database.DatabaseEndpoint
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.CreateDatabaseEndpointRequest) (*database.DatabaseEndpoint, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.CreateDatabaseEndpointRequest) *database.DatabaseEndpoint); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.DatabaseEndpoint)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.CreateDatabaseEndpointRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabaseProjectInterface_CreateDatabaseEndpoint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDatabaseEndpoint'
type MockDatabaseProjectInterface_CreateDatabaseEndpoint_Call struct {
	*mock.Call
}

// CreateDatabaseEndpoint is a helper method to define mock.On call
//   - ctx context.Context
//   - request database.CreateDatabaseEndpointRequest
func (_e *MockDatabaseProjectInterface_Expecter) CreateDatabaseEndpoint(ctx interface{}, request interface{}) *MockDatabaseProjectInterface_CreateDatabaseEndpoint_Call {
	return &MockDatabaseProjectInterface_CreateDatabaseEndpoint_Call{Call: _e.mock.On("CreateDatabaseEndpoint", ctx, request)}
}

func (_c *MockDatabaseProjectInterface_CreateDatabaseEndpoint_Call) Run(run func(ctx context.Context, request database.CreateDatabaseEndpointRequest)) *MockDatabaseProjectInterface_CreateDatabaseEndpoint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.CreateDatabaseEndpointRequest))
	})
	return _c
}

func (_c *MockDatabaseProjectInterface_CreateDatabaseEndpoint_Call) Return(_a0 *database.DatabaseEndpoint, _a1 error) *MockDatabaseProjectInterface_CreateDatabaseEndpoint_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabaseProjectInterface_CreateDatabaseEndpoint_Call) RunAndReturn(run func(context.Context, database.CreateDatabaseEndpointRequest) (*database.DatabaseEndpoint, error)) *MockDatabaseProjectInterface_CreateDatabaseEndpoint_Call {
	_c.Call.Return(run)
	return _c
}

// CreateDatabaseProject provides a mock function with given fields: ctx, request
func (_m *MockDatabaseProjectInterface) CreateDatabaseProject(ctx context.Context, request database.CreateDatabaseProjectRequest) (*database.DatabaseProject, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateDatabaseProject")
	}

	var r0 *database.DatabaseProject
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.CreateDatabaseProjectRequest) (*database.DatabaseProject, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.CreateDatabaseProjectRequest) *database.DatabaseProject); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.DatabaseProject)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.CreateDatabaseProjectRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabaseProjectInterface_CreateDatabaseProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDatabaseProject'
type MockDatabaseProjectInterface_CreateDatabaseProject_Call struct {
	*mock.Call
}

// CreateDatabaseProject is a helper method to define mock.On call
//   - ctx context.Context
//   - request database.CreateDatabaseProjectRequest
func (_e *MockDatabaseProjectInterface_Expecter) CreateDatabaseProject(ctx interface{}, request interface{}) *MockDatabaseProjectInterface_CreateDatabaseProject_Call {
	return &MockDatabaseProjectInterface_CreateDatabaseProject_Call{Call: _e.mock.On("CreateDatabaseProject", ctx, request)}
}

func (_c *MockDatabaseProjectInterface_CreateDatabaseProject_Call) Run(run func(ctx context.Context, request database.CreateDatabaseProjectRequest)) *MockDatabaseProjectInterface_CreateDatabaseProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.CreateDatabaseProjectRequest))
	})
	return _c
}

func (_c *MockDatabaseProjectInterface_CreateDatabaseProject_Call) Return(_a0 *database.DatabaseProject, _a1 error) *MockDatabaseProjectInterface_CreateDatabaseProject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabaseProjectInterface_CreateDatabaseProject_Call) RunAndReturn(run func(context.Context, database.CreateDatabaseProjectRequest) (*database.DatabaseProject, error)) *MockDatabaseProjectInterface_CreateDatabaseProject_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDatabaseBranch provides a mock function with given fields: ctx, request
func (_m *MockDatabaseProjectInterface) DeleteDatabaseBranch(ctx context.Context, request database.DeleteDatabaseBranchRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDatabaseBranch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.DeleteDatabaseBranchRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabaseProjectInterface_DeleteDatabaseBranch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDatabaseBranch'
type MockDatabaseProjectInterface_DeleteDatabaseBranch_Call struct {
	*mock.Call
}

// DeleteDatabaseBranch is a helper method to define mock.On call
//   - ctx context.Context
//   - request database.DeleteDatabaseBranchRequest
func (_e *MockDatabaseProjectInterface_Expecter) DeleteDatabaseBranch(ctx interface{}, request interface{}) *MockDatabaseProjectInterface_DeleteDatabaseBranch_Call {
	return &MockDatabaseProjectInterface_DeleteDatabaseBranch_Call{Call: _e.mock.On("DeleteDatabaseBranch", ctx, request)}
}

func (_c *MockDatabaseProjectInterface_DeleteDatabaseBranch_Call) Run(run func(ctx context.Context, request database.DeleteDatabaseBranchRequest)) *MockDatabaseProjectInterface_DeleteDatabaseBranch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.DeleteDatabaseBranchRequest))
	})
	return _c
}

func (_c *MockDatabaseProjectInterface_DeleteDatabaseBranch_Call) Return(_a0 error) *MockDatabaseProjectInterface_DeleteDatabaseBranch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabaseProjectInterface_DeleteDatabaseBranch_Call) RunAndReturn(run func(context.Context, database.DeleteDatabaseBranchRequest) error) *MockDatabaseProjectInterface_DeleteDatabaseBranch_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDatabaseEndpoint provides a mock function with given fields: ctx, request
func (_m *MockDatabaseProjectInterface) DeleteDatabaseEndpoint(ctx context.Context, request database.DeleteDatabaseEndpointRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDatabaseEndpoint")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.DeleteDatabaseEndpointRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabaseProjectInterface_DeleteDatabaseEndpoint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDatabaseEndpoint'
type MockDatabaseProjectInterface_DeleteDatabaseEndpoint_Call struct {
	*mock.Call
}

// DeleteDatabaseEndpoint is a helper method to define mock.On call
//   - ctx context.Context
//   - request database.DeleteDatabaseEndpointRequest
func (_e *MockDatabaseProjectInterface_Expecter) DeleteDatabaseEndpoint(ctx interface{}, request interface{}) *MockDatabaseProjectInterface_DeleteDatabaseEndpoint_Call {
	return &MockDatabaseProjectInterface_DeleteDatabaseEndpoint_Call{Call: _e.mock.On("DeleteDatabaseEndpoint", ctx, request)}
}

func (_c *MockDatabaseProjectInterface_DeleteDatabaseEndpoint_Call) Run(run func(ctx context.Context, request database.DeleteDatabaseEndpointRequest)) *MockDatabaseProjectInterface_DeleteDatabaseEndpoint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.DeleteDatabaseEndpointRequest))
	})
	return _c
}

func (_c *MockDatabaseProjectInterface_DeleteDatabaseEndpoint_Call) Return(_a0 error) *MockDatabaseProjectInterface_DeleteDatabaseEndpoint_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabaseProjectInterface_DeleteDatabaseEndpoint_Call) RunAndReturn(run func(context.Context, database.DeleteDatabaseEndpointRequest) error) *MockDatabaseProjectInterface_DeleteDatabaseEndpoint_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDatabaseProject provides a mock function with given fields: ctx, request
func (_m *MockDatabaseProjectInterface) DeleteDatabaseProject(ctx context.Context, request database.DeleteDatabaseProjectRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDatabaseProject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.DeleteDatabaseProjectRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabaseProjectInterface_DeleteDatabaseProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDatabaseProject'
type MockDatabaseProjectInterface_DeleteDatabaseProject_Call struct {
	*mock.Call
}

// DeleteDatabaseProject is a helper method to define mock.On call
//   - ctx context.Context
//   - request database.DeleteDatabaseProjectRequest
func (_e *MockDatabaseProjectInterface_Expecter) DeleteDatabaseProject(ctx interface{}, request interface{}) *MockDatabaseProjectInterface_DeleteDatabaseProject_Call {
	return &MockDatabaseProjectInterface_DeleteDatabaseProject_Call{Call: _e.mock.On("DeleteDatabaseProject", ctx, request)}
}

func (_c *MockDatabaseProjectInterface_DeleteDatabaseProject_Call) Run(run func(ctx context.Context, request database.DeleteDatabaseProjectRequest)) *MockDatabaseProjectInterface_DeleteDatabaseProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.DeleteDatabaseProjectRequest))
	})
	return _c
}

func (_c *MockDatabaseProjectInterface_DeleteDatabaseProject_Call) Return(_a0 error) *MockDatabaseProjectInterface_DeleteDatabaseProject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabaseProjectInterface_DeleteDatabaseProject_Call) RunAndReturn(run func(context.Context, database.DeleteDatabaseProjectRequest) error) *MockDatabaseProjectInterface_DeleteDatabaseProject_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatabaseBranch provides a mock function with given fields: ctx, request
func (_m *MockDatabaseProjectInterface) GetDatabaseBranch(ctx context.Context, request database.GetDatabaseBranchRequest) (*database.DatabaseBranch, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetDatabaseBranch")
	}

	var r0 *database.DatabaseBranch
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.GetDatabaseBranchRequest) (*database.DatabaseBranch, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.GetDatabaseBranchRequest) *database.DatabaseBranch); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.DatabaseBranch)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.GetDatabaseBranchRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabaseProjectInterface_GetDatabaseBranch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatabaseBranch'
type MockDatabaseProjectInterface_GetDatabaseBranch_Call struct {
	*mock.Call
}

// GetDatabaseBranch is a helper method to define mock.On call
//   - ctx context.Context
//   - request database.GetDatabaseBranchRequest
func (_e *MockDatabaseProjectInterface_Expecter) GetDatabaseBranch(ctx interface{}, request interface{}) *MockDatabaseProjectInterface_GetDatabaseBranch_Call {
	return &MockDatabaseProjectInterface_GetDatabaseBranch_Call{Call: _e.mock.On("GetDatabaseBranch", ctx, request)}
}

func (_c *MockDatabaseProjectInterface_GetDatabaseBranch_Call) Run(run func(ctx context.Context, request database.GetDatabaseBranchRequest)) *MockDatabaseProjectInterface_GetDatabaseBranch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.GetDatabaseBranchRequest))
	})
	return _c
}

func (_c *MockDatabaseProjectInterface_GetDatabaseBranch_Call) Return(_a0 *database.DatabaseBranch, _a1 error) *MockDatabaseProjectInterface_GetDatabaseBranch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabaseProjectInterface_GetDatabaseBranch_Call) RunAndReturn(run func(context.Context, database.GetDatabaseBranchRequest) (*database.DatabaseBranch, error)) *MockDatabaseProjectInterface_GetDatabaseBranch_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatabaseEndpoint provides a mock function with given fields: ctx, request
func (_m *MockDatabaseProjectInterface) GetDatabaseEndpoint(ctx context.Context, request database.GetDatabaseEndpointRequest) (*database.DatabaseEndpoint, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetDatabaseEndpoint")
	}

	var r0 *database.DatabaseEndpoint
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.GetDatabaseEndpointRequest) (*database.DatabaseEndpoint, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.GetDatabaseEndpointRequest) *database.DatabaseEndpoint); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.DatabaseEndpoint)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.GetDatabaseEndpointRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabaseProjectInterface_GetDatabaseEndpoint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatabaseEndpoint'
type MockDatabaseProjectInterface_GetDatabaseEndpoint_Call struct {
	*mock.Call
}

// GetDatabaseEndpoint is a helper method to define mock.On call
//   - ctx context.Context
//   - request database.GetDatabaseEndpointRequest
func (_e *MockDatabaseProjectInterface_Expecter) GetDatabaseEndpoint(ctx interface{}, request interface{}) *MockDatabaseProjectInterface_GetDatabaseEndpoint_Call {
	return &MockDatabaseProjectInterface_GetDatabaseEndpoint_Call{Call: _e.mock.On("GetDatabaseEndpoint", ctx, request)}
}

func (_c *MockDatabaseProjectInterface_GetDatabaseEndpoint_Call) Run(run func(ctx context.Context, request database.GetDatabaseEndpointRequest)) *MockDatabaseProjectInterface_GetDatabaseEndpoint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.GetDatabaseEndpointRequest))
	})
	return _c
}

func (_c *MockDatabaseProjectInterface_GetDatabaseEndpoint_Call) Return(_a0 *database.DatabaseEndpoint, _a1 error) *MockDatabaseProjectInterface_GetDatabaseEndpoint_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabaseProjectInterface_GetDatabaseEndpoint_Call) RunAndReturn(run func(context.Context, database.GetDatabaseEndpointRequest) (*database.DatabaseEndpoint, error)) *MockDatabaseProjectInterface_GetDatabaseEndpoint_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatabaseProject provides a mock function with given fields: ctx, request
func (_m *MockDatabaseProjectInterface) GetDatabaseProject(ctx context.Context, request database.GetDatabaseProjectRequest) (*database.DatabaseProject, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetDatabaseProject")
	}

	var r0 *database.DatabaseProject
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.GetDatabaseProjectRequest) (*database.DatabaseProject, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.GetDatabaseProjectRequest) *database.DatabaseProject); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.DatabaseProject)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.GetDatabaseProjectRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabaseProjectInterface_GetDatabaseProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatabaseProject'
type MockDatabaseProjectInterface_GetDatabaseProject_Call struct {
	*mock.Call
}

// GetDatabaseProject is a helper method to define mock.On call
//   - ctx context.Context
//   - request database.GetDatabaseProjectRequest
func (_e *MockDatabaseProjectInterface_Expecter) GetDatabaseProject(ctx interface{}, request interface{}) *MockDatabaseProjectInterface_GetDatabaseProject_Call {
	return &MockDatabaseProjectInterface_GetDatabaseProject_Call{Call: _e.mock.On("GetDatabaseProject", ctx, request)}
}

func (_c *MockDatabaseProjectInterface_GetDatabaseProject_Call) Run(run func(ctx context.Context, request database.GetDatabaseProjectRequest)) *MockDatabaseProjectInterface_GetDatabaseProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.GetDatabaseProjectRequest))
	})
	return _c
}

func (_c *MockDatabaseProjectInterface_GetDatabaseProject_Call) Return(_a0 *database.DatabaseProject, _a1 error) *MockDatabaseProjectInterface_GetDatabaseProject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabaseProjectInterface_GetDatabaseProject_Call) RunAndReturn(run func(context.Context, database.GetDatabaseProjectRequest) (*database.DatabaseProject, error)) *MockDatabaseProjectInterface_GetDatabaseProject_Call {
	_c.Call.Return(run)
	return _c
}

// ListDatabaseBranches provides a mock function with given fields: ctx, request
func (_m *MockDatabaseProjectInterface) ListDatabaseBranches(ctx context.Context, request database.ListDatabaseBranchesRequest) listing.Iterator[database.DatabaseBranch] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListDatabaseBranches")
	}

	var r0 listing.Iterator[database.DatabaseBranch]
	if rf, ok := ret.Get(0).(func(context.Context, database.ListDatabaseBranchesRequest) listing.Iterator[database.DatabaseBranch]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listing.Iterator[database.DatabaseBranch])
		}
	}

	return r0
}

// MockDatabaseProjectInterface_ListDatabaseBranches_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDatabaseBranches'
type MockDatabaseProjectInterface_ListDatabaseBranches_Call struct {
	*mock.Call
}

// ListDatabaseBranches is a helper method to define mock.On call
//   - ctx context.Context
//   - request database.ListDatabaseBranchesRequest
func (_e *MockDatabaseProjectInterface_Expecter) ListDatabaseBranches(ctx interface{}, request interface{}) *MockDatabaseProjectInterface_ListDatabaseBranches_Call {
	return &MockDatabaseProjectInterface_ListDatabaseBranches_Call{Call: _e.mock.On("ListDatabaseBranches", ctx, request)}
}

func (_c *MockDatabaseProjectInterface_ListDatabaseBranches_Call) Run(run func(ctx context.Context, request database.ListDatabaseBranchesRequest)) *MockDatabaseProjectInterface_ListDatabaseBranches_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.ListDatabaseBranchesRequest))
	})
	return _c
}

func (_c *MockDatabaseProjectInterface_ListDatabaseBranches_Call) Return(_a0 listing.Iterator[database.DatabaseBranch]) *MockDatabaseProjectInterface_ListDatabaseBranches_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabaseProjectInterface_ListDatabaseBranches_Call) RunAndReturn(run func(context.Context, database.ListDatabaseBranchesRequest) listing.Iterator[database.DatabaseBranch]) *MockDatabaseProjectInterface_ListDatabaseBranches_Call {
	_c.Call.Return(run)
	return _c
}

// ListDatabaseBranchesAll provides a mock function with given fields: ctx, request
func (_m *MockDatabaseProjectInterface) ListDatabaseBranchesAll(ctx context.Context, request database.ListDatabaseBranchesRequest) ([]database.DatabaseBranch, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListDatabaseBranchesAll")
	}

	var r0 []database.DatabaseBranch
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.ListDatabaseBranchesRequest) ([]database.DatabaseBranch, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.ListDatabaseBranchesRequest) []database.DatabaseBranch); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.DatabaseBranch)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.ListDatabaseBranchesRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabaseProjectInterface_ListDatabaseBranchesAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDatabaseBranchesAll'
type MockDatabaseProjectInterface_ListDatabaseBranchesAll_Call struct {
	*mock.Call
}

// ListDatabaseBranchesAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request database.ListDatabaseBranchesRequest
func (_e *MockDatabaseProjectInterface_Expecter) ListDatabaseBranchesAll(ctx interface{}, request interface{}) *MockDatabaseProjectInterface_ListDatabaseBranchesAll_Call {
	return &MockDatabaseProjectInterface_ListDatabaseBranchesAll_Call{Call: _e.mock.On("ListDatabaseBranchesAll", ctx, request)}
}

func (_c *MockDatabaseProjectInterface_ListDatabaseBranchesAll_Call) Run(run func(ctx context.Context, request database.ListDatabaseBranchesRequest)) *MockDatabaseProjectInterface_ListDatabaseBranchesAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.ListDatabaseBranchesRequest))
	})
	return _c
}

func (_c *MockDatabaseProjectInterface_ListDatabaseBranchesAll_Call) Return(_a0 []database.DatabaseBranch, _a1 error) *MockDatabaseProjectInterface_ListDatabaseBranchesAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabaseProjectInterface_ListDatabaseBranchesAll_Call) RunAndReturn(run func(context.Context, database.ListDatabaseBranchesRequest) ([]database.DatabaseBranch, error)) *MockDatabaseProjectInterface_ListDatabaseBranchesAll_Call {
	_c.Call.Return(run)
	return _c
}

// ListDatabaseEndpoints provides a mock function with given fields: ctx, request
func (_m *MockDatabaseProjectInterface) ListDatabaseEndpoints(ctx context.Context, request database.ListDatabaseEndpointsRequest) listing.Iterator[database.DatabaseEndpoint] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListDatabaseEndpoints")
	}

	var r0 listing.Iterator[database.DatabaseEndpoint]
	if rf, ok := ret.Get(0).(func(context.Context, database.ListDatabaseEndpointsRequest) listing.Iterator[database.DatabaseEndpoint]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listing.Iterator[database.DatabaseEndpoint])
		}
	}

	return r0
}

// MockDatabaseProjectInterface_ListDatabaseEndpoints_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDatabaseEndpoints'
type MockDatabaseProjectInterface_ListDatabaseEndpoints_Call struct {
	*mock.Call
}

// ListDatabaseEndpoints is a helper method to define mock.On call
//   - ctx context.Context
//   - request database.ListDatabaseEndpointsRequest
func (_e *MockDatabaseProjectInterface_Expecter) ListDatabaseEndpoints(ctx interface{}, request interface{}) *MockDatabaseProjectInterface_ListDatabaseEndpoints_Call {
	return &MockDatabaseProjectInterface_ListDatabaseEndpoints_Call{Call: _e.mock.On("ListDatabaseEndpoints", ctx, request)}
}

func (_c *MockDatabaseProjectInterface_ListDatabaseEndpoints_Call) Run(run func(ctx context.Context, request database.ListDatabaseEndpointsRequest)) *MockDatabaseProjectInterface_ListDatabaseEndpoints_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.ListDatabaseEndpointsRequest))
	})
	return _c
}

func (_c *MockDatabaseProjectInterface_ListDatabaseEndpoints_Call) Return(_a0 listing.Iterator[database.DatabaseEndpoint]) *MockDatabaseProjectInterface_ListDatabaseEndpoints_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabaseProjectInterface_ListDatabaseEndpoints_Call) RunAndReturn(run func(context.Context, database.ListDatabaseEndpointsRequest) listing.Iterator[database.DatabaseEndpoint]) *MockDatabaseProjectInterface_ListDatabaseEndpoints_Call {
	_c.Call.Return(run)
	return _c
}

// ListDatabaseEndpointsAll provides a mock function with given fields: ctx, request
func (_m *MockDatabaseProjectInterface) ListDatabaseEndpointsAll(ctx context.Context, request database.ListDatabaseEndpointsRequest) ([]database.DatabaseEndpoint, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListDatabaseEndpointsAll")
	}

	var r0 []database.DatabaseEndpoint
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.ListDatabaseEndpointsRequest) ([]database.DatabaseEndpoint, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.ListDatabaseEndpointsRequest) []database.DatabaseEndpoint); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.DatabaseEndpoint)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.ListDatabaseEndpointsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabaseProjectInterface_ListDatabaseEndpointsAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDatabaseEndpointsAll'
type MockDatabaseProjectInterface_ListDatabaseEndpointsAll_Call struct {
	*mock.Call
}

// ListDatabaseEndpointsAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request database.ListDatabaseEndpointsRequest
func (_e *MockDatabaseProjectInterface_Expecter) ListDatabaseEndpointsAll(ctx interface{}, request interface{}) *MockDatabaseProjectInterface_ListDatabaseEndpointsAll_Call {
	return &MockDatabaseProjectInterface_ListDatabaseEndpointsAll_Call{Call: _e.mock.On("ListDatabaseEndpointsAll", ctx, request)}
}

func (_c *MockDatabaseProjectInterface_ListDatabaseEndpointsAll_Call) Run(run func(ctx context.Context, request database.ListDatabaseEndpointsRequest)) *MockDatabaseProjectInterface_ListDatabaseEndpointsAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.ListDatabaseEndpointsRequest))
	})
	return _c
}

func (_c *MockDatabaseProjectInterface_ListDatabaseEndpointsAll_Call) Return(_a0 []database.DatabaseEndpoint, _a1 error) *MockDatabaseProjectInterface_ListDatabaseEndpointsAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabaseProjectInterface_ListDatabaseEndpointsAll_Call) RunAndReturn(run func(context.Context, database.ListDatabaseEndpointsRequest) ([]database.DatabaseEndpoint, error)) *MockDatabaseProjectInterface_ListDatabaseEndpointsAll_Call {
	_c.Call.Return(run)
	return _c
}

// ListDatabaseProjects provides a mock function with given fields: ctx, request
func (_m *MockDatabaseProjectInterface) ListDatabaseProjects(ctx context.Context, request database.ListDatabaseProjectsRequest) listing.Iterator[database.DatabaseProject] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListDatabaseProjects")
	}

	var r0 listing.Iterator[database.DatabaseProject]
	if rf, ok := ret.Get(0).(func(context.Context, database.ListDatabaseProjectsRequest) listing.Iterator[database.DatabaseProject]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listing.Iterator[database.DatabaseProject])
		}
	}

	return r0
}

// MockDatabaseProjectInterface_ListDatabaseProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDatabaseProjects'
type MockDatabaseProjectInterface_ListDatabaseProjects_Call struct {
	*mock.Call
}

// ListDatabaseProjects is a helper method to define mock.On call
//   - ctx context.Context
//   - request database.ListDatabaseProjectsRequest
func (_e *MockDatabaseProjectInterface_Expecter) ListDatabaseProjects(ctx interface{}, request interface{}) *MockDatabaseProjectInterface_ListDatabaseProjects_Call {
	return &MockDatabaseProjectInterface_ListDatabaseProjects_Call{Call: _e.mock.On("ListDatabaseProjects", ctx, request)}
}

func (_c *MockDatabaseProjectInterface_ListDatabaseProjects_Call) Run(run func(ctx context.Context, request database.ListDatabaseProjectsRequest)) *MockDatabaseProjectInterface_ListDatabaseProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.ListDatabaseProjectsRequest))
	})
	return _c
}

func (_c *MockDatabaseProjectInterface_ListDatabaseProjects_Call) Return(_a0 listing.Iterator[database.DatabaseProject]) *MockDatabaseProjectInterface_ListDatabaseProjects_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabaseProjectInterface_ListDatabaseProjects_Call) RunAndReturn(run func(context.Context, database.ListDatabaseProjectsRequest) listing.Iterator[database.DatabaseProject]) *MockDatabaseProjectInterface_ListDatabaseProjects_Call {
	_c.Call.Return(run)
	return _c
}

// ListDatabaseProjectsAll provides a mock function with given fields: ctx, request
func (_m *MockDatabaseProjectInterface) ListDatabaseProjectsAll(ctx context.Context, request database.ListDatabaseProjectsRequest) ([]database.DatabaseProject, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListDatabaseProjectsAll")
	}

	var r0 []database.DatabaseProject
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.ListDatabaseProjectsRequest) ([]database.DatabaseProject, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.ListDatabaseProjectsRequest) []database.DatabaseProject); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.DatabaseProject)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.ListDatabaseProjectsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabaseProjectInterface_ListDatabaseProjectsAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDatabaseProjectsAll'
type MockDatabaseProjectInterface_ListDatabaseProjectsAll_Call struct {
	*mock.Call
}

// ListDatabaseProjectsAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request database.ListDatabaseProjectsRequest
func (_e *MockDatabaseProjectInterface_Expecter) ListDatabaseProjectsAll(ctx interface{}, request interface{}) *MockDatabaseProjectInterface_ListDatabaseProjectsAll_Call {
	return &MockDatabaseProjectInterface_ListDatabaseProjectsAll_Call{Call: _e.mock.On("ListDatabaseProjectsAll", ctx, request)}
}

func (_c *MockDatabaseProjectInterface_ListDatabaseProjectsAll_Call) Run(run func(ctx context.Context, request database.ListDatabaseProjectsRequest)) *MockDatabaseProjectInterface_ListDatabaseProjectsAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.ListDatabaseProjectsRequest))
	})
	return _c
}

func (_c *MockDatabaseProjectInterface_ListDatabaseProjectsAll_Call) Return(_a0 []database.DatabaseProject, _a1 error) *MockDatabaseProjectInterface_ListDatabaseProjectsAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabaseProjectInterface_ListDatabaseProjectsAll_Call) RunAndReturn(run func(context.Context, database.ListDatabaseProjectsRequest) ([]database.DatabaseProject, error)) *MockDatabaseProjectInterface_ListDatabaseProjectsAll_Call {
	_c.Call.Return(run)
	return _c
}

// RestartDatabaseEndpoint provides a mock function with given fields: ctx, request
func (_m *MockDatabaseProjectInterface) RestartDatabaseEndpoint(ctx context.Context, request database.RestartDatabaseEndpointRequest) (*database.DatabaseEndpoint, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for RestartDatabaseEndpoint")
	}

	var r0 *database.DatabaseEndpoint
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.RestartDatabaseEndpointRequest) (*database.DatabaseEndpoint, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.RestartDatabaseEndpointRequest) *database.DatabaseEndpoint); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.DatabaseEndpoint)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.RestartDatabaseEndpointRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabaseProjectInterface_RestartDatabaseEndpoint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RestartDatabaseEndpoint'
type MockDatabaseProjectInterface_RestartDatabaseEndpoint_Call struct {
	*mock.Call
}

// RestartDatabaseEndpoint is a helper method to define mock.On call
//   - ctx context.Context
//   - request database.RestartDatabaseEndpointRequest
func (_e *MockDatabaseProjectInterface_Expecter) RestartDatabaseEndpoint(ctx interface{}, request interface{}) *MockDatabaseProjectInterface_RestartDatabaseEndpoint_Call {
	return &MockDatabaseProjectInterface_RestartDatabaseEndpoint_Call{Call: _e.mock.On("RestartDatabaseEndpoint", ctx, request)}
}

func (_c *MockDatabaseProjectInterface_RestartDatabaseEndpoint_Call) Run(run func(ctx context.Context, request database.RestartDatabaseEndpointRequest)) *MockDatabaseProjectInterface_RestartDatabaseEndpoint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.RestartDatabaseEndpointRequest))
	})
	return _c
}

func (_c *MockDatabaseProjectInterface_RestartDatabaseEndpoint_Call) Return(_a0 *database.DatabaseEndpoint, _a1 error) *MockDatabaseProjectInterface_RestartDatabaseEndpoint_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabaseProjectInterface_RestartDatabaseEndpoint_Call) RunAndReturn(run func(context.Context, database.RestartDatabaseEndpointRequest) (*database.DatabaseEndpoint, error)) *MockDatabaseProjectInterface_RestartDatabaseEndpoint_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDatabaseBranch provides a mock function with given fields: ctx, request
func (_m *MockDatabaseProjectInterface) UpdateDatabaseBranch(ctx context.Context, request database.UpdateDatabaseBranchRequest) (*database.DatabaseBranch, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDatabaseBranch")
	}

	var r0 *database.DatabaseBranch
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.UpdateDatabaseBranchRequest) (*database.DatabaseBranch, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.UpdateDatabaseBranchRequest) *database.DatabaseBranch); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.DatabaseBranch)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.UpdateDatabaseBranchRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabaseProjectInterface_UpdateDatabaseBranch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDatabaseBranch'
type MockDatabaseProjectInterface_UpdateDatabaseBranch_Call struct {
	*mock.Call
}

// UpdateDatabaseBranch is a helper method to define mock.On call
//   - ctx context.Context
//   - request database.UpdateDatabaseBranchRequest
func (_e *MockDatabaseProjectInterface_Expecter) UpdateDatabaseBranch(ctx interface{}, request interface{}) *MockDatabaseProjectInterface_UpdateDatabaseBranch_Call {
	return &MockDatabaseProjectInterface_UpdateDatabaseBranch_Call{Call: _e.mock.On("UpdateDatabaseBranch", ctx, request)}
}

func (_c *MockDatabaseProjectInterface_UpdateDatabaseBranch_Call) Run(run func(ctx context.Context, request database.UpdateDatabaseBranchRequest)) *MockDatabaseProjectInterface_UpdateDatabaseBranch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.UpdateDatabaseBranchRequest))
	})
	return _c
}

func (_c *MockDatabaseProjectInterface_UpdateDatabaseBranch_Call) Return(_a0 *database.DatabaseBranch, _a1 error) *MockDatabaseProjectInterface_UpdateDatabaseBranch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabaseProjectInterface_UpdateDatabaseBranch_Call) RunAndReturn(run func(context.Context, database.UpdateDatabaseBranchRequest) (*database.DatabaseBranch, error)) *MockDatabaseProjectInterface_UpdateDatabaseBranch_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDatabaseEndpoint provides a mock function with given fields: ctx, request
func (_m *MockDatabaseProjectInterface) UpdateDatabaseEndpoint(ctx context.Context, request database.UpdateDatabaseEndpointRequest) (*database.DatabaseEndpoint, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDatabaseEndpoint")
	}

	var r0 *database.DatabaseEndpoint
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.UpdateDatabaseEndpointRequest) (*database.DatabaseEndpoint, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.UpdateDatabaseEndpointRequest) *database.DatabaseEndpoint); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.DatabaseEndpoint)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.UpdateDatabaseEndpointRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabaseProjectInterface_UpdateDatabaseEndpoint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDatabaseEndpoint'
type MockDatabaseProjectInterface_UpdateDatabaseEndpoint_Call struct {
	*mock.Call
}

// UpdateDatabaseEndpoint is a helper method to define mock.On call
//   - ctx context.Context
//   - request database.UpdateDatabaseEndpointRequest
func (_e *MockDatabaseProjectInterface_Expecter) UpdateDatabaseEndpoint(ctx interface{}, request interface{}) *MockDatabaseProjectInterface_UpdateDatabaseEndpoint_Call {
	return &MockDatabaseProjectInterface_UpdateDatabaseEndpoint_Call{Call: _e.mock.On("UpdateDatabaseEndpoint", ctx, request)}
}

func (_c *MockDatabaseProjectInterface_UpdateDatabaseEndpoint_Call) Run(run func(ctx context.Context, request database.UpdateDatabaseEndpointRequest)) *MockDatabaseProjectInterface_UpdateDatabaseEndpoint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.UpdateDatabaseEndpointRequest))
	})
	return _c
}

func (_c *MockDatabaseProjectInterface_UpdateDatabaseEndpoint_Call) Return(_a0 *database.DatabaseEndpoint, _a1 error) *MockDatabaseProjectInterface_UpdateDatabaseEndpoint_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabaseProjectInterface_UpdateDatabaseEndpoint_Call) RunAndReturn(run func(context.Context, database.UpdateDatabaseEndpointRequest) (*database.DatabaseEndpoint, error)) *MockDatabaseProjectInterface_UpdateDatabaseEndpoint_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDatabaseProject provides a mock function with given fields: ctx, request
func (_m *MockDatabaseProjectInterface) UpdateDatabaseProject(ctx context.Context, request database.UpdateDatabaseProjectRequest) (*database.DatabaseProject, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDatabaseProject")
	}

	var r0 *database.DatabaseProject
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.UpdateDatabaseProjectRequest) (*database.DatabaseProject, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.UpdateDatabaseProjectRequest) *database.DatabaseProject); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.DatabaseProject)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.UpdateDatabaseProjectRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabaseProjectInterface_UpdateDatabaseProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDatabaseProject'
type MockDatabaseProjectInterface_UpdateDatabaseProject_Call struct {
	*mock.Call
}

// UpdateDatabaseProject is a helper method to define mock.On call
//   - ctx context.Context
//   - request database.UpdateDatabaseProjectRequest
func (_e *MockDatabaseProjectInterface_Expecter) UpdateDatabaseProject(ctx interface{}, request interface{}) *MockDatabaseProjectInterface_UpdateDatabaseProject_Call {
	return &MockDatabaseProjectInterface_UpdateDatabaseProject_Call{Call: _e.mock.On("UpdateDatabaseProject", ctx, request)}
}

func (_c *MockDatabaseProjectInterface_UpdateDatabaseProject_Call) Run(run func(ctx context.Context, request database.UpdateDatabaseProjectRequest)) *MockDatabaseProjectInterface_UpdateDatabaseProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.UpdateDatabaseProjectRequest))
	})
	return _c
}

func (_c *MockDatabaseProjectInterface_UpdateDatabaseProject_Call) Return(_a0 *database.DatabaseProject, _a1 error) *MockDatabaseProjectInterface_UpdateDatabaseProject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabaseProjectInterface_UpdateDatabaseProject_Call) RunAndReturn(run func(context.Context, database.UpdateDatabaseProjectRequest) (*database.DatabaseProject, error)) *MockDatabaseProjectInterface_UpdateDatabaseProject_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDatabaseProjectInterface creates a new instance of MockDatabaseProjectInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDatabaseProjectInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDatabaseProjectInterface {
	mock := &MockDatabaseProjectInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
