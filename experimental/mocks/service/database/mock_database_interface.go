// Code generated by mockery v2.53.2. DO NOT EDIT.

package database

import (
	context "context"

	listing "github.com/databricks/databricks-sdk-go/listing"
	database "github.com/databricks/databricks-sdk-go/service/database"

	mock "github.com/stretchr/testify/mock"
)

// MockDatabaseInterface is an autogenerated mock type for the DatabaseInterface type
type MockDatabaseInterface struct {
	mock.Mock
}

type MockDatabaseInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDatabaseInterface) EXPECT() *MockDatabaseInterface_Expecter {
	return &MockDatabaseInterface_Expecter{mock: &_m.Mock}
}

// CreateDatabaseCatalog provides a mock function with given fields: ctx, request
func (_m *MockDatabaseInterface) CreateDatabaseCatalog(ctx context.Context, request database.CreateDatabaseCatalogRequest) (*database.DatabaseCatalog, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateDatabaseCatalog")
	}

	var r0 *database.DatabaseCatalog
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.CreateDatabaseCatalogRequest) (*database.DatabaseCatalog, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.CreateDatabaseCatalogRequest) *database.DatabaseCatalog); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.DatabaseCatalog)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.CreateDatabaseCatalogRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabaseInterface_CreateDatabaseCatalog_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDatabaseCatalog'
type MockDatabaseInterface_CreateDatabaseCatalog_Call struct {
	*mock.Call
}

// CreateDatabaseCatalog is a helper method to define mock.On call
//   - ctx context.Context
//   - request database.CreateDatabaseCatalogRequest
func (_e *MockDatabaseInterface_Expecter) CreateDatabaseCatalog(ctx interface{}, request interface{}) *MockDatabaseInterface_CreateDatabaseCatalog_Call {
	return &MockDatabaseInterface_CreateDatabaseCatalog_Call{Call: _e.mock.On("CreateDatabaseCatalog", ctx, request)}
}

func (_c *MockDatabaseInterface_CreateDatabaseCatalog_Call) Run(run func(ctx context.Context, request database.CreateDatabaseCatalogRequest)) *MockDatabaseInterface_CreateDatabaseCatalog_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.CreateDatabaseCatalogRequest))
	})
	return _c
}

func (_c *MockDatabaseInterface_CreateDatabaseCatalog_Call) Return(_a0 *database.DatabaseCatalog, _a1 error) *MockDatabaseInterface_CreateDatabaseCatalog_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabaseInterface_CreateDatabaseCatalog_Call) RunAndReturn(run func(context.Context, database.CreateDatabaseCatalogRequest) (*database.DatabaseCatalog, error)) *MockDatabaseInterface_CreateDatabaseCatalog_Call {
	_c.Call.Return(run)
	return _c
}

// CreateDatabaseInstance provides a mock function with given fields: ctx, request
func (_m *MockDatabaseInterface) CreateDatabaseInstance(ctx context.Context, request database.CreateDatabaseInstanceRequest) (*database.DatabaseInstance, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateDatabaseInstance")
	}

	var r0 *database.DatabaseInstance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.CreateDatabaseInstanceRequest) (*database.DatabaseInstance, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.CreateDatabaseInstanceRequest) *database.DatabaseInstance); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.DatabaseInstance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.CreateDatabaseInstanceRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabaseInterface_CreateDatabaseInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDatabaseInstance'
type MockDatabaseInterface_CreateDatabaseInstance_Call struct {
	*mock.Call
}

// CreateDatabaseInstance is a helper method to define mock.On call
//   - ctx context.Context
//   - request database.CreateDatabaseInstanceRequest
func (_e *MockDatabaseInterface_Expecter) CreateDatabaseInstance(ctx interface{}, request interface{}) *MockDatabaseInterface_CreateDatabaseInstance_Call {
	return &MockDatabaseInterface_CreateDatabaseInstance_Call{Call: _e.mock.On("CreateDatabaseInstance", ctx, request)}
}

func (_c *MockDatabaseInterface_CreateDatabaseInstance_Call) Run(run func(ctx context.Context, request database.CreateDatabaseInstanceRequest)) *MockDatabaseInterface_CreateDatabaseInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.CreateDatabaseInstanceRequest))
	})
	return _c
}

func (_c *MockDatabaseInterface_CreateDatabaseInstance_Call) Return(_a0 *database.DatabaseInstance, _a1 error) *MockDatabaseInterface_CreateDatabaseInstance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabaseInterface_CreateDatabaseInstance_Call) RunAndReturn(run func(context.Context, database.CreateDatabaseInstanceRequest) (*database.DatabaseInstance, error)) *MockDatabaseInterface_CreateDatabaseInstance_Call {
	_c.Call.Return(run)
	return _c
}

// CreateDatabaseTable provides a mock function with given fields: ctx, request
func (_m *MockDatabaseInterface) CreateDatabaseTable(ctx context.Context, request database.CreateDatabaseTableRequest) (*database.DatabaseTable, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateDatabaseTable")
	}

	var r0 *database.DatabaseTable
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.CreateDatabaseTableRequest) (*database.DatabaseTable, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.CreateDatabaseTableRequest) *database.DatabaseTable); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.DatabaseTable)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.CreateDatabaseTableRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabaseInterface_CreateDatabaseTable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDatabaseTable'
type MockDatabaseInterface_CreateDatabaseTable_Call struct {
	*mock.Call
}

// CreateDatabaseTable is a helper method to define mock.On call
//   - ctx context.Context
//   - request database.CreateDatabaseTableRequest
func (_e *MockDatabaseInterface_Expecter) CreateDatabaseTable(ctx interface{}, request interface{}) *MockDatabaseInterface_CreateDatabaseTable_Call {
	return &MockDatabaseInterface_CreateDatabaseTable_Call{Call: _e.mock.On("CreateDatabaseTable", ctx, request)}
}

func (_c *MockDatabaseInterface_CreateDatabaseTable_Call) Run(run func(ctx context.Context, request database.CreateDatabaseTableRequest)) *MockDatabaseInterface_CreateDatabaseTable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.CreateDatabaseTableRequest))
	})
	return _c
}

func (_c *MockDatabaseInterface_CreateDatabaseTable_Call) Return(_a0 *database.DatabaseTable, _a1 error) *MockDatabaseInterface_CreateDatabaseTable_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabaseInterface_CreateDatabaseTable_Call) RunAndReturn(run func(context.Context, database.CreateDatabaseTableRequest) (*database.DatabaseTable, error)) *MockDatabaseInterface_CreateDatabaseTable_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSyncedDatabaseTable provides a mock function with given fields: ctx, request
func (_m *MockDatabaseInterface) CreateSyncedDatabaseTable(ctx context.Context, request database.CreateSyncedDatabaseTableRequest) (*database.SyncedDatabaseTable, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateSyncedDatabaseTable")
	}

	var r0 *database.SyncedDatabaseTable
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.CreateSyncedDatabaseTableRequest) (*database.SyncedDatabaseTable, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.CreateSyncedDatabaseTableRequest) *database.SyncedDatabaseTable); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.SyncedDatabaseTable)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.CreateSyncedDatabaseTableRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabaseInterface_CreateSyncedDatabaseTable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSyncedDatabaseTable'
type MockDatabaseInterface_CreateSyncedDatabaseTable_Call struct {
	*mock.Call
}

// CreateSyncedDatabaseTable is a helper method to define mock.On call
//   - ctx context.Context
//   - request database.CreateSyncedDatabaseTableRequest
func (_e *MockDatabaseInterface_Expecter) CreateSyncedDatabaseTable(ctx interface{}, request interface{}) *MockDatabaseInterface_CreateSyncedDatabaseTable_Call {
	return &MockDatabaseInterface_CreateSyncedDatabaseTable_Call{Call: _e.mock.On("CreateSyncedDatabaseTable", ctx, request)}
}

func (_c *MockDatabaseInterface_CreateSyncedDatabaseTable_Call) Run(run func(ctx context.Context, request database.CreateSyncedDatabaseTableRequest)) *MockDatabaseInterface_CreateSyncedDatabaseTable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.CreateSyncedDatabaseTableRequest))
	})
	return _c
}

func (_c *MockDatabaseInterface_CreateSyncedDatabaseTable_Call) Return(_a0 *database.SyncedDatabaseTable, _a1 error) *MockDatabaseInterface_CreateSyncedDatabaseTable_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabaseInterface_CreateSyncedDatabaseTable_Call) RunAndReturn(run func(context.Context, database.CreateSyncedDatabaseTableRequest) (*database.SyncedDatabaseTable, error)) *MockDatabaseInterface_CreateSyncedDatabaseTable_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDatabaseCatalog provides a mock function with given fields: ctx, request
func (_m *MockDatabaseInterface) DeleteDatabaseCatalog(ctx context.Context, request database.DeleteDatabaseCatalogRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDatabaseCatalog")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.DeleteDatabaseCatalogRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabaseInterface_DeleteDatabaseCatalog_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDatabaseCatalog'
type MockDatabaseInterface_DeleteDatabaseCatalog_Call struct {
	*mock.Call
}

// DeleteDatabaseCatalog is a helper method to define mock.On call
//   - ctx context.Context
//   - request database.DeleteDatabaseCatalogRequest
func (_e *MockDatabaseInterface_Expecter) DeleteDatabaseCatalog(ctx interface{}, request interface{}) *MockDatabaseInterface_DeleteDatabaseCatalog_Call {
	return &MockDatabaseInterface_DeleteDatabaseCatalog_Call{Call: _e.mock.On("DeleteDatabaseCatalog", ctx, request)}
}

func (_c *MockDatabaseInterface_DeleteDatabaseCatalog_Call) Run(run func(ctx context.Context, request database.DeleteDatabaseCatalogRequest)) *MockDatabaseInterface_DeleteDatabaseCatalog_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.DeleteDatabaseCatalogRequest))
	})
	return _c
}

func (_c *MockDatabaseInterface_DeleteDatabaseCatalog_Call) Return(_a0 error) *MockDatabaseInterface_DeleteDatabaseCatalog_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabaseInterface_DeleteDatabaseCatalog_Call) RunAndReturn(run func(context.Context, database.DeleteDatabaseCatalogRequest) error) *MockDatabaseInterface_DeleteDatabaseCatalog_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDatabaseCatalogByName provides a mock function with given fields: ctx, name
func (_m *MockDatabaseInterface) DeleteDatabaseCatalogByName(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDatabaseCatalogByName")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabaseInterface_DeleteDatabaseCatalogByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDatabaseCatalogByName'
type MockDatabaseInterface_DeleteDatabaseCatalogByName_Call struct {
	*mock.Call
}

// DeleteDatabaseCatalogByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockDatabaseInterface_Expecter) DeleteDatabaseCatalogByName(ctx interface{}, name interface{}) *MockDatabaseInterface_DeleteDatabaseCatalogByName_Call {
	return &MockDatabaseInterface_DeleteDatabaseCatalogByName_Call{Call: _e.mock.On("DeleteDatabaseCatalogByName", ctx, name)}
}

func (_c *MockDatabaseInterface_DeleteDatabaseCatalogByName_Call) Run(run func(ctx context.Context, name string)) *MockDatabaseInterface_DeleteDatabaseCatalogByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDatabaseInterface_DeleteDatabaseCatalogByName_Call) Return(_a0 error) *MockDatabaseInterface_DeleteDatabaseCatalogByName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabaseInterface_DeleteDatabaseCatalogByName_Call) RunAndReturn(run func(context.Context, string) error) *MockDatabaseInterface_DeleteDatabaseCatalogByName_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDatabaseInstance provides a mock function with given fields: ctx, request
func (_m *MockDatabaseInterface) DeleteDatabaseInstance(ctx context.Context, request database.DeleteDatabaseInstanceRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDatabaseInstance")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.DeleteDatabaseInstanceRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabaseInterface_DeleteDatabaseInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDatabaseInstance'
type MockDatabaseInterface_DeleteDatabaseInstance_Call struct {
	*mock.Call
}

// DeleteDatabaseInstance is a helper method to define mock.On call
//   - ctx context.Context
//   - request database.DeleteDatabaseInstanceRequest
func (_e *MockDatabaseInterface_Expecter) DeleteDatabaseInstance(ctx interface{}, request interface{}) *MockDatabaseInterface_DeleteDatabaseInstance_Call {
	return &MockDatabaseInterface_DeleteDatabaseInstance_Call{Call: _e.mock.On("DeleteDatabaseInstance", ctx, request)}
}

func (_c *MockDatabaseInterface_DeleteDatabaseInstance_Call) Run(run func(ctx context.Context, request database.DeleteDatabaseInstanceRequest)) *MockDatabaseInterface_DeleteDatabaseInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.DeleteDatabaseInstanceRequest))
	})
	return _c
}

func (_c *MockDatabaseInterface_DeleteDatabaseInstance_Call) Return(_a0 error) *MockDatabaseInterface_DeleteDatabaseInstance_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabaseInterface_DeleteDatabaseInstance_Call) RunAndReturn(run func(context.Context, database.DeleteDatabaseInstanceRequest) error) *MockDatabaseInterface_DeleteDatabaseInstance_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDatabaseInstanceByName provides a mock function with given fields: ctx, name
func (_m *MockDatabaseInterface) DeleteDatabaseInstanceByName(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDatabaseInstanceByName")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabaseInterface_DeleteDatabaseInstanceByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDatabaseInstanceByName'
type MockDatabaseInterface_DeleteDatabaseInstanceByName_Call struct {
	*mock.Call
}

// DeleteDatabaseInstanceByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockDatabaseInterface_Expecter) DeleteDatabaseInstanceByName(ctx interface{}, name interface{}) *MockDatabaseInterface_DeleteDatabaseInstanceByName_Call {
	return &MockDatabaseInterface_DeleteDatabaseInstanceByName_Call{Call: _e.mock.On("DeleteDatabaseInstanceByName", ctx, name)}
}

func (_c *MockDatabaseInterface_DeleteDatabaseInstanceByName_Call) Run(run func(ctx context.Context, name string)) *MockDatabaseInterface_DeleteDatabaseInstanceByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDatabaseInterface_DeleteDatabaseInstanceByName_Call) Return(_a0 error) *MockDatabaseInterface_DeleteDatabaseInstanceByName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabaseInterface_DeleteDatabaseInstanceByName_Call) RunAndReturn(run func(context.Context, string) error) *MockDatabaseInterface_DeleteDatabaseInstanceByName_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDatabaseTable provides a mock function with given fields: ctx, request
func (_m *MockDatabaseInterface) DeleteDatabaseTable(ctx context.Context, request database.DeleteDatabaseTableRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDatabaseTable")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.DeleteDatabaseTableRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabaseInterface_DeleteDatabaseTable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDatabaseTable'
type MockDatabaseInterface_DeleteDatabaseTable_Call struct {
	*mock.Call
}

// DeleteDatabaseTable is a helper method to define mock.On call
//   - ctx context.Context
//   - request database.DeleteDatabaseTableRequest
func (_e *MockDatabaseInterface_Expecter) DeleteDatabaseTable(ctx interface{}, request interface{}) *MockDatabaseInterface_DeleteDatabaseTable_Call {
	return &MockDatabaseInterface_DeleteDatabaseTable_Call{Call: _e.mock.On("DeleteDatabaseTable", ctx, request)}
}

func (_c *MockDatabaseInterface_DeleteDatabaseTable_Call) Run(run func(ctx context.Context, request database.DeleteDatabaseTableRequest)) *MockDatabaseInterface_DeleteDatabaseTable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.DeleteDatabaseTableRequest))
	})
	return _c
}

func (_c *MockDatabaseInterface_DeleteDatabaseTable_Call) Return(_a0 error) *MockDatabaseInterface_DeleteDatabaseTable_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabaseInterface_DeleteDatabaseTable_Call) RunAndReturn(run func(context.Context, database.DeleteDatabaseTableRequest) error) *MockDatabaseInterface_DeleteDatabaseTable_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDatabaseTableByName provides a mock function with given fields: ctx, name
func (_m *MockDatabaseInterface) DeleteDatabaseTableByName(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDatabaseTableByName")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabaseInterface_DeleteDatabaseTableByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDatabaseTableByName'
type MockDatabaseInterface_DeleteDatabaseTableByName_Call struct {
	*mock.Call
}

// DeleteDatabaseTableByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockDatabaseInterface_Expecter) DeleteDatabaseTableByName(ctx interface{}, name interface{}) *MockDatabaseInterface_DeleteDatabaseTableByName_Call {
	return &MockDatabaseInterface_DeleteDatabaseTableByName_Call{Call: _e.mock.On("DeleteDatabaseTableByName", ctx, name)}
}

func (_c *MockDatabaseInterface_DeleteDatabaseTableByName_Call) Run(run func(ctx context.Context, name string)) *MockDatabaseInterface_DeleteDatabaseTableByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDatabaseInterface_DeleteDatabaseTableByName_Call) Return(_a0 error) *MockDatabaseInterface_DeleteDatabaseTableByName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabaseInterface_DeleteDatabaseTableByName_Call) RunAndReturn(run func(context.Context, string) error) *MockDatabaseInterface_DeleteDatabaseTableByName_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSyncedDatabaseTable provides a mock function with given fields: ctx, request
func (_m *MockDatabaseInterface) DeleteSyncedDatabaseTable(ctx context.Context, request database.DeleteSyncedDatabaseTableRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSyncedDatabaseTable")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.DeleteSyncedDatabaseTableRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabaseInterface_DeleteSyncedDatabaseTable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSyncedDatabaseTable'
type MockDatabaseInterface_DeleteSyncedDatabaseTable_Call struct {
	*mock.Call
}

// DeleteSyncedDatabaseTable is a helper method to define mock.On call
//   - ctx context.Context
//   - request database.DeleteSyncedDatabaseTableRequest
func (_e *MockDatabaseInterface_Expecter) DeleteSyncedDatabaseTable(ctx interface{}, request interface{}) *MockDatabaseInterface_DeleteSyncedDatabaseTable_Call {
	return &MockDatabaseInterface_DeleteSyncedDatabaseTable_Call{Call: _e.mock.On("DeleteSyncedDatabaseTable", ctx, request)}
}

func (_c *MockDatabaseInterface_DeleteSyncedDatabaseTable_Call) Run(run func(ctx context.Context, request database.DeleteSyncedDatabaseTableRequest)) *MockDatabaseInterface_DeleteSyncedDatabaseTable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.DeleteSyncedDatabaseTableRequest))
	})
	return _c
}

func (_c *MockDatabaseInterface_DeleteSyncedDatabaseTable_Call) Return(_a0 error) *MockDatabaseInterface_DeleteSyncedDatabaseTable_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabaseInterface_DeleteSyncedDatabaseTable_Call) RunAndReturn(run func(context.Context, database.DeleteSyncedDatabaseTableRequest) error) *MockDatabaseInterface_DeleteSyncedDatabaseTable_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSyncedDatabaseTableByName provides a mock function with given fields: ctx, name
func (_m *MockDatabaseInterface) DeleteSyncedDatabaseTableByName(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSyncedDatabaseTableByName")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabaseInterface_DeleteSyncedDatabaseTableByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSyncedDatabaseTableByName'
type MockDatabaseInterface_DeleteSyncedDatabaseTableByName_Call struct {
	*mock.Call
}

// DeleteSyncedDatabaseTableByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockDatabaseInterface_Expecter) DeleteSyncedDatabaseTableByName(ctx interface{}, name interface{}) *MockDatabaseInterface_DeleteSyncedDatabaseTableByName_Call {
	return &MockDatabaseInterface_DeleteSyncedDatabaseTableByName_Call{Call: _e.mock.On("DeleteSyncedDatabaseTableByName", ctx, name)}
}

func (_c *MockDatabaseInterface_DeleteSyncedDatabaseTableByName_Call) Run(run func(ctx context.Context, name string)) *MockDatabaseInterface_DeleteSyncedDatabaseTableByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDatabaseInterface_DeleteSyncedDatabaseTableByName_Call) Return(_a0 error) *MockDatabaseInterface_DeleteSyncedDatabaseTableByName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabaseInterface_DeleteSyncedDatabaseTableByName_Call) RunAndReturn(run func(context.Context, string) error) *MockDatabaseInterface_DeleteSyncedDatabaseTableByName_Call {
	_c.Call.Return(run)
	return _c
}

// FindDatabaseInstanceByUid provides a mock function with given fields: ctx, request
func (_m *MockDatabaseInterface) FindDatabaseInstanceByUid(ctx context.Context, request database.FindDatabaseInstanceByUidRequest) (*database.DatabaseInstance, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for FindDatabaseInstanceByUid")
	}

	var r0 *database.DatabaseInstance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.FindDatabaseInstanceByUidRequest) (*database.DatabaseInstance, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.FindDatabaseInstanceByUidRequest) *database.DatabaseInstance); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.DatabaseInstance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.FindDatabaseInstanceByUidRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabaseInterface_FindDatabaseInstanceByUid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindDatabaseInstanceByUid'
type MockDatabaseInterface_FindDatabaseInstanceByUid_Call struct {
	*mock.Call
}

// FindDatabaseInstanceByUid is a helper method to define mock.On call
//   - ctx context.Context
//   - request database.FindDatabaseInstanceByUidRequest
func (_e *MockDatabaseInterface_Expecter) FindDatabaseInstanceByUid(ctx interface{}, request interface{}) *MockDatabaseInterface_FindDatabaseInstanceByUid_Call {
	return &MockDatabaseInterface_FindDatabaseInstanceByUid_Call{Call: _e.mock.On("FindDatabaseInstanceByUid", ctx, request)}
}

func (_c *MockDatabaseInterface_FindDatabaseInstanceByUid_Call) Run(run func(ctx context.Context, request database.FindDatabaseInstanceByUidRequest)) *MockDatabaseInterface_FindDatabaseInstanceByUid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.FindDatabaseInstanceByUidRequest))
	})
	return _c
}

func (_c *MockDatabaseInterface_FindDatabaseInstanceByUid_Call) Return(_a0 *database.DatabaseInstance, _a1 error) *MockDatabaseInterface_FindDatabaseInstanceByUid_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabaseInterface_FindDatabaseInstanceByUid_Call) RunAndReturn(run func(context.Context, database.FindDatabaseInstanceByUidRequest) (*database.DatabaseInstance, error)) *MockDatabaseInterface_FindDatabaseInstanceByUid_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateDatabaseCredential provides a mock function with given fields: ctx, request
func (_m *MockDatabaseInterface) GenerateDatabaseCredential(ctx context.Context, request database.GenerateDatabaseCredentialRequest) (*database.DatabaseCredential, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GenerateDatabaseCredential")
	}

	var r0 *database.DatabaseCredential
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.GenerateDatabaseCredentialRequest) (*database.DatabaseCredential, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.GenerateDatabaseCredentialRequest) *database.DatabaseCredential); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.DatabaseCredential)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.GenerateDatabaseCredentialRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabaseInterface_GenerateDatabaseCredential_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateDatabaseCredential'
type MockDatabaseInterface_GenerateDatabaseCredential_Call struct {
	*mock.Call
}

// GenerateDatabaseCredential is a helper method to define mock.On call
//   - ctx context.Context
//   - request database.GenerateDatabaseCredentialRequest
func (_e *MockDatabaseInterface_Expecter) GenerateDatabaseCredential(ctx interface{}, request interface{}) *MockDatabaseInterface_GenerateDatabaseCredential_Call {
	return &MockDatabaseInterface_GenerateDatabaseCredential_Call{Call: _e.mock.On("GenerateDatabaseCredential", ctx, request)}
}

func (_c *MockDatabaseInterface_GenerateDatabaseCredential_Call) Run(run func(ctx context.Context, request database.GenerateDatabaseCredentialRequest)) *MockDatabaseInterface_GenerateDatabaseCredential_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.GenerateDatabaseCredentialRequest))
	})
	return _c
}

func (_c *MockDatabaseInterface_GenerateDatabaseCredential_Call) Return(_a0 *database.DatabaseCredential, _a1 error) *MockDatabaseInterface_GenerateDatabaseCredential_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabaseInterface_GenerateDatabaseCredential_Call) RunAndReturn(run func(context.Context, database.GenerateDatabaseCredentialRequest) (*database.DatabaseCredential, error)) *MockDatabaseInterface_GenerateDatabaseCredential_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatabaseCatalog provides a mock function with given fields: ctx, request
func (_m *MockDatabaseInterface) GetDatabaseCatalog(ctx context.Context, request database.GetDatabaseCatalogRequest) (*database.DatabaseCatalog, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetDatabaseCatalog")
	}

	var r0 *database.DatabaseCatalog
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.GetDatabaseCatalogRequest) (*database.DatabaseCatalog, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.GetDatabaseCatalogRequest) *database.DatabaseCatalog); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.DatabaseCatalog)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.GetDatabaseCatalogRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabaseInterface_GetDatabaseCatalog_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatabaseCatalog'
type MockDatabaseInterface_GetDatabaseCatalog_Call struct {
	*mock.Call
}

// GetDatabaseCatalog is a helper method to define mock.On call
//   - ctx context.Context
//   - request database.GetDatabaseCatalogRequest
func (_e *MockDatabaseInterface_Expecter) GetDatabaseCatalog(ctx interface{}, request interface{}) *MockDatabaseInterface_GetDatabaseCatalog_Call {
	return &MockDatabaseInterface_GetDatabaseCatalog_Call{Call: _e.mock.On("GetDatabaseCatalog", ctx, request)}
}

func (_c *MockDatabaseInterface_GetDatabaseCatalog_Call) Run(run func(ctx context.Context, request database.GetDatabaseCatalogRequest)) *MockDatabaseInterface_GetDatabaseCatalog_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.GetDatabaseCatalogRequest))
	})
	return _c
}

func (_c *MockDatabaseInterface_GetDatabaseCatalog_Call) Return(_a0 *database.DatabaseCatalog, _a1 error) *MockDatabaseInterface_GetDatabaseCatalog_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabaseInterface_GetDatabaseCatalog_Call) RunAndReturn(run func(context.Context, database.GetDatabaseCatalogRequest) (*database.DatabaseCatalog, error)) *MockDatabaseInterface_GetDatabaseCatalog_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatabaseCatalogByName provides a mock function with given fields: ctx, name
func (_m *MockDatabaseInterface) GetDatabaseCatalogByName(ctx context.Context, name string) (*database.DatabaseCatalog, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetDatabaseCatalogByName")
	}

	var r0 *database.DatabaseCatalog
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*database.DatabaseCatalog, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *database.DatabaseCatalog); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.DatabaseCatalog)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabaseInterface_GetDatabaseCatalogByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatabaseCatalogByName'
type MockDatabaseInterface_GetDatabaseCatalogByName_Call struct {
	*mock.Call
}

// GetDatabaseCatalogByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockDatabaseInterface_Expecter) GetDatabaseCatalogByName(ctx interface{}, name interface{}) *MockDatabaseInterface_GetDatabaseCatalogByName_Call {
	return &MockDatabaseInterface_GetDatabaseCatalogByName_Call{Call: _e.mock.On("GetDatabaseCatalogByName", ctx, name)}
}

func (_c *MockDatabaseInterface_GetDatabaseCatalogByName_Call) Run(run func(ctx context.Context, name string)) *MockDatabaseInterface_GetDatabaseCatalogByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDatabaseInterface_GetDatabaseCatalogByName_Call) Return(_a0 *database.DatabaseCatalog, _a1 error) *MockDatabaseInterface_GetDatabaseCatalogByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabaseInterface_GetDatabaseCatalogByName_Call) RunAndReturn(run func(context.Context, string) (*database.DatabaseCatalog, error)) *MockDatabaseInterface_GetDatabaseCatalogByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatabaseInstance provides a mock function with given fields: ctx, request
func (_m *MockDatabaseInterface) GetDatabaseInstance(ctx context.Context, request database.GetDatabaseInstanceRequest) (*database.DatabaseInstance, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetDatabaseInstance")
	}

	var r0 *database.DatabaseInstance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.GetDatabaseInstanceRequest) (*database.DatabaseInstance, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.GetDatabaseInstanceRequest) *database.DatabaseInstance); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.DatabaseInstance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.GetDatabaseInstanceRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabaseInterface_GetDatabaseInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatabaseInstance'
type MockDatabaseInterface_GetDatabaseInstance_Call struct {
	*mock.Call
}

// GetDatabaseInstance is a helper method to define mock.On call
//   - ctx context.Context
//   - request database.GetDatabaseInstanceRequest
func (_e *MockDatabaseInterface_Expecter) GetDatabaseInstance(ctx interface{}, request interface{}) *MockDatabaseInterface_GetDatabaseInstance_Call {
	return &MockDatabaseInterface_GetDatabaseInstance_Call{Call: _e.mock.On("GetDatabaseInstance", ctx, request)}
}

func (_c *MockDatabaseInterface_GetDatabaseInstance_Call) Run(run func(ctx context.Context, request database.GetDatabaseInstanceRequest)) *MockDatabaseInterface_GetDatabaseInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.GetDatabaseInstanceRequest))
	})
	return _c
}

func (_c *MockDatabaseInterface_GetDatabaseInstance_Call) Return(_a0 *database.DatabaseInstance, _a1 error) *MockDatabaseInterface_GetDatabaseInstance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabaseInterface_GetDatabaseInstance_Call) RunAndReturn(run func(context.Context, database.GetDatabaseInstanceRequest) (*database.DatabaseInstance, error)) *MockDatabaseInterface_GetDatabaseInstance_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatabaseInstanceByName provides a mock function with given fields: ctx, name
func (_m *MockDatabaseInterface) GetDatabaseInstanceByName(ctx context.Context, name string) (*database.DatabaseInstance, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetDatabaseInstanceByName")
	}

	var r0 *database.DatabaseInstance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*database.DatabaseInstance, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *database.DatabaseInstance); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.DatabaseInstance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabaseInterface_GetDatabaseInstanceByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatabaseInstanceByName'
type MockDatabaseInterface_GetDatabaseInstanceByName_Call struct {
	*mock.Call
}

// GetDatabaseInstanceByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockDatabaseInterface_Expecter) GetDatabaseInstanceByName(ctx interface{}, name interface{}) *MockDatabaseInterface_GetDatabaseInstanceByName_Call {
	return &MockDatabaseInterface_GetDatabaseInstanceByName_Call{Call: _e.mock.On("GetDatabaseInstanceByName", ctx, name)}
}

func (_c *MockDatabaseInterface_GetDatabaseInstanceByName_Call) Run(run func(ctx context.Context, name string)) *MockDatabaseInterface_GetDatabaseInstanceByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDatabaseInterface_GetDatabaseInstanceByName_Call) Return(_a0 *database.DatabaseInstance, _a1 error) *MockDatabaseInterface_GetDatabaseInstanceByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabaseInterface_GetDatabaseInstanceByName_Call) RunAndReturn(run func(context.Context, string) (*database.DatabaseInstance, error)) *MockDatabaseInterface_GetDatabaseInstanceByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatabaseTable provides a mock function with given fields: ctx, request
func (_m *MockDatabaseInterface) GetDatabaseTable(ctx context.Context, request database.GetDatabaseTableRequest) (*database.DatabaseTable, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetDatabaseTable")
	}

	var r0 *database.DatabaseTable
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.GetDatabaseTableRequest) (*database.DatabaseTable, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.GetDatabaseTableRequest) *database.DatabaseTable); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.DatabaseTable)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.GetDatabaseTableRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabaseInterface_GetDatabaseTable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatabaseTable'
type MockDatabaseInterface_GetDatabaseTable_Call struct {
	*mock.Call
}

// GetDatabaseTable is a helper method to define mock.On call
//   - ctx context.Context
//   - request database.GetDatabaseTableRequest
func (_e *MockDatabaseInterface_Expecter) GetDatabaseTable(ctx interface{}, request interface{}) *MockDatabaseInterface_GetDatabaseTable_Call {
	return &MockDatabaseInterface_GetDatabaseTable_Call{Call: _e.mock.On("GetDatabaseTable", ctx, request)}
}

func (_c *MockDatabaseInterface_GetDatabaseTable_Call) Run(run func(ctx context.Context, request database.GetDatabaseTableRequest)) *MockDatabaseInterface_GetDatabaseTable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.GetDatabaseTableRequest))
	})
	return _c
}

func (_c *MockDatabaseInterface_GetDatabaseTable_Call) Return(_a0 *database.DatabaseTable, _a1 error) *MockDatabaseInterface_GetDatabaseTable_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabaseInterface_GetDatabaseTable_Call) RunAndReturn(run func(context.Context, database.GetDatabaseTableRequest) (*database.DatabaseTable, error)) *MockDatabaseInterface_GetDatabaseTable_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatabaseTableByName provides a mock function with given fields: ctx, name
func (_m *MockDatabaseInterface) GetDatabaseTableByName(ctx context.Context, name string) (*database.DatabaseTable, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetDatabaseTableByName")
	}

	var r0 *database.DatabaseTable
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*database.DatabaseTable, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *database.DatabaseTable); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.DatabaseTable)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabaseInterface_GetDatabaseTableByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatabaseTableByName'
type MockDatabaseInterface_GetDatabaseTableByName_Call struct {
	*mock.Call
}

// GetDatabaseTableByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockDatabaseInterface_Expecter) GetDatabaseTableByName(ctx interface{}, name interface{}) *MockDatabaseInterface_GetDatabaseTableByName_Call {
	return &MockDatabaseInterface_GetDatabaseTableByName_Call{Call: _e.mock.On("GetDatabaseTableByName", ctx, name)}
}

func (_c *MockDatabaseInterface_GetDatabaseTableByName_Call) Run(run func(ctx context.Context, name string)) *MockDatabaseInterface_GetDatabaseTableByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDatabaseInterface_GetDatabaseTableByName_Call) Return(_a0 *database.DatabaseTable, _a1 error) *MockDatabaseInterface_GetDatabaseTableByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabaseInterface_GetDatabaseTableByName_Call) RunAndReturn(run func(context.Context, string) (*database.DatabaseTable, error)) *MockDatabaseInterface_GetDatabaseTableByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetSyncedDatabaseTable provides a mock function with given fields: ctx, request
func (_m *MockDatabaseInterface) GetSyncedDatabaseTable(ctx context.Context, request database.GetSyncedDatabaseTableRequest) (*database.SyncedDatabaseTable, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetSyncedDatabaseTable")
	}

	var r0 *database.SyncedDatabaseTable
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.GetSyncedDatabaseTableRequest) (*database.SyncedDatabaseTable, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.GetSyncedDatabaseTableRequest) *database.SyncedDatabaseTable); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.SyncedDatabaseTable)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.GetSyncedDatabaseTableRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabaseInterface_GetSyncedDatabaseTable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSyncedDatabaseTable'
type MockDatabaseInterface_GetSyncedDatabaseTable_Call struct {
	*mock.Call
}

// GetSyncedDatabaseTable is a helper method to define mock.On call
//   - ctx context.Context
//   - request database.GetSyncedDatabaseTableRequest
func (_e *MockDatabaseInterface_Expecter) GetSyncedDatabaseTable(ctx interface{}, request interface{}) *MockDatabaseInterface_GetSyncedDatabaseTable_Call {
	return &MockDatabaseInterface_GetSyncedDatabaseTable_Call{Call: _e.mock.On("GetSyncedDatabaseTable", ctx, request)}
}

func (_c *MockDatabaseInterface_GetSyncedDatabaseTable_Call) Run(run func(ctx context.Context, request database.GetSyncedDatabaseTableRequest)) *MockDatabaseInterface_GetSyncedDatabaseTable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.GetSyncedDatabaseTableRequest))
	})
	return _c
}

func (_c *MockDatabaseInterface_GetSyncedDatabaseTable_Call) Return(_a0 *database.SyncedDatabaseTable, _a1 error) *MockDatabaseInterface_GetSyncedDatabaseTable_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabaseInterface_GetSyncedDatabaseTable_Call) RunAndReturn(run func(context.Context, database.GetSyncedDatabaseTableRequest) (*database.SyncedDatabaseTable, error)) *MockDatabaseInterface_GetSyncedDatabaseTable_Call {
	_c.Call.Return(run)
	return _c
}

// GetSyncedDatabaseTableByName provides a mock function with given fields: ctx, name
func (_m *MockDatabaseInterface) GetSyncedDatabaseTableByName(ctx context.Context, name string) (*database.SyncedDatabaseTable, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetSyncedDatabaseTableByName")
	}

	var r0 *database.SyncedDatabaseTable
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*database.SyncedDatabaseTable, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *database.SyncedDatabaseTable); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.SyncedDatabaseTable)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabaseInterface_GetSyncedDatabaseTableByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSyncedDatabaseTableByName'
type MockDatabaseInterface_GetSyncedDatabaseTableByName_Call struct {
	*mock.Call
}

// GetSyncedDatabaseTableByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockDatabaseInterface_Expecter) GetSyncedDatabaseTableByName(ctx interface{}, name interface{}) *MockDatabaseInterface_GetSyncedDatabaseTableByName_Call {
	return &MockDatabaseInterface_GetSyncedDatabaseTableByName_Call{Call: _e.mock.On("GetSyncedDatabaseTableByName", ctx, name)}
}

func (_c *MockDatabaseInterface_GetSyncedDatabaseTableByName_Call) Run(run func(ctx context.Context, name string)) *MockDatabaseInterface_GetSyncedDatabaseTableByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDatabaseInterface_GetSyncedDatabaseTableByName_Call) Return(_a0 *database.SyncedDatabaseTable, _a1 error) *MockDatabaseInterface_GetSyncedDatabaseTableByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabaseInterface_GetSyncedDatabaseTableByName_Call) RunAndReturn(run func(context.Context, string) (*database.SyncedDatabaseTable, error)) *MockDatabaseInterface_GetSyncedDatabaseTableByName_Call {
	_c.Call.Return(run)
	return _c
}

// ListDatabaseInstances provides a mock function with given fields: ctx, request
func (_m *MockDatabaseInterface) ListDatabaseInstances(ctx context.Context, request database.ListDatabaseInstancesRequest) listing.Iterator[database.DatabaseInstance] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListDatabaseInstances")
	}

	var r0 listing.Iterator[database.DatabaseInstance]
	if rf, ok := ret.Get(0).(func(context.Context, database.ListDatabaseInstancesRequest) listing.Iterator[database.DatabaseInstance]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listing.Iterator[database.DatabaseInstance])
		}
	}

	return r0
}

// MockDatabaseInterface_ListDatabaseInstances_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDatabaseInstances'
type MockDatabaseInterface_ListDatabaseInstances_Call struct {
	*mock.Call
}

// ListDatabaseInstances is a helper method to define mock.On call
//   - ctx context.Context
//   - request database.ListDatabaseInstancesRequest
func (_e *MockDatabaseInterface_Expecter) ListDatabaseInstances(ctx interface{}, request interface{}) *MockDatabaseInterface_ListDatabaseInstances_Call {
	return &MockDatabaseInterface_ListDatabaseInstances_Call{Call: _e.mock.On("ListDatabaseInstances", ctx, request)}
}

func (_c *MockDatabaseInterface_ListDatabaseInstances_Call) Run(run func(ctx context.Context, request database.ListDatabaseInstancesRequest)) *MockDatabaseInterface_ListDatabaseInstances_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.ListDatabaseInstancesRequest))
	})
	return _c
}

func (_c *MockDatabaseInterface_ListDatabaseInstances_Call) Return(_a0 listing.Iterator[database.DatabaseInstance]) *MockDatabaseInterface_ListDatabaseInstances_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabaseInterface_ListDatabaseInstances_Call) RunAndReturn(run func(context.Context, database.ListDatabaseInstancesRequest) listing.Iterator[database.DatabaseInstance]) *MockDatabaseInterface_ListDatabaseInstances_Call {
	_c.Call.Return(run)
	return _c
}

// ListDatabaseInstancesAll provides a mock function with given fields: ctx, request
func (_m *MockDatabaseInterface) ListDatabaseInstancesAll(ctx context.Context, request database.ListDatabaseInstancesRequest) ([]database.DatabaseInstance, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListDatabaseInstancesAll")
	}

	var r0 []database.DatabaseInstance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.ListDatabaseInstancesRequest) ([]database.DatabaseInstance, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.ListDatabaseInstancesRequest) []database.DatabaseInstance); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.DatabaseInstance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.ListDatabaseInstancesRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabaseInterface_ListDatabaseInstancesAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDatabaseInstancesAll'
type MockDatabaseInterface_ListDatabaseInstancesAll_Call struct {
	*mock.Call
}

// ListDatabaseInstancesAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request database.ListDatabaseInstancesRequest
func (_e *MockDatabaseInterface_Expecter) ListDatabaseInstancesAll(ctx interface{}, request interface{}) *MockDatabaseInterface_ListDatabaseInstancesAll_Call {
	return &MockDatabaseInterface_ListDatabaseInstancesAll_Call{Call: _e.mock.On("ListDatabaseInstancesAll", ctx, request)}
}

func (_c *MockDatabaseInterface_ListDatabaseInstancesAll_Call) Run(run func(ctx context.Context, request database.ListDatabaseInstancesRequest)) *MockDatabaseInterface_ListDatabaseInstancesAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.ListDatabaseInstancesRequest))
	})
	return _c
}

func (_c *MockDatabaseInterface_ListDatabaseInstancesAll_Call) Return(_a0 []database.DatabaseInstance, _a1 error) *MockDatabaseInterface_ListDatabaseInstancesAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabaseInterface_ListDatabaseInstancesAll_Call) RunAndReturn(run func(context.Context, database.ListDatabaseInstancesRequest) ([]database.DatabaseInstance, error)) *MockDatabaseInterface_ListDatabaseInstancesAll_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDatabaseInstance provides a mock function with given fields: ctx, request
func (_m *MockDatabaseInterface) UpdateDatabaseInstance(ctx context.Context, request database.UpdateDatabaseInstanceRequest) (*database.DatabaseInstance, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDatabaseInstance")
	}

	var r0 *database.DatabaseInstance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.UpdateDatabaseInstanceRequest) (*database.DatabaseInstance, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.UpdateDatabaseInstanceRequest) *database.DatabaseInstance); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.DatabaseInstance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.UpdateDatabaseInstanceRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabaseInterface_UpdateDatabaseInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDatabaseInstance'
type MockDatabaseInterface_UpdateDatabaseInstance_Call struct {
	*mock.Call
}

// UpdateDatabaseInstance is a helper method to define mock.On call
//   - ctx context.Context
//   - request database.UpdateDatabaseInstanceRequest
func (_e *MockDatabaseInterface_Expecter) UpdateDatabaseInstance(ctx interface{}, request interface{}) *MockDatabaseInterface_UpdateDatabaseInstance_Call {
	return &MockDatabaseInterface_UpdateDatabaseInstance_Call{Call: _e.mock.On("UpdateDatabaseInstance", ctx, request)}
}

func (_c *MockDatabaseInterface_UpdateDatabaseInstance_Call) Run(run func(ctx context.Context, request database.UpdateDatabaseInstanceRequest)) *MockDatabaseInterface_UpdateDatabaseInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.UpdateDatabaseInstanceRequest))
	})
	return _c
}

func (_c *MockDatabaseInterface_UpdateDatabaseInstance_Call) Return(_a0 *database.DatabaseInstance, _a1 error) *MockDatabaseInterface_UpdateDatabaseInstance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabaseInterface_UpdateDatabaseInstance_Call) RunAndReturn(run func(context.Context, database.UpdateDatabaseInstanceRequest) (*database.DatabaseInstance, error)) *MockDatabaseInterface_UpdateDatabaseInstance_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDatabaseInterface creates a new instance of MockDatabaseInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDatabaseInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDatabaseInterface {
	mock := &MockDatabaseInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
