// Code generated by mockery v2.53.2. DO NOT EDIT.

package sharing

import (
	context "context"

	listing "github.com/databricks/databricks-sdk-go/listing"
	mock "github.com/stretchr/testify/mock"

	sharing "github.com/databricks/databricks-sdk-go/service/sharing"
)

// MockRecipientFederationPoliciesInterface is an autogenerated mock type for the RecipientFederationPoliciesInterface type
type MockRecipientFederationPoliciesInterface struct {
	mock.Mock
}

type MockRecipientFederationPoliciesInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRecipientFederationPoliciesInterface) EXPECT() *MockRecipientFederationPoliciesInterface_Expecter {
	return &MockRecipientFederationPoliciesInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, request
func (_m *MockRecipientFederationPoliciesInterface) Create(ctx context.Context, request sharing.CreateFederationPolicyRequest) (*sharing.FederationPolicy, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *sharing.FederationPolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sharing.CreateFederationPolicyRequest) (*sharing.FederationPolicy, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sharing.CreateFederationPolicyRequest) *sharing.FederationPolicy); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sharing.FederationPolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sharing.CreateFederationPolicyRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRecipientFederationPoliciesInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockRecipientFederationPoliciesInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - request sharing.CreateFederationPolicyRequest
func (_e *MockRecipientFederationPoliciesInterface_Expecter) Create(ctx interface{}, request interface{}) *MockRecipientFederationPoliciesInterface_Create_Call {
	return &MockRecipientFederationPoliciesInterface_Create_Call{Call: _e.mock.On("Create", ctx, request)}
}

func (_c *MockRecipientFederationPoliciesInterface_Create_Call) Run(run func(ctx context.Context, request sharing.CreateFederationPolicyRequest)) *MockRecipientFederationPoliciesInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sharing.CreateFederationPolicyRequest))
	})
	return _c
}

func (_c *MockRecipientFederationPoliciesInterface_Create_Call) Return(_a0 *sharing.FederationPolicy, _a1 error) *MockRecipientFederationPoliciesInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRecipientFederationPoliciesInterface_Create_Call) RunAndReturn(run func(context.Context, sharing.CreateFederationPolicyRequest) (*sharing.FederationPolicy, error)) *MockRecipientFederationPoliciesInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, request
func (_m *MockRecipientFederationPoliciesInterface) Delete(ctx context.Context, request sharing.DeleteFederationPolicyRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sharing.DeleteFederationPolicyRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRecipientFederationPoliciesInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockRecipientFederationPoliciesInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - request sharing.DeleteFederationPolicyRequest
func (_e *MockRecipientFederationPoliciesInterface_Expecter) Delete(ctx interface{}, request interface{}) *MockRecipientFederationPoliciesInterface_Delete_Call {
	return &MockRecipientFederationPoliciesInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, request)}
}

func (_c *MockRecipientFederationPoliciesInterface_Delete_Call) Run(run func(ctx context.Context, request sharing.DeleteFederationPolicyRequest)) *MockRecipientFederationPoliciesInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sharing.DeleteFederationPolicyRequest))
	})
	return _c
}

func (_c *MockRecipientFederationPoliciesInterface_Delete_Call) Return(_a0 error) *MockRecipientFederationPoliciesInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRecipientFederationPoliciesInterface_Delete_Call) RunAndReturn(run func(context.Context, sharing.DeleteFederationPolicyRequest) error) *MockRecipientFederationPoliciesInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByRecipientNameAndName provides a mock function with given fields: ctx, recipientName, name
func (_m *MockRecipientFederationPoliciesInterface) DeleteByRecipientNameAndName(ctx context.Context, recipientName string, name string) error {
	ret := _m.Called(ctx, recipientName, name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByRecipientNameAndName")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, recipientName, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRecipientFederationPoliciesInterface_DeleteByRecipientNameAndName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByRecipientNameAndName'
type MockRecipientFederationPoliciesInterface_DeleteByRecipientNameAndName_Call struct {
	*mock.Call
}

// DeleteByRecipientNameAndName is a helper method to define mock.On call
//   - ctx context.Context
//   - recipientName string
//   - name string
func (_e *MockRecipientFederationPoliciesInterface_Expecter) DeleteByRecipientNameAndName(ctx interface{}, recipientName interface{}, name interface{}) *MockRecipientFederationPoliciesInterface_DeleteByRecipientNameAndName_Call {
	return &MockRecipientFederationPoliciesInterface_DeleteByRecipientNameAndName_Call{Call: _e.mock.On("DeleteByRecipientNameAndName", ctx, recipientName, name)}
}

func (_c *MockRecipientFederationPoliciesInterface_DeleteByRecipientNameAndName_Call) Run(run func(ctx context.Context, recipientName string, name string)) *MockRecipientFederationPoliciesInterface_DeleteByRecipientNameAndName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockRecipientFederationPoliciesInterface_DeleteByRecipientNameAndName_Call) Return(_a0 error) *MockRecipientFederationPoliciesInterface_DeleteByRecipientNameAndName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRecipientFederationPoliciesInterface_DeleteByRecipientNameAndName_Call) RunAndReturn(run func(context.Context, string, string) error) *MockRecipientFederationPoliciesInterface_DeleteByRecipientNameAndName_Call {
	_c.Call.Return(run)
	return _c
}

// GetFederationPolicy provides a mock function with given fields: ctx, request
func (_m *MockRecipientFederationPoliciesInterface) GetFederationPolicy(ctx context.Context, request sharing.GetFederationPolicyRequest) (*sharing.FederationPolicy, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetFederationPolicy")
	}

	var r0 *sharing.FederationPolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sharing.GetFederationPolicyRequest) (*sharing.FederationPolicy, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sharing.GetFederationPolicyRequest) *sharing.FederationPolicy); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sharing.FederationPolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sharing.GetFederationPolicyRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRecipientFederationPoliciesInterface_GetFederationPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFederationPolicy'
type MockRecipientFederationPoliciesInterface_GetFederationPolicy_Call struct {
	*mock.Call
}

// GetFederationPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - request sharing.GetFederationPolicyRequest
func (_e *MockRecipientFederationPoliciesInterface_Expecter) GetFederationPolicy(ctx interface{}, request interface{}) *MockRecipientFederationPoliciesInterface_GetFederationPolicy_Call {
	return &MockRecipientFederationPoliciesInterface_GetFederationPolicy_Call{Call: _e.mock.On("GetFederationPolicy", ctx, request)}
}

func (_c *MockRecipientFederationPoliciesInterface_GetFederationPolicy_Call) Run(run func(ctx context.Context, request sharing.GetFederationPolicyRequest)) *MockRecipientFederationPoliciesInterface_GetFederationPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sharing.GetFederationPolicyRequest))
	})
	return _c
}

func (_c *MockRecipientFederationPoliciesInterface_GetFederationPolicy_Call) Return(_a0 *sharing.FederationPolicy, _a1 error) *MockRecipientFederationPoliciesInterface_GetFederationPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRecipientFederationPoliciesInterface_GetFederationPolicy_Call) RunAndReturn(run func(context.Context, sharing.GetFederationPolicyRequest) (*sharing.FederationPolicy, error)) *MockRecipientFederationPoliciesInterface_GetFederationPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// GetFederationPolicyByRecipientNameAndName provides a mock function with given fields: ctx, recipientName, name
func (_m *MockRecipientFederationPoliciesInterface) GetFederationPolicyByRecipientNameAndName(ctx context.Context, recipientName string, name string) (*sharing.FederationPolicy, error) {
	ret := _m.Called(ctx, recipientName, name)

	if len(ret) == 0 {
		panic("no return value specified for GetFederationPolicyByRecipientNameAndName")
	}

	var r0 *sharing.FederationPolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*sharing.FederationPolicy, error)); ok {
		return rf(ctx, recipientName, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *sharing.FederationPolicy); ok {
		r0 = rf(ctx, recipientName, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sharing.FederationPolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, recipientName, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRecipientFederationPoliciesInterface_GetFederationPolicyByRecipientNameAndName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFederationPolicyByRecipientNameAndName'
type MockRecipientFederationPoliciesInterface_GetFederationPolicyByRecipientNameAndName_Call struct {
	*mock.Call
}

// GetFederationPolicyByRecipientNameAndName is a helper method to define mock.On call
//   - ctx context.Context
//   - recipientName string
//   - name string
func (_e *MockRecipientFederationPoliciesInterface_Expecter) GetFederationPolicyByRecipientNameAndName(ctx interface{}, recipientName interface{}, name interface{}) *MockRecipientFederationPoliciesInterface_GetFederationPolicyByRecipientNameAndName_Call {
	return &MockRecipientFederationPoliciesInterface_GetFederationPolicyByRecipientNameAndName_Call{Call: _e.mock.On("GetFederationPolicyByRecipientNameAndName", ctx, recipientName, name)}
}

func (_c *MockRecipientFederationPoliciesInterface_GetFederationPolicyByRecipientNameAndName_Call) Run(run func(ctx context.Context, recipientName string, name string)) *MockRecipientFederationPoliciesInterface_GetFederationPolicyByRecipientNameAndName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockRecipientFederationPoliciesInterface_GetFederationPolicyByRecipientNameAndName_Call) Return(_a0 *sharing.FederationPolicy, _a1 error) *MockRecipientFederationPoliciesInterface_GetFederationPolicyByRecipientNameAndName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRecipientFederationPoliciesInterface_GetFederationPolicyByRecipientNameAndName_Call) RunAndReturn(run func(context.Context, string, string) (*sharing.FederationPolicy, error)) *MockRecipientFederationPoliciesInterface_GetFederationPolicyByRecipientNameAndName_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, request
func (_m *MockRecipientFederationPoliciesInterface) List(ctx context.Context, request sharing.ListFederationPoliciesRequest) listing.Iterator[sharing.FederationPolicy] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 listing.Iterator[sharing.FederationPolicy]
	if rf, ok := ret.Get(0).(func(context.Context, sharing.ListFederationPoliciesRequest) listing.Iterator[sharing.FederationPolicy]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listing.Iterator[sharing.FederationPolicy])
		}
	}

	return r0
}

// MockRecipientFederationPoliciesInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockRecipientFederationPoliciesInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - request sharing.ListFederationPoliciesRequest
func (_e *MockRecipientFederationPoliciesInterface_Expecter) List(ctx interface{}, request interface{}) *MockRecipientFederationPoliciesInterface_List_Call {
	return &MockRecipientFederationPoliciesInterface_List_Call{Call: _e.mock.On("List", ctx, request)}
}

func (_c *MockRecipientFederationPoliciesInterface_List_Call) Run(run func(ctx context.Context, request sharing.ListFederationPoliciesRequest)) *MockRecipientFederationPoliciesInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sharing.ListFederationPoliciesRequest))
	})
	return _c
}

func (_c *MockRecipientFederationPoliciesInterface_List_Call) Return(_a0 listing.Iterator[sharing.FederationPolicy]) *MockRecipientFederationPoliciesInterface_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRecipientFederationPoliciesInterface_List_Call) RunAndReturn(run func(context.Context, sharing.ListFederationPoliciesRequest) listing.Iterator[sharing.FederationPolicy]) *MockRecipientFederationPoliciesInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListAll provides a mock function with given fields: ctx, request
func (_m *MockRecipientFederationPoliciesInterface) ListAll(ctx context.Context, request sharing.ListFederationPoliciesRequest) ([]sharing.FederationPolicy, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListAll")
	}

	var r0 []sharing.FederationPolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sharing.ListFederationPoliciesRequest) ([]sharing.FederationPolicy, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sharing.ListFederationPoliciesRequest) []sharing.FederationPolicy); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sharing.FederationPolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sharing.ListFederationPoliciesRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRecipientFederationPoliciesInterface_ListAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAll'
type MockRecipientFederationPoliciesInterface_ListAll_Call struct {
	*mock.Call
}

// ListAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request sharing.ListFederationPoliciesRequest
func (_e *MockRecipientFederationPoliciesInterface_Expecter) ListAll(ctx interface{}, request interface{}) *MockRecipientFederationPoliciesInterface_ListAll_Call {
	return &MockRecipientFederationPoliciesInterface_ListAll_Call{Call: _e.mock.On("ListAll", ctx, request)}
}

func (_c *MockRecipientFederationPoliciesInterface_ListAll_Call) Run(run func(ctx context.Context, request sharing.ListFederationPoliciesRequest)) *MockRecipientFederationPoliciesInterface_ListAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sharing.ListFederationPoliciesRequest))
	})
	return _c
}

func (_c *MockRecipientFederationPoliciesInterface_ListAll_Call) Return(_a0 []sharing.FederationPolicy, _a1 error) *MockRecipientFederationPoliciesInterface_ListAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRecipientFederationPoliciesInterface_ListAll_Call) RunAndReturn(run func(context.Context, sharing.ListFederationPoliciesRequest) ([]sharing.FederationPolicy, error)) *MockRecipientFederationPoliciesInterface_ListAll_Call {
	_c.Call.Return(run)
	return _c
}

// ListByRecipientName provides a mock function with given fields: ctx, recipientName
func (_m *MockRecipientFederationPoliciesInterface) ListByRecipientName(ctx context.Context, recipientName string) (*sharing.ListFederationPoliciesResponse, error) {
	ret := _m.Called(ctx, recipientName)

	if len(ret) == 0 {
		panic("no return value specified for ListByRecipientName")
	}

	var r0 *sharing.ListFederationPoliciesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*sharing.ListFederationPoliciesResponse, error)); ok {
		return rf(ctx, recipientName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *sharing.ListFederationPoliciesResponse); ok {
		r0 = rf(ctx, recipientName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sharing.ListFederationPoliciesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, recipientName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRecipientFederationPoliciesInterface_ListByRecipientName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByRecipientName'
type MockRecipientFederationPoliciesInterface_ListByRecipientName_Call struct {
	*mock.Call
}

// ListByRecipientName is a helper method to define mock.On call
//   - ctx context.Context
//   - recipientName string
func (_e *MockRecipientFederationPoliciesInterface_Expecter) ListByRecipientName(ctx interface{}, recipientName interface{}) *MockRecipientFederationPoliciesInterface_ListByRecipientName_Call {
	return &MockRecipientFederationPoliciesInterface_ListByRecipientName_Call{Call: _e.mock.On("ListByRecipientName", ctx, recipientName)}
}

func (_c *MockRecipientFederationPoliciesInterface_ListByRecipientName_Call) Run(run func(ctx context.Context, recipientName string)) *MockRecipientFederationPoliciesInterface_ListByRecipientName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRecipientFederationPoliciesInterface_ListByRecipientName_Call) Return(_a0 *sharing.ListFederationPoliciesResponse, _a1 error) *MockRecipientFederationPoliciesInterface_ListByRecipientName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRecipientFederationPoliciesInterface_ListByRecipientName_Call) RunAndReturn(run func(context.Context, string) (*sharing.ListFederationPoliciesResponse, error)) *MockRecipientFederationPoliciesInterface_ListByRecipientName_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRecipientFederationPoliciesInterface creates a new instance of MockRecipientFederationPoliciesInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRecipientFederationPoliciesInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRecipientFederationPoliciesInterface {
	mock := &MockRecipientFederationPoliciesInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
