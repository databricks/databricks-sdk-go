// Code generated by mockery v2.53.2. DO NOT EDIT.

package settingsv2

import (
	context "context"

	listing "github.com/databricks/databricks-sdk-go/listing"
	mock "github.com/stretchr/testify/mock"

	settingsv2 "github.com/databricks/databricks-sdk-go/service/settingsv2"
)

// MockAccountSettingsV2Interface is an autogenerated mock type for the AccountSettingsV2Interface type
type MockAccountSettingsV2Interface struct {
	mock.Mock
}

type MockAccountSettingsV2Interface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccountSettingsV2Interface) EXPECT() *MockAccountSettingsV2Interface_Expecter {
	return &MockAccountSettingsV2Interface_Expecter{mock: &_m.Mock}
}

// GetPublicAccountSetting provides a mock function with given fields: ctx, request
func (_m *MockAccountSettingsV2Interface) GetPublicAccountSetting(ctx context.Context, request settingsv2.GetPublicAccountSettingRequest) (*settingsv2.Setting, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetPublicAccountSetting")
	}

	var r0 *settingsv2.Setting
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, settingsv2.GetPublicAccountSettingRequest) (*settingsv2.Setting, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, settingsv2.GetPublicAccountSettingRequest) *settingsv2.Setting); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*settingsv2.Setting)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, settingsv2.GetPublicAccountSettingRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountSettingsV2Interface_GetPublicAccountSetting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPublicAccountSetting'
type MockAccountSettingsV2Interface_GetPublicAccountSetting_Call struct {
	*mock.Call
}

// GetPublicAccountSetting is a helper method to define mock.On call
//   - ctx context.Context
//   - request settingsv2.GetPublicAccountSettingRequest
func (_e *MockAccountSettingsV2Interface_Expecter) GetPublicAccountSetting(ctx interface{}, request interface{}) *MockAccountSettingsV2Interface_GetPublicAccountSetting_Call {
	return &MockAccountSettingsV2Interface_GetPublicAccountSetting_Call{Call: _e.mock.On("GetPublicAccountSetting", ctx, request)}
}

func (_c *MockAccountSettingsV2Interface_GetPublicAccountSetting_Call) Run(run func(ctx context.Context, request settingsv2.GetPublicAccountSettingRequest)) *MockAccountSettingsV2Interface_GetPublicAccountSetting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(settingsv2.GetPublicAccountSettingRequest))
	})
	return _c
}

func (_c *MockAccountSettingsV2Interface_GetPublicAccountSetting_Call) Return(_a0 *settingsv2.Setting, _a1 error) *MockAccountSettingsV2Interface_GetPublicAccountSetting_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountSettingsV2Interface_GetPublicAccountSetting_Call) RunAndReturn(run func(context.Context, settingsv2.GetPublicAccountSettingRequest) (*settingsv2.Setting, error)) *MockAccountSettingsV2Interface_GetPublicAccountSetting_Call {
	_c.Call.Return(run)
	return _c
}

// ListAccountSettingsMetadata provides a mock function with given fields: ctx, request
func (_m *MockAccountSettingsV2Interface) ListAccountSettingsMetadata(ctx context.Context, request settingsv2.ListAccountSettingsMetadataRequest) listing.Iterator[settingsv2.SettingsMetadata] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListAccountSettingsMetadata")
	}

	var r0 listing.Iterator[settingsv2.SettingsMetadata]
	if rf, ok := ret.Get(0).(func(context.Context, settingsv2.ListAccountSettingsMetadataRequest) listing.Iterator[settingsv2.SettingsMetadata]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listing.Iterator[settingsv2.SettingsMetadata])
		}
	}

	return r0
}

// MockAccountSettingsV2Interface_ListAccountSettingsMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAccountSettingsMetadata'
type MockAccountSettingsV2Interface_ListAccountSettingsMetadata_Call struct {
	*mock.Call
}

// ListAccountSettingsMetadata is a helper method to define mock.On call
//   - ctx context.Context
//   - request settingsv2.ListAccountSettingsMetadataRequest
func (_e *MockAccountSettingsV2Interface_Expecter) ListAccountSettingsMetadata(ctx interface{}, request interface{}) *MockAccountSettingsV2Interface_ListAccountSettingsMetadata_Call {
	return &MockAccountSettingsV2Interface_ListAccountSettingsMetadata_Call{Call: _e.mock.On("ListAccountSettingsMetadata", ctx, request)}
}

func (_c *MockAccountSettingsV2Interface_ListAccountSettingsMetadata_Call) Run(run func(ctx context.Context, request settingsv2.ListAccountSettingsMetadataRequest)) *MockAccountSettingsV2Interface_ListAccountSettingsMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(settingsv2.ListAccountSettingsMetadataRequest))
	})
	return _c
}

func (_c *MockAccountSettingsV2Interface_ListAccountSettingsMetadata_Call) Return(_a0 listing.Iterator[settingsv2.SettingsMetadata]) *MockAccountSettingsV2Interface_ListAccountSettingsMetadata_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountSettingsV2Interface_ListAccountSettingsMetadata_Call) RunAndReturn(run func(context.Context, settingsv2.ListAccountSettingsMetadataRequest) listing.Iterator[settingsv2.SettingsMetadata]) *MockAccountSettingsV2Interface_ListAccountSettingsMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// ListAccountSettingsMetadataAll provides a mock function with given fields: ctx, request
func (_m *MockAccountSettingsV2Interface) ListAccountSettingsMetadataAll(ctx context.Context, request settingsv2.ListAccountSettingsMetadataRequest) ([]settingsv2.SettingsMetadata, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListAccountSettingsMetadataAll")
	}

	var r0 []settingsv2.SettingsMetadata
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, settingsv2.ListAccountSettingsMetadataRequest) ([]settingsv2.SettingsMetadata, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, settingsv2.ListAccountSettingsMetadataRequest) []settingsv2.SettingsMetadata); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]settingsv2.SettingsMetadata)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, settingsv2.ListAccountSettingsMetadataRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountSettingsV2Interface_ListAccountSettingsMetadataAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAccountSettingsMetadataAll'
type MockAccountSettingsV2Interface_ListAccountSettingsMetadataAll_Call struct {
	*mock.Call
}

// ListAccountSettingsMetadataAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request settingsv2.ListAccountSettingsMetadataRequest
func (_e *MockAccountSettingsV2Interface_Expecter) ListAccountSettingsMetadataAll(ctx interface{}, request interface{}) *MockAccountSettingsV2Interface_ListAccountSettingsMetadataAll_Call {
	return &MockAccountSettingsV2Interface_ListAccountSettingsMetadataAll_Call{Call: _e.mock.On("ListAccountSettingsMetadataAll", ctx, request)}
}

func (_c *MockAccountSettingsV2Interface_ListAccountSettingsMetadataAll_Call) Run(run func(ctx context.Context, request settingsv2.ListAccountSettingsMetadataRequest)) *MockAccountSettingsV2Interface_ListAccountSettingsMetadataAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(settingsv2.ListAccountSettingsMetadataRequest))
	})
	return _c
}

func (_c *MockAccountSettingsV2Interface_ListAccountSettingsMetadataAll_Call) Return(_a0 []settingsv2.SettingsMetadata, _a1 error) *MockAccountSettingsV2Interface_ListAccountSettingsMetadataAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountSettingsV2Interface_ListAccountSettingsMetadataAll_Call) RunAndReturn(run func(context.Context, settingsv2.ListAccountSettingsMetadataRequest) ([]settingsv2.SettingsMetadata, error)) *MockAccountSettingsV2Interface_ListAccountSettingsMetadataAll_Call {
	_c.Call.Return(run)
	return _c
}

// PatchPublicAccountSetting provides a mock function with given fields: ctx, request
func (_m *MockAccountSettingsV2Interface) PatchPublicAccountSetting(ctx context.Context, request settingsv2.PatchPublicAccountSettingRequest) (*settingsv2.Setting, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for PatchPublicAccountSetting")
	}

	var r0 *settingsv2.Setting
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, settingsv2.PatchPublicAccountSettingRequest) (*settingsv2.Setting, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, settingsv2.PatchPublicAccountSettingRequest) *settingsv2.Setting); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*settingsv2.Setting)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, settingsv2.PatchPublicAccountSettingRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountSettingsV2Interface_PatchPublicAccountSetting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchPublicAccountSetting'
type MockAccountSettingsV2Interface_PatchPublicAccountSetting_Call struct {
	*mock.Call
}

// PatchPublicAccountSetting is a helper method to define mock.On call
//   - ctx context.Context
//   - request settingsv2.PatchPublicAccountSettingRequest
func (_e *MockAccountSettingsV2Interface_Expecter) PatchPublicAccountSetting(ctx interface{}, request interface{}) *MockAccountSettingsV2Interface_PatchPublicAccountSetting_Call {
	return &MockAccountSettingsV2Interface_PatchPublicAccountSetting_Call{Call: _e.mock.On("PatchPublicAccountSetting", ctx, request)}
}

func (_c *MockAccountSettingsV2Interface_PatchPublicAccountSetting_Call) Run(run func(ctx context.Context, request settingsv2.PatchPublicAccountSettingRequest)) *MockAccountSettingsV2Interface_PatchPublicAccountSetting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(settingsv2.PatchPublicAccountSettingRequest))
	})
	return _c
}

func (_c *MockAccountSettingsV2Interface_PatchPublicAccountSetting_Call) Return(_a0 *settingsv2.Setting, _a1 error) *MockAccountSettingsV2Interface_PatchPublicAccountSetting_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountSettingsV2Interface_PatchPublicAccountSetting_Call) RunAndReturn(run func(context.Context, settingsv2.PatchPublicAccountSettingRequest) (*settingsv2.Setting, error)) *MockAccountSettingsV2Interface_PatchPublicAccountSetting_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAccountSettingsV2Interface creates a new instance of MockAccountSettingsV2Interface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccountSettingsV2Interface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccountSettingsV2Interface {
	mock := &MockAccountSettingsV2Interface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
