// Code generated by mockery v2.43.0. DO NOT EDIT.

package apps

import (
	context "context"

	apps "github.com/databricks/databricks-sdk-go/service/apps"

	listing "github.com/databricks/databricks-sdk-go/listing"

	mock "github.com/stretchr/testify/mock"

	retries "github.com/databricks/databricks-sdk-go/retries"

	time "time"
)

// MockAppsInterface is an autogenerated mock type for the AppsInterface type
type MockAppsInterface struct {
	mock.Mock
}

type MockAppsInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAppsInterface) EXPECT() *MockAppsInterface_Expecter {
	return &MockAppsInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, createAppRequest
func (_m *MockAppsInterface) Create(ctx context.Context, createAppRequest apps.CreateAppRequest) (*apps.WaitGetAppIdle[apps.App], error) {
	ret := _m.Called(ctx, createAppRequest)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *apps.WaitGetAppIdle[apps.App]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, apps.CreateAppRequest) (*apps.WaitGetAppIdle[apps.App], error)); ok {
		return rf(ctx, createAppRequest)
	}
	if rf, ok := ret.Get(0).(func(context.Context, apps.CreateAppRequest) *apps.WaitGetAppIdle[apps.App]); ok {
		r0 = rf(ctx, createAppRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apps.WaitGetAppIdle[apps.App])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, apps.CreateAppRequest) error); ok {
		r1 = rf(ctx, createAppRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAppsInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockAppsInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - createAppRequest apps.CreateAppRequest
func (_e *MockAppsInterface_Expecter) Create(ctx interface{}, createAppRequest interface{}) *MockAppsInterface_Create_Call {
	return &MockAppsInterface_Create_Call{Call: _e.mock.On("Create", ctx, createAppRequest)}
}

func (_c *MockAppsInterface_Create_Call) Run(run func(ctx context.Context, createAppRequest apps.CreateAppRequest)) *MockAppsInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(apps.CreateAppRequest))
	})
	return _c
}

func (_c *MockAppsInterface_Create_Call) Return(_a0 *apps.WaitGetAppIdle[apps.App], _a1 error) *MockAppsInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAppsInterface_Create_Call) RunAndReturn(run func(context.Context, apps.CreateAppRequest) (*apps.WaitGetAppIdle[apps.App], error)) *MockAppsInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAndWait provides a mock function with given fields: ctx, createAppRequest, options
func (_m *MockAppsInterface) CreateAndWait(ctx context.Context, createAppRequest apps.CreateAppRequest, options ...retries.Option[apps.App]) (*apps.App, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, createAppRequest)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAndWait")
	}

	var r0 *apps.App
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, apps.CreateAppRequest, ...retries.Option[apps.App]) (*apps.App, error)); ok {
		return rf(ctx, createAppRequest, options...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, apps.CreateAppRequest, ...retries.Option[apps.App]) *apps.App); ok {
		r0 = rf(ctx, createAppRequest, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apps.App)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, apps.CreateAppRequest, ...retries.Option[apps.App]) error); ok {
		r1 = rf(ctx, createAppRequest, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAppsInterface_CreateAndWait_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAndWait'
type MockAppsInterface_CreateAndWait_Call struct {
	*mock.Call
}

// CreateAndWait is a helper method to define mock.On call
//   - ctx context.Context
//   - createAppRequest apps.CreateAppRequest
//   - options ...retries.Option[apps.App]
func (_e *MockAppsInterface_Expecter) CreateAndWait(ctx interface{}, createAppRequest interface{}, options ...interface{}) *MockAppsInterface_CreateAndWait_Call {
	return &MockAppsInterface_CreateAndWait_Call{Call: _e.mock.On("CreateAndWait",
		append([]interface{}{ctx, createAppRequest}, options...)...)}
}

func (_c *MockAppsInterface_CreateAndWait_Call) Run(run func(ctx context.Context, createAppRequest apps.CreateAppRequest, options ...retries.Option[apps.App])) *MockAppsInterface_CreateAndWait_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]retries.Option[apps.App], len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(retries.Option[apps.App])
			}
		}
		run(args[0].(context.Context), args[1].(apps.CreateAppRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAppsInterface_CreateAndWait_Call) Return(_a0 *apps.App, _a1 error) *MockAppsInterface_CreateAndWait_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAppsInterface_CreateAndWait_Call) RunAndReturn(run func(context.Context, apps.CreateAppRequest, ...retries.Option[apps.App]) (*apps.App, error)) *MockAppsInterface_CreateAndWait_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, request
func (_m *MockAppsInterface) Delete(ctx context.Context, request apps.DeleteAppRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, apps.DeleteAppRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAppsInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockAppsInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - request apps.DeleteAppRequest
func (_e *MockAppsInterface_Expecter) Delete(ctx interface{}, request interface{}) *MockAppsInterface_Delete_Call {
	return &MockAppsInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, request)}
}

func (_c *MockAppsInterface_Delete_Call) Run(run func(ctx context.Context, request apps.DeleteAppRequest)) *MockAppsInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(apps.DeleteAppRequest))
	})
	return _c
}

func (_c *MockAppsInterface_Delete_Call) Return(_a0 error) *MockAppsInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAppsInterface_Delete_Call) RunAndReturn(run func(context.Context, apps.DeleteAppRequest) error) *MockAppsInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByName provides a mock function with given fields: ctx, name
func (_m *MockAppsInterface) DeleteByName(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByName")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAppsInterface_DeleteByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByName'
type MockAppsInterface_DeleteByName_Call struct {
	*mock.Call
}

// DeleteByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockAppsInterface_Expecter) DeleteByName(ctx interface{}, name interface{}) *MockAppsInterface_DeleteByName_Call {
	return &MockAppsInterface_DeleteByName_Call{Call: _e.mock.On("DeleteByName", ctx, name)}
}

func (_c *MockAppsInterface_DeleteByName_Call) Run(run func(ctx context.Context, name string)) *MockAppsInterface_DeleteByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAppsInterface_DeleteByName_Call) Return(_a0 error) *MockAppsInterface_DeleteByName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAppsInterface_DeleteByName_Call) RunAndReturn(run func(context.Context, string) error) *MockAppsInterface_DeleteByName_Call {
	_c.Call.Return(run)
	return _c
}

// Deploy provides a mock function with given fields: ctx, createAppDeploymentRequest
func (_m *MockAppsInterface) Deploy(ctx context.Context, createAppDeploymentRequest apps.CreateAppDeploymentRequest) (*apps.WaitGetDeploymentAppSucceeded[apps.AppDeployment], error) {
	ret := _m.Called(ctx, createAppDeploymentRequest)

	if len(ret) == 0 {
		panic("no return value specified for Deploy")
	}

	var r0 *apps.WaitGetDeploymentAppSucceeded[apps.AppDeployment]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, apps.CreateAppDeploymentRequest) (*apps.WaitGetDeploymentAppSucceeded[apps.AppDeployment], error)); ok {
		return rf(ctx, createAppDeploymentRequest)
	}
	if rf, ok := ret.Get(0).(func(context.Context, apps.CreateAppDeploymentRequest) *apps.WaitGetDeploymentAppSucceeded[apps.AppDeployment]); ok {
		r0 = rf(ctx, createAppDeploymentRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apps.WaitGetDeploymentAppSucceeded[apps.AppDeployment])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, apps.CreateAppDeploymentRequest) error); ok {
		r1 = rf(ctx, createAppDeploymentRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAppsInterface_Deploy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Deploy'
type MockAppsInterface_Deploy_Call struct {
	*mock.Call
}

// Deploy is a helper method to define mock.On call
//   - ctx context.Context
//   - createAppDeploymentRequest apps.CreateAppDeploymentRequest
func (_e *MockAppsInterface_Expecter) Deploy(ctx interface{}, createAppDeploymentRequest interface{}) *MockAppsInterface_Deploy_Call {
	return &MockAppsInterface_Deploy_Call{Call: _e.mock.On("Deploy", ctx, createAppDeploymentRequest)}
}

func (_c *MockAppsInterface_Deploy_Call) Run(run func(ctx context.Context, createAppDeploymentRequest apps.CreateAppDeploymentRequest)) *MockAppsInterface_Deploy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(apps.CreateAppDeploymentRequest))
	})
	return _c
}

func (_c *MockAppsInterface_Deploy_Call) Return(_a0 *apps.WaitGetDeploymentAppSucceeded[apps.AppDeployment], _a1 error) *MockAppsInterface_Deploy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAppsInterface_Deploy_Call) RunAndReturn(run func(context.Context, apps.CreateAppDeploymentRequest) (*apps.WaitGetDeploymentAppSucceeded[apps.AppDeployment], error)) *MockAppsInterface_Deploy_Call {
	_c.Call.Return(run)
	return _c
}

// DeployAndWait provides a mock function with given fields: ctx, createAppDeploymentRequest, options
func (_m *MockAppsInterface) DeployAndWait(ctx context.Context, createAppDeploymentRequest apps.CreateAppDeploymentRequest, options ...retries.Option[apps.AppDeployment]) (*apps.AppDeployment, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, createAppDeploymentRequest)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeployAndWait")
	}

	var r0 *apps.AppDeployment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, apps.CreateAppDeploymentRequest, ...retries.Option[apps.AppDeployment]) (*apps.AppDeployment, error)); ok {
		return rf(ctx, createAppDeploymentRequest, options...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, apps.CreateAppDeploymentRequest, ...retries.Option[apps.AppDeployment]) *apps.AppDeployment); ok {
		r0 = rf(ctx, createAppDeploymentRequest, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apps.AppDeployment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, apps.CreateAppDeploymentRequest, ...retries.Option[apps.AppDeployment]) error); ok {
		r1 = rf(ctx, createAppDeploymentRequest, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAppsInterface_DeployAndWait_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeployAndWait'
type MockAppsInterface_DeployAndWait_Call struct {
	*mock.Call
}

// DeployAndWait is a helper method to define mock.On call
//   - ctx context.Context
//   - createAppDeploymentRequest apps.CreateAppDeploymentRequest
//   - options ...retries.Option[apps.AppDeployment]
func (_e *MockAppsInterface_Expecter) DeployAndWait(ctx interface{}, createAppDeploymentRequest interface{}, options ...interface{}) *MockAppsInterface_DeployAndWait_Call {
	return &MockAppsInterface_DeployAndWait_Call{Call: _e.mock.On("DeployAndWait",
		append([]interface{}{ctx, createAppDeploymentRequest}, options...)...)}
}

func (_c *MockAppsInterface_DeployAndWait_Call) Run(run func(ctx context.Context, createAppDeploymentRequest apps.CreateAppDeploymentRequest, options ...retries.Option[apps.AppDeployment])) *MockAppsInterface_DeployAndWait_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]retries.Option[apps.AppDeployment], len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(retries.Option[apps.AppDeployment])
			}
		}
		run(args[0].(context.Context), args[1].(apps.CreateAppDeploymentRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAppsInterface_DeployAndWait_Call) Return(_a0 *apps.AppDeployment, _a1 error) *MockAppsInterface_DeployAndWait_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAppsInterface_DeployAndWait_Call) RunAndReturn(run func(context.Context, apps.CreateAppDeploymentRequest, ...retries.Option[apps.AppDeployment]) (*apps.AppDeployment, error)) *MockAppsInterface_DeployAndWait_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, request
func (_m *MockAppsInterface) Get(ctx context.Context, request apps.GetAppRequest) (*apps.App, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *apps.App
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, apps.GetAppRequest) (*apps.App, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, apps.GetAppRequest) *apps.App); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apps.App)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, apps.GetAppRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAppsInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockAppsInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - request apps.GetAppRequest
func (_e *MockAppsInterface_Expecter) Get(ctx interface{}, request interface{}) *MockAppsInterface_Get_Call {
	return &MockAppsInterface_Get_Call{Call: _e.mock.On("Get", ctx, request)}
}

func (_c *MockAppsInterface_Get_Call) Run(run func(ctx context.Context, request apps.GetAppRequest)) *MockAppsInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(apps.GetAppRequest))
	})
	return _c
}

func (_c *MockAppsInterface_Get_Call) Return(_a0 *apps.App, _a1 error) *MockAppsInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAppsInterface_Get_Call) RunAndReturn(run func(context.Context, apps.GetAppRequest) (*apps.App, error)) *MockAppsInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByName provides a mock function with given fields: ctx, name
func (_m *MockAppsInterface) GetByName(ctx context.Context, name string) (*apps.App, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetByName")
	}

	var r0 *apps.App
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*apps.App, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *apps.App); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apps.App)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAppsInterface_GetByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByName'
type MockAppsInterface_GetByName_Call struct {
	*mock.Call
}

// GetByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockAppsInterface_Expecter) GetByName(ctx interface{}, name interface{}) *MockAppsInterface_GetByName_Call {
	return &MockAppsInterface_GetByName_Call{Call: _e.mock.On("GetByName", ctx, name)}
}

func (_c *MockAppsInterface_GetByName_Call) Run(run func(ctx context.Context, name string)) *MockAppsInterface_GetByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAppsInterface_GetByName_Call) Return(_a0 *apps.App, _a1 error) *MockAppsInterface_GetByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAppsInterface_GetByName_Call) RunAndReturn(run func(context.Context, string) (*apps.App, error)) *MockAppsInterface_GetByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetDeployment provides a mock function with given fields: ctx, request
func (_m *MockAppsInterface) GetDeployment(ctx context.Context, request apps.GetAppDeploymentRequest) (*apps.AppDeployment, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetDeployment")
	}

	var r0 *apps.AppDeployment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, apps.GetAppDeploymentRequest) (*apps.AppDeployment, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, apps.GetAppDeploymentRequest) *apps.AppDeployment); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apps.AppDeployment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, apps.GetAppDeploymentRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAppsInterface_GetDeployment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDeployment'
type MockAppsInterface_GetDeployment_Call struct {
	*mock.Call
}

// GetDeployment is a helper method to define mock.On call
//   - ctx context.Context
//   - request apps.GetAppDeploymentRequest
func (_e *MockAppsInterface_Expecter) GetDeployment(ctx interface{}, request interface{}) *MockAppsInterface_GetDeployment_Call {
	return &MockAppsInterface_GetDeployment_Call{Call: _e.mock.On("GetDeployment", ctx, request)}
}

func (_c *MockAppsInterface_GetDeployment_Call) Run(run func(ctx context.Context, request apps.GetAppDeploymentRequest)) *MockAppsInterface_GetDeployment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(apps.GetAppDeploymentRequest))
	})
	return _c
}

func (_c *MockAppsInterface_GetDeployment_Call) Return(_a0 *apps.AppDeployment, _a1 error) *MockAppsInterface_GetDeployment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAppsInterface_GetDeployment_Call) RunAndReturn(run func(context.Context, apps.GetAppDeploymentRequest) (*apps.AppDeployment, error)) *MockAppsInterface_GetDeployment_Call {
	_c.Call.Return(run)
	return _c
}

// GetDeploymentByAppNameAndDeploymentId provides a mock function with given fields: ctx, appName, deploymentId
func (_m *MockAppsInterface) GetDeploymentByAppNameAndDeploymentId(ctx context.Context, appName string, deploymentId string) (*apps.AppDeployment, error) {
	ret := _m.Called(ctx, appName, deploymentId)

	if len(ret) == 0 {
		panic("no return value specified for GetDeploymentByAppNameAndDeploymentId")
	}

	var r0 *apps.AppDeployment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*apps.AppDeployment, error)); ok {
		return rf(ctx, appName, deploymentId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *apps.AppDeployment); ok {
		r0 = rf(ctx, appName, deploymentId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apps.AppDeployment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, appName, deploymentId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAppsInterface_GetDeploymentByAppNameAndDeploymentId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDeploymentByAppNameAndDeploymentId'
type MockAppsInterface_GetDeploymentByAppNameAndDeploymentId_Call struct {
	*mock.Call
}

// GetDeploymentByAppNameAndDeploymentId is a helper method to define mock.On call
//   - ctx context.Context
//   - appName string
//   - deploymentId string
func (_e *MockAppsInterface_Expecter) GetDeploymentByAppNameAndDeploymentId(ctx interface{}, appName interface{}, deploymentId interface{}) *MockAppsInterface_GetDeploymentByAppNameAndDeploymentId_Call {
	return &MockAppsInterface_GetDeploymentByAppNameAndDeploymentId_Call{Call: _e.mock.On("GetDeploymentByAppNameAndDeploymentId", ctx, appName, deploymentId)}
}

func (_c *MockAppsInterface_GetDeploymentByAppNameAndDeploymentId_Call) Run(run func(ctx context.Context, appName string, deploymentId string)) *MockAppsInterface_GetDeploymentByAppNameAndDeploymentId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockAppsInterface_GetDeploymentByAppNameAndDeploymentId_Call) Return(_a0 *apps.AppDeployment, _a1 error) *MockAppsInterface_GetDeploymentByAppNameAndDeploymentId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAppsInterface_GetDeploymentByAppNameAndDeploymentId_Call) RunAndReturn(run func(context.Context, string, string) (*apps.AppDeployment, error)) *MockAppsInterface_GetDeploymentByAppNameAndDeploymentId_Call {
	_c.Call.Return(run)
	return _c
}

// GetPermissionLevels provides a mock function with given fields: ctx, request
func (_m *MockAppsInterface) GetPermissionLevels(ctx context.Context, request apps.GetAppPermissionLevelsRequest) (*apps.GetAppPermissionLevelsResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetPermissionLevels")
	}

	var r0 *apps.GetAppPermissionLevelsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, apps.GetAppPermissionLevelsRequest) (*apps.GetAppPermissionLevelsResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, apps.GetAppPermissionLevelsRequest) *apps.GetAppPermissionLevelsResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apps.GetAppPermissionLevelsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, apps.GetAppPermissionLevelsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAppsInterface_GetPermissionLevels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPermissionLevels'
type MockAppsInterface_GetPermissionLevels_Call struct {
	*mock.Call
}

// GetPermissionLevels is a helper method to define mock.On call
//   - ctx context.Context
//   - request apps.GetAppPermissionLevelsRequest
func (_e *MockAppsInterface_Expecter) GetPermissionLevels(ctx interface{}, request interface{}) *MockAppsInterface_GetPermissionLevels_Call {
	return &MockAppsInterface_GetPermissionLevels_Call{Call: _e.mock.On("GetPermissionLevels", ctx, request)}
}

func (_c *MockAppsInterface_GetPermissionLevels_Call) Run(run func(ctx context.Context, request apps.GetAppPermissionLevelsRequest)) *MockAppsInterface_GetPermissionLevels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(apps.GetAppPermissionLevelsRequest))
	})
	return _c
}

func (_c *MockAppsInterface_GetPermissionLevels_Call) Return(_a0 *apps.GetAppPermissionLevelsResponse, _a1 error) *MockAppsInterface_GetPermissionLevels_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAppsInterface_GetPermissionLevels_Call) RunAndReturn(run func(context.Context, apps.GetAppPermissionLevelsRequest) (*apps.GetAppPermissionLevelsResponse, error)) *MockAppsInterface_GetPermissionLevels_Call {
	_c.Call.Return(run)
	return _c
}

// GetPermissionLevelsByAppName provides a mock function with given fields: ctx, appName
func (_m *MockAppsInterface) GetPermissionLevelsByAppName(ctx context.Context, appName string) (*apps.GetAppPermissionLevelsResponse, error) {
	ret := _m.Called(ctx, appName)

	if len(ret) == 0 {
		panic("no return value specified for GetPermissionLevelsByAppName")
	}

	var r0 *apps.GetAppPermissionLevelsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*apps.GetAppPermissionLevelsResponse, error)); ok {
		return rf(ctx, appName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *apps.GetAppPermissionLevelsResponse); ok {
		r0 = rf(ctx, appName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apps.GetAppPermissionLevelsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, appName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAppsInterface_GetPermissionLevelsByAppName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPermissionLevelsByAppName'
type MockAppsInterface_GetPermissionLevelsByAppName_Call struct {
	*mock.Call
}

// GetPermissionLevelsByAppName is a helper method to define mock.On call
//   - ctx context.Context
//   - appName string
func (_e *MockAppsInterface_Expecter) GetPermissionLevelsByAppName(ctx interface{}, appName interface{}) *MockAppsInterface_GetPermissionLevelsByAppName_Call {
	return &MockAppsInterface_GetPermissionLevelsByAppName_Call{Call: _e.mock.On("GetPermissionLevelsByAppName", ctx, appName)}
}

func (_c *MockAppsInterface_GetPermissionLevelsByAppName_Call) Run(run func(ctx context.Context, appName string)) *MockAppsInterface_GetPermissionLevelsByAppName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAppsInterface_GetPermissionLevelsByAppName_Call) Return(_a0 *apps.GetAppPermissionLevelsResponse, _a1 error) *MockAppsInterface_GetPermissionLevelsByAppName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAppsInterface_GetPermissionLevelsByAppName_Call) RunAndReturn(run func(context.Context, string) (*apps.GetAppPermissionLevelsResponse, error)) *MockAppsInterface_GetPermissionLevelsByAppName_Call {
	_c.Call.Return(run)
	return _c
}

// GetPermissions provides a mock function with given fields: ctx, request
func (_m *MockAppsInterface) GetPermissions(ctx context.Context, request apps.GetAppPermissionsRequest) (*apps.AppPermissions, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetPermissions")
	}

	var r0 *apps.AppPermissions
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, apps.GetAppPermissionsRequest) (*apps.AppPermissions, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, apps.GetAppPermissionsRequest) *apps.AppPermissions); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apps.AppPermissions)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, apps.GetAppPermissionsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAppsInterface_GetPermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPermissions'
type MockAppsInterface_GetPermissions_Call struct {
	*mock.Call
}

// GetPermissions is a helper method to define mock.On call
//   - ctx context.Context
//   - request apps.GetAppPermissionsRequest
func (_e *MockAppsInterface_Expecter) GetPermissions(ctx interface{}, request interface{}) *MockAppsInterface_GetPermissions_Call {
	return &MockAppsInterface_GetPermissions_Call{Call: _e.mock.On("GetPermissions", ctx, request)}
}

func (_c *MockAppsInterface_GetPermissions_Call) Run(run func(ctx context.Context, request apps.GetAppPermissionsRequest)) *MockAppsInterface_GetPermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(apps.GetAppPermissionsRequest))
	})
	return _c
}

func (_c *MockAppsInterface_GetPermissions_Call) Return(_a0 *apps.AppPermissions, _a1 error) *MockAppsInterface_GetPermissions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAppsInterface_GetPermissions_Call) RunAndReturn(run func(context.Context, apps.GetAppPermissionsRequest) (*apps.AppPermissions, error)) *MockAppsInterface_GetPermissions_Call {
	_c.Call.Return(run)
	return _c
}

// GetPermissionsByAppName provides a mock function with given fields: ctx, appName
func (_m *MockAppsInterface) GetPermissionsByAppName(ctx context.Context, appName string) (*apps.AppPermissions, error) {
	ret := _m.Called(ctx, appName)

	if len(ret) == 0 {
		panic("no return value specified for GetPermissionsByAppName")
	}

	var r0 *apps.AppPermissions
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*apps.AppPermissions, error)); ok {
		return rf(ctx, appName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *apps.AppPermissions); ok {
		r0 = rf(ctx, appName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apps.AppPermissions)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, appName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAppsInterface_GetPermissionsByAppName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPermissionsByAppName'
type MockAppsInterface_GetPermissionsByAppName_Call struct {
	*mock.Call
}

// GetPermissionsByAppName is a helper method to define mock.On call
//   - ctx context.Context
//   - appName string
func (_e *MockAppsInterface_Expecter) GetPermissionsByAppName(ctx interface{}, appName interface{}) *MockAppsInterface_GetPermissionsByAppName_Call {
	return &MockAppsInterface_GetPermissionsByAppName_Call{Call: _e.mock.On("GetPermissionsByAppName", ctx, appName)}
}

func (_c *MockAppsInterface_GetPermissionsByAppName_Call) Run(run func(ctx context.Context, appName string)) *MockAppsInterface_GetPermissionsByAppName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAppsInterface_GetPermissionsByAppName_Call) Return(_a0 *apps.AppPermissions, _a1 error) *MockAppsInterface_GetPermissionsByAppName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAppsInterface_GetPermissionsByAppName_Call) RunAndReturn(run func(context.Context, string) (*apps.AppPermissions, error)) *MockAppsInterface_GetPermissionsByAppName_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, request
func (_m *MockAppsInterface) List(ctx context.Context, request apps.ListAppsRequest) listing.Iterator[apps.App] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 listing.Iterator[apps.App]
	if rf, ok := ret.Get(0).(func(context.Context, apps.ListAppsRequest) listing.Iterator[apps.App]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listing.Iterator[apps.App])
		}
	}

	return r0
}

// MockAppsInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockAppsInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - request apps.ListAppsRequest
func (_e *MockAppsInterface_Expecter) List(ctx interface{}, request interface{}) *MockAppsInterface_List_Call {
	return &MockAppsInterface_List_Call{Call: _e.mock.On("List", ctx, request)}
}

func (_c *MockAppsInterface_List_Call) Run(run func(ctx context.Context, request apps.ListAppsRequest)) *MockAppsInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(apps.ListAppsRequest))
	})
	return _c
}

func (_c *MockAppsInterface_List_Call) Return(_a0 listing.Iterator[apps.App]) *MockAppsInterface_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAppsInterface_List_Call) RunAndReturn(run func(context.Context, apps.ListAppsRequest) listing.Iterator[apps.App]) *MockAppsInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListAll provides a mock function with given fields: ctx, request
func (_m *MockAppsInterface) ListAll(ctx context.Context, request apps.ListAppsRequest) ([]apps.App, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListAll")
	}

	var r0 []apps.App
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, apps.ListAppsRequest) ([]apps.App, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, apps.ListAppsRequest) []apps.App); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]apps.App)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, apps.ListAppsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAppsInterface_ListAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAll'
type MockAppsInterface_ListAll_Call struct {
	*mock.Call
}

// ListAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request apps.ListAppsRequest
func (_e *MockAppsInterface_Expecter) ListAll(ctx interface{}, request interface{}) *MockAppsInterface_ListAll_Call {
	return &MockAppsInterface_ListAll_Call{Call: _e.mock.On("ListAll", ctx, request)}
}

func (_c *MockAppsInterface_ListAll_Call) Run(run func(ctx context.Context, request apps.ListAppsRequest)) *MockAppsInterface_ListAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(apps.ListAppsRequest))
	})
	return _c
}

func (_c *MockAppsInterface_ListAll_Call) Return(_a0 []apps.App, _a1 error) *MockAppsInterface_ListAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAppsInterface_ListAll_Call) RunAndReturn(run func(context.Context, apps.ListAppsRequest) ([]apps.App, error)) *MockAppsInterface_ListAll_Call {
	_c.Call.Return(run)
	return _c
}

// ListDeployments provides a mock function with given fields: ctx, request
func (_m *MockAppsInterface) ListDeployments(ctx context.Context, request apps.ListAppDeploymentsRequest) listing.Iterator[apps.AppDeployment] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListDeployments")
	}

	var r0 listing.Iterator[apps.AppDeployment]
	if rf, ok := ret.Get(0).(func(context.Context, apps.ListAppDeploymentsRequest) listing.Iterator[apps.AppDeployment]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listing.Iterator[apps.AppDeployment])
		}
	}

	return r0
}

// MockAppsInterface_ListDeployments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDeployments'
type MockAppsInterface_ListDeployments_Call struct {
	*mock.Call
}

// ListDeployments is a helper method to define mock.On call
//   - ctx context.Context
//   - request apps.ListAppDeploymentsRequest
func (_e *MockAppsInterface_Expecter) ListDeployments(ctx interface{}, request interface{}) *MockAppsInterface_ListDeployments_Call {
	return &MockAppsInterface_ListDeployments_Call{Call: _e.mock.On("ListDeployments", ctx, request)}
}

func (_c *MockAppsInterface_ListDeployments_Call) Run(run func(ctx context.Context, request apps.ListAppDeploymentsRequest)) *MockAppsInterface_ListDeployments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(apps.ListAppDeploymentsRequest))
	})
	return _c
}

func (_c *MockAppsInterface_ListDeployments_Call) Return(_a0 listing.Iterator[apps.AppDeployment]) *MockAppsInterface_ListDeployments_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAppsInterface_ListDeployments_Call) RunAndReturn(run func(context.Context, apps.ListAppDeploymentsRequest) listing.Iterator[apps.AppDeployment]) *MockAppsInterface_ListDeployments_Call {
	_c.Call.Return(run)
	return _c
}

// ListDeploymentsAll provides a mock function with given fields: ctx, request
func (_m *MockAppsInterface) ListDeploymentsAll(ctx context.Context, request apps.ListAppDeploymentsRequest) ([]apps.AppDeployment, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListDeploymentsAll")
	}

	var r0 []apps.AppDeployment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, apps.ListAppDeploymentsRequest) ([]apps.AppDeployment, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, apps.ListAppDeploymentsRequest) []apps.AppDeployment); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]apps.AppDeployment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, apps.ListAppDeploymentsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAppsInterface_ListDeploymentsAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDeploymentsAll'
type MockAppsInterface_ListDeploymentsAll_Call struct {
	*mock.Call
}

// ListDeploymentsAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request apps.ListAppDeploymentsRequest
func (_e *MockAppsInterface_Expecter) ListDeploymentsAll(ctx interface{}, request interface{}) *MockAppsInterface_ListDeploymentsAll_Call {
	return &MockAppsInterface_ListDeploymentsAll_Call{Call: _e.mock.On("ListDeploymentsAll", ctx, request)}
}

func (_c *MockAppsInterface_ListDeploymentsAll_Call) Run(run func(ctx context.Context, request apps.ListAppDeploymentsRequest)) *MockAppsInterface_ListDeploymentsAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(apps.ListAppDeploymentsRequest))
	})
	return _c
}

func (_c *MockAppsInterface_ListDeploymentsAll_Call) Return(_a0 []apps.AppDeployment, _a1 error) *MockAppsInterface_ListDeploymentsAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAppsInterface_ListDeploymentsAll_Call) RunAndReturn(run func(context.Context, apps.ListAppDeploymentsRequest) ([]apps.AppDeployment, error)) *MockAppsInterface_ListDeploymentsAll_Call {
	_c.Call.Return(run)
	return _c
}

// ListDeploymentsByAppName provides a mock function with given fields: ctx, appName
func (_m *MockAppsInterface) ListDeploymentsByAppName(ctx context.Context, appName string) (*apps.ListAppDeploymentsResponse, error) {
	ret := _m.Called(ctx, appName)

	if len(ret) == 0 {
		panic("no return value specified for ListDeploymentsByAppName")
	}

	var r0 *apps.ListAppDeploymentsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*apps.ListAppDeploymentsResponse, error)); ok {
		return rf(ctx, appName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *apps.ListAppDeploymentsResponse); ok {
		r0 = rf(ctx, appName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apps.ListAppDeploymentsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, appName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAppsInterface_ListDeploymentsByAppName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDeploymentsByAppName'
type MockAppsInterface_ListDeploymentsByAppName_Call struct {
	*mock.Call
}

// ListDeploymentsByAppName is a helper method to define mock.On call
//   - ctx context.Context
//   - appName string
func (_e *MockAppsInterface_Expecter) ListDeploymentsByAppName(ctx interface{}, appName interface{}) *MockAppsInterface_ListDeploymentsByAppName_Call {
	return &MockAppsInterface_ListDeploymentsByAppName_Call{Call: _e.mock.On("ListDeploymentsByAppName", ctx, appName)}
}

func (_c *MockAppsInterface_ListDeploymentsByAppName_Call) Run(run func(ctx context.Context, appName string)) *MockAppsInterface_ListDeploymentsByAppName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAppsInterface_ListDeploymentsByAppName_Call) Return(_a0 *apps.ListAppDeploymentsResponse, _a1 error) *MockAppsInterface_ListDeploymentsByAppName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAppsInterface_ListDeploymentsByAppName_Call) RunAndReturn(run func(context.Context, string) (*apps.ListAppDeploymentsResponse, error)) *MockAppsInterface_ListDeploymentsByAppName_Call {
	_c.Call.Return(run)
	return _c
}

// SetPermissions provides a mock function with given fields: ctx, request
func (_m *MockAppsInterface) SetPermissions(ctx context.Context, request apps.AppPermissionsRequest) (*apps.AppPermissions, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for SetPermissions")
	}

	var r0 *apps.AppPermissions
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, apps.AppPermissionsRequest) (*apps.AppPermissions, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, apps.AppPermissionsRequest) *apps.AppPermissions); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apps.AppPermissions)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, apps.AppPermissionsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAppsInterface_SetPermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetPermissions'
type MockAppsInterface_SetPermissions_Call struct {
	*mock.Call
}

// SetPermissions is a helper method to define mock.On call
//   - ctx context.Context
//   - request apps.AppPermissionsRequest
func (_e *MockAppsInterface_Expecter) SetPermissions(ctx interface{}, request interface{}) *MockAppsInterface_SetPermissions_Call {
	return &MockAppsInterface_SetPermissions_Call{Call: _e.mock.On("SetPermissions", ctx, request)}
}

func (_c *MockAppsInterface_SetPermissions_Call) Run(run func(ctx context.Context, request apps.AppPermissionsRequest)) *MockAppsInterface_SetPermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(apps.AppPermissionsRequest))
	})
	return _c
}

func (_c *MockAppsInterface_SetPermissions_Call) Return(_a0 *apps.AppPermissions, _a1 error) *MockAppsInterface_SetPermissions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAppsInterface_SetPermissions_Call) RunAndReturn(run func(context.Context, apps.AppPermissionsRequest) (*apps.AppPermissions, error)) *MockAppsInterface_SetPermissions_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: ctx, startAppRequest
func (_m *MockAppsInterface) Start(ctx context.Context, startAppRequest apps.StartAppRequest) (*apps.WaitGetDeploymentAppSucceeded[apps.AppDeployment], error) {
	ret := _m.Called(ctx, startAppRequest)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 *apps.WaitGetDeploymentAppSucceeded[apps.AppDeployment]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, apps.StartAppRequest) (*apps.WaitGetDeploymentAppSucceeded[apps.AppDeployment], error)); ok {
		return rf(ctx, startAppRequest)
	}
	if rf, ok := ret.Get(0).(func(context.Context, apps.StartAppRequest) *apps.WaitGetDeploymentAppSucceeded[apps.AppDeployment]); ok {
		r0 = rf(ctx, startAppRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apps.WaitGetDeploymentAppSucceeded[apps.AppDeployment])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, apps.StartAppRequest) error); ok {
		r1 = rf(ctx, startAppRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAppsInterface_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockAppsInterface_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
//   - startAppRequest apps.StartAppRequest
func (_e *MockAppsInterface_Expecter) Start(ctx interface{}, startAppRequest interface{}) *MockAppsInterface_Start_Call {
	return &MockAppsInterface_Start_Call{Call: _e.mock.On("Start", ctx, startAppRequest)}
}

func (_c *MockAppsInterface_Start_Call) Run(run func(ctx context.Context, startAppRequest apps.StartAppRequest)) *MockAppsInterface_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(apps.StartAppRequest))
	})
	return _c
}

func (_c *MockAppsInterface_Start_Call) Return(_a0 *apps.WaitGetDeploymentAppSucceeded[apps.AppDeployment], _a1 error) *MockAppsInterface_Start_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAppsInterface_Start_Call) RunAndReturn(run func(context.Context, apps.StartAppRequest) (*apps.WaitGetDeploymentAppSucceeded[apps.AppDeployment], error)) *MockAppsInterface_Start_Call {
	_c.Call.Return(run)
	return _c
}

// StartAndWait provides a mock function with given fields: ctx, startAppRequest, options
func (_m *MockAppsInterface) StartAndWait(ctx context.Context, startAppRequest apps.StartAppRequest, options ...retries.Option[apps.AppDeployment]) (*apps.AppDeployment, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, startAppRequest)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartAndWait")
	}

	var r0 *apps.AppDeployment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, apps.StartAppRequest, ...retries.Option[apps.AppDeployment]) (*apps.AppDeployment, error)); ok {
		return rf(ctx, startAppRequest, options...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, apps.StartAppRequest, ...retries.Option[apps.AppDeployment]) *apps.AppDeployment); ok {
		r0 = rf(ctx, startAppRequest, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apps.AppDeployment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, apps.StartAppRequest, ...retries.Option[apps.AppDeployment]) error); ok {
		r1 = rf(ctx, startAppRequest, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAppsInterface_StartAndWait_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartAndWait'
type MockAppsInterface_StartAndWait_Call struct {
	*mock.Call
}

// StartAndWait is a helper method to define mock.On call
//   - ctx context.Context
//   - startAppRequest apps.StartAppRequest
//   - options ...retries.Option[apps.AppDeployment]
func (_e *MockAppsInterface_Expecter) StartAndWait(ctx interface{}, startAppRequest interface{}, options ...interface{}) *MockAppsInterface_StartAndWait_Call {
	return &MockAppsInterface_StartAndWait_Call{Call: _e.mock.On("StartAndWait",
		append([]interface{}{ctx, startAppRequest}, options...)...)}
}

func (_c *MockAppsInterface_StartAndWait_Call) Run(run func(ctx context.Context, startAppRequest apps.StartAppRequest, options ...retries.Option[apps.AppDeployment])) *MockAppsInterface_StartAndWait_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]retries.Option[apps.AppDeployment], len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(retries.Option[apps.AppDeployment])
			}
		}
		run(args[0].(context.Context), args[1].(apps.StartAppRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAppsInterface_StartAndWait_Call) Return(_a0 *apps.AppDeployment, _a1 error) *MockAppsInterface_StartAndWait_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAppsInterface_StartAndWait_Call) RunAndReturn(run func(context.Context, apps.StartAppRequest, ...retries.Option[apps.AppDeployment]) (*apps.AppDeployment, error)) *MockAppsInterface_StartAndWait_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with given fields: ctx, request
func (_m *MockAppsInterface) Stop(ctx context.Context, request apps.StopAppRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, apps.StopAppRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAppsInterface_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockAppsInterface_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
//   - ctx context.Context
//   - request apps.StopAppRequest
func (_e *MockAppsInterface_Expecter) Stop(ctx interface{}, request interface{}) *MockAppsInterface_Stop_Call {
	return &MockAppsInterface_Stop_Call{Call: _e.mock.On("Stop", ctx, request)}
}

func (_c *MockAppsInterface_Stop_Call) Run(run func(ctx context.Context, request apps.StopAppRequest)) *MockAppsInterface_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(apps.StopAppRequest))
	})
	return _c
}

func (_c *MockAppsInterface_Stop_Call) Return(_a0 error) *MockAppsInterface_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAppsInterface_Stop_Call) RunAndReturn(run func(context.Context, apps.StopAppRequest) error) *MockAppsInterface_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, request
func (_m *MockAppsInterface) Update(ctx context.Context, request apps.UpdateAppRequest) (*apps.App, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *apps.App
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, apps.UpdateAppRequest) (*apps.App, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, apps.UpdateAppRequest) *apps.App); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apps.App)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, apps.UpdateAppRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAppsInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockAppsInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - request apps.UpdateAppRequest
func (_e *MockAppsInterface_Expecter) Update(ctx interface{}, request interface{}) *MockAppsInterface_Update_Call {
	return &MockAppsInterface_Update_Call{Call: _e.mock.On("Update", ctx, request)}
}

func (_c *MockAppsInterface_Update_Call) Run(run func(ctx context.Context, request apps.UpdateAppRequest)) *MockAppsInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(apps.UpdateAppRequest))
	})
	return _c
}

func (_c *MockAppsInterface_Update_Call) Return(_a0 *apps.App, _a1 error) *MockAppsInterface_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAppsInterface_Update_Call) RunAndReturn(run func(context.Context, apps.UpdateAppRequest) (*apps.App, error)) *MockAppsInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePermissions provides a mock function with given fields: ctx, request
func (_m *MockAppsInterface) UpdatePermissions(ctx context.Context, request apps.AppPermissionsRequest) (*apps.AppPermissions, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePermissions")
	}

	var r0 *apps.AppPermissions
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, apps.AppPermissionsRequest) (*apps.AppPermissions, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, apps.AppPermissionsRequest) *apps.AppPermissions); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apps.AppPermissions)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, apps.AppPermissionsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAppsInterface_UpdatePermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePermissions'
type MockAppsInterface_UpdatePermissions_Call struct {
	*mock.Call
}

// UpdatePermissions is a helper method to define mock.On call
//   - ctx context.Context
//   - request apps.AppPermissionsRequest
func (_e *MockAppsInterface_Expecter) UpdatePermissions(ctx interface{}, request interface{}) *MockAppsInterface_UpdatePermissions_Call {
	return &MockAppsInterface_UpdatePermissions_Call{Call: _e.mock.On("UpdatePermissions", ctx, request)}
}

func (_c *MockAppsInterface_UpdatePermissions_Call) Run(run func(ctx context.Context, request apps.AppPermissionsRequest)) *MockAppsInterface_UpdatePermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(apps.AppPermissionsRequest))
	})
	return _c
}

func (_c *MockAppsInterface_UpdatePermissions_Call) Return(_a0 *apps.AppPermissions, _a1 error) *MockAppsInterface_UpdatePermissions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAppsInterface_UpdatePermissions_Call) RunAndReturn(run func(context.Context, apps.AppPermissionsRequest) (*apps.AppPermissions, error)) *MockAppsInterface_UpdatePermissions_Call {
	_c.Call.Return(run)
	return _c
}

// WaitGetAppIdle provides a mock function with given fields: ctx, name, timeout, callback
func (_m *MockAppsInterface) WaitGetAppIdle(ctx context.Context, name string, timeout time.Duration, callback func(*apps.App)) (*apps.App, error) {
	ret := _m.Called(ctx, name, timeout, callback)

	if len(ret) == 0 {
		panic("no return value specified for WaitGetAppIdle")
	}

	var r0 *apps.App
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration, func(*apps.App)) (*apps.App, error)); ok {
		return rf(ctx, name, timeout, callback)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration, func(*apps.App)) *apps.App); ok {
		r0 = rf(ctx, name, timeout, callback)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apps.App)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, time.Duration, func(*apps.App)) error); ok {
		r1 = rf(ctx, name, timeout, callback)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAppsInterface_WaitGetAppIdle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitGetAppIdle'
type MockAppsInterface_WaitGetAppIdle_Call struct {
	*mock.Call
}

// WaitGetAppIdle is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - timeout time.Duration
//   - callback func(*apps.App)
func (_e *MockAppsInterface_Expecter) WaitGetAppIdle(ctx interface{}, name interface{}, timeout interface{}, callback interface{}) *MockAppsInterface_WaitGetAppIdle_Call {
	return &MockAppsInterface_WaitGetAppIdle_Call{Call: _e.mock.On("WaitGetAppIdle", ctx, name, timeout, callback)}
}

func (_c *MockAppsInterface_WaitGetAppIdle_Call) Run(run func(ctx context.Context, name string, timeout time.Duration, callback func(*apps.App))) *MockAppsInterface_WaitGetAppIdle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Duration), args[3].(func(*apps.App)))
	})
	return _c
}

func (_c *MockAppsInterface_WaitGetAppIdle_Call) Return(_a0 *apps.App, _a1 error) *MockAppsInterface_WaitGetAppIdle_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAppsInterface_WaitGetAppIdle_Call) RunAndReturn(run func(context.Context, string, time.Duration, func(*apps.App)) (*apps.App, error)) *MockAppsInterface_WaitGetAppIdle_Call {
	_c.Call.Return(run)
	return _c
}

// WaitGetDeploymentAppSucceeded provides a mock function with given fields: ctx, appName, deploymentId, timeout, callback
func (_m *MockAppsInterface) WaitGetDeploymentAppSucceeded(ctx context.Context, appName string, deploymentId string, timeout time.Duration, callback func(*apps.AppDeployment)) (*apps.AppDeployment, error) {
	ret := _m.Called(ctx, appName, deploymentId, timeout, callback)

	if len(ret) == 0 {
		panic("no return value specified for WaitGetDeploymentAppSucceeded")
	}

	var r0 *apps.AppDeployment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Duration, func(*apps.AppDeployment)) (*apps.AppDeployment, error)); ok {
		return rf(ctx, appName, deploymentId, timeout, callback)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Duration, func(*apps.AppDeployment)) *apps.AppDeployment); ok {
		r0 = rf(ctx, appName, deploymentId, timeout, callback)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apps.AppDeployment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, time.Duration, func(*apps.AppDeployment)) error); ok {
		r1 = rf(ctx, appName, deploymentId, timeout, callback)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAppsInterface_WaitGetDeploymentAppSucceeded_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitGetDeploymentAppSucceeded'
type MockAppsInterface_WaitGetDeploymentAppSucceeded_Call struct {
	*mock.Call
}

// WaitGetDeploymentAppSucceeded is a helper method to define mock.On call
//   - ctx context.Context
//   - appName string
//   - deploymentId string
//   - timeout time.Duration
//   - callback func(*apps.AppDeployment)
func (_e *MockAppsInterface_Expecter) WaitGetDeploymentAppSucceeded(ctx interface{}, appName interface{}, deploymentId interface{}, timeout interface{}, callback interface{}) *MockAppsInterface_WaitGetDeploymentAppSucceeded_Call {
	return &MockAppsInterface_WaitGetDeploymentAppSucceeded_Call{Call: _e.mock.On("WaitGetDeploymentAppSucceeded", ctx, appName, deploymentId, timeout, callback)}
}

func (_c *MockAppsInterface_WaitGetDeploymentAppSucceeded_Call) Run(run func(ctx context.Context, appName string, deploymentId string, timeout time.Duration, callback func(*apps.AppDeployment))) *MockAppsInterface_WaitGetDeploymentAppSucceeded_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(time.Duration), args[4].(func(*apps.AppDeployment)))
	})
	return _c
}

func (_c *MockAppsInterface_WaitGetDeploymentAppSucceeded_Call) Return(_a0 *apps.AppDeployment, _a1 error) *MockAppsInterface_WaitGetDeploymentAppSucceeded_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAppsInterface_WaitGetDeploymentAppSucceeded_Call) RunAndReturn(run func(context.Context, string, string, time.Duration, func(*apps.AppDeployment)) (*apps.AppDeployment, error)) *MockAppsInterface_WaitGetDeploymentAppSucceeded_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAppsInterface creates a new instance of MockAppsInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAppsInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAppsInterface {
	mock := &MockAppsInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
