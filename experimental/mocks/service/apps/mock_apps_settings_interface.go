// Code generated by mockery v2.53.2. DO NOT EDIT.

package apps

import (
	context "context"

	apps "github.com/databricks/databricks-sdk-go/service/apps"

	listing "github.com/databricks/databricks-sdk-go/listing"

	mock "github.com/stretchr/testify/mock"
)

// MockAppsSettingsInterface is an autogenerated mock type for the AppsSettingsInterface type
type MockAppsSettingsInterface struct {
	mock.Mock
}

type MockAppsSettingsInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAppsSettingsInterface) EXPECT() *MockAppsSettingsInterface_Expecter {
	return &MockAppsSettingsInterface_Expecter{mock: &_m.Mock}
}

// CreateCustomTemplate provides a mock function with given fields: ctx, request
func (_m *MockAppsSettingsInterface) CreateCustomTemplate(ctx context.Context, request apps.CreateCustomTemplateRequest) (*apps.CustomTemplate, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateCustomTemplate")
	}

	var r0 *apps.CustomTemplate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, apps.CreateCustomTemplateRequest) (*apps.CustomTemplate, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, apps.CreateCustomTemplateRequest) *apps.CustomTemplate); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apps.CustomTemplate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, apps.CreateCustomTemplateRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAppsSettingsInterface_CreateCustomTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCustomTemplate'
type MockAppsSettingsInterface_CreateCustomTemplate_Call struct {
	*mock.Call
}

// CreateCustomTemplate is a helper method to define mock.On call
//   - ctx context.Context
//   - request apps.CreateCustomTemplateRequest
func (_e *MockAppsSettingsInterface_Expecter) CreateCustomTemplate(ctx interface{}, request interface{}) *MockAppsSettingsInterface_CreateCustomTemplate_Call {
	return &MockAppsSettingsInterface_CreateCustomTemplate_Call{Call: _e.mock.On("CreateCustomTemplate", ctx, request)}
}

func (_c *MockAppsSettingsInterface_CreateCustomTemplate_Call) Run(run func(ctx context.Context, request apps.CreateCustomTemplateRequest)) *MockAppsSettingsInterface_CreateCustomTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(apps.CreateCustomTemplateRequest))
	})
	return _c
}

func (_c *MockAppsSettingsInterface_CreateCustomTemplate_Call) Return(_a0 *apps.CustomTemplate, _a1 error) *MockAppsSettingsInterface_CreateCustomTemplate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAppsSettingsInterface_CreateCustomTemplate_Call) RunAndReturn(run func(context.Context, apps.CreateCustomTemplateRequest) (*apps.CustomTemplate, error)) *MockAppsSettingsInterface_CreateCustomTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCustomTemplate provides a mock function with given fields: ctx, request
func (_m *MockAppsSettingsInterface) DeleteCustomTemplate(ctx context.Context, request apps.DeleteCustomTemplateRequest) (*apps.CustomTemplate, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCustomTemplate")
	}

	var r0 *apps.CustomTemplate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, apps.DeleteCustomTemplateRequest) (*apps.CustomTemplate, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, apps.DeleteCustomTemplateRequest) *apps.CustomTemplate); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apps.CustomTemplate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, apps.DeleteCustomTemplateRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAppsSettingsInterface_DeleteCustomTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCustomTemplate'
type MockAppsSettingsInterface_DeleteCustomTemplate_Call struct {
	*mock.Call
}

// DeleteCustomTemplate is a helper method to define mock.On call
//   - ctx context.Context
//   - request apps.DeleteCustomTemplateRequest
func (_e *MockAppsSettingsInterface_Expecter) DeleteCustomTemplate(ctx interface{}, request interface{}) *MockAppsSettingsInterface_DeleteCustomTemplate_Call {
	return &MockAppsSettingsInterface_DeleteCustomTemplate_Call{Call: _e.mock.On("DeleteCustomTemplate", ctx, request)}
}

func (_c *MockAppsSettingsInterface_DeleteCustomTemplate_Call) Run(run func(ctx context.Context, request apps.DeleteCustomTemplateRequest)) *MockAppsSettingsInterface_DeleteCustomTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(apps.DeleteCustomTemplateRequest))
	})
	return _c
}

func (_c *MockAppsSettingsInterface_DeleteCustomTemplate_Call) Return(_a0 *apps.CustomTemplate, _a1 error) *MockAppsSettingsInterface_DeleteCustomTemplate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAppsSettingsInterface_DeleteCustomTemplate_Call) RunAndReturn(run func(context.Context, apps.DeleteCustomTemplateRequest) (*apps.CustomTemplate, error)) *MockAppsSettingsInterface_DeleteCustomTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// GetCustomTemplate provides a mock function with given fields: ctx, request
func (_m *MockAppsSettingsInterface) GetCustomTemplate(ctx context.Context, request apps.GetCustomTemplateRequest) (*apps.CustomTemplate, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomTemplate")
	}

	var r0 *apps.CustomTemplate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, apps.GetCustomTemplateRequest) (*apps.CustomTemplate, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, apps.GetCustomTemplateRequest) *apps.CustomTemplate); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apps.CustomTemplate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, apps.GetCustomTemplateRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAppsSettingsInterface_GetCustomTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCustomTemplate'
type MockAppsSettingsInterface_GetCustomTemplate_Call struct {
	*mock.Call
}

// GetCustomTemplate is a helper method to define mock.On call
//   - ctx context.Context
//   - request apps.GetCustomTemplateRequest
func (_e *MockAppsSettingsInterface_Expecter) GetCustomTemplate(ctx interface{}, request interface{}) *MockAppsSettingsInterface_GetCustomTemplate_Call {
	return &MockAppsSettingsInterface_GetCustomTemplate_Call{Call: _e.mock.On("GetCustomTemplate", ctx, request)}
}

func (_c *MockAppsSettingsInterface_GetCustomTemplate_Call) Run(run func(ctx context.Context, request apps.GetCustomTemplateRequest)) *MockAppsSettingsInterface_GetCustomTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(apps.GetCustomTemplateRequest))
	})
	return _c
}

func (_c *MockAppsSettingsInterface_GetCustomTemplate_Call) Return(_a0 *apps.CustomTemplate, _a1 error) *MockAppsSettingsInterface_GetCustomTemplate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAppsSettingsInterface_GetCustomTemplate_Call) RunAndReturn(run func(context.Context, apps.GetCustomTemplateRequest) (*apps.CustomTemplate, error)) *MockAppsSettingsInterface_GetCustomTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// ListCustomTemplates provides a mock function with given fields: ctx, request
func (_m *MockAppsSettingsInterface) ListCustomTemplates(ctx context.Context, request apps.ListCustomTemplatesRequest) listing.Iterator[apps.CustomTemplate] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListCustomTemplates")
	}

	var r0 listing.Iterator[apps.CustomTemplate]
	if rf, ok := ret.Get(0).(func(context.Context, apps.ListCustomTemplatesRequest) listing.Iterator[apps.CustomTemplate]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listing.Iterator[apps.CustomTemplate])
		}
	}

	return r0
}

// MockAppsSettingsInterface_ListCustomTemplates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCustomTemplates'
type MockAppsSettingsInterface_ListCustomTemplates_Call struct {
	*mock.Call
}

// ListCustomTemplates is a helper method to define mock.On call
//   - ctx context.Context
//   - request apps.ListCustomTemplatesRequest
func (_e *MockAppsSettingsInterface_Expecter) ListCustomTemplates(ctx interface{}, request interface{}) *MockAppsSettingsInterface_ListCustomTemplates_Call {
	return &MockAppsSettingsInterface_ListCustomTemplates_Call{Call: _e.mock.On("ListCustomTemplates", ctx, request)}
}

func (_c *MockAppsSettingsInterface_ListCustomTemplates_Call) Run(run func(ctx context.Context, request apps.ListCustomTemplatesRequest)) *MockAppsSettingsInterface_ListCustomTemplates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(apps.ListCustomTemplatesRequest))
	})
	return _c
}

func (_c *MockAppsSettingsInterface_ListCustomTemplates_Call) Return(_a0 listing.Iterator[apps.CustomTemplate]) *MockAppsSettingsInterface_ListCustomTemplates_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAppsSettingsInterface_ListCustomTemplates_Call) RunAndReturn(run func(context.Context, apps.ListCustomTemplatesRequest) listing.Iterator[apps.CustomTemplate]) *MockAppsSettingsInterface_ListCustomTemplates_Call {
	_c.Call.Return(run)
	return _c
}

// ListCustomTemplatesAll provides a mock function with given fields: ctx, request
func (_m *MockAppsSettingsInterface) ListCustomTemplatesAll(ctx context.Context, request apps.ListCustomTemplatesRequest) ([]apps.CustomTemplate, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListCustomTemplatesAll")
	}

	var r0 []apps.CustomTemplate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, apps.ListCustomTemplatesRequest) ([]apps.CustomTemplate, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, apps.ListCustomTemplatesRequest) []apps.CustomTemplate); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]apps.CustomTemplate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, apps.ListCustomTemplatesRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAppsSettingsInterface_ListCustomTemplatesAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCustomTemplatesAll'
type MockAppsSettingsInterface_ListCustomTemplatesAll_Call struct {
	*mock.Call
}

// ListCustomTemplatesAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request apps.ListCustomTemplatesRequest
func (_e *MockAppsSettingsInterface_Expecter) ListCustomTemplatesAll(ctx interface{}, request interface{}) *MockAppsSettingsInterface_ListCustomTemplatesAll_Call {
	return &MockAppsSettingsInterface_ListCustomTemplatesAll_Call{Call: _e.mock.On("ListCustomTemplatesAll", ctx, request)}
}

func (_c *MockAppsSettingsInterface_ListCustomTemplatesAll_Call) Run(run func(ctx context.Context, request apps.ListCustomTemplatesRequest)) *MockAppsSettingsInterface_ListCustomTemplatesAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(apps.ListCustomTemplatesRequest))
	})
	return _c
}

func (_c *MockAppsSettingsInterface_ListCustomTemplatesAll_Call) Return(_a0 []apps.CustomTemplate, _a1 error) *MockAppsSettingsInterface_ListCustomTemplatesAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAppsSettingsInterface_ListCustomTemplatesAll_Call) RunAndReturn(run func(context.Context, apps.ListCustomTemplatesRequest) ([]apps.CustomTemplate, error)) *MockAppsSettingsInterface_ListCustomTemplatesAll_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCustomTemplate provides a mock function with given fields: ctx, request
func (_m *MockAppsSettingsInterface) UpdateCustomTemplate(ctx context.Context, request apps.UpdateCustomTemplateRequest) (*apps.CustomTemplate, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCustomTemplate")
	}

	var r0 *apps.CustomTemplate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, apps.UpdateCustomTemplateRequest) (*apps.CustomTemplate, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, apps.UpdateCustomTemplateRequest) *apps.CustomTemplate); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apps.CustomTemplate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, apps.UpdateCustomTemplateRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAppsSettingsInterface_UpdateCustomTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCustomTemplate'
type MockAppsSettingsInterface_UpdateCustomTemplate_Call struct {
	*mock.Call
}

// UpdateCustomTemplate is a helper method to define mock.On call
//   - ctx context.Context
//   - request apps.UpdateCustomTemplateRequest
func (_e *MockAppsSettingsInterface_Expecter) UpdateCustomTemplate(ctx interface{}, request interface{}) *MockAppsSettingsInterface_UpdateCustomTemplate_Call {
	return &MockAppsSettingsInterface_UpdateCustomTemplate_Call{Call: _e.mock.On("UpdateCustomTemplate", ctx, request)}
}

func (_c *MockAppsSettingsInterface_UpdateCustomTemplate_Call) Run(run func(ctx context.Context, request apps.UpdateCustomTemplateRequest)) *MockAppsSettingsInterface_UpdateCustomTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(apps.UpdateCustomTemplateRequest))
	})
	return _c
}

func (_c *MockAppsSettingsInterface_UpdateCustomTemplate_Call) Return(_a0 *apps.CustomTemplate, _a1 error) *MockAppsSettingsInterface_UpdateCustomTemplate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAppsSettingsInterface_UpdateCustomTemplate_Call) RunAndReturn(run func(context.Context, apps.UpdateCustomTemplateRequest) (*apps.CustomTemplate, error)) *MockAppsSettingsInterface_UpdateCustomTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAppsSettingsInterface creates a new instance of MockAppsSettingsInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAppsSettingsInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAppsSettingsInterface {
	mock := &MockAppsSettingsInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
