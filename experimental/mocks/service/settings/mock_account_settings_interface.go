// Code generated by mockery v2.39.1. DO NOT EDIT.

package settings

import (
	context "context"

	settings "github.com/databricks/databricks-sdk-go/service/settings"
	mock "github.com/stretchr/testify/mock"
)

// MockAccountSettingsInterface is an autogenerated mock type for the AccountSettingsInterface type
type MockAccountSettingsInterface struct {
	mock.Mock
}

type MockAccountSettingsInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccountSettingsInterface) EXPECT() *MockAccountSettingsInterface_Expecter {
	return &MockAccountSettingsInterface_Expecter{mock: &_m.Mock}
}

// DeletePersonalComputeSetting provides a mock function with given fields: ctx, request
func (_m *MockAccountSettingsInterface) DeletePersonalComputeSetting(ctx context.Context, request settings.DeletePersonalComputeSettingRequest) (*settings.DeletePersonalComputeSettingResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for DeletePersonalComputeSetting")
	}

	var r0 *settings.DeletePersonalComputeSettingResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, settings.DeletePersonalComputeSettingRequest) (*settings.DeletePersonalComputeSettingResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, settings.DeletePersonalComputeSettingRequest) *settings.DeletePersonalComputeSettingResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*settings.DeletePersonalComputeSettingResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, settings.DeletePersonalComputeSettingRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountSettingsInterface_DeletePersonalComputeSetting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePersonalComputeSetting'
type MockAccountSettingsInterface_DeletePersonalComputeSetting_Call struct {
	*mock.Call
}

// DeletePersonalComputeSetting is a helper method to define mock.On call
//   - ctx context.Context
//   - request settings.DeletePersonalComputeSettingRequest
func (_e *MockAccountSettingsInterface_Expecter) DeletePersonalComputeSetting(ctx interface{}, request interface{}) *MockAccountSettingsInterface_DeletePersonalComputeSetting_Call {
	return &MockAccountSettingsInterface_DeletePersonalComputeSetting_Call{Call: _e.mock.On("DeletePersonalComputeSetting", ctx, request)}
}

func (_c *MockAccountSettingsInterface_DeletePersonalComputeSetting_Call) Run(run func(ctx context.Context, request settings.DeletePersonalComputeSettingRequest)) *MockAccountSettingsInterface_DeletePersonalComputeSetting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(settings.DeletePersonalComputeSettingRequest))
	})
	return _c
}

func (_c *MockAccountSettingsInterface_DeletePersonalComputeSetting_Call) Return(_a0 *settings.DeletePersonalComputeSettingResponse, _a1 error) *MockAccountSettingsInterface_DeletePersonalComputeSetting_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountSettingsInterface_DeletePersonalComputeSetting_Call) RunAndReturn(run func(context.Context, settings.DeletePersonalComputeSettingRequest) (*settings.DeletePersonalComputeSettingResponse, error)) *MockAccountSettingsInterface_DeletePersonalComputeSetting_Call {
	_c.Call.Return(run)
	return _c
}

// GetCspEnablementAccountSetting provides a mock function with given fields: ctx, request
func (_m *MockAccountSettingsInterface) GetCspEnablementAccountSetting(ctx context.Context, request settings.GetCspEnablementAccountSettingRequest) (*settings.CspEnablementAccountSetting, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetCspEnablementAccountSetting")
	}

	var r0 *settings.CspEnablementAccountSetting
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, settings.GetCspEnablementAccountSettingRequest) (*settings.CspEnablementAccountSetting, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, settings.GetCspEnablementAccountSettingRequest) *settings.CspEnablementAccountSetting); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*settings.CspEnablementAccountSetting)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, settings.GetCspEnablementAccountSettingRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountSettingsInterface_GetCspEnablementAccountSetting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCspEnablementAccountSetting'
type MockAccountSettingsInterface_GetCspEnablementAccountSetting_Call struct {
	*mock.Call
}

// GetCspEnablementAccountSetting is a helper method to define mock.On call
//   - ctx context.Context
//   - request settings.GetCspEnablementAccountSettingRequest
func (_e *MockAccountSettingsInterface_Expecter) GetCspEnablementAccountSetting(ctx interface{}, request interface{}) *MockAccountSettingsInterface_GetCspEnablementAccountSetting_Call {
	return &MockAccountSettingsInterface_GetCspEnablementAccountSetting_Call{Call: _e.mock.On("GetCspEnablementAccountSetting", ctx, request)}
}

func (_c *MockAccountSettingsInterface_GetCspEnablementAccountSetting_Call) Run(run func(ctx context.Context, request settings.GetCspEnablementAccountSettingRequest)) *MockAccountSettingsInterface_GetCspEnablementAccountSetting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(settings.GetCspEnablementAccountSettingRequest))
	})
	return _c
}

func (_c *MockAccountSettingsInterface_GetCspEnablementAccountSetting_Call) Return(_a0 *settings.CspEnablementAccountSetting, _a1 error) *MockAccountSettingsInterface_GetCspEnablementAccountSetting_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountSettingsInterface_GetCspEnablementAccountSetting_Call) RunAndReturn(run func(context.Context, settings.GetCspEnablementAccountSettingRequest) (*settings.CspEnablementAccountSetting, error)) *MockAccountSettingsInterface_GetCspEnablementAccountSetting_Call {
	_c.Call.Return(run)
	return _c
}

// GetEsmEnablementAccountSetting provides a mock function with given fields: ctx, request
func (_m *MockAccountSettingsInterface) GetEsmEnablementAccountSetting(ctx context.Context, request settings.GetEsmEnablementAccountSettingRequest) (*settings.EsmEnablementAccountSetting, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetEsmEnablementAccountSetting")
	}

	var r0 *settings.EsmEnablementAccountSetting
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, settings.GetEsmEnablementAccountSettingRequest) (*settings.EsmEnablementAccountSetting, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, settings.GetEsmEnablementAccountSettingRequest) *settings.EsmEnablementAccountSetting); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*settings.EsmEnablementAccountSetting)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, settings.GetEsmEnablementAccountSettingRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountSettingsInterface_GetEsmEnablementAccountSetting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEsmEnablementAccountSetting'
type MockAccountSettingsInterface_GetEsmEnablementAccountSetting_Call struct {
	*mock.Call
}

// GetEsmEnablementAccountSetting is a helper method to define mock.On call
//   - ctx context.Context
//   - request settings.GetEsmEnablementAccountSettingRequest
func (_e *MockAccountSettingsInterface_Expecter) GetEsmEnablementAccountSetting(ctx interface{}, request interface{}) *MockAccountSettingsInterface_GetEsmEnablementAccountSetting_Call {
	return &MockAccountSettingsInterface_GetEsmEnablementAccountSetting_Call{Call: _e.mock.On("GetEsmEnablementAccountSetting", ctx, request)}
}

func (_c *MockAccountSettingsInterface_GetEsmEnablementAccountSetting_Call) Run(run func(ctx context.Context, request settings.GetEsmEnablementAccountSettingRequest)) *MockAccountSettingsInterface_GetEsmEnablementAccountSetting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(settings.GetEsmEnablementAccountSettingRequest))
	})
	return _c
}

func (_c *MockAccountSettingsInterface_GetEsmEnablementAccountSetting_Call) Return(_a0 *settings.EsmEnablementAccountSetting, _a1 error) *MockAccountSettingsInterface_GetEsmEnablementAccountSetting_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountSettingsInterface_GetEsmEnablementAccountSetting_Call) RunAndReturn(run func(context.Context, settings.GetEsmEnablementAccountSettingRequest) (*settings.EsmEnablementAccountSetting, error)) *MockAccountSettingsInterface_GetEsmEnablementAccountSetting_Call {
	_c.Call.Return(run)
	return _c
}

// GetPersonalComputeSetting provides a mock function with given fields: ctx, request
func (_m *MockAccountSettingsInterface) GetPersonalComputeSetting(ctx context.Context, request settings.GetPersonalComputeSettingRequest) (*settings.PersonalComputeSetting, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetPersonalComputeSetting")
	}

	var r0 *settings.PersonalComputeSetting
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, settings.GetPersonalComputeSettingRequest) (*settings.PersonalComputeSetting, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, settings.GetPersonalComputeSettingRequest) *settings.PersonalComputeSetting); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*settings.PersonalComputeSetting)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, settings.GetPersonalComputeSettingRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountSettingsInterface_GetPersonalComputeSetting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPersonalComputeSetting'
type MockAccountSettingsInterface_GetPersonalComputeSetting_Call struct {
	*mock.Call
}

// GetPersonalComputeSetting is a helper method to define mock.On call
//   - ctx context.Context
//   - request settings.GetPersonalComputeSettingRequest
func (_e *MockAccountSettingsInterface_Expecter) GetPersonalComputeSetting(ctx interface{}, request interface{}) *MockAccountSettingsInterface_GetPersonalComputeSetting_Call {
	return &MockAccountSettingsInterface_GetPersonalComputeSetting_Call{Call: _e.mock.On("GetPersonalComputeSetting", ctx, request)}
}

func (_c *MockAccountSettingsInterface_GetPersonalComputeSetting_Call) Run(run func(ctx context.Context, request settings.GetPersonalComputeSettingRequest)) *MockAccountSettingsInterface_GetPersonalComputeSetting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(settings.GetPersonalComputeSettingRequest))
	})
	return _c
}

func (_c *MockAccountSettingsInterface_GetPersonalComputeSetting_Call) Return(_a0 *settings.PersonalComputeSetting, _a1 error) *MockAccountSettingsInterface_GetPersonalComputeSetting_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountSettingsInterface_GetPersonalComputeSetting_Call) RunAndReturn(run func(context.Context, settings.GetPersonalComputeSettingRequest) (*settings.PersonalComputeSetting, error)) *MockAccountSettingsInterface_GetPersonalComputeSetting_Call {
	_c.Call.Return(run)
	return _c
}

// Impl provides a mock function with given fields:
func (_m *MockAccountSettingsInterface) Impl() settings.AccountSettingsService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 settings.AccountSettingsService
	if rf, ok := ret.Get(0).(func() settings.AccountSettingsService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(settings.AccountSettingsService)
		}
	}

	return r0
}

// MockAccountSettingsInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockAccountSettingsInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockAccountSettingsInterface_Expecter) Impl() *MockAccountSettingsInterface_Impl_Call {
	return &MockAccountSettingsInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockAccountSettingsInterface_Impl_Call) Run(run func()) *MockAccountSettingsInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAccountSettingsInterface_Impl_Call) Return(_a0 settings.AccountSettingsService) *MockAccountSettingsInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountSettingsInterface_Impl_Call) RunAndReturn(run func() settings.AccountSettingsService) *MockAccountSettingsInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCspEnablementAccountSetting provides a mock function with given fields: ctx, request
func (_m *MockAccountSettingsInterface) UpdateCspEnablementAccountSetting(ctx context.Context, request settings.UpdateCspEnablementAccountSettingRequest) (*settings.CspEnablementAccountSetting, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCspEnablementAccountSetting")
	}

	var r0 *settings.CspEnablementAccountSetting
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, settings.UpdateCspEnablementAccountSettingRequest) (*settings.CspEnablementAccountSetting, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, settings.UpdateCspEnablementAccountSettingRequest) *settings.CspEnablementAccountSetting); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*settings.CspEnablementAccountSetting)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, settings.UpdateCspEnablementAccountSettingRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountSettingsInterface_UpdateCspEnablementAccountSetting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCspEnablementAccountSetting'
type MockAccountSettingsInterface_UpdateCspEnablementAccountSetting_Call struct {
	*mock.Call
}

// UpdateCspEnablementAccountSetting is a helper method to define mock.On call
//   - ctx context.Context
//   - request settings.UpdateCspEnablementAccountSettingRequest
func (_e *MockAccountSettingsInterface_Expecter) UpdateCspEnablementAccountSetting(ctx interface{}, request interface{}) *MockAccountSettingsInterface_UpdateCspEnablementAccountSetting_Call {
	return &MockAccountSettingsInterface_UpdateCspEnablementAccountSetting_Call{Call: _e.mock.On("UpdateCspEnablementAccountSetting", ctx, request)}
}

func (_c *MockAccountSettingsInterface_UpdateCspEnablementAccountSetting_Call) Run(run func(ctx context.Context, request settings.UpdateCspEnablementAccountSettingRequest)) *MockAccountSettingsInterface_UpdateCspEnablementAccountSetting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(settings.UpdateCspEnablementAccountSettingRequest))
	})
	return _c
}

func (_c *MockAccountSettingsInterface_UpdateCspEnablementAccountSetting_Call) Return(_a0 *settings.CspEnablementAccountSetting, _a1 error) *MockAccountSettingsInterface_UpdateCspEnablementAccountSetting_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountSettingsInterface_UpdateCspEnablementAccountSetting_Call) RunAndReturn(run func(context.Context, settings.UpdateCspEnablementAccountSettingRequest) (*settings.CspEnablementAccountSetting, error)) *MockAccountSettingsInterface_UpdateCspEnablementAccountSetting_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateEsmEnablementAccountSetting provides a mock function with given fields: ctx, request
func (_m *MockAccountSettingsInterface) UpdateEsmEnablementAccountSetting(ctx context.Context, request settings.UpdateEsmEnablementAccountSettingRequest) (*settings.EsmEnablementAccountSetting, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEsmEnablementAccountSetting")
	}

	var r0 *settings.EsmEnablementAccountSetting
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, settings.UpdateEsmEnablementAccountSettingRequest) (*settings.EsmEnablementAccountSetting, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, settings.UpdateEsmEnablementAccountSettingRequest) *settings.EsmEnablementAccountSetting); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*settings.EsmEnablementAccountSetting)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, settings.UpdateEsmEnablementAccountSettingRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountSettingsInterface_UpdateEsmEnablementAccountSetting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateEsmEnablementAccountSetting'
type MockAccountSettingsInterface_UpdateEsmEnablementAccountSetting_Call struct {
	*mock.Call
}

// UpdateEsmEnablementAccountSetting is a helper method to define mock.On call
//   - ctx context.Context
//   - request settings.UpdateEsmEnablementAccountSettingRequest
func (_e *MockAccountSettingsInterface_Expecter) UpdateEsmEnablementAccountSetting(ctx interface{}, request interface{}) *MockAccountSettingsInterface_UpdateEsmEnablementAccountSetting_Call {
	return &MockAccountSettingsInterface_UpdateEsmEnablementAccountSetting_Call{Call: _e.mock.On("UpdateEsmEnablementAccountSetting", ctx, request)}
}

func (_c *MockAccountSettingsInterface_UpdateEsmEnablementAccountSetting_Call) Run(run func(ctx context.Context, request settings.UpdateEsmEnablementAccountSettingRequest)) *MockAccountSettingsInterface_UpdateEsmEnablementAccountSetting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(settings.UpdateEsmEnablementAccountSettingRequest))
	})
	return _c
}

func (_c *MockAccountSettingsInterface_UpdateEsmEnablementAccountSetting_Call) Return(_a0 *settings.EsmEnablementAccountSetting, _a1 error) *MockAccountSettingsInterface_UpdateEsmEnablementAccountSetting_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountSettingsInterface_UpdateEsmEnablementAccountSetting_Call) RunAndReturn(run func(context.Context, settings.UpdateEsmEnablementAccountSettingRequest) (*settings.EsmEnablementAccountSetting, error)) *MockAccountSettingsInterface_UpdateEsmEnablementAccountSetting_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePersonalComputeSetting provides a mock function with given fields: ctx, request
func (_m *MockAccountSettingsInterface) UpdatePersonalComputeSetting(ctx context.Context, request settings.UpdatePersonalComputeSettingRequest) (*settings.PersonalComputeSetting, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePersonalComputeSetting")
	}

	var r0 *settings.PersonalComputeSetting
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, settings.UpdatePersonalComputeSettingRequest) (*settings.PersonalComputeSetting, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, settings.UpdatePersonalComputeSettingRequest) *settings.PersonalComputeSetting); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*settings.PersonalComputeSetting)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, settings.UpdatePersonalComputeSettingRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountSettingsInterface_UpdatePersonalComputeSetting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePersonalComputeSetting'
type MockAccountSettingsInterface_UpdatePersonalComputeSetting_Call struct {
	*mock.Call
}

// UpdatePersonalComputeSetting is a helper method to define mock.On call
//   - ctx context.Context
//   - request settings.UpdatePersonalComputeSettingRequest
func (_e *MockAccountSettingsInterface_Expecter) UpdatePersonalComputeSetting(ctx interface{}, request interface{}) *MockAccountSettingsInterface_UpdatePersonalComputeSetting_Call {
	return &MockAccountSettingsInterface_UpdatePersonalComputeSetting_Call{Call: _e.mock.On("UpdatePersonalComputeSetting", ctx, request)}
}

func (_c *MockAccountSettingsInterface_UpdatePersonalComputeSetting_Call) Run(run func(ctx context.Context, request settings.UpdatePersonalComputeSettingRequest)) *MockAccountSettingsInterface_UpdatePersonalComputeSetting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(settings.UpdatePersonalComputeSettingRequest))
	})
	return _c
}

func (_c *MockAccountSettingsInterface_UpdatePersonalComputeSetting_Call) Return(_a0 *settings.PersonalComputeSetting, _a1 error) *MockAccountSettingsInterface_UpdatePersonalComputeSetting_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountSettingsInterface_UpdatePersonalComputeSetting_Call) RunAndReturn(run func(context.Context, settings.UpdatePersonalComputeSettingRequest) (*settings.PersonalComputeSetting, error)) *MockAccountSettingsInterface_UpdatePersonalComputeSetting_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockAccountSettingsInterface) WithImpl(impl settings.AccountSettingsService) settings.AccountSettingsInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 settings.AccountSettingsInterface
	if rf, ok := ret.Get(0).(func(settings.AccountSettingsService) settings.AccountSettingsInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(settings.AccountSettingsInterface)
		}
	}

	return r0
}

// MockAccountSettingsInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockAccountSettingsInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl settings.AccountSettingsService
func (_e *MockAccountSettingsInterface_Expecter) WithImpl(impl interface{}) *MockAccountSettingsInterface_WithImpl_Call {
	return &MockAccountSettingsInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockAccountSettingsInterface_WithImpl_Call) Run(run func(impl settings.AccountSettingsService)) *MockAccountSettingsInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(settings.AccountSettingsService))
	})
	return _c
}

func (_c *MockAccountSettingsInterface_WithImpl_Call) Return(_a0 settings.AccountSettingsInterface) *MockAccountSettingsInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountSettingsInterface_WithImpl_Call) RunAndReturn(run func(settings.AccountSettingsService) settings.AccountSettingsInterface) *MockAccountSettingsInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAccountSettingsInterface creates a new instance of MockAccountSettingsInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccountSettingsInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccountSettingsInterface {
	mock := &MockAccountSettingsInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
