// Code generated by mockery v2.43.0. DO NOT EDIT.

package settings

import (
	context "context"

	listing "github.com/databricks/databricks-sdk-go/listing"
	mock "github.com/stretchr/testify/mock"

	settings "github.com/databricks/databricks-sdk-go/service/settings"
)

// MockTokenManagementInterface is an autogenerated mock type for the TokenManagementInterface type
type MockTokenManagementInterface struct {
	mock.Mock
}

type MockTokenManagementInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTokenManagementInterface) EXPECT() *MockTokenManagementInterface_Expecter {
	return &MockTokenManagementInterface_Expecter{mock: &_m.Mock}
}

// CreateOboToken provides a mock function with given fields: ctx, request
func (_m *MockTokenManagementInterface) CreateOboToken(ctx context.Context, request settings.CreateOboTokenRequest) (*settings.CreateOboTokenResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateOboToken")
	}

	var r0 *settings.CreateOboTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, settings.CreateOboTokenRequest) (*settings.CreateOboTokenResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, settings.CreateOboTokenRequest) *settings.CreateOboTokenResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*settings.CreateOboTokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, settings.CreateOboTokenRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTokenManagementInterface_CreateOboToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOboToken'
type MockTokenManagementInterface_CreateOboToken_Call struct {
	*mock.Call
}

// CreateOboToken is a helper method to define mock.On call
//   - ctx context.Context
//   - request settings.CreateOboTokenRequest
func (_e *MockTokenManagementInterface_Expecter) CreateOboToken(ctx interface{}, request interface{}) *MockTokenManagementInterface_CreateOboToken_Call {
	return &MockTokenManagementInterface_CreateOboToken_Call{Call: _e.mock.On("CreateOboToken", ctx, request)}
}

func (_c *MockTokenManagementInterface_CreateOboToken_Call) Run(run func(ctx context.Context, request settings.CreateOboTokenRequest)) *MockTokenManagementInterface_CreateOboToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(settings.CreateOboTokenRequest))
	})
	return _c
}

func (_c *MockTokenManagementInterface_CreateOboToken_Call) Return(_a0 *settings.CreateOboTokenResponse, _a1 error) *MockTokenManagementInterface_CreateOboToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTokenManagementInterface_CreateOboToken_Call) RunAndReturn(run func(context.Context, settings.CreateOboTokenRequest) (*settings.CreateOboTokenResponse, error)) *MockTokenManagementInterface_CreateOboToken_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, request
func (_m *MockTokenManagementInterface) Delete(ctx context.Context, request settings.DeleteTokenManagementRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, settings.DeleteTokenManagementRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTokenManagementInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockTokenManagementInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - request settings.DeleteTokenManagementRequest
func (_e *MockTokenManagementInterface_Expecter) Delete(ctx interface{}, request interface{}) *MockTokenManagementInterface_Delete_Call {
	return &MockTokenManagementInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, request)}
}

func (_c *MockTokenManagementInterface_Delete_Call) Run(run func(ctx context.Context, request settings.DeleteTokenManagementRequest)) *MockTokenManagementInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(settings.DeleteTokenManagementRequest))
	})
	return _c
}

func (_c *MockTokenManagementInterface_Delete_Call) Return(_a0 error) *MockTokenManagementInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTokenManagementInterface_Delete_Call) RunAndReturn(run func(context.Context, settings.DeleteTokenManagementRequest) error) *MockTokenManagementInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByTokenId provides a mock function with given fields: ctx, tokenId
func (_m *MockTokenManagementInterface) DeleteByTokenId(ctx context.Context, tokenId string) error {
	ret := _m.Called(ctx, tokenId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByTokenId")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, tokenId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTokenManagementInterface_DeleteByTokenId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByTokenId'
type MockTokenManagementInterface_DeleteByTokenId_Call struct {
	*mock.Call
}

// DeleteByTokenId is a helper method to define mock.On call
//   - ctx context.Context
//   - tokenId string
func (_e *MockTokenManagementInterface_Expecter) DeleteByTokenId(ctx interface{}, tokenId interface{}) *MockTokenManagementInterface_DeleteByTokenId_Call {
	return &MockTokenManagementInterface_DeleteByTokenId_Call{Call: _e.mock.On("DeleteByTokenId", ctx, tokenId)}
}

func (_c *MockTokenManagementInterface_DeleteByTokenId_Call) Run(run func(ctx context.Context, tokenId string)) *MockTokenManagementInterface_DeleteByTokenId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTokenManagementInterface_DeleteByTokenId_Call) Return(_a0 error) *MockTokenManagementInterface_DeleteByTokenId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTokenManagementInterface_DeleteByTokenId_Call) RunAndReturn(run func(context.Context, string) error) *MockTokenManagementInterface_DeleteByTokenId_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, request
func (_m *MockTokenManagementInterface) Get(ctx context.Context, request settings.GetTokenManagementRequest) (*settings.GetTokenResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *settings.GetTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, settings.GetTokenManagementRequest) (*settings.GetTokenResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, settings.GetTokenManagementRequest) *settings.GetTokenResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*settings.GetTokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, settings.GetTokenManagementRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTokenManagementInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockTokenManagementInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - request settings.GetTokenManagementRequest
func (_e *MockTokenManagementInterface_Expecter) Get(ctx interface{}, request interface{}) *MockTokenManagementInterface_Get_Call {
	return &MockTokenManagementInterface_Get_Call{Call: _e.mock.On("Get", ctx, request)}
}

func (_c *MockTokenManagementInterface_Get_Call) Run(run func(ctx context.Context, request settings.GetTokenManagementRequest)) *MockTokenManagementInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(settings.GetTokenManagementRequest))
	})
	return _c
}

func (_c *MockTokenManagementInterface_Get_Call) Return(_a0 *settings.GetTokenResponse, _a1 error) *MockTokenManagementInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTokenManagementInterface_Get_Call) RunAndReturn(run func(context.Context, settings.GetTokenManagementRequest) (*settings.GetTokenResponse, error)) *MockTokenManagementInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByComment provides a mock function with given fields: ctx, name
func (_m *MockTokenManagementInterface) GetByComment(ctx context.Context, name string) (*settings.TokenInfo, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetByComment")
	}

	var r0 *settings.TokenInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*settings.TokenInfo, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *settings.TokenInfo); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*settings.TokenInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTokenManagementInterface_GetByComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByComment'
type MockTokenManagementInterface_GetByComment_Call struct {
	*mock.Call
}

// GetByComment is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockTokenManagementInterface_Expecter) GetByComment(ctx interface{}, name interface{}) *MockTokenManagementInterface_GetByComment_Call {
	return &MockTokenManagementInterface_GetByComment_Call{Call: _e.mock.On("GetByComment", ctx, name)}
}

func (_c *MockTokenManagementInterface_GetByComment_Call) Run(run func(ctx context.Context, name string)) *MockTokenManagementInterface_GetByComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTokenManagementInterface_GetByComment_Call) Return(_a0 *settings.TokenInfo, _a1 error) *MockTokenManagementInterface_GetByComment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTokenManagementInterface_GetByComment_Call) RunAndReturn(run func(context.Context, string) (*settings.TokenInfo, error)) *MockTokenManagementInterface_GetByComment_Call {
	_c.Call.Return(run)
	return _c
}

// GetByTokenId provides a mock function with given fields: ctx, tokenId
func (_m *MockTokenManagementInterface) GetByTokenId(ctx context.Context, tokenId string) (*settings.GetTokenResponse, error) {
	ret := _m.Called(ctx, tokenId)

	if len(ret) == 0 {
		panic("no return value specified for GetByTokenId")
	}

	var r0 *settings.GetTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*settings.GetTokenResponse, error)); ok {
		return rf(ctx, tokenId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *settings.GetTokenResponse); ok {
		r0 = rf(ctx, tokenId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*settings.GetTokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, tokenId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTokenManagementInterface_GetByTokenId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByTokenId'
type MockTokenManagementInterface_GetByTokenId_Call struct {
	*mock.Call
}

// GetByTokenId is a helper method to define mock.On call
//   - ctx context.Context
//   - tokenId string
func (_e *MockTokenManagementInterface_Expecter) GetByTokenId(ctx interface{}, tokenId interface{}) *MockTokenManagementInterface_GetByTokenId_Call {
	return &MockTokenManagementInterface_GetByTokenId_Call{Call: _e.mock.On("GetByTokenId", ctx, tokenId)}
}

func (_c *MockTokenManagementInterface_GetByTokenId_Call) Run(run func(ctx context.Context, tokenId string)) *MockTokenManagementInterface_GetByTokenId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTokenManagementInterface_GetByTokenId_Call) Return(_a0 *settings.GetTokenResponse, _a1 error) *MockTokenManagementInterface_GetByTokenId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTokenManagementInterface_GetByTokenId_Call) RunAndReturn(run func(context.Context, string) (*settings.GetTokenResponse, error)) *MockTokenManagementInterface_GetByTokenId_Call {
	_c.Call.Return(run)
	return _c
}

// GetPermissionLevels provides a mock function with given fields: ctx
func (_m *MockTokenManagementInterface) GetPermissionLevels(ctx context.Context) (*settings.GetTokenPermissionLevelsResponse, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetPermissionLevels")
	}

	var r0 *settings.GetTokenPermissionLevelsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*settings.GetTokenPermissionLevelsResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *settings.GetTokenPermissionLevelsResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*settings.GetTokenPermissionLevelsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTokenManagementInterface_GetPermissionLevels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPermissionLevels'
type MockTokenManagementInterface_GetPermissionLevels_Call struct {
	*mock.Call
}

// GetPermissionLevels is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockTokenManagementInterface_Expecter) GetPermissionLevels(ctx interface{}) *MockTokenManagementInterface_GetPermissionLevels_Call {
	return &MockTokenManagementInterface_GetPermissionLevels_Call{Call: _e.mock.On("GetPermissionLevels", ctx)}
}

func (_c *MockTokenManagementInterface_GetPermissionLevels_Call) Run(run func(ctx context.Context)) *MockTokenManagementInterface_GetPermissionLevels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockTokenManagementInterface_GetPermissionLevels_Call) Return(_a0 *settings.GetTokenPermissionLevelsResponse, _a1 error) *MockTokenManagementInterface_GetPermissionLevels_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTokenManagementInterface_GetPermissionLevels_Call) RunAndReturn(run func(context.Context) (*settings.GetTokenPermissionLevelsResponse, error)) *MockTokenManagementInterface_GetPermissionLevels_Call {
	_c.Call.Return(run)
	return _c
}

// GetPermissions provides a mock function with given fields: ctx
func (_m *MockTokenManagementInterface) GetPermissions(ctx context.Context) (*settings.TokenPermissions, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetPermissions")
	}

	var r0 *settings.TokenPermissions
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*settings.TokenPermissions, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *settings.TokenPermissions); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*settings.TokenPermissions)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTokenManagementInterface_GetPermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPermissions'
type MockTokenManagementInterface_GetPermissions_Call struct {
	*mock.Call
}

// GetPermissions is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockTokenManagementInterface_Expecter) GetPermissions(ctx interface{}) *MockTokenManagementInterface_GetPermissions_Call {
	return &MockTokenManagementInterface_GetPermissions_Call{Call: _e.mock.On("GetPermissions", ctx)}
}

func (_c *MockTokenManagementInterface_GetPermissions_Call) Run(run func(ctx context.Context)) *MockTokenManagementInterface_GetPermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockTokenManagementInterface_GetPermissions_Call) Return(_a0 *settings.TokenPermissions, _a1 error) *MockTokenManagementInterface_GetPermissions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTokenManagementInterface_GetPermissions_Call) RunAndReturn(run func(context.Context) (*settings.TokenPermissions, error)) *MockTokenManagementInterface_GetPermissions_Call {
	_c.Call.Return(run)
	return _c
}

// Impl provides a mock function with given fields:
func (_m *MockTokenManagementInterface) Impl() settings.TokenManagementService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 settings.TokenManagementService
	if rf, ok := ret.Get(0).(func() settings.TokenManagementService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(settings.TokenManagementService)
		}
	}

	return r0
}

// MockTokenManagementInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockTokenManagementInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockTokenManagementInterface_Expecter) Impl() *MockTokenManagementInterface_Impl_Call {
	return &MockTokenManagementInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockTokenManagementInterface_Impl_Call) Run(run func()) *MockTokenManagementInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTokenManagementInterface_Impl_Call) Return(_a0 settings.TokenManagementService) *MockTokenManagementInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTokenManagementInterface_Impl_Call) RunAndReturn(run func() settings.TokenManagementService) *MockTokenManagementInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, request
func (_m *MockTokenManagementInterface) List(ctx context.Context, request settings.ListTokenManagementRequest) listing.Iterator[settings.TokenInfo] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 listing.Iterator[settings.TokenInfo]
	if rf, ok := ret.Get(0).(func(context.Context, settings.ListTokenManagementRequest) listing.Iterator[settings.TokenInfo]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listing.Iterator[settings.TokenInfo])
		}
	}

	return r0
}

// MockTokenManagementInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockTokenManagementInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - request settings.ListTokenManagementRequest
func (_e *MockTokenManagementInterface_Expecter) List(ctx interface{}, request interface{}) *MockTokenManagementInterface_List_Call {
	return &MockTokenManagementInterface_List_Call{Call: _e.mock.On("List", ctx, request)}
}

func (_c *MockTokenManagementInterface_List_Call) Run(run func(ctx context.Context, request settings.ListTokenManagementRequest)) *MockTokenManagementInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(settings.ListTokenManagementRequest))
	})
	return _c
}

func (_c *MockTokenManagementInterface_List_Call) Return(_a0 listing.Iterator[settings.TokenInfo]) *MockTokenManagementInterface_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTokenManagementInterface_List_Call) RunAndReturn(run func(context.Context, settings.ListTokenManagementRequest) listing.Iterator[settings.TokenInfo]) *MockTokenManagementInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListAll provides a mock function with given fields: ctx, request
func (_m *MockTokenManagementInterface) ListAll(ctx context.Context, request settings.ListTokenManagementRequest) ([]settings.TokenInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListAll")
	}

	var r0 []settings.TokenInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, settings.ListTokenManagementRequest) ([]settings.TokenInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, settings.ListTokenManagementRequest) []settings.TokenInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]settings.TokenInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, settings.ListTokenManagementRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTokenManagementInterface_ListAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAll'
type MockTokenManagementInterface_ListAll_Call struct {
	*mock.Call
}

// ListAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request settings.ListTokenManagementRequest
func (_e *MockTokenManagementInterface_Expecter) ListAll(ctx interface{}, request interface{}) *MockTokenManagementInterface_ListAll_Call {
	return &MockTokenManagementInterface_ListAll_Call{Call: _e.mock.On("ListAll", ctx, request)}
}

func (_c *MockTokenManagementInterface_ListAll_Call) Run(run func(ctx context.Context, request settings.ListTokenManagementRequest)) *MockTokenManagementInterface_ListAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(settings.ListTokenManagementRequest))
	})
	return _c
}

func (_c *MockTokenManagementInterface_ListAll_Call) Return(_a0 []settings.TokenInfo, _a1 error) *MockTokenManagementInterface_ListAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTokenManagementInterface_ListAll_Call) RunAndReturn(run func(context.Context, settings.ListTokenManagementRequest) ([]settings.TokenInfo, error)) *MockTokenManagementInterface_ListAll_Call {
	_c.Call.Return(run)
	return _c
}

// SetPermissions provides a mock function with given fields: ctx, request
func (_m *MockTokenManagementInterface) SetPermissions(ctx context.Context, request settings.TokenPermissionsRequest) (*settings.TokenPermissions, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for SetPermissions")
	}

	var r0 *settings.TokenPermissions
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, settings.TokenPermissionsRequest) (*settings.TokenPermissions, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, settings.TokenPermissionsRequest) *settings.TokenPermissions); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*settings.TokenPermissions)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, settings.TokenPermissionsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTokenManagementInterface_SetPermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetPermissions'
type MockTokenManagementInterface_SetPermissions_Call struct {
	*mock.Call
}

// SetPermissions is a helper method to define mock.On call
//   - ctx context.Context
//   - request settings.TokenPermissionsRequest
func (_e *MockTokenManagementInterface_Expecter) SetPermissions(ctx interface{}, request interface{}) *MockTokenManagementInterface_SetPermissions_Call {
	return &MockTokenManagementInterface_SetPermissions_Call{Call: _e.mock.On("SetPermissions", ctx, request)}
}

func (_c *MockTokenManagementInterface_SetPermissions_Call) Run(run func(ctx context.Context, request settings.TokenPermissionsRequest)) *MockTokenManagementInterface_SetPermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(settings.TokenPermissionsRequest))
	})
	return _c
}

func (_c *MockTokenManagementInterface_SetPermissions_Call) Return(_a0 *settings.TokenPermissions, _a1 error) *MockTokenManagementInterface_SetPermissions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTokenManagementInterface_SetPermissions_Call) RunAndReturn(run func(context.Context, settings.TokenPermissionsRequest) (*settings.TokenPermissions, error)) *MockTokenManagementInterface_SetPermissions_Call {
	_c.Call.Return(run)
	return _c
}

// TokenInfoCommentToTokenIdMap provides a mock function with given fields: ctx, request
func (_m *MockTokenManagementInterface) TokenInfoCommentToTokenIdMap(ctx context.Context, request settings.ListTokenManagementRequest) (map[string]string, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for TokenInfoCommentToTokenIdMap")
	}

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, settings.ListTokenManagementRequest) (map[string]string, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, settings.ListTokenManagementRequest) map[string]string); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, settings.ListTokenManagementRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTokenManagementInterface_TokenInfoCommentToTokenIdMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TokenInfoCommentToTokenIdMap'
type MockTokenManagementInterface_TokenInfoCommentToTokenIdMap_Call struct {
	*mock.Call
}

// TokenInfoCommentToTokenIdMap is a helper method to define mock.On call
//   - ctx context.Context
//   - request settings.ListTokenManagementRequest
func (_e *MockTokenManagementInterface_Expecter) TokenInfoCommentToTokenIdMap(ctx interface{}, request interface{}) *MockTokenManagementInterface_TokenInfoCommentToTokenIdMap_Call {
	return &MockTokenManagementInterface_TokenInfoCommentToTokenIdMap_Call{Call: _e.mock.On("TokenInfoCommentToTokenIdMap", ctx, request)}
}

func (_c *MockTokenManagementInterface_TokenInfoCommentToTokenIdMap_Call) Run(run func(ctx context.Context, request settings.ListTokenManagementRequest)) *MockTokenManagementInterface_TokenInfoCommentToTokenIdMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(settings.ListTokenManagementRequest))
	})
	return _c
}

func (_c *MockTokenManagementInterface_TokenInfoCommentToTokenIdMap_Call) Return(_a0 map[string]string, _a1 error) *MockTokenManagementInterface_TokenInfoCommentToTokenIdMap_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTokenManagementInterface_TokenInfoCommentToTokenIdMap_Call) RunAndReturn(run func(context.Context, settings.ListTokenManagementRequest) (map[string]string, error)) *MockTokenManagementInterface_TokenInfoCommentToTokenIdMap_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePermissions provides a mock function with given fields: ctx, request
func (_m *MockTokenManagementInterface) UpdatePermissions(ctx context.Context, request settings.TokenPermissionsRequest) (*settings.TokenPermissions, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePermissions")
	}

	var r0 *settings.TokenPermissions
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, settings.TokenPermissionsRequest) (*settings.TokenPermissions, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, settings.TokenPermissionsRequest) *settings.TokenPermissions); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*settings.TokenPermissions)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, settings.TokenPermissionsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTokenManagementInterface_UpdatePermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePermissions'
type MockTokenManagementInterface_UpdatePermissions_Call struct {
	*mock.Call
}

// UpdatePermissions is a helper method to define mock.On call
//   - ctx context.Context
//   - request settings.TokenPermissionsRequest
func (_e *MockTokenManagementInterface_Expecter) UpdatePermissions(ctx interface{}, request interface{}) *MockTokenManagementInterface_UpdatePermissions_Call {
	return &MockTokenManagementInterface_UpdatePermissions_Call{Call: _e.mock.On("UpdatePermissions", ctx, request)}
}

func (_c *MockTokenManagementInterface_UpdatePermissions_Call) Run(run func(ctx context.Context, request settings.TokenPermissionsRequest)) *MockTokenManagementInterface_UpdatePermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(settings.TokenPermissionsRequest))
	})
	return _c
}

func (_c *MockTokenManagementInterface_UpdatePermissions_Call) Return(_a0 *settings.TokenPermissions, _a1 error) *MockTokenManagementInterface_UpdatePermissions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTokenManagementInterface_UpdatePermissions_Call) RunAndReturn(run func(context.Context, settings.TokenPermissionsRequest) (*settings.TokenPermissions, error)) *MockTokenManagementInterface_UpdatePermissions_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockTokenManagementInterface) WithImpl(impl settings.TokenManagementService) settings.TokenManagementInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 settings.TokenManagementInterface
	if rf, ok := ret.Get(0).(func(settings.TokenManagementService) settings.TokenManagementInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(settings.TokenManagementInterface)
		}
	}

	return r0
}

// MockTokenManagementInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockTokenManagementInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl settings.TokenManagementService
func (_e *MockTokenManagementInterface_Expecter) WithImpl(impl interface{}) *MockTokenManagementInterface_WithImpl_Call {
	return &MockTokenManagementInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockTokenManagementInterface_WithImpl_Call) Run(run func(impl settings.TokenManagementService)) *MockTokenManagementInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(settings.TokenManagementService))
	})
	return _c
}

func (_c *MockTokenManagementInterface_WithImpl_Call) Return(_a0 settings.TokenManagementInterface) *MockTokenManagementInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTokenManagementInterface_WithImpl_Call) RunAndReturn(run func(settings.TokenManagementService) settings.TokenManagementInterface) *MockTokenManagementInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTokenManagementInterface creates a new instance of MockTokenManagementInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTokenManagementInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTokenManagementInterface {
	mock := &MockTokenManagementInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
