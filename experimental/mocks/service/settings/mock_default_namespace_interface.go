// Code generated by mockery v2.39.1. DO NOT EDIT.

package settings

import (
	context "context"

	settings "github.com/databricks/databricks-sdk-go/service/settings"
	mock "github.com/stretchr/testify/mock"
)

// MockDefaultNamespaceInterface is an autogenerated mock type for the DefaultNamespaceInterface type
type MockDefaultNamespaceInterface struct {
	mock.Mock
}

type MockDefaultNamespaceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDefaultNamespaceInterface) EXPECT() *MockDefaultNamespaceInterface_Expecter {
	return &MockDefaultNamespaceInterface_Expecter{mock: &_m.Mock}
}

// DeleteDefaultNamespaceSetting provides a mock function with given fields: ctx, request
func (_m *MockDefaultNamespaceInterface) DeleteDefaultNamespaceSetting(ctx context.Context, request settings.DeleteDefaultNamespaceSettingRequest) (*settings.DeleteDefaultNamespaceSettingResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDefaultNamespaceSetting")
	}

	var r0 *settings.DeleteDefaultNamespaceSettingResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, settings.DeleteDefaultNamespaceSettingRequest) (*settings.DeleteDefaultNamespaceSettingResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, settings.DeleteDefaultNamespaceSettingRequest) *settings.DeleteDefaultNamespaceSettingResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*settings.DeleteDefaultNamespaceSettingResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, settings.DeleteDefaultNamespaceSettingRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDefaultNamespaceInterface_DeleteDefaultNamespaceSetting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDefaultNamespaceSetting'
type MockDefaultNamespaceInterface_DeleteDefaultNamespaceSetting_Call struct {
	*mock.Call
}

// DeleteDefaultNamespaceSetting is a helper method to define mock.On call
//   - ctx context.Context
//   - request settings.DeleteDefaultNamespaceSettingRequest
func (_e *MockDefaultNamespaceInterface_Expecter) DeleteDefaultNamespaceSetting(ctx interface{}, request interface{}) *MockDefaultNamespaceInterface_DeleteDefaultNamespaceSetting_Call {
	return &MockDefaultNamespaceInterface_DeleteDefaultNamespaceSetting_Call{Call: _e.mock.On("DeleteDefaultNamespaceSetting", ctx, request)}
}

func (_c *MockDefaultNamespaceInterface_DeleteDefaultNamespaceSetting_Call) Run(run func(ctx context.Context, request settings.DeleteDefaultNamespaceSettingRequest)) *MockDefaultNamespaceInterface_DeleteDefaultNamespaceSetting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(settings.DeleteDefaultNamespaceSettingRequest))
	})
	return _c
}

func (_c *MockDefaultNamespaceInterface_DeleteDefaultNamespaceSetting_Call) Return(_a0 *settings.DeleteDefaultNamespaceSettingResponse, _a1 error) *MockDefaultNamespaceInterface_DeleteDefaultNamespaceSetting_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDefaultNamespaceInterface_DeleteDefaultNamespaceSetting_Call) RunAndReturn(run func(context.Context, settings.DeleteDefaultNamespaceSettingRequest) (*settings.DeleteDefaultNamespaceSettingResponse, error)) *MockDefaultNamespaceInterface_DeleteDefaultNamespaceSetting_Call {
	_c.Call.Return(run)
	return _c
}

// GetDefaultNamespaceSetting provides a mock function with given fields: ctx, request
func (_m *MockDefaultNamespaceInterface) GetDefaultNamespaceSetting(ctx context.Context, request settings.GetDefaultNamespaceSettingRequest) (*settings.DefaultNamespaceSetting, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetDefaultNamespaceSetting")
	}

	var r0 *settings.DefaultNamespaceSetting
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, settings.GetDefaultNamespaceSettingRequest) (*settings.DefaultNamespaceSetting, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, settings.GetDefaultNamespaceSettingRequest) *settings.DefaultNamespaceSetting); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*settings.DefaultNamespaceSetting)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, settings.GetDefaultNamespaceSettingRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDefaultNamespaceInterface_GetDefaultNamespaceSetting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDefaultNamespaceSetting'
type MockDefaultNamespaceInterface_GetDefaultNamespaceSetting_Call struct {
	*mock.Call
}

// GetDefaultNamespaceSetting is a helper method to define mock.On call
//   - ctx context.Context
//   - request settings.GetDefaultNamespaceSettingRequest
func (_e *MockDefaultNamespaceInterface_Expecter) GetDefaultNamespaceSetting(ctx interface{}, request interface{}) *MockDefaultNamespaceInterface_GetDefaultNamespaceSetting_Call {
	return &MockDefaultNamespaceInterface_GetDefaultNamespaceSetting_Call{Call: _e.mock.On("GetDefaultNamespaceSetting", ctx, request)}
}

func (_c *MockDefaultNamespaceInterface_GetDefaultNamespaceSetting_Call) Run(run func(ctx context.Context, request settings.GetDefaultNamespaceSettingRequest)) *MockDefaultNamespaceInterface_GetDefaultNamespaceSetting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(settings.GetDefaultNamespaceSettingRequest))
	})
	return _c
}

func (_c *MockDefaultNamespaceInterface_GetDefaultNamespaceSetting_Call) Return(_a0 *settings.DefaultNamespaceSetting, _a1 error) *MockDefaultNamespaceInterface_GetDefaultNamespaceSetting_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDefaultNamespaceInterface_GetDefaultNamespaceSetting_Call) RunAndReturn(run func(context.Context, settings.GetDefaultNamespaceSettingRequest) (*settings.DefaultNamespaceSetting, error)) *MockDefaultNamespaceInterface_GetDefaultNamespaceSetting_Call {
	_c.Call.Return(run)
	return _c
}

// Impl provides a mock function with given fields:
func (_m *MockDefaultNamespaceInterface) Impl() settings.DefaultNamespaceService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 settings.DefaultNamespaceService
	if rf, ok := ret.Get(0).(func() settings.DefaultNamespaceService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(settings.DefaultNamespaceService)
		}
	}

	return r0
}

// MockDefaultNamespaceInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockDefaultNamespaceInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockDefaultNamespaceInterface_Expecter) Impl() *MockDefaultNamespaceInterface_Impl_Call {
	return &MockDefaultNamespaceInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockDefaultNamespaceInterface_Impl_Call) Run(run func()) *MockDefaultNamespaceInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDefaultNamespaceInterface_Impl_Call) Return(_a0 settings.DefaultNamespaceService) *MockDefaultNamespaceInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDefaultNamespaceInterface_Impl_Call) RunAndReturn(run func() settings.DefaultNamespaceService) *MockDefaultNamespaceInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDefaultNamespaceSetting provides a mock function with given fields: ctx, request
func (_m *MockDefaultNamespaceInterface) UpdateDefaultNamespaceSetting(ctx context.Context, request settings.UpdateDefaultNamespaceSettingRequest) (*settings.DefaultNamespaceSetting, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDefaultNamespaceSetting")
	}

	var r0 *settings.DefaultNamespaceSetting
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, settings.UpdateDefaultNamespaceSettingRequest) (*settings.DefaultNamespaceSetting, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, settings.UpdateDefaultNamespaceSettingRequest) *settings.DefaultNamespaceSetting); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*settings.DefaultNamespaceSetting)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, settings.UpdateDefaultNamespaceSettingRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDefaultNamespaceInterface_UpdateDefaultNamespaceSetting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDefaultNamespaceSetting'
type MockDefaultNamespaceInterface_UpdateDefaultNamespaceSetting_Call struct {
	*mock.Call
}

// UpdateDefaultNamespaceSetting is a helper method to define mock.On call
//   - ctx context.Context
//   - request settings.UpdateDefaultNamespaceSettingRequest
func (_e *MockDefaultNamespaceInterface_Expecter) UpdateDefaultNamespaceSetting(ctx interface{}, request interface{}) *MockDefaultNamespaceInterface_UpdateDefaultNamespaceSetting_Call {
	return &MockDefaultNamespaceInterface_UpdateDefaultNamespaceSetting_Call{Call: _e.mock.On("UpdateDefaultNamespaceSetting", ctx, request)}
}

func (_c *MockDefaultNamespaceInterface_UpdateDefaultNamespaceSetting_Call) Run(run func(ctx context.Context, request settings.UpdateDefaultNamespaceSettingRequest)) *MockDefaultNamespaceInterface_UpdateDefaultNamespaceSetting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(settings.UpdateDefaultNamespaceSettingRequest))
	})
	return _c
}

func (_c *MockDefaultNamespaceInterface_UpdateDefaultNamespaceSetting_Call) Return(_a0 *settings.DefaultNamespaceSetting, _a1 error) *MockDefaultNamespaceInterface_UpdateDefaultNamespaceSetting_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDefaultNamespaceInterface_UpdateDefaultNamespaceSetting_Call) RunAndReturn(run func(context.Context, settings.UpdateDefaultNamespaceSettingRequest) (*settings.DefaultNamespaceSetting, error)) *MockDefaultNamespaceInterface_UpdateDefaultNamespaceSetting_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockDefaultNamespaceInterface) WithImpl(impl settings.DefaultNamespaceService) settings.DefaultNamespaceInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 settings.DefaultNamespaceInterface
	if rf, ok := ret.Get(0).(func(settings.DefaultNamespaceService) settings.DefaultNamespaceInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(settings.DefaultNamespaceInterface)
		}
	}

	return r0
}

// MockDefaultNamespaceInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockDefaultNamespaceInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl settings.DefaultNamespaceService
func (_e *MockDefaultNamespaceInterface_Expecter) WithImpl(impl interface{}) *MockDefaultNamespaceInterface_WithImpl_Call {
	return &MockDefaultNamespaceInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockDefaultNamespaceInterface_WithImpl_Call) Run(run func(impl settings.DefaultNamespaceService)) *MockDefaultNamespaceInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(settings.DefaultNamespaceService))
	})
	return _c
}

func (_c *MockDefaultNamespaceInterface_WithImpl_Call) Return(_a0 settings.DefaultNamespaceInterface) *MockDefaultNamespaceInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDefaultNamespaceInterface_WithImpl_Call) RunAndReturn(run func(settings.DefaultNamespaceService) settings.DefaultNamespaceInterface) *MockDefaultNamespaceInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDefaultNamespaceInterface creates a new instance of MockDefaultNamespaceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDefaultNamespaceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDefaultNamespaceInterface {
	mock := &MockDefaultNamespaceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
