// Code generated by mockery v2.53.2. DO NOT EDIT.

package settings

import (
	context "context"

	listing "github.com/databricks/databricks-sdk-go/listing"
	mock "github.com/stretchr/testify/mock"

	settings "github.com/databricks/databricks-sdk-go/service/settings"
)

// MockNetworkPoliciesInterface is an autogenerated mock type for the NetworkPoliciesInterface type
type MockNetworkPoliciesInterface struct {
	mock.Mock
}

type MockNetworkPoliciesInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNetworkPoliciesInterface) EXPECT() *MockNetworkPoliciesInterface_Expecter {
	return &MockNetworkPoliciesInterface_Expecter{mock: &_m.Mock}
}

// CreateNetworkPolicyRpc provides a mock function with given fields: ctx, request
func (_m *MockNetworkPoliciesInterface) CreateNetworkPolicyRpc(ctx context.Context, request settings.CreateNetworkPolicyRequest) (*settings.AccountNetworkPolicy, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateNetworkPolicyRpc")
	}

	var r0 *settings.AccountNetworkPolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, settings.CreateNetworkPolicyRequest) (*settings.AccountNetworkPolicy, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, settings.CreateNetworkPolicyRequest) *settings.AccountNetworkPolicy); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*settings.AccountNetworkPolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, settings.CreateNetworkPolicyRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNetworkPoliciesInterface_CreateNetworkPolicyRpc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNetworkPolicyRpc'
type MockNetworkPoliciesInterface_CreateNetworkPolicyRpc_Call struct {
	*mock.Call
}

// CreateNetworkPolicyRpc is a helper method to define mock.On call
//   - ctx context.Context
//   - request settings.CreateNetworkPolicyRequest
func (_e *MockNetworkPoliciesInterface_Expecter) CreateNetworkPolicyRpc(ctx interface{}, request interface{}) *MockNetworkPoliciesInterface_CreateNetworkPolicyRpc_Call {
	return &MockNetworkPoliciesInterface_CreateNetworkPolicyRpc_Call{Call: _e.mock.On("CreateNetworkPolicyRpc", ctx, request)}
}

func (_c *MockNetworkPoliciesInterface_CreateNetworkPolicyRpc_Call) Run(run func(ctx context.Context, request settings.CreateNetworkPolicyRequest)) *MockNetworkPoliciesInterface_CreateNetworkPolicyRpc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(settings.CreateNetworkPolicyRequest))
	})
	return _c
}

func (_c *MockNetworkPoliciesInterface_CreateNetworkPolicyRpc_Call) Return(_a0 *settings.AccountNetworkPolicy, _a1 error) *MockNetworkPoliciesInterface_CreateNetworkPolicyRpc_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNetworkPoliciesInterface_CreateNetworkPolicyRpc_Call) RunAndReturn(run func(context.Context, settings.CreateNetworkPolicyRequest) (*settings.AccountNetworkPolicy, error)) *MockNetworkPoliciesInterface_CreateNetworkPolicyRpc_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteNetworkPolicyRpc provides a mock function with given fields: ctx, request
func (_m *MockNetworkPoliciesInterface) DeleteNetworkPolicyRpc(ctx context.Context, request settings.DeleteNetworkPolicyRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNetworkPolicyRpc")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, settings.DeleteNetworkPolicyRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNetworkPoliciesInterface_DeleteNetworkPolicyRpc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNetworkPolicyRpc'
type MockNetworkPoliciesInterface_DeleteNetworkPolicyRpc_Call struct {
	*mock.Call
}

// DeleteNetworkPolicyRpc is a helper method to define mock.On call
//   - ctx context.Context
//   - request settings.DeleteNetworkPolicyRequest
func (_e *MockNetworkPoliciesInterface_Expecter) DeleteNetworkPolicyRpc(ctx interface{}, request interface{}) *MockNetworkPoliciesInterface_DeleteNetworkPolicyRpc_Call {
	return &MockNetworkPoliciesInterface_DeleteNetworkPolicyRpc_Call{Call: _e.mock.On("DeleteNetworkPolicyRpc", ctx, request)}
}

func (_c *MockNetworkPoliciesInterface_DeleteNetworkPolicyRpc_Call) Run(run func(ctx context.Context, request settings.DeleteNetworkPolicyRequest)) *MockNetworkPoliciesInterface_DeleteNetworkPolicyRpc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(settings.DeleteNetworkPolicyRequest))
	})
	return _c
}

func (_c *MockNetworkPoliciesInterface_DeleteNetworkPolicyRpc_Call) Return(_a0 error) *MockNetworkPoliciesInterface_DeleteNetworkPolicyRpc_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNetworkPoliciesInterface_DeleteNetworkPolicyRpc_Call) RunAndReturn(run func(context.Context, settings.DeleteNetworkPolicyRequest) error) *MockNetworkPoliciesInterface_DeleteNetworkPolicyRpc_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteNetworkPolicyRpcByNetworkPolicyId provides a mock function with given fields: ctx, networkPolicyId
func (_m *MockNetworkPoliciesInterface) DeleteNetworkPolicyRpcByNetworkPolicyId(ctx context.Context, networkPolicyId string) error {
	ret := _m.Called(ctx, networkPolicyId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNetworkPolicyRpcByNetworkPolicyId")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, networkPolicyId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNetworkPoliciesInterface_DeleteNetworkPolicyRpcByNetworkPolicyId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNetworkPolicyRpcByNetworkPolicyId'
type MockNetworkPoliciesInterface_DeleteNetworkPolicyRpcByNetworkPolicyId_Call struct {
	*mock.Call
}

// DeleteNetworkPolicyRpcByNetworkPolicyId is a helper method to define mock.On call
//   - ctx context.Context
//   - networkPolicyId string
func (_e *MockNetworkPoliciesInterface_Expecter) DeleteNetworkPolicyRpcByNetworkPolicyId(ctx interface{}, networkPolicyId interface{}) *MockNetworkPoliciesInterface_DeleteNetworkPolicyRpcByNetworkPolicyId_Call {
	return &MockNetworkPoliciesInterface_DeleteNetworkPolicyRpcByNetworkPolicyId_Call{Call: _e.mock.On("DeleteNetworkPolicyRpcByNetworkPolicyId", ctx, networkPolicyId)}
}

func (_c *MockNetworkPoliciesInterface_DeleteNetworkPolicyRpcByNetworkPolicyId_Call) Run(run func(ctx context.Context, networkPolicyId string)) *MockNetworkPoliciesInterface_DeleteNetworkPolicyRpcByNetworkPolicyId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockNetworkPoliciesInterface_DeleteNetworkPolicyRpcByNetworkPolicyId_Call) Return(_a0 error) *MockNetworkPoliciesInterface_DeleteNetworkPolicyRpcByNetworkPolicyId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNetworkPoliciesInterface_DeleteNetworkPolicyRpcByNetworkPolicyId_Call) RunAndReturn(run func(context.Context, string) error) *MockNetworkPoliciesInterface_DeleteNetworkPolicyRpcByNetworkPolicyId_Call {
	_c.Call.Return(run)
	return _c
}

// GetNetworkPolicyRpc provides a mock function with given fields: ctx, request
func (_m *MockNetworkPoliciesInterface) GetNetworkPolicyRpc(ctx context.Context, request settings.GetNetworkPolicyRequest) (*settings.AccountNetworkPolicy, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetNetworkPolicyRpc")
	}

	var r0 *settings.AccountNetworkPolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, settings.GetNetworkPolicyRequest) (*settings.AccountNetworkPolicy, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, settings.GetNetworkPolicyRequest) *settings.AccountNetworkPolicy); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*settings.AccountNetworkPolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, settings.GetNetworkPolicyRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNetworkPoliciesInterface_GetNetworkPolicyRpc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNetworkPolicyRpc'
type MockNetworkPoliciesInterface_GetNetworkPolicyRpc_Call struct {
	*mock.Call
}

// GetNetworkPolicyRpc is a helper method to define mock.On call
//   - ctx context.Context
//   - request settings.GetNetworkPolicyRequest
func (_e *MockNetworkPoliciesInterface_Expecter) GetNetworkPolicyRpc(ctx interface{}, request interface{}) *MockNetworkPoliciesInterface_GetNetworkPolicyRpc_Call {
	return &MockNetworkPoliciesInterface_GetNetworkPolicyRpc_Call{Call: _e.mock.On("GetNetworkPolicyRpc", ctx, request)}
}

func (_c *MockNetworkPoliciesInterface_GetNetworkPolicyRpc_Call) Run(run func(ctx context.Context, request settings.GetNetworkPolicyRequest)) *MockNetworkPoliciesInterface_GetNetworkPolicyRpc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(settings.GetNetworkPolicyRequest))
	})
	return _c
}

func (_c *MockNetworkPoliciesInterface_GetNetworkPolicyRpc_Call) Return(_a0 *settings.AccountNetworkPolicy, _a1 error) *MockNetworkPoliciesInterface_GetNetworkPolicyRpc_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNetworkPoliciesInterface_GetNetworkPolicyRpc_Call) RunAndReturn(run func(context.Context, settings.GetNetworkPolicyRequest) (*settings.AccountNetworkPolicy, error)) *MockNetworkPoliciesInterface_GetNetworkPolicyRpc_Call {
	_c.Call.Return(run)
	return _c
}

// GetNetworkPolicyRpcByNetworkPolicyId provides a mock function with given fields: ctx, networkPolicyId
func (_m *MockNetworkPoliciesInterface) GetNetworkPolicyRpcByNetworkPolicyId(ctx context.Context, networkPolicyId string) (*settings.AccountNetworkPolicy, error) {
	ret := _m.Called(ctx, networkPolicyId)

	if len(ret) == 0 {
		panic("no return value specified for GetNetworkPolicyRpcByNetworkPolicyId")
	}

	var r0 *settings.AccountNetworkPolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*settings.AccountNetworkPolicy, error)); ok {
		return rf(ctx, networkPolicyId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *settings.AccountNetworkPolicy); ok {
		r0 = rf(ctx, networkPolicyId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*settings.AccountNetworkPolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, networkPolicyId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNetworkPoliciesInterface_GetNetworkPolicyRpcByNetworkPolicyId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNetworkPolicyRpcByNetworkPolicyId'
type MockNetworkPoliciesInterface_GetNetworkPolicyRpcByNetworkPolicyId_Call struct {
	*mock.Call
}

// GetNetworkPolicyRpcByNetworkPolicyId is a helper method to define mock.On call
//   - ctx context.Context
//   - networkPolicyId string
func (_e *MockNetworkPoliciesInterface_Expecter) GetNetworkPolicyRpcByNetworkPolicyId(ctx interface{}, networkPolicyId interface{}) *MockNetworkPoliciesInterface_GetNetworkPolicyRpcByNetworkPolicyId_Call {
	return &MockNetworkPoliciesInterface_GetNetworkPolicyRpcByNetworkPolicyId_Call{Call: _e.mock.On("GetNetworkPolicyRpcByNetworkPolicyId", ctx, networkPolicyId)}
}

func (_c *MockNetworkPoliciesInterface_GetNetworkPolicyRpcByNetworkPolicyId_Call) Run(run func(ctx context.Context, networkPolicyId string)) *MockNetworkPoliciesInterface_GetNetworkPolicyRpcByNetworkPolicyId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockNetworkPoliciesInterface_GetNetworkPolicyRpcByNetworkPolicyId_Call) Return(_a0 *settings.AccountNetworkPolicy, _a1 error) *MockNetworkPoliciesInterface_GetNetworkPolicyRpcByNetworkPolicyId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNetworkPoliciesInterface_GetNetworkPolicyRpcByNetworkPolicyId_Call) RunAndReturn(run func(context.Context, string) (*settings.AccountNetworkPolicy, error)) *MockNetworkPoliciesInterface_GetNetworkPolicyRpcByNetworkPolicyId_Call {
	_c.Call.Return(run)
	return _c
}

// ListNetworkPoliciesRpc provides a mock function with given fields: ctx, request
func (_m *MockNetworkPoliciesInterface) ListNetworkPoliciesRpc(ctx context.Context, request settings.ListNetworkPoliciesRequest) listing.Iterator[settings.AccountNetworkPolicy] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListNetworkPoliciesRpc")
	}

	var r0 listing.Iterator[settings.AccountNetworkPolicy]
	if rf, ok := ret.Get(0).(func(context.Context, settings.ListNetworkPoliciesRequest) listing.Iterator[settings.AccountNetworkPolicy]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listing.Iterator[settings.AccountNetworkPolicy])
		}
	}

	return r0
}

// MockNetworkPoliciesInterface_ListNetworkPoliciesRpc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNetworkPoliciesRpc'
type MockNetworkPoliciesInterface_ListNetworkPoliciesRpc_Call struct {
	*mock.Call
}

// ListNetworkPoliciesRpc is a helper method to define mock.On call
//   - ctx context.Context
//   - request settings.ListNetworkPoliciesRequest
func (_e *MockNetworkPoliciesInterface_Expecter) ListNetworkPoliciesRpc(ctx interface{}, request interface{}) *MockNetworkPoliciesInterface_ListNetworkPoliciesRpc_Call {
	return &MockNetworkPoliciesInterface_ListNetworkPoliciesRpc_Call{Call: _e.mock.On("ListNetworkPoliciesRpc", ctx, request)}
}

func (_c *MockNetworkPoliciesInterface_ListNetworkPoliciesRpc_Call) Run(run func(ctx context.Context, request settings.ListNetworkPoliciesRequest)) *MockNetworkPoliciesInterface_ListNetworkPoliciesRpc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(settings.ListNetworkPoliciesRequest))
	})
	return _c
}

func (_c *MockNetworkPoliciesInterface_ListNetworkPoliciesRpc_Call) Return(_a0 listing.Iterator[settings.AccountNetworkPolicy]) *MockNetworkPoliciesInterface_ListNetworkPoliciesRpc_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNetworkPoliciesInterface_ListNetworkPoliciesRpc_Call) RunAndReturn(run func(context.Context, settings.ListNetworkPoliciesRequest) listing.Iterator[settings.AccountNetworkPolicy]) *MockNetworkPoliciesInterface_ListNetworkPoliciesRpc_Call {
	_c.Call.Return(run)
	return _c
}

// ListNetworkPoliciesRpcAll provides a mock function with given fields: ctx, request
func (_m *MockNetworkPoliciesInterface) ListNetworkPoliciesRpcAll(ctx context.Context, request settings.ListNetworkPoliciesRequest) ([]settings.AccountNetworkPolicy, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListNetworkPoliciesRpcAll")
	}

	var r0 []settings.AccountNetworkPolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, settings.ListNetworkPoliciesRequest) ([]settings.AccountNetworkPolicy, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, settings.ListNetworkPoliciesRequest) []settings.AccountNetworkPolicy); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]settings.AccountNetworkPolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, settings.ListNetworkPoliciesRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNetworkPoliciesInterface_ListNetworkPoliciesRpcAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNetworkPoliciesRpcAll'
type MockNetworkPoliciesInterface_ListNetworkPoliciesRpcAll_Call struct {
	*mock.Call
}

// ListNetworkPoliciesRpcAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request settings.ListNetworkPoliciesRequest
func (_e *MockNetworkPoliciesInterface_Expecter) ListNetworkPoliciesRpcAll(ctx interface{}, request interface{}) *MockNetworkPoliciesInterface_ListNetworkPoliciesRpcAll_Call {
	return &MockNetworkPoliciesInterface_ListNetworkPoliciesRpcAll_Call{Call: _e.mock.On("ListNetworkPoliciesRpcAll", ctx, request)}
}

func (_c *MockNetworkPoliciesInterface_ListNetworkPoliciesRpcAll_Call) Run(run func(ctx context.Context, request settings.ListNetworkPoliciesRequest)) *MockNetworkPoliciesInterface_ListNetworkPoliciesRpcAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(settings.ListNetworkPoliciesRequest))
	})
	return _c
}

func (_c *MockNetworkPoliciesInterface_ListNetworkPoliciesRpcAll_Call) Return(_a0 []settings.AccountNetworkPolicy, _a1 error) *MockNetworkPoliciesInterface_ListNetworkPoliciesRpcAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNetworkPoliciesInterface_ListNetworkPoliciesRpcAll_Call) RunAndReturn(run func(context.Context, settings.ListNetworkPoliciesRequest) ([]settings.AccountNetworkPolicy, error)) *MockNetworkPoliciesInterface_ListNetworkPoliciesRpcAll_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateNetworkPolicyRpc provides a mock function with given fields: ctx, request
func (_m *MockNetworkPoliciesInterface) UpdateNetworkPolicyRpc(ctx context.Context, request settings.UpdateNetworkPolicyRequest) (*settings.AccountNetworkPolicy, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNetworkPolicyRpc")
	}

	var r0 *settings.AccountNetworkPolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, settings.UpdateNetworkPolicyRequest) (*settings.AccountNetworkPolicy, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, settings.UpdateNetworkPolicyRequest) *settings.AccountNetworkPolicy); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*settings.AccountNetworkPolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, settings.UpdateNetworkPolicyRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNetworkPoliciesInterface_UpdateNetworkPolicyRpc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateNetworkPolicyRpc'
type MockNetworkPoliciesInterface_UpdateNetworkPolicyRpc_Call struct {
	*mock.Call
}

// UpdateNetworkPolicyRpc is a helper method to define mock.On call
//   - ctx context.Context
//   - request settings.UpdateNetworkPolicyRequest
func (_e *MockNetworkPoliciesInterface_Expecter) UpdateNetworkPolicyRpc(ctx interface{}, request interface{}) *MockNetworkPoliciesInterface_UpdateNetworkPolicyRpc_Call {
	return &MockNetworkPoliciesInterface_UpdateNetworkPolicyRpc_Call{Call: _e.mock.On("UpdateNetworkPolicyRpc", ctx, request)}
}

func (_c *MockNetworkPoliciesInterface_UpdateNetworkPolicyRpc_Call) Run(run func(ctx context.Context, request settings.UpdateNetworkPolicyRequest)) *MockNetworkPoliciesInterface_UpdateNetworkPolicyRpc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(settings.UpdateNetworkPolicyRequest))
	})
	return _c
}

func (_c *MockNetworkPoliciesInterface_UpdateNetworkPolicyRpc_Call) Return(_a0 *settings.AccountNetworkPolicy, _a1 error) *MockNetworkPoliciesInterface_UpdateNetworkPolicyRpc_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNetworkPoliciesInterface_UpdateNetworkPolicyRpc_Call) RunAndReturn(run func(context.Context, settings.UpdateNetworkPolicyRequest) (*settings.AccountNetworkPolicy, error)) *MockNetworkPoliciesInterface_UpdateNetworkPolicyRpc_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNetworkPoliciesInterface creates a new instance of MockNetworkPoliciesInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNetworkPoliciesInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNetworkPoliciesInterface {
	mock := &MockNetworkPoliciesInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
