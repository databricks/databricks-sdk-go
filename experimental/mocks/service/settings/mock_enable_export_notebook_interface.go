// Code generated by mockery v2.53.2. DO NOT EDIT.

package settings

import (
	context "context"

	settings "github.com/databricks/databricks-sdk-go/service/settings"
	mock "github.com/stretchr/testify/mock"
)

// MockEnableExportNotebookInterface is an autogenerated mock type for the EnableExportNotebookInterface type
type MockEnableExportNotebookInterface struct {
	mock.Mock
}

type MockEnableExportNotebookInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEnableExportNotebookInterface) EXPECT() *MockEnableExportNotebookInterface_Expecter {
	return &MockEnableExportNotebookInterface_Expecter{mock: &_m.Mock}
}

// GetEnableExportNotebook provides a mock function with given fields: ctx
func (_m *MockEnableExportNotebookInterface) GetEnableExportNotebook(ctx context.Context) (*settings.EnableExportNotebook, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetEnableExportNotebook")
	}

	var r0 *settings.EnableExportNotebook
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*settings.EnableExportNotebook, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *settings.EnableExportNotebook); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*settings.EnableExportNotebook)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEnableExportNotebookInterface_GetEnableExportNotebook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEnableExportNotebook'
type MockEnableExportNotebookInterface_GetEnableExportNotebook_Call struct {
	*mock.Call
}

// GetEnableExportNotebook is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockEnableExportNotebookInterface_Expecter) GetEnableExportNotebook(ctx interface{}) *MockEnableExportNotebookInterface_GetEnableExportNotebook_Call {
	return &MockEnableExportNotebookInterface_GetEnableExportNotebook_Call{Call: _e.mock.On("GetEnableExportNotebook", ctx)}
}

func (_c *MockEnableExportNotebookInterface_GetEnableExportNotebook_Call) Run(run func(ctx context.Context)) *MockEnableExportNotebookInterface_GetEnableExportNotebook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockEnableExportNotebookInterface_GetEnableExportNotebook_Call) Return(_a0 *settings.EnableExportNotebook, _a1 error) *MockEnableExportNotebookInterface_GetEnableExportNotebook_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEnableExportNotebookInterface_GetEnableExportNotebook_Call) RunAndReturn(run func(context.Context) (*settings.EnableExportNotebook, error)) *MockEnableExportNotebookInterface_GetEnableExportNotebook_Call {
	_c.Call.Return(run)
	return _c
}

// PatchEnableExportNotebook provides a mock function with given fields: ctx, request
func (_m *MockEnableExportNotebookInterface) PatchEnableExportNotebook(ctx context.Context, request settings.UpdateEnableExportNotebookRequest) (*settings.EnableExportNotebook, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for PatchEnableExportNotebook")
	}

	var r0 *settings.EnableExportNotebook
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, settings.UpdateEnableExportNotebookRequest) (*settings.EnableExportNotebook, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, settings.UpdateEnableExportNotebookRequest) *settings.EnableExportNotebook); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*settings.EnableExportNotebook)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, settings.UpdateEnableExportNotebookRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEnableExportNotebookInterface_PatchEnableExportNotebook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchEnableExportNotebook'
type MockEnableExportNotebookInterface_PatchEnableExportNotebook_Call struct {
	*mock.Call
}

// PatchEnableExportNotebook is a helper method to define mock.On call
//   - ctx context.Context
//   - request settings.UpdateEnableExportNotebookRequest
func (_e *MockEnableExportNotebookInterface_Expecter) PatchEnableExportNotebook(ctx interface{}, request interface{}) *MockEnableExportNotebookInterface_PatchEnableExportNotebook_Call {
	return &MockEnableExportNotebookInterface_PatchEnableExportNotebook_Call{Call: _e.mock.On("PatchEnableExportNotebook", ctx, request)}
}

func (_c *MockEnableExportNotebookInterface_PatchEnableExportNotebook_Call) Run(run func(ctx context.Context, request settings.UpdateEnableExportNotebookRequest)) *MockEnableExportNotebookInterface_PatchEnableExportNotebook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(settings.UpdateEnableExportNotebookRequest))
	})
	return _c
}

func (_c *MockEnableExportNotebookInterface_PatchEnableExportNotebook_Call) Return(_a0 *settings.EnableExportNotebook, _a1 error) *MockEnableExportNotebookInterface_PatchEnableExportNotebook_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEnableExportNotebookInterface_PatchEnableExportNotebook_Call) RunAndReturn(run func(context.Context, settings.UpdateEnableExportNotebookRequest) (*settings.EnableExportNotebook, error)) *MockEnableExportNotebookInterface_PatchEnableExportNotebook_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEnableExportNotebookInterface creates a new instance of MockEnableExportNotebookInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEnableExportNotebookInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEnableExportNotebookInterface {
	mock := &MockEnableExportNotebookInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
