// Code generated by mockery v2.53.2. DO NOT EDIT.

package settings

import (
	context "context"

	settings "github.com/databricks/databricks-sdk-go/service/settings"
	mock "github.com/stretchr/testify/mock"
)

// MockWorkspaceNetworkConfigurationInterface is an autogenerated mock type for the WorkspaceNetworkConfigurationInterface type
type MockWorkspaceNetworkConfigurationInterface struct {
	mock.Mock
}

type MockWorkspaceNetworkConfigurationInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWorkspaceNetworkConfigurationInterface) EXPECT() *MockWorkspaceNetworkConfigurationInterface_Expecter {
	return &MockWorkspaceNetworkConfigurationInterface_Expecter{mock: &_m.Mock}
}

// GetWorkspaceNetworkOptionRpc provides a mock function with given fields: ctx, request
func (_m *MockWorkspaceNetworkConfigurationInterface) GetWorkspaceNetworkOptionRpc(ctx context.Context, request settings.GetWorkspaceNetworkOptionRequest) (*settings.WorkspaceNetworkOption, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkspaceNetworkOptionRpc")
	}

	var r0 *settings.WorkspaceNetworkOption
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, settings.GetWorkspaceNetworkOptionRequest) (*settings.WorkspaceNetworkOption, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, settings.GetWorkspaceNetworkOptionRequest) *settings.WorkspaceNetworkOption); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*settings.WorkspaceNetworkOption)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, settings.GetWorkspaceNetworkOptionRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWorkspaceNetworkConfigurationInterface_GetWorkspaceNetworkOptionRpc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkspaceNetworkOptionRpc'
type MockWorkspaceNetworkConfigurationInterface_GetWorkspaceNetworkOptionRpc_Call struct {
	*mock.Call
}

// GetWorkspaceNetworkOptionRpc is a helper method to define mock.On call
//   - ctx context.Context
//   - request settings.GetWorkspaceNetworkOptionRequest
func (_e *MockWorkspaceNetworkConfigurationInterface_Expecter) GetWorkspaceNetworkOptionRpc(ctx interface{}, request interface{}) *MockWorkspaceNetworkConfigurationInterface_GetWorkspaceNetworkOptionRpc_Call {
	return &MockWorkspaceNetworkConfigurationInterface_GetWorkspaceNetworkOptionRpc_Call{Call: _e.mock.On("GetWorkspaceNetworkOptionRpc", ctx, request)}
}

func (_c *MockWorkspaceNetworkConfigurationInterface_GetWorkspaceNetworkOptionRpc_Call) Run(run func(ctx context.Context, request settings.GetWorkspaceNetworkOptionRequest)) *MockWorkspaceNetworkConfigurationInterface_GetWorkspaceNetworkOptionRpc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(settings.GetWorkspaceNetworkOptionRequest))
	})
	return _c
}

func (_c *MockWorkspaceNetworkConfigurationInterface_GetWorkspaceNetworkOptionRpc_Call) Return(_a0 *settings.WorkspaceNetworkOption, _a1 error) *MockWorkspaceNetworkConfigurationInterface_GetWorkspaceNetworkOptionRpc_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWorkspaceNetworkConfigurationInterface_GetWorkspaceNetworkOptionRpc_Call) RunAndReturn(run func(context.Context, settings.GetWorkspaceNetworkOptionRequest) (*settings.WorkspaceNetworkOption, error)) *MockWorkspaceNetworkConfigurationInterface_GetWorkspaceNetworkOptionRpc_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkspaceNetworkOptionRpcByWorkspaceId provides a mock function with given fields: ctx, workspaceId
func (_m *MockWorkspaceNetworkConfigurationInterface) GetWorkspaceNetworkOptionRpcByWorkspaceId(ctx context.Context, workspaceId int64) (*settings.WorkspaceNetworkOption, error) {
	ret := _m.Called(ctx, workspaceId)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkspaceNetworkOptionRpcByWorkspaceId")
	}

	var r0 *settings.WorkspaceNetworkOption
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*settings.WorkspaceNetworkOption, error)); ok {
		return rf(ctx, workspaceId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *settings.WorkspaceNetworkOption); ok {
		r0 = rf(ctx, workspaceId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*settings.WorkspaceNetworkOption)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, workspaceId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWorkspaceNetworkConfigurationInterface_GetWorkspaceNetworkOptionRpcByWorkspaceId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkspaceNetworkOptionRpcByWorkspaceId'
type MockWorkspaceNetworkConfigurationInterface_GetWorkspaceNetworkOptionRpcByWorkspaceId_Call struct {
	*mock.Call
}

// GetWorkspaceNetworkOptionRpcByWorkspaceId is a helper method to define mock.On call
//   - ctx context.Context
//   - workspaceId int64
func (_e *MockWorkspaceNetworkConfigurationInterface_Expecter) GetWorkspaceNetworkOptionRpcByWorkspaceId(ctx interface{}, workspaceId interface{}) *MockWorkspaceNetworkConfigurationInterface_GetWorkspaceNetworkOptionRpcByWorkspaceId_Call {
	return &MockWorkspaceNetworkConfigurationInterface_GetWorkspaceNetworkOptionRpcByWorkspaceId_Call{Call: _e.mock.On("GetWorkspaceNetworkOptionRpcByWorkspaceId", ctx, workspaceId)}
}

func (_c *MockWorkspaceNetworkConfigurationInterface_GetWorkspaceNetworkOptionRpcByWorkspaceId_Call) Run(run func(ctx context.Context, workspaceId int64)) *MockWorkspaceNetworkConfigurationInterface_GetWorkspaceNetworkOptionRpcByWorkspaceId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockWorkspaceNetworkConfigurationInterface_GetWorkspaceNetworkOptionRpcByWorkspaceId_Call) Return(_a0 *settings.WorkspaceNetworkOption, _a1 error) *MockWorkspaceNetworkConfigurationInterface_GetWorkspaceNetworkOptionRpcByWorkspaceId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWorkspaceNetworkConfigurationInterface_GetWorkspaceNetworkOptionRpcByWorkspaceId_Call) RunAndReturn(run func(context.Context, int64) (*settings.WorkspaceNetworkOption, error)) *MockWorkspaceNetworkConfigurationInterface_GetWorkspaceNetworkOptionRpcByWorkspaceId_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateWorkspaceNetworkOptionRpc provides a mock function with given fields: ctx, request
func (_m *MockWorkspaceNetworkConfigurationInterface) UpdateWorkspaceNetworkOptionRpc(ctx context.Context, request settings.UpdateWorkspaceNetworkOptionRequest) (*settings.WorkspaceNetworkOption, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWorkspaceNetworkOptionRpc")
	}

	var r0 *settings.WorkspaceNetworkOption
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, settings.UpdateWorkspaceNetworkOptionRequest) (*settings.WorkspaceNetworkOption, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, settings.UpdateWorkspaceNetworkOptionRequest) *settings.WorkspaceNetworkOption); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*settings.WorkspaceNetworkOption)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, settings.UpdateWorkspaceNetworkOptionRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWorkspaceNetworkConfigurationInterface_UpdateWorkspaceNetworkOptionRpc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateWorkspaceNetworkOptionRpc'
type MockWorkspaceNetworkConfigurationInterface_UpdateWorkspaceNetworkOptionRpc_Call struct {
	*mock.Call
}

// UpdateWorkspaceNetworkOptionRpc is a helper method to define mock.On call
//   - ctx context.Context
//   - request settings.UpdateWorkspaceNetworkOptionRequest
func (_e *MockWorkspaceNetworkConfigurationInterface_Expecter) UpdateWorkspaceNetworkOptionRpc(ctx interface{}, request interface{}) *MockWorkspaceNetworkConfigurationInterface_UpdateWorkspaceNetworkOptionRpc_Call {
	return &MockWorkspaceNetworkConfigurationInterface_UpdateWorkspaceNetworkOptionRpc_Call{Call: _e.mock.On("UpdateWorkspaceNetworkOptionRpc", ctx, request)}
}

func (_c *MockWorkspaceNetworkConfigurationInterface_UpdateWorkspaceNetworkOptionRpc_Call) Run(run func(ctx context.Context, request settings.UpdateWorkspaceNetworkOptionRequest)) *MockWorkspaceNetworkConfigurationInterface_UpdateWorkspaceNetworkOptionRpc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(settings.UpdateWorkspaceNetworkOptionRequest))
	})
	return _c
}

func (_c *MockWorkspaceNetworkConfigurationInterface_UpdateWorkspaceNetworkOptionRpc_Call) Return(_a0 *settings.WorkspaceNetworkOption, _a1 error) *MockWorkspaceNetworkConfigurationInterface_UpdateWorkspaceNetworkOptionRpc_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWorkspaceNetworkConfigurationInterface_UpdateWorkspaceNetworkOptionRpc_Call) RunAndReturn(run func(context.Context, settings.UpdateWorkspaceNetworkOptionRequest) (*settings.WorkspaceNetworkOption, error)) *MockWorkspaceNetworkConfigurationInterface_UpdateWorkspaceNetworkOptionRpc_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWorkspaceNetworkConfigurationInterface creates a new instance of MockWorkspaceNetworkConfigurationInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWorkspaceNetworkConfigurationInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWorkspaceNetworkConfigurationInterface {
	mock := &MockWorkspaceNetworkConfigurationInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
