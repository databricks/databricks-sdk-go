// Code generated by mockery v2.39.1. DO NOT EDIT.

package settings

import (
	context "context"

	settings "github.com/databricks/databricks-sdk-go/service/settings"
	mock "github.com/stretchr/testify/mock"
)

// MockCspEnablementAccountInterface is an autogenerated mock type for the CspEnablementAccountInterface type
type MockCspEnablementAccountInterface struct {
	mock.Mock
}

type MockCspEnablementAccountInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCspEnablementAccountInterface) EXPECT() *MockCspEnablementAccountInterface_Expecter {
	return &MockCspEnablementAccountInterface_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: ctx, request
func (_m *MockCspEnablementAccountInterface) Get(ctx context.Context, request settings.GetCspEnablementAccountSettingRequest) (*settings.CspEnablementAccountSetting, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *settings.CspEnablementAccountSetting
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, settings.GetCspEnablementAccountSettingRequest) (*settings.CspEnablementAccountSetting, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, settings.GetCspEnablementAccountSettingRequest) *settings.CspEnablementAccountSetting); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*settings.CspEnablementAccountSetting)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, settings.GetCspEnablementAccountSettingRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCspEnablementAccountInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockCspEnablementAccountInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - request settings.GetCspEnablementAccountSettingRequest
func (_e *MockCspEnablementAccountInterface_Expecter) Get(ctx interface{}, request interface{}) *MockCspEnablementAccountInterface_Get_Call {
	return &MockCspEnablementAccountInterface_Get_Call{Call: _e.mock.On("Get", ctx, request)}
}

func (_c *MockCspEnablementAccountInterface_Get_Call) Run(run func(ctx context.Context, request settings.GetCspEnablementAccountSettingRequest)) *MockCspEnablementAccountInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(settings.GetCspEnablementAccountSettingRequest))
	})
	return _c
}

func (_c *MockCspEnablementAccountInterface_Get_Call) Return(_a0 *settings.CspEnablementAccountSetting, _a1 error) *MockCspEnablementAccountInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCspEnablementAccountInterface_Get_Call) RunAndReturn(run func(context.Context, settings.GetCspEnablementAccountSettingRequest) (*settings.CspEnablementAccountSetting, error)) *MockCspEnablementAccountInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Impl provides a mock function with given fields:
func (_m *MockCspEnablementAccountInterface) Impl() settings.CspEnablementAccountService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 settings.CspEnablementAccountService
	if rf, ok := ret.Get(0).(func() settings.CspEnablementAccountService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(settings.CspEnablementAccountService)
		}
	}

	return r0
}

// MockCspEnablementAccountInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockCspEnablementAccountInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockCspEnablementAccountInterface_Expecter) Impl() *MockCspEnablementAccountInterface_Impl_Call {
	return &MockCspEnablementAccountInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockCspEnablementAccountInterface_Impl_Call) Run(run func()) *MockCspEnablementAccountInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCspEnablementAccountInterface_Impl_Call) Return(_a0 settings.CspEnablementAccountService) *MockCspEnablementAccountInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCspEnablementAccountInterface_Impl_Call) RunAndReturn(run func() settings.CspEnablementAccountService) *MockCspEnablementAccountInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, request
func (_m *MockCspEnablementAccountInterface) Update(ctx context.Context, request settings.UpdateCspEnablementAccountSettingRequest) (*settings.CspEnablementAccountSetting, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *settings.CspEnablementAccountSetting
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, settings.UpdateCspEnablementAccountSettingRequest) (*settings.CspEnablementAccountSetting, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, settings.UpdateCspEnablementAccountSettingRequest) *settings.CspEnablementAccountSetting); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*settings.CspEnablementAccountSetting)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, settings.UpdateCspEnablementAccountSettingRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCspEnablementAccountInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockCspEnablementAccountInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - request settings.UpdateCspEnablementAccountSettingRequest
func (_e *MockCspEnablementAccountInterface_Expecter) Update(ctx interface{}, request interface{}) *MockCspEnablementAccountInterface_Update_Call {
	return &MockCspEnablementAccountInterface_Update_Call{Call: _e.mock.On("Update", ctx, request)}
}

func (_c *MockCspEnablementAccountInterface_Update_Call) Run(run func(ctx context.Context, request settings.UpdateCspEnablementAccountSettingRequest)) *MockCspEnablementAccountInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(settings.UpdateCspEnablementAccountSettingRequest))
	})
	return _c
}

func (_c *MockCspEnablementAccountInterface_Update_Call) Return(_a0 *settings.CspEnablementAccountSetting, _a1 error) *MockCspEnablementAccountInterface_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCspEnablementAccountInterface_Update_Call) RunAndReturn(run func(context.Context, settings.UpdateCspEnablementAccountSettingRequest) (*settings.CspEnablementAccountSetting, error)) *MockCspEnablementAccountInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockCspEnablementAccountInterface) WithImpl(impl settings.CspEnablementAccountService) settings.CspEnablementAccountInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 settings.CspEnablementAccountInterface
	if rf, ok := ret.Get(0).(func(settings.CspEnablementAccountService) settings.CspEnablementAccountInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(settings.CspEnablementAccountInterface)
		}
	}

	return r0
}

// MockCspEnablementAccountInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockCspEnablementAccountInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl settings.CspEnablementAccountService
func (_e *MockCspEnablementAccountInterface_Expecter) WithImpl(impl interface{}) *MockCspEnablementAccountInterface_WithImpl_Call {
	return &MockCspEnablementAccountInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockCspEnablementAccountInterface_WithImpl_Call) Run(run func(impl settings.CspEnablementAccountService)) *MockCspEnablementAccountInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(settings.CspEnablementAccountService))
	})
	return _c
}

func (_c *MockCspEnablementAccountInterface_WithImpl_Call) Return(_a0 settings.CspEnablementAccountInterface) *MockCspEnablementAccountInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCspEnablementAccountInterface_WithImpl_Call) RunAndReturn(run func(settings.CspEnablementAccountService) settings.CspEnablementAccountInterface) *MockCspEnablementAccountInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCspEnablementAccountInterface creates a new instance of MockCspEnablementAccountInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCspEnablementAccountInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCspEnablementAccountInterface {
	mock := &MockCspEnablementAccountInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
