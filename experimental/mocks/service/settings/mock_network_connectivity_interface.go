// Code generated by mockery v2.43.0. DO NOT EDIT.

package settings

import (
	context "context"

	listing "github.com/databricks/databricks-sdk-go/listing"
	mock "github.com/stretchr/testify/mock"

	settings "github.com/databricks/databricks-sdk-go/service/settings"
)

// MockNetworkConnectivityInterface is an autogenerated mock type for the NetworkConnectivityInterface type
type MockNetworkConnectivityInterface struct {
	mock.Mock
}

type MockNetworkConnectivityInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNetworkConnectivityInterface) EXPECT() *MockNetworkConnectivityInterface_Expecter {
	return &MockNetworkConnectivityInterface_Expecter{mock: &_m.Mock}
}

// CreateNetworkConnectivityConfiguration provides a mock function with given fields: ctx, request
func (_m *MockNetworkConnectivityInterface) CreateNetworkConnectivityConfiguration(ctx context.Context, request settings.CreateNetworkConnectivityConfigRequest) (*settings.NetworkConnectivityConfiguration, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateNetworkConnectivityConfiguration")
	}

	var r0 *settings.NetworkConnectivityConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, settings.CreateNetworkConnectivityConfigRequest) (*settings.NetworkConnectivityConfiguration, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, settings.CreateNetworkConnectivityConfigRequest) *settings.NetworkConnectivityConfiguration); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*settings.NetworkConnectivityConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, settings.CreateNetworkConnectivityConfigRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNetworkConnectivityInterface_CreateNetworkConnectivityConfiguration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNetworkConnectivityConfiguration'
type MockNetworkConnectivityInterface_CreateNetworkConnectivityConfiguration_Call struct {
	*mock.Call
}

// CreateNetworkConnectivityConfiguration is a helper method to define mock.On call
//   - ctx context.Context
//   - request settings.CreateNetworkConnectivityConfigRequest
func (_e *MockNetworkConnectivityInterface_Expecter) CreateNetworkConnectivityConfiguration(ctx interface{}, request interface{}) *MockNetworkConnectivityInterface_CreateNetworkConnectivityConfiguration_Call {
	return &MockNetworkConnectivityInterface_CreateNetworkConnectivityConfiguration_Call{Call: _e.mock.On("CreateNetworkConnectivityConfiguration", ctx, request)}
}

func (_c *MockNetworkConnectivityInterface_CreateNetworkConnectivityConfiguration_Call) Run(run func(ctx context.Context, request settings.CreateNetworkConnectivityConfigRequest)) *MockNetworkConnectivityInterface_CreateNetworkConnectivityConfiguration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(settings.CreateNetworkConnectivityConfigRequest))
	})
	return _c
}

func (_c *MockNetworkConnectivityInterface_CreateNetworkConnectivityConfiguration_Call) Return(_a0 *settings.NetworkConnectivityConfiguration, _a1 error) *MockNetworkConnectivityInterface_CreateNetworkConnectivityConfiguration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNetworkConnectivityInterface_CreateNetworkConnectivityConfiguration_Call) RunAndReturn(run func(context.Context, settings.CreateNetworkConnectivityConfigRequest) (*settings.NetworkConnectivityConfiguration, error)) *MockNetworkConnectivityInterface_CreateNetworkConnectivityConfiguration_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePrivateEndpointRule provides a mock function with given fields: ctx, request
func (_m *MockNetworkConnectivityInterface) CreatePrivateEndpointRule(ctx context.Context, request settings.CreatePrivateEndpointRuleRequest) (*settings.NccAzurePrivateEndpointRule, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreatePrivateEndpointRule")
	}

	var r0 *settings.NccAzurePrivateEndpointRule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, settings.CreatePrivateEndpointRuleRequest) (*settings.NccAzurePrivateEndpointRule, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, settings.CreatePrivateEndpointRuleRequest) *settings.NccAzurePrivateEndpointRule); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*settings.NccAzurePrivateEndpointRule)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, settings.CreatePrivateEndpointRuleRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNetworkConnectivityInterface_CreatePrivateEndpointRule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePrivateEndpointRule'
type MockNetworkConnectivityInterface_CreatePrivateEndpointRule_Call struct {
	*mock.Call
}

// CreatePrivateEndpointRule is a helper method to define mock.On call
//   - ctx context.Context
//   - request settings.CreatePrivateEndpointRuleRequest
func (_e *MockNetworkConnectivityInterface_Expecter) CreatePrivateEndpointRule(ctx interface{}, request interface{}) *MockNetworkConnectivityInterface_CreatePrivateEndpointRule_Call {
	return &MockNetworkConnectivityInterface_CreatePrivateEndpointRule_Call{Call: _e.mock.On("CreatePrivateEndpointRule", ctx, request)}
}

func (_c *MockNetworkConnectivityInterface_CreatePrivateEndpointRule_Call) Run(run func(ctx context.Context, request settings.CreatePrivateEndpointRuleRequest)) *MockNetworkConnectivityInterface_CreatePrivateEndpointRule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(settings.CreatePrivateEndpointRuleRequest))
	})
	return _c
}

func (_c *MockNetworkConnectivityInterface_CreatePrivateEndpointRule_Call) Return(_a0 *settings.NccAzurePrivateEndpointRule, _a1 error) *MockNetworkConnectivityInterface_CreatePrivateEndpointRule_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNetworkConnectivityInterface_CreatePrivateEndpointRule_Call) RunAndReturn(run func(context.Context, settings.CreatePrivateEndpointRuleRequest) (*settings.NccAzurePrivateEndpointRule, error)) *MockNetworkConnectivityInterface_CreatePrivateEndpointRule_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteNetworkConnectivityConfiguration provides a mock function with given fields: ctx, request
func (_m *MockNetworkConnectivityInterface) DeleteNetworkConnectivityConfiguration(ctx context.Context, request settings.DeleteNetworkConnectivityConfigurationRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNetworkConnectivityConfiguration")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, settings.DeleteNetworkConnectivityConfigurationRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNetworkConnectivityInterface_DeleteNetworkConnectivityConfiguration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNetworkConnectivityConfiguration'
type MockNetworkConnectivityInterface_DeleteNetworkConnectivityConfiguration_Call struct {
	*mock.Call
}

// DeleteNetworkConnectivityConfiguration is a helper method to define mock.On call
//   - ctx context.Context
//   - request settings.DeleteNetworkConnectivityConfigurationRequest
func (_e *MockNetworkConnectivityInterface_Expecter) DeleteNetworkConnectivityConfiguration(ctx interface{}, request interface{}) *MockNetworkConnectivityInterface_DeleteNetworkConnectivityConfiguration_Call {
	return &MockNetworkConnectivityInterface_DeleteNetworkConnectivityConfiguration_Call{Call: _e.mock.On("DeleteNetworkConnectivityConfiguration", ctx, request)}
}

func (_c *MockNetworkConnectivityInterface_DeleteNetworkConnectivityConfiguration_Call) Run(run func(ctx context.Context, request settings.DeleteNetworkConnectivityConfigurationRequest)) *MockNetworkConnectivityInterface_DeleteNetworkConnectivityConfiguration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(settings.DeleteNetworkConnectivityConfigurationRequest))
	})
	return _c
}

func (_c *MockNetworkConnectivityInterface_DeleteNetworkConnectivityConfiguration_Call) Return(_a0 error) *MockNetworkConnectivityInterface_DeleteNetworkConnectivityConfiguration_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNetworkConnectivityInterface_DeleteNetworkConnectivityConfiguration_Call) RunAndReturn(run func(context.Context, settings.DeleteNetworkConnectivityConfigurationRequest) error) *MockNetworkConnectivityInterface_DeleteNetworkConnectivityConfiguration_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteNetworkConnectivityConfigurationByNetworkConnectivityConfigId provides a mock function with given fields: ctx, networkConnectivityConfigId
func (_m *MockNetworkConnectivityInterface) DeleteNetworkConnectivityConfigurationByNetworkConnectivityConfigId(ctx context.Context, networkConnectivityConfigId string) error {
	ret := _m.Called(ctx, networkConnectivityConfigId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNetworkConnectivityConfigurationByNetworkConnectivityConfigId")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, networkConnectivityConfigId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNetworkConnectivityInterface_DeleteNetworkConnectivityConfigurationByNetworkConnectivityConfigId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNetworkConnectivityConfigurationByNetworkConnectivityConfigId'
type MockNetworkConnectivityInterface_DeleteNetworkConnectivityConfigurationByNetworkConnectivityConfigId_Call struct {
	*mock.Call
}

// DeleteNetworkConnectivityConfigurationByNetworkConnectivityConfigId is a helper method to define mock.On call
//   - ctx context.Context
//   - networkConnectivityConfigId string
func (_e *MockNetworkConnectivityInterface_Expecter) DeleteNetworkConnectivityConfigurationByNetworkConnectivityConfigId(ctx interface{}, networkConnectivityConfigId interface{}) *MockNetworkConnectivityInterface_DeleteNetworkConnectivityConfigurationByNetworkConnectivityConfigId_Call {
	return &MockNetworkConnectivityInterface_DeleteNetworkConnectivityConfigurationByNetworkConnectivityConfigId_Call{Call: _e.mock.On("DeleteNetworkConnectivityConfigurationByNetworkConnectivityConfigId", ctx, networkConnectivityConfigId)}
}

func (_c *MockNetworkConnectivityInterface_DeleteNetworkConnectivityConfigurationByNetworkConnectivityConfigId_Call) Run(run func(ctx context.Context, networkConnectivityConfigId string)) *MockNetworkConnectivityInterface_DeleteNetworkConnectivityConfigurationByNetworkConnectivityConfigId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockNetworkConnectivityInterface_DeleteNetworkConnectivityConfigurationByNetworkConnectivityConfigId_Call) Return(_a0 error) *MockNetworkConnectivityInterface_DeleteNetworkConnectivityConfigurationByNetworkConnectivityConfigId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNetworkConnectivityInterface_DeleteNetworkConnectivityConfigurationByNetworkConnectivityConfigId_Call) RunAndReturn(run func(context.Context, string) error) *MockNetworkConnectivityInterface_DeleteNetworkConnectivityConfigurationByNetworkConnectivityConfigId_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePrivateEndpointRule provides a mock function with given fields: ctx, request
func (_m *MockNetworkConnectivityInterface) DeletePrivateEndpointRule(ctx context.Context, request settings.DeletePrivateEndpointRuleRequest) (*settings.NccAzurePrivateEndpointRule, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for DeletePrivateEndpointRule")
	}

	var r0 *settings.NccAzurePrivateEndpointRule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, settings.DeletePrivateEndpointRuleRequest) (*settings.NccAzurePrivateEndpointRule, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, settings.DeletePrivateEndpointRuleRequest) *settings.NccAzurePrivateEndpointRule); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*settings.NccAzurePrivateEndpointRule)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, settings.DeletePrivateEndpointRuleRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNetworkConnectivityInterface_DeletePrivateEndpointRule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePrivateEndpointRule'
type MockNetworkConnectivityInterface_DeletePrivateEndpointRule_Call struct {
	*mock.Call
}

// DeletePrivateEndpointRule is a helper method to define mock.On call
//   - ctx context.Context
//   - request settings.DeletePrivateEndpointRuleRequest
func (_e *MockNetworkConnectivityInterface_Expecter) DeletePrivateEndpointRule(ctx interface{}, request interface{}) *MockNetworkConnectivityInterface_DeletePrivateEndpointRule_Call {
	return &MockNetworkConnectivityInterface_DeletePrivateEndpointRule_Call{Call: _e.mock.On("DeletePrivateEndpointRule", ctx, request)}
}

func (_c *MockNetworkConnectivityInterface_DeletePrivateEndpointRule_Call) Run(run func(ctx context.Context, request settings.DeletePrivateEndpointRuleRequest)) *MockNetworkConnectivityInterface_DeletePrivateEndpointRule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(settings.DeletePrivateEndpointRuleRequest))
	})
	return _c
}

func (_c *MockNetworkConnectivityInterface_DeletePrivateEndpointRule_Call) Return(_a0 *settings.NccAzurePrivateEndpointRule, _a1 error) *MockNetworkConnectivityInterface_DeletePrivateEndpointRule_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNetworkConnectivityInterface_DeletePrivateEndpointRule_Call) RunAndReturn(run func(context.Context, settings.DeletePrivateEndpointRuleRequest) (*settings.NccAzurePrivateEndpointRule, error)) *MockNetworkConnectivityInterface_DeletePrivateEndpointRule_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePrivateEndpointRuleByNetworkConnectivityConfigIdAndPrivateEndpointRuleId provides a mock function with given fields: ctx, networkConnectivityConfigId, privateEndpointRuleId
func (_m *MockNetworkConnectivityInterface) DeletePrivateEndpointRuleByNetworkConnectivityConfigIdAndPrivateEndpointRuleId(ctx context.Context, networkConnectivityConfigId string, privateEndpointRuleId string) (*settings.NccAzurePrivateEndpointRule, error) {
	ret := _m.Called(ctx, networkConnectivityConfigId, privateEndpointRuleId)

	if len(ret) == 0 {
		panic("no return value specified for DeletePrivateEndpointRuleByNetworkConnectivityConfigIdAndPrivateEndpointRuleId")
	}

	var r0 *settings.NccAzurePrivateEndpointRule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*settings.NccAzurePrivateEndpointRule, error)); ok {
		return rf(ctx, networkConnectivityConfigId, privateEndpointRuleId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *settings.NccAzurePrivateEndpointRule); ok {
		r0 = rf(ctx, networkConnectivityConfigId, privateEndpointRuleId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*settings.NccAzurePrivateEndpointRule)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, networkConnectivityConfigId, privateEndpointRuleId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNetworkConnectivityInterface_DeletePrivateEndpointRuleByNetworkConnectivityConfigIdAndPrivateEndpointRuleId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePrivateEndpointRuleByNetworkConnectivityConfigIdAndPrivateEndpointRuleId'
type MockNetworkConnectivityInterface_DeletePrivateEndpointRuleByNetworkConnectivityConfigIdAndPrivateEndpointRuleId_Call struct {
	*mock.Call
}

// DeletePrivateEndpointRuleByNetworkConnectivityConfigIdAndPrivateEndpointRuleId is a helper method to define mock.On call
//   - ctx context.Context
//   - networkConnectivityConfigId string
//   - privateEndpointRuleId string
func (_e *MockNetworkConnectivityInterface_Expecter) DeletePrivateEndpointRuleByNetworkConnectivityConfigIdAndPrivateEndpointRuleId(ctx interface{}, networkConnectivityConfigId interface{}, privateEndpointRuleId interface{}) *MockNetworkConnectivityInterface_DeletePrivateEndpointRuleByNetworkConnectivityConfigIdAndPrivateEndpointRuleId_Call {
	return &MockNetworkConnectivityInterface_DeletePrivateEndpointRuleByNetworkConnectivityConfigIdAndPrivateEndpointRuleId_Call{Call: _e.mock.On("DeletePrivateEndpointRuleByNetworkConnectivityConfigIdAndPrivateEndpointRuleId", ctx, networkConnectivityConfigId, privateEndpointRuleId)}
}

func (_c *MockNetworkConnectivityInterface_DeletePrivateEndpointRuleByNetworkConnectivityConfigIdAndPrivateEndpointRuleId_Call) Run(run func(ctx context.Context, networkConnectivityConfigId string, privateEndpointRuleId string)) *MockNetworkConnectivityInterface_DeletePrivateEndpointRuleByNetworkConnectivityConfigIdAndPrivateEndpointRuleId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockNetworkConnectivityInterface_DeletePrivateEndpointRuleByNetworkConnectivityConfigIdAndPrivateEndpointRuleId_Call) Return(_a0 *settings.NccAzurePrivateEndpointRule, _a1 error) *MockNetworkConnectivityInterface_DeletePrivateEndpointRuleByNetworkConnectivityConfigIdAndPrivateEndpointRuleId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNetworkConnectivityInterface_DeletePrivateEndpointRuleByNetworkConnectivityConfigIdAndPrivateEndpointRuleId_Call) RunAndReturn(run func(context.Context, string, string) (*settings.NccAzurePrivateEndpointRule, error)) *MockNetworkConnectivityInterface_DeletePrivateEndpointRuleByNetworkConnectivityConfigIdAndPrivateEndpointRuleId_Call {
	_c.Call.Return(run)
	return _c
}

// GetNetworkConnectivityConfiguration provides a mock function with given fields: ctx, request
func (_m *MockNetworkConnectivityInterface) GetNetworkConnectivityConfiguration(ctx context.Context, request settings.GetNetworkConnectivityConfigurationRequest) (*settings.NetworkConnectivityConfiguration, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetNetworkConnectivityConfiguration")
	}

	var r0 *settings.NetworkConnectivityConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, settings.GetNetworkConnectivityConfigurationRequest) (*settings.NetworkConnectivityConfiguration, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, settings.GetNetworkConnectivityConfigurationRequest) *settings.NetworkConnectivityConfiguration); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*settings.NetworkConnectivityConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, settings.GetNetworkConnectivityConfigurationRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNetworkConnectivityInterface_GetNetworkConnectivityConfiguration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNetworkConnectivityConfiguration'
type MockNetworkConnectivityInterface_GetNetworkConnectivityConfiguration_Call struct {
	*mock.Call
}

// GetNetworkConnectivityConfiguration is a helper method to define mock.On call
//   - ctx context.Context
//   - request settings.GetNetworkConnectivityConfigurationRequest
func (_e *MockNetworkConnectivityInterface_Expecter) GetNetworkConnectivityConfiguration(ctx interface{}, request interface{}) *MockNetworkConnectivityInterface_GetNetworkConnectivityConfiguration_Call {
	return &MockNetworkConnectivityInterface_GetNetworkConnectivityConfiguration_Call{Call: _e.mock.On("GetNetworkConnectivityConfiguration", ctx, request)}
}

func (_c *MockNetworkConnectivityInterface_GetNetworkConnectivityConfiguration_Call) Run(run func(ctx context.Context, request settings.GetNetworkConnectivityConfigurationRequest)) *MockNetworkConnectivityInterface_GetNetworkConnectivityConfiguration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(settings.GetNetworkConnectivityConfigurationRequest))
	})
	return _c
}

func (_c *MockNetworkConnectivityInterface_GetNetworkConnectivityConfiguration_Call) Return(_a0 *settings.NetworkConnectivityConfiguration, _a1 error) *MockNetworkConnectivityInterface_GetNetworkConnectivityConfiguration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNetworkConnectivityInterface_GetNetworkConnectivityConfiguration_Call) RunAndReturn(run func(context.Context, settings.GetNetworkConnectivityConfigurationRequest) (*settings.NetworkConnectivityConfiguration, error)) *MockNetworkConnectivityInterface_GetNetworkConnectivityConfiguration_Call {
	_c.Call.Return(run)
	return _c
}

// GetNetworkConnectivityConfigurationByNetworkConnectivityConfigId provides a mock function with given fields: ctx, networkConnectivityConfigId
func (_m *MockNetworkConnectivityInterface) GetNetworkConnectivityConfigurationByNetworkConnectivityConfigId(ctx context.Context, networkConnectivityConfigId string) (*settings.NetworkConnectivityConfiguration, error) {
	ret := _m.Called(ctx, networkConnectivityConfigId)

	if len(ret) == 0 {
		panic("no return value specified for GetNetworkConnectivityConfigurationByNetworkConnectivityConfigId")
	}

	var r0 *settings.NetworkConnectivityConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*settings.NetworkConnectivityConfiguration, error)); ok {
		return rf(ctx, networkConnectivityConfigId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *settings.NetworkConnectivityConfiguration); ok {
		r0 = rf(ctx, networkConnectivityConfigId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*settings.NetworkConnectivityConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, networkConnectivityConfigId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNetworkConnectivityInterface_GetNetworkConnectivityConfigurationByNetworkConnectivityConfigId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNetworkConnectivityConfigurationByNetworkConnectivityConfigId'
type MockNetworkConnectivityInterface_GetNetworkConnectivityConfigurationByNetworkConnectivityConfigId_Call struct {
	*mock.Call
}

// GetNetworkConnectivityConfigurationByNetworkConnectivityConfigId is a helper method to define mock.On call
//   - ctx context.Context
//   - networkConnectivityConfigId string
func (_e *MockNetworkConnectivityInterface_Expecter) GetNetworkConnectivityConfigurationByNetworkConnectivityConfigId(ctx interface{}, networkConnectivityConfigId interface{}) *MockNetworkConnectivityInterface_GetNetworkConnectivityConfigurationByNetworkConnectivityConfigId_Call {
	return &MockNetworkConnectivityInterface_GetNetworkConnectivityConfigurationByNetworkConnectivityConfigId_Call{Call: _e.mock.On("GetNetworkConnectivityConfigurationByNetworkConnectivityConfigId", ctx, networkConnectivityConfigId)}
}

func (_c *MockNetworkConnectivityInterface_GetNetworkConnectivityConfigurationByNetworkConnectivityConfigId_Call) Run(run func(ctx context.Context, networkConnectivityConfigId string)) *MockNetworkConnectivityInterface_GetNetworkConnectivityConfigurationByNetworkConnectivityConfigId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockNetworkConnectivityInterface_GetNetworkConnectivityConfigurationByNetworkConnectivityConfigId_Call) Return(_a0 *settings.NetworkConnectivityConfiguration, _a1 error) *MockNetworkConnectivityInterface_GetNetworkConnectivityConfigurationByNetworkConnectivityConfigId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNetworkConnectivityInterface_GetNetworkConnectivityConfigurationByNetworkConnectivityConfigId_Call) RunAndReturn(run func(context.Context, string) (*settings.NetworkConnectivityConfiguration, error)) *MockNetworkConnectivityInterface_GetNetworkConnectivityConfigurationByNetworkConnectivityConfigId_Call {
	_c.Call.Return(run)
	return _c
}

// GetPrivateEndpointRule provides a mock function with given fields: ctx, request
func (_m *MockNetworkConnectivityInterface) GetPrivateEndpointRule(ctx context.Context, request settings.GetPrivateEndpointRuleRequest) (*settings.NccAzurePrivateEndpointRule, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetPrivateEndpointRule")
	}

	var r0 *settings.NccAzurePrivateEndpointRule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, settings.GetPrivateEndpointRuleRequest) (*settings.NccAzurePrivateEndpointRule, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, settings.GetPrivateEndpointRuleRequest) *settings.NccAzurePrivateEndpointRule); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*settings.NccAzurePrivateEndpointRule)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, settings.GetPrivateEndpointRuleRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNetworkConnectivityInterface_GetPrivateEndpointRule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPrivateEndpointRule'
type MockNetworkConnectivityInterface_GetPrivateEndpointRule_Call struct {
	*mock.Call
}

// GetPrivateEndpointRule is a helper method to define mock.On call
//   - ctx context.Context
//   - request settings.GetPrivateEndpointRuleRequest
func (_e *MockNetworkConnectivityInterface_Expecter) GetPrivateEndpointRule(ctx interface{}, request interface{}) *MockNetworkConnectivityInterface_GetPrivateEndpointRule_Call {
	return &MockNetworkConnectivityInterface_GetPrivateEndpointRule_Call{Call: _e.mock.On("GetPrivateEndpointRule", ctx, request)}
}

func (_c *MockNetworkConnectivityInterface_GetPrivateEndpointRule_Call) Run(run func(ctx context.Context, request settings.GetPrivateEndpointRuleRequest)) *MockNetworkConnectivityInterface_GetPrivateEndpointRule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(settings.GetPrivateEndpointRuleRequest))
	})
	return _c
}

func (_c *MockNetworkConnectivityInterface_GetPrivateEndpointRule_Call) Return(_a0 *settings.NccAzurePrivateEndpointRule, _a1 error) *MockNetworkConnectivityInterface_GetPrivateEndpointRule_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNetworkConnectivityInterface_GetPrivateEndpointRule_Call) RunAndReturn(run func(context.Context, settings.GetPrivateEndpointRuleRequest) (*settings.NccAzurePrivateEndpointRule, error)) *MockNetworkConnectivityInterface_GetPrivateEndpointRule_Call {
	_c.Call.Return(run)
	return _c
}

// GetPrivateEndpointRuleByNetworkConnectivityConfigIdAndPrivateEndpointRuleId provides a mock function with given fields: ctx, networkConnectivityConfigId, privateEndpointRuleId
func (_m *MockNetworkConnectivityInterface) GetPrivateEndpointRuleByNetworkConnectivityConfigIdAndPrivateEndpointRuleId(ctx context.Context, networkConnectivityConfigId string, privateEndpointRuleId string) (*settings.NccAzurePrivateEndpointRule, error) {
	ret := _m.Called(ctx, networkConnectivityConfigId, privateEndpointRuleId)

	if len(ret) == 0 {
		panic("no return value specified for GetPrivateEndpointRuleByNetworkConnectivityConfigIdAndPrivateEndpointRuleId")
	}

	var r0 *settings.NccAzurePrivateEndpointRule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*settings.NccAzurePrivateEndpointRule, error)); ok {
		return rf(ctx, networkConnectivityConfigId, privateEndpointRuleId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *settings.NccAzurePrivateEndpointRule); ok {
		r0 = rf(ctx, networkConnectivityConfigId, privateEndpointRuleId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*settings.NccAzurePrivateEndpointRule)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, networkConnectivityConfigId, privateEndpointRuleId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNetworkConnectivityInterface_GetPrivateEndpointRuleByNetworkConnectivityConfigIdAndPrivateEndpointRuleId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPrivateEndpointRuleByNetworkConnectivityConfigIdAndPrivateEndpointRuleId'
type MockNetworkConnectivityInterface_GetPrivateEndpointRuleByNetworkConnectivityConfigIdAndPrivateEndpointRuleId_Call struct {
	*mock.Call
}

// GetPrivateEndpointRuleByNetworkConnectivityConfigIdAndPrivateEndpointRuleId is a helper method to define mock.On call
//   - ctx context.Context
//   - networkConnectivityConfigId string
//   - privateEndpointRuleId string
func (_e *MockNetworkConnectivityInterface_Expecter) GetPrivateEndpointRuleByNetworkConnectivityConfigIdAndPrivateEndpointRuleId(ctx interface{}, networkConnectivityConfigId interface{}, privateEndpointRuleId interface{}) *MockNetworkConnectivityInterface_GetPrivateEndpointRuleByNetworkConnectivityConfigIdAndPrivateEndpointRuleId_Call {
	return &MockNetworkConnectivityInterface_GetPrivateEndpointRuleByNetworkConnectivityConfigIdAndPrivateEndpointRuleId_Call{Call: _e.mock.On("GetPrivateEndpointRuleByNetworkConnectivityConfigIdAndPrivateEndpointRuleId", ctx, networkConnectivityConfigId, privateEndpointRuleId)}
}

func (_c *MockNetworkConnectivityInterface_GetPrivateEndpointRuleByNetworkConnectivityConfigIdAndPrivateEndpointRuleId_Call) Run(run func(ctx context.Context, networkConnectivityConfigId string, privateEndpointRuleId string)) *MockNetworkConnectivityInterface_GetPrivateEndpointRuleByNetworkConnectivityConfigIdAndPrivateEndpointRuleId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockNetworkConnectivityInterface_GetPrivateEndpointRuleByNetworkConnectivityConfigIdAndPrivateEndpointRuleId_Call) Return(_a0 *settings.NccAzurePrivateEndpointRule, _a1 error) *MockNetworkConnectivityInterface_GetPrivateEndpointRuleByNetworkConnectivityConfigIdAndPrivateEndpointRuleId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNetworkConnectivityInterface_GetPrivateEndpointRuleByNetworkConnectivityConfigIdAndPrivateEndpointRuleId_Call) RunAndReturn(run func(context.Context, string, string) (*settings.NccAzurePrivateEndpointRule, error)) *MockNetworkConnectivityInterface_GetPrivateEndpointRuleByNetworkConnectivityConfigIdAndPrivateEndpointRuleId_Call {
	_c.Call.Return(run)
	return _c
}

// Impl provides a mock function with given fields:
func (_m *MockNetworkConnectivityInterface) Impl() settings.NetworkConnectivityService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 settings.NetworkConnectivityService
	if rf, ok := ret.Get(0).(func() settings.NetworkConnectivityService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(settings.NetworkConnectivityService)
		}
	}

	return r0
}

// MockNetworkConnectivityInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockNetworkConnectivityInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockNetworkConnectivityInterface_Expecter) Impl() *MockNetworkConnectivityInterface_Impl_Call {
	return &MockNetworkConnectivityInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockNetworkConnectivityInterface_Impl_Call) Run(run func()) *MockNetworkConnectivityInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNetworkConnectivityInterface_Impl_Call) Return(_a0 settings.NetworkConnectivityService) *MockNetworkConnectivityInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNetworkConnectivityInterface_Impl_Call) RunAndReturn(run func() settings.NetworkConnectivityService) *MockNetworkConnectivityInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// ListNetworkConnectivityConfigurations provides a mock function with given fields: ctx, request
func (_m *MockNetworkConnectivityInterface) ListNetworkConnectivityConfigurations(ctx context.Context, request settings.ListNetworkConnectivityConfigurationsRequest) listing.Iterator[settings.NetworkConnectivityConfiguration] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListNetworkConnectivityConfigurations")
	}

	var r0 listing.Iterator[settings.NetworkConnectivityConfiguration]
	if rf, ok := ret.Get(0).(func(context.Context, settings.ListNetworkConnectivityConfigurationsRequest) listing.Iterator[settings.NetworkConnectivityConfiguration]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listing.Iterator[settings.NetworkConnectivityConfiguration])
		}
	}

	return r0
}

// MockNetworkConnectivityInterface_ListNetworkConnectivityConfigurations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNetworkConnectivityConfigurations'
type MockNetworkConnectivityInterface_ListNetworkConnectivityConfigurations_Call struct {
	*mock.Call
}

// ListNetworkConnectivityConfigurations is a helper method to define mock.On call
//   - ctx context.Context
//   - request settings.ListNetworkConnectivityConfigurationsRequest
func (_e *MockNetworkConnectivityInterface_Expecter) ListNetworkConnectivityConfigurations(ctx interface{}, request interface{}) *MockNetworkConnectivityInterface_ListNetworkConnectivityConfigurations_Call {
	return &MockNetworkConnectivityInterface_ListNetworkConnectivityConfigurations_Call{Call: _e.mock.On("ListNetworkConnectivityConfigurations", ctx, request)}
}

func (_c *MockNetworkConnectivityInterface_ListNetworkConnectivityConfigurations_Call) Run(run func(ctx context.Context, request settings.ListNetworkConnectivityConfigurationsRequest)) *MockNetworkConnectivityInterface_ListNetworkConnectivityConfigurations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(settings.ListNetworkConnectivityConfigurationsRequest))
	})
	return _c
}

func (_c *MockNetworkConnectivityInterface_ListNetworkConnectivityConfigurations_Call) Return(_a0 listing.Iterator[settings.NetworkConnectivityConfiguration]) *MockNetworkConnectivityInterface_ListNetworkConnectivityConfigurations_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNetworkConnectivityInterface_ListNetworkConnectivityConfigurations_Call) RunAndReturn(run func(context.Context, settings.ListNetworkConnectivityConfigurationsRequest) listing.Iterator[settings.NetworkConnectivityConfiguration]) *MockNetworkConnectivityInterface_ListNetworkConnectivityConfigurations_Call {
	_c.Call.Return(run)
	return _c
}

// ListNetworkConnectivityConfigurationsAll provides a mock function with given fields: ctx, request
func (_m *MockNetworkConnectivityInterface) ListNetworkConnectivityConfigurationsAll(ctx context.Context, request settings.ListNetworkConnectivityConfigurationsRequest) ([]settings.NetworkConnectivityConfiguration, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListNetworkConnectivityConfigurationsAll")
	}

	var r0 []settings.NetworkConnectivityConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, settings.ListNetworkConnectivityConfigurationsRequest) ([]settings.NetworkConnectivityConfiguration, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, settings.ListNetworkConnectivityConfigurationsRequest) []settings.NetworkConnectivityConfiguration); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]settings.NetworkConnectivityConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, settings.ListNetworkConnectivityConfigurationsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNetworkConnectivityInterface_ListNetworkConnectivityConfigurationsAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNetworkConnectivityConfigurationsAll'
type MockNetworkConnectivityInterface_ListNetworkConnectivityConfigurationsAll_Call struct {
	*mock.Call
}

// ListNetworkConnectivityConfigurationsAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request settings.ListNetworkConnectivityConfigurationsRequest
func (_e *MockNetworkConnectivityInterface_Expecter) ListNetworkConnectivityConfigurationsAll(ctx interface{}, request interface{}) *MockNetworkConnectivityInterface_ListNetworkConnectivityConfigurationsAll_Call {
	return &MockNetworkConnectivityInterface_ListNetworkConnectivityConfigurationsAll_Call{Call: _e.mock.On("ListNetworkConnectivityConfigurationsAll", ctx, request)}
}

func (_c *MockNetworkConnectivityInterface_ListNetworkConnectivityConfigurationsAll_Call) Run(run func(ctx context.Context, request settings.ListNetworkConnectivityConfigurationsRequest)) *MockNetworkConnectivityInterface_ListNetworkConnectivityConfigurationsAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(settings.ListNetworkConnectivityConfigurationsRequest))
	})
	return _c
}

func (_c *MockNetworkConnectivityInterface_ListNetworkConnectivityConfigurationsAll_Call) Return(_a0 []settings.NetworkConnectivityConfiguration, _a1 error) *MockNetworkConnectivityInterface_ListNetworkConnectivityConfigurationsAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNetworkConnectivityInterface_ListNetworkConnectivityConfigurationsAll_Call) RunAndReturn(run func(context.Context, settings.ListNetworkConnectivityConfigurationsRequest) ([]settings.NetworkConnectivityConfiguration, error)) *MockNetworkConnectivityInterface_ListNetworkConnectivityConfigurationsAll_Call {
	_c.Call.Return(run)
	return _c
}

// ListPrivateEndpointRules provides a mock function with given fields: ctx, request
func (_m *MockNetworkConnectivityInterface) ListPrivateEndpointRules(ctx context.Context, request settings.ListPrivateEndpointRulesRequest) listing.Iterator[settings.NccAzurePrivateEndpointRule] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListPrivateEndpointRules")
	}

	var r0 listing.Iterator[settings.NccAzurePrivateEndpointRule]
	if rf, ok := ret.Get(0).(func(context.Context, settings.ListPrivateEndpointRulesRequest) listing.Iterator[settings.NccAzurePrivateEndpointRule]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listing.Iterator[settings.NccAzurePrivateEndpointRule])
		}
	}

	return r0
}

// MockNetworkConnectivityInterface_ListPrivateEndpointRules_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPrivateEndpointRules'
type MockNetworkConnectivityInterface_ListPrivateEndpointRules_Call struct {
	*mock.Call
}

// ListPrivateEndpointRules is a helper method to define mock.On call
//   - ctx context.Context
//   - request settings.ListPrivateEndpointRulesRequest
func (_e *MockNetworkConnectivityInterface_Expecter) ListPrivateEndpointRules(ctx interface{}, request interface{}) *MockNetworkConnectivityInterface_ListPrivateEndpointRules_Call {
	return &MockNetworkConnectivityInterface_ListPrivateEndpointRules_Call{Call: _e.mock.On("ListPrivateEndpointRules", ctx, request)}
}

func (_c *MockNetworkConnectivityInterface_ListPrivateEndpointRules_Call) Run(run func(ctx context.Context, request settings.ListPrivateEndpointRulesRequest)) *MockNetworkConnectivityInterface_ListPrivateEndpointRules_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(settings.ListPrivateEndpointRulesRequest))
	})
	return _c
}

func (_c *MockNetworkConnectivityInterface_ListPrivateEndpointRules_Call) Return(_a0 listing.Iterator[settings.NccAzurePrivateEndpointRule]) *MockNetworkConnectivityInterface_ListPrivateEndpointRules_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNetworkConnectivityInterface_ListPrivateEndpointRules_Call) RunAndReturn(run func(context.Context, settings.ListPrivateEndpointRulesRequest) listing.Iterator[settings.NccAzurePrivateEndpointRule]) *MockNetworkConnectivityInterface_ListPrivateEndpointRules_Call {
	_c.Call.Return(run)
	return _c
}

// ListPrivateEndpointRulesAll provides a mock function with given fields: ctx, request
func (_m *MockNetworkConnectivityInterface) ListPrivateEndpointRulesAll(ctx context.Context, request settings.ListPrivateEndpointRulesRequest) ([]settings.NccAzurePrivateEndpointRule, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListPrivateEndpointRulesAll")
	}

	var r0 []settings.NccAzurePrivateEndpointRule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, settings.ListPrivateEndpointRulesRequest) ([]settings.NccAzurePrivateEndpointRule, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, settings.ListPrivateEndpointRulesRequest) []settings.NccAzurePrivateEndpointRule); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]settings.NccAzurePrivateEndpointRule)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, settings.ListPrivateEndpointRulesRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNetworkConnectivityInterface_ListPrivateEndpointRulesAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPrivateEndpointRulesAll'
type MockNetworkConnectivityInterface_ListPrivateEndpointRulesAll_Call struct {
	*mock.Call
}

// ListPrivateEndpointRulesAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request settings.ListPrivateEndpointRulesRequest
func (_e *MockNetworkConnectivityInterface_Expecter) ListPrivateEndpointRulesAll(ctx interface{}, request interface{}) *MockNetworkConnectivityInterface_ListPrivateEndpointRulesAll_Call {
	return &MockNetworkConnectivityInterface_ListPrivateEndpointRulesAll_Call{Call: _e.mock.On("ListPrivateEndpointRulesAll", ctx, request)}
}

func (_c *MockNetworkConnectivityInterface_ListPrivateEndpointRulesAll_Call) Run(run func(ctx context.Context, request settings.ListPrivateEndpointRulesRequest)) *MockNetworkConnectivityInterface_ListPrivateEndpointRulesAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(settings.ListPrivateEndpointRulesRequest))
	})
	return _c
}

func (_c *MockNetworkConnectivityInterface_ListPrivateEndpointRulesAll_Call) Return(_a0 []settings.NccAzurePrivateEndpointRule, _a1 error) *MockNetworkConnectivityInterface_ListPrivateEndpointRulesAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNetworkConnectivityInterface_ListPrivateEndpointRulesAll_Call) RunAndReturn(run func(context.Context, settings.ListPrivateEndpointRulesRequest) ([]settings.NccAzurePrivateEndpointRule, error)) *MockNetworkConnectivityInterface_ListPrivateEndpointRulesAll_Call {
	_c.Call.Return(run)
	return _c
}

// ListPrivateEndpointRulesByNetworkConnectivityConfigId provides a mock function with given fields: ctx, networkConnectivityConfigId
func (_m *MockNetworkConnectivityInterface) ListPrivateEndpointRulesByNetworkConnectivityConfigId(ctx context.Context, networkConnectivityConfigId string) (*settings.ListNccAzurePrivateEndpointRulesResponse, error) {
	ret := _m.Called(ctx, networkConnectivityConfigId)

	if len(ret) == 0 {
		panic("no return value specified for ListPrivateEndpointRulesByNetworkConnectivityConfigId")
	}

	var r0 *settings.ListNccAzurePrivateEndpointRulesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*settings.ListNccAzurePrivateEndpointRulesResponse, error)); ok {
		return rf(ctx, networkConnectivityConfigId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *settings.ListNccAzurePrivateEndpointRulesResponse); ok {
		r0 = rf(ctx, networkConnectivityConfigId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*settings.ListNccAzurePrivateEndpointRulesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, networkConnectivityConfigId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNetworkConnectivityInterface_ListPrivateEndpointRulesByNetworkConnectivityConfigId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPrivateEndpointRulesByNetworkConnectivityConfigId'
type MockNetworkConnectivityInterface_ListPrivateEndpointRulesByNetworkConnectivityConfigId_Call struct {
	*mock.Call
}

// ListPrivateEndpointRulesByNetworkConnectivityConfigId is a helper method to define mock.On call
//   - ctx context.Context
//   - networkConnectivityConfigId string
func (_e *MockNetworkConnectivityInterface_Expecter) ListPrivateEndpointRulesByNetworkConnectivityConfigId(ctx interface{}, networkConnectivityConfigId interface{}) *MockNetworkConnectivityInterface_ListPrivateEndpointRulesByNetworkConnectivityConfigId_Call {
	return &MockNetworkConnectivityInterface_ListPrivateEndpointRulesByNetworkConnectivityConfigId_Call{Call: _e.mock.On("ListPrivateEndpointRulesByNetworkConnectivityConfigId", ctx, networkConnectivityConfigId)}
}

func (_c *MockNetworkConnectivityInterface_ListPrivateEndpointRulesByNetworkConnectivityConfigId_Call) Run(run func(ctx context.Context, networkConnectivityConfigId string)) *MockNetworkConnectivityInterface_ListPrivateEndpointRulesByNetworkConnectivityConfigId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockNetworkConnectivityInterface_ListPrivateEndpointRulesByNetworkConnectivityConfigId_Call) Return(_a0 *settings.ListNccAzurePrivateEndpointRulesResponse, _a1 error) *MockNetworkConnectivityInterface_ListPrivateEndpointRulesByNetworkConnectivityConfigId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNetworkConnectivityInterface_ListPrivateEndpointRulesByNetworkConnectivityConfigId_Call) RunAndReturn(run func(context.Context, string) (*settings.ListNccAzurePrivateEndpointRulesResponse, error)) *MockNetworkConnectivityInterface_ListPrivateEndpointRulesByNetworkConnectivityConfigId_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockNetworkConnectivityInterface) WithImpl(impl settings.NetworkConnectivityService) settings.NetworkConnectivityInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 settings.NetworkConnectivityInterface
	if rf, ok := ret.Get(0).(func(settings.NetworkConnectivityService) settings.NetworkConnectivityInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(settings.NetworkConnectivityInterface)
		}
	}

	return r0
}

// MockNetworkConnectivityInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockNetworkConnectivityInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl settings.NetworkConnectivityService
func (_e *MockNetworkConnectivityInterface_Expecter) WithImpl(impl interface{}) *MockNetworkConnectivityInterface_WithImpl_Call {
	return &MockNetworkConnectivityInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockNetworkConnectivityInterface_WithImpl_Call) Run(run func(impl settings.NetworkConnectivityService)) *MockNetworkConnectivityInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(settings.NetworkConnectivityService))
	})
	return _c
}

func (_c *MockNetworkConnectivityInterface_WithImpl_Call) Return(_a0 settings.NetworkConnectivityInterface) *MockNetworkConnectivityInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNetworkConnectivityInterface_WithImpl_Call) RunAndReturn(run func(settings.NetworkConnectivityService) settings.NetworkConnectivityInterface) *MockNetworkConnectivityInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNetworkConnectivityInterface creates a new instance of MockNetworkConnectivityInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNetworkConnectivityInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNetworkConnectivityInterface {
	mock := &MockNetworkConnectivityInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
