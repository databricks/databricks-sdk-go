// Code generated by mockery v2.43.0. DO NOT EDIT.

package settings

import (
	context "context"

	settings "github.com/databricks/databricks-sdk-go/service/settings"
	mock "github.com/stretchr/testify/mock"
)

// MockWorkspaceConfInterface is an autogenerated mock type for the WorkspaceConfInterface type
type MockWorkspaceConfInterface struct {
	mock.Mock
}

type MockWorkspaceConfInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWorkspaceConfInterface) EXPECT() *MockWorkspaceConfInterface_Expecter {
	return &MockWorkspaceConfInterface_Expecter{mock: &_m.Mock}
}

// GetStatus provides a mock function with given fields: ctx, request
func (_m *MockWorkspaceConfInterface) GetStatus(ctx context.Context, request settings.GetStatusRequest) (*map[string]string, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetStatus")
	}

	var r0 *map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, settings.GetStatusRequest) (*map[string]string, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, settings.GetStatusRequest) *map[string]string); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, settings.GetStatusRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWorkspaceConfInterface_GetStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStatus'
type MockWorkspaceConfInterface_GetStatus_Call struct {
	*mock.Call
}

// GetStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - request settings.GetStatusRequest
func (_e *MockWorkspaceConfInterface_Expecter) GetStatus(ctx interface{}, request interface{}) *MockWorkspaceConfInterface_GetStatus_Call {
	return &MockWorkspaceConfInterface_GetStatus_Call{Call: _e.mock.On("GetStatus", ctx, request)}
}

func (_c *MockWorkspaceConfInterface_GetStatus_Call) Run(run func(ctx context.Context, request settings.GetStatusRequest)) *MockWorkspaceConfInterface_GetStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(settings.GetStatusRequest))
	})
	return _c
}

func (_c *MockWorkspaceConfInterface_GetStatus_Call) Return(_a0 *map[string]string, _a1 error) *MockWorkspaceConfInterface_GetStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWorkspaceConfInterface_GetStatus_Call) RunAndReturn(run func(context.Context, settings.GetStatusRequest) (*map[string]string, error)) *MockWorkspaceConfInterface_GetStatus_Call {
	_c.Call.Return(run)
	return _c
}

// Impl provides a mock function with given fields:
func (_m *MockWorkspaceConfInterface) Impl() settings.WorkspaceConfService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 settings.WorkspaceConfService
	if rf, ok := ret.Get(0).(func() settings.WorkspaceConfService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(settings.WorkspaceConfService)
		}
	}

	return r0
}

// MockWorkspaceConfInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockWorkspaceConfInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockWorkspaceConfInterface_Expecter) Impl() *MockWorkspaceConfInterface_Impl_Call {
	return &MockWorkspaceConfInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockWorkspaceConfInterface_Impl_Call) Run(run func()) *MockWorkspaceConfInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockWorkspaceConfInterface_Impl_Call) Return(_a0 settings.WorkspaceConfService) *MockWorkspaceConfInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWorkspaceConfInterface_Impl_Call) RunAndReturn(run func() settings.WorkspaceConfService) *MockWorkspaceConfInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// SetStatus provides a mock function with given fields: ctx, request
func (_m *MockWorkspaceConfInterface) SetStatus(ctx context.Context, request settings.WorkspaceConf) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for SetStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, settings.WorkspaceConf) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWorkspaceConfInterface_SetStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetStatus'
type MockWorkspaceConfInterface_SetStatus_Call struct {
	*mock.Call
}

// SetStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - request settings.WorkspaceConf
func (_e *MockWorkspaceConfInterface_Expecter) SetStatus(ctx interface{}, request interface{}) *MockWorkspaceConfInterface_SetStatus_Call {
	return &MockWorkspaceConfInterface_SetStatus_Call{Call: _e.mock.On("SetStatus", ctx, request)}
}

func (_c *MockWorkspaceConfInterface_SetStatus_Call) Run(run func(ctx context.Context, request settings.WorkspaceConf)) *MockWorkspaceConfInterface_SetStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(settings.WorkspaceConf))
	})
	return _c
}

func (_c *MockWorkspaceConfInterface_SetStatus_Call) Return(_a0 error) *MockWorkspaceConfInterface_SetStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWorkspaceConfInterface_SetStatus_Call) RunAndReturn(run func(context.Context, settings.WorkspaceConf) error) *MockWorkspaceConfInterface_SetStatus_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockWorkspaceConfInterface) WithImpl(impl settings.WorkspaceConfService) settings.WorkspaceConfInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 settings.WorkspaceConfInterface
	if rf, ok := ret.Get(0).(func(settings.WorkspaceConfService) settings.WorkspaceConfInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(settings.WorkspaceConfInterface)
		}
	}

	return r0
}

// MockWorkspaceConfInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockWorkspaceConfInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl settings.WorkspaceConfService
func (_e *MockWorkspaceConfInterface_Expecter) WithImpl(impl interface{}) *MockWorkspaceConfInterface_WithImpl_Call {
	return &MockWorkspaceConfInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockWorkspaceConfInterface_WithImpl_Call) Run(run func(impl settings.WorkspaceConfService)) *MockWorkspaceConfInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(settings.WorkspaceConfService))
	})
	return _c
}

func (_c *MockWorkspaceConfInterface_WithImpl_Call) Return(_a0 settings.WorkspaceConfInterface) *MockWorkspaceConfInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWorkspaceConfInterface_WithImpl_Call) RunAndReturn(run func(settings.WorkspaceConfService) settings.WorkspaceConfInterface) *MockWorkspaceConfInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWorkspaceConfInterface creates a new instance of MockWorkspaceConfInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWorkspaceConfInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWorkspaceConfInterface {
	mock := &MockWorkspaceConfInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
