// Code generated by mockery v2.53.2. DO NOT EDIT.

package settings

import (
	context "context"

	settings "github.com/databricks/databricks-sdk-go/service/settings"
	mock "github.com/stretchr/testify/mock"
)

// MockDashboardEmailSubscriptionsInterface is an autogenerated mock type for the DashboardEmailSubscriptionsInterface type
type MockDashboardEmailSubscriptionsInterface struct {
	mock.Mock
}

type MockDashboardEmailSubscriptionsInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDashboardEmailSubscriptionsInterface) EXPECT() *MockDashboardEmailSubscriptionsInterface_Expecter {
	return &MockDashboardEmailSubscriptionsInterface_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: ctx, request
func (_m *MockDashboardEmailSubscriptionsInterface) Delete(ctx context.Context, request settings.DeleteDashboardEmailSubscriptionsRequest) (*settings.DeleteDashboardEmailSubscriptionsResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *settings.DeleteDashboardEmailSubscriptionsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, settings.DeleteDashboardEmailSubscriptionsRequest) (*settings.DeleteDashboardEmailSubscriptionsResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, settings.DeleteDashboardEmailSubscriptionsRequest) *settings.DeleteDashboardEmailSubscriptionsResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*settings.DeleteDashboardEmailSubscriptionsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, settings.DeleteDashboardEmailSubscriptionsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDashboardEmailSubscriptionsInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockDashboardEmailSubscriptionsInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - request settings.DeleteDashboardEmailSubscriptionsRequest
func (_e *MockDashboardEmailSubscriptionsInterface_Expecter) Delete(ctx interface{}, request interface{}) *MockDashboardEmailSubscriptionsInterface_Delete_Call {
	return &MockDashboardEmailSubscriptionsInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, request)}
}

func (_c *MockDashboardEmailSubscriptionsInterface_Delete_Call) Run(run func(ctx context.Context, request settings.DeleteDashboardEmailSubscriptionsRequest)) *MockDashboardEmailSubscriptionsInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(settings.DeleteDashboardEmailSubscriptionsRequest))
	})
	return _c
}

func (_c *MockDashboardEmailSubscriptionsInterface_Delete_Call) Return(_a0 *settings.DeleteDashboardEmailSubscriptionsResponse, _a1 error) *MockDashboardEmailSubscriptionsInterface_Delete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDashboardEmailSubscriptionsInterface_Delete_Call) RunAndReturn(run func(context.Context, settings.DeleteDashboardEmailSubscriptionsRequest) (*settings.DeleteDashboardEmailSubscriptionsResponse, error)) *MockDashboardEmailSubscriptionsInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, request
func (_m *MockDashboardEmailSubscriptionsInterface) Get(ctx context.Context, request settings.GetDashboardEmailSubscriptionsRequest) (*settings.DashboardEmailSubscriptions, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *settings.DashboardEmailSubscriptions
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, settings.GetDashboardEmailSubscriptionsRequest) (*settings.DashboardEmailSubscriptions, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, settings.GetDashboardEmailSubscriptionsRequest) *settings.DashboardEmailSubscriptions); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*settings.DashboardEmailSubscriptions)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, settings.GetDashboardEmailSubscriptionsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDashboardEmailSubscriptionsInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockDashboardEmailSubscriptionsInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - request settings.GetDashboardEmailSubscriptionsRequest
func (_e *MockDashboardEmailSubscriptionsInterface_Expecter) Get(ctx interface{}, request interface{}) *MockDashboardEmailSubscriptionsInterface_Get_Call {
	return &MockDashboardEmailSubscriptionsInterface_Get_Call{Call: _e.mock.On("Get", ctx, request)}
}

func (_c *MockDashboardEmailSubscriptionsInterface_Get_Call) Run(run func(ctx context.Context, request settings.GetDashboardEmailSubscriptionsRequest)) *MockDashboardEmailSubscriptionsInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(settings.GetDashboardEmailSubscriptionsRequest))
	})
	return _c
}

func (_c *MockDashboardEmailSubscriptionsInterface_Get_Call) Return(_a0 *settings.DashboardEmailSubscriptions, _a1 error) *MockDashboardEmailSubscriptionsInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDashboardEmailSubscriptionsInterface_Get_Call) RunAndReturn(run func(context.Context, settings.GetDashboardEmailSubscriptionsRequest) (*settings.DashboardEmailSubscriptions, error)) *MockDashboardEmailSubscriptionsInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, request
func (_m *MockDashboardEmailSubscriptionsInterface) Update(ctx context.Context, request settings.UpdateDashboardEmailSubscriptionsRequest) (*settings.DashboardEmailSubscriptions, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *settings.DashboardEmailSubscriptions
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, settings.UpdateDashboardEmailSubscriptionsRequest) (*settings.DashboardEmailSubscriptions, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, settings.UpdateDashboardEmailSubscriptionsRequest) *settings.DashboardEmailSubscriptions); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*settings.DashboardEmailSubscriptions)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, settings.UpdateDashboardEmailSubscriptionsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDashboardEmailSubscriptionsInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockDashboardEmailSubscriptionsInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - request settings.UpdateDashboardEmailSubscriptionsRequest
func (_e *MockDashboardEmailSubscriptionsInterface_Expecter) Update(ctx interface{}, request interface{}) *MockDashboardEmailSubscriptionsInterface_Update_Call {
	return &MockDashboardEmailSubscriptionsInterface_Update_Call{Call: _e.mock.On("Update", ctx, request)}
}

func (_c *MockDashboardEmailSubscriptionsInterface_Update_Call) Run(run func(ctx context.Context, request settings.UpdateDashboardEmailSubscriptionsRequest)) *MockDashboardEmailSubscriptionsInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(settings.UpdateDashboardEmailSubscriptionsRequest))
	})
	return _c
}

func (_c *MockDashboardEmailSubscriptionsInterface_Update_Call) Return(_a0 *settings.DashboardEmailSubscriptions, _a1 error) *MockDashboardEmailSubscriptionsInterface_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDashboardEmailSubscriptionsInterface_Update_Call) RunAndReturn(run func(context.Context, settings.UpdateDashboardEmailSubscriptionsRequest) (*settings.DashboardEmailSubscriptions, error)) *MockDashboardEmailSubscriptionsInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDashboardEmailSubscriptionsInterface creates a new instance of MockDashboardEmailSubscriptionsInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDashboardEmailSubscriptionsInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDashboardEmailSubscriptionsInterface {
	mock := &MockDashboardEmailSubscriptionsInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
