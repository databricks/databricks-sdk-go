// Code generated by mockery v2.53.2. DO NOT EDIT.

package settings

import (
	context "context"

	settings "github.com/databricks/databricks-sdk-go/service/settings"
	mock "github.com/stretchr/testify/mock"
)

// MockLlmProxyPartnerPoweredWorkspaceInterface is an autogenerated mock type for the LlmProxyPartnerPoweredWorkspaceInterface type
type MockLlmProxyPartnerPoweredWorkspaceInterface struct {
	mock.Mock
}

type MockLlmProxyPartnerPoweredWorkspaceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLlmProxyPartnerPoweredWorkspaceInterface) EXPECT() *MockLlmProxyPartnerPoweredWorkspaceInterface_Expecter {
	return &MockLlmProxyPartnerPoweredWorkspaceInterface_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: ctx, request
func (_m *MockLlmProxyPartnerPoweredWorkspaceInterface) Delete(ctx context.Context, request settings.DeleteLlmProxyPartnerPoweredWorkspaceRequest) (*settings.DeleteLlmProxyPartnerPoweredWorkspaceResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *settings.DeleteLlmProxyPartnerPoweredWorkspaceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, settings.DeleteLlmProxyPartnerPoweredWorkspaceRequest) (*settings.DeleteLlmProxyPartnerPoweredWorkspaceResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, settings.DeleteLlmProxyPartnerPoweredWorkspaceRequest) *settings.DeleteLlmProxyPartnerPoweredWorkspaceResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*settings.DeleteLlmProxyPartnerPoweredWorkspaceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, settings.DeleteLlmProxyPartnerPoweredWorkspaceRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLlmProxyPartnerPoweredWorkspaceInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockLlmProxyPartnerPoweredWorkspaceInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - request settings.DeleteLlmProxyPartnerPoweredWorkspaceRequest
func (_e *MockLlmProxyPartnerPoweredWorkspaceInterface_Expecter) Delete(ctx interface{}, request interface{}) *MockLlmProxyPartnerPoweredWorkspaceInterface_Delete_Call {
	return &MockLlmProxyPartnerPoweredWorkspaceInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, request)}
}

func (_c *MockLlmProxyPartnerPoweredWorkspaceInterface_Delete_Call) Run(run func(ctx context.Context, request settings.DeleteLlmProxyPartnerPoweredWorkspaceRequest)) *MockLlmProxyPartnerPoweredWorkspaceInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(settings.DeleteLlmProxyPartnerPoweredWorkspaceRequest))
	})
	return _c
}

func (_c *MockLlmProxyPartnerPoweredWorkspaceInterface_Delete_Call) Return(_a0 *settings.DeleteLlmProxyPartnerPoweredWorkspaceResponse, _a1 error) *MockLlmProxyPartnerPoweredWorkspaceInterface_Delete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLlmProxyPartnerPoweredWorkspaceInterface_Delete_Call) RunAndReturn(run func(context.Context, settings.DeleteLlmProxyPartnerPoweredWorkspaceRequest) (*settings.DeleteLlmProxyPartnerPoweredWorkspaceResponse, error)) *MockLlmProxyPartnerPoweredWorkspaceInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, request
func (_m *MockLlmProxyPartnerPoweredWorkspaceInterface) Get(ctx context.Context, request settings.GetLlmProxyPartnerPoweredWorkspaceRequest) (*settings.LlmProxyPartnerPoweredWorkspace, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *settings.LlmProxyPartnerPoweredWorkspace
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, settings.GetLlmProxyPartnerPoweredWorkspaceRequest) (*settings.LlmProxyPartnerPoweredWorkspace, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, settings.GetLlmProxyPartnerPoweredWorkspaceRequest) *settings.LlmProxyPartnerPoweredWorkspace); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*settings.LlmProxyPartnerPoweredWorkspace)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, settings.GetLlmProxyPartnerPoweredWorkspaceRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLlmProxyPartnerPoweredWorkspaceInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockLlmProxyPartnerPoweredWorkspaceInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - request settings.GetLlmProxyPartnerPoweredWorkspaceRequest
func (_e *MockLlmProxyPartnerPoweredWorkspaceInterface_Expecter) Get(ctx interface{}, request interface{}) *MockLlmProxyPartnerPoweredWorkspaceInterface_Get_Call {
	return &MockLlmProxyPartnerPoweredWorkspaceInterface_Get_Call{Call: _e.mock.On("Get", ctx, request)}
}

func (_c *MockLlmProxyPartnerPoweredWorkspaceInterface_Get_Call) Run(run func(ctx context.Context, request settings.GetLlmProxyPartnerPoweredWorkspaceRequest)) *MockLlmProxyPartnerPoweredWorkspaceInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(settings.GetLlmProxyPartnerPoweredWorkspaceRequest))
	})
	return _c
}

func (_c *MockLlmProxyPartnerPoweredWorkspaceInterface_Get_Call) Return(_a0 *settings.LlmProxyPartnerPoweredWorkspace, _a1 error) *MockLlmProxyPartnerPoweredWorkspaceInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLlmProxyPartnerPoweredWorkspaceInterface_Get_Call) RunAndReturn(run func(context.Context, settings.GetLlmProxyPartnerPoweredWorkspaceRequest) (*settings.LlmProxyPartnerPoweredWorkspace, error)) *MockLlmProxyPartnerPoweredWorkspaceInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, request
func (_m *MockLlmProxyPartnerPoweredWorkspaceInterface) Update(ctx context.Context, request settings.UpdateLlmProxyPartnerPoweredWorkspaceRequest) (*settings.LlmProxyPartnerPoweredWorkspace, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *settings.LlmProxyPartnerPoweredWorkspace
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, settings.UpdateLlmProxyPartnerPoweredWorkspaceRequest) (*settings.LlmProxyPartnerPoweredWorkspace, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, settings.UpdateLlmProxyPartnerPoweredWorkspaceRequest) *settings.LlmProxyPartnerPoweredWorkspace); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*settings.LlmProxyPartnerPoweredWorkspace)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, settings.UpdateLlmProxyPartnerPoweredWorkspaceRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLlmProxyPartnerPoweredWorkspaceInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockLlmProxyPartnerPoweredWorkspaceInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - request settings.UpdateLlmProxyPartnerPoweredWorkspaceRequest
func (_e *MockLlmProxyPartnerPoweredWorkspaceInterface_Expecter) Update(ctx interface{}, request interface{}) *MockLlmProxyPartnerPoweredWorkspaceInterface_Update_Call {
	return &MockLlmProxyPartnerPoweredWorkspaceInterface_Update_Call{Call: _e.mock.On("Update", ctx, request)}
}

func (_c *MockLlmProxyPartnerPoweredWorkspaceInterface_Update_Call) Run(run func(ctx context.Context, request settings.UpdateLlmProxyPartnerPoweredWorkspaceRequest)) *MockLlmProxyPartnerPoweredWorkspaceInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(settings.UpdateLlmProxyPartnerPoweredWorkspaceRequest))
	})
	return _c
}

func (_c *MockLlmProxyPartnerPoweredWorkspaceInterface_Update_Call) Return(_a0 *settings.LlmProxyPartnerPoweredWorkspace, _a1 error) *MockLlmProxyPartnerPoweredWorkspaceInterface_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLlmProxyPartnerPoweredWorkspaceInterface_Update_Call) RunAndReturn(run func(context.Context, settings.UpdateLlmProxyPartnerPoweredWorkspaceRequest) (*settings.LlmProxyPartnerPoweredWorkspace, error)) *MockLlmProxyPartnerPoweredWorkspaceInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLlmProxyPartnerPoweredWorkspaceInterface creates a new instance of MockLlmProxyPartnerPoweredWorkspaceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLlmProxyPartnerPoweredWorkspaceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLlmProxyPartnerPoweredWorkspaceInterface {
	mock := &MockLlmProxyPartnerPoweredWorkspaceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
