// Code generated by mockery v2.53.2. DO NOT EDIT.

package settings

import (
	context "context"

	settings "github.com/databricks/databricks-sdk-go/service/settings"
	mock "github.com/stretchr/testify/mock"
)

// MockLlmProxyPartnerPoweredAccountInterface is an autogenerated mock type for the LlmProxyPartnerPoweredAccountInterface type
type MockLlmProxyPartnerPoweredAccountInterface struct {
	mock.Mock
}

type MockLlmProxyPartnerPoweredAccountInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLlmProxyPartnerPoweredAccountInterface) EXPECT() *MockLlmProxyPartnerPoweredAccountInterface_Expecter {
	return &MockLlmProxyPartnerPoweredAccountInterface_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: ctx, request
func (_m *MockLlmProxyPartnerPoweredAccountInterface) Get(ctx context.Context, request settings.GetLlmProxyPartnerPoweredAccountRequest) (*settings.LlmProxyPartnerPoweredAccount, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *settings.LlmProxyPartnerPoweredAccount
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, settings.GetLlmProxyPartnerPoweredAccountRequest) (*settings.LlmProxyPartnerPoweredAccount, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, settings.GetLlmProxyPartnerPoweredAccountRequest) *settings.LlmProxyPartnerPoweredAccount); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*settings.LlmProxyPartnerPoweredAccount)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, settings.GetLlmProxyPartnerPoweredAccountRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLlmProxyPartnerPoweredAccountInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockLlmProxyPartnerPoweredAccountInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - request settings.GetLlmProxyPartnerPoweredAccountRequest
func (_e *MockLlmProxyPartnerPoweredAccountInterface_Expecter) Get(ctx interface{}, request interface{}) *MockLlmProxyPartnerPoweredAccountInterface_Get_Call {
	return &MockLlmProxyPartnerPoweredAccountInterface_Get_Call{Call: _e.mock.On("Get", ctx, request)}
}

func (_c *MockLlmProxyPartnerPoweredAccountInterface_Get_Call) Run(run func(ctx context.Context, request settings.GetLlmProxyPartnerPoweredAccountRequest)) *MockLlmProxyPartnerPoweredAccountInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(settings.GetLlmProxyPartnerPoweredAccountRequest))
	})
	return _c
}

func (_c *MockLlmProxyPartnerPoweredAccountInterface_Get_Call) Return(_a0 *settings.LlmProxyPartnerPoweredAccount, _a1 error) *MockLlmProxyPartnerPoweredAccountInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLlmProxyPartnerPoweredAccountInterface_Get_Call) RunAndReturn(run func(context.Context, settings.GetLlmProxyPartnerPoweredAccountRequest) (*settings.LlmProxyPartnerPoweredAccount, error)) *MockLlmProxyPartnerPoweredAccountInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, request
func (_m *MockLlmProxyPartnerPoweredAccountInterface) Update(ctx context.Context, request settings.UpdateLlmProxyPartnerPoweredAccountRequest) (*settings.LlmProxyPartnerPoweredAccount, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *settings.LlmProxyPartnerPoweredAccount
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, settings.UpdateLlmProxyPartnerPoweredAccountRequest) (*settings.LlmProxyPartnerPoweredAccount, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, settings.UpdateLlmProxyPartnerPoweredAccountRequest) *settings.LlmProxyPartnerPoweredAccount); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*settings.LlmProxyPartnerPoweredAccount)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, settings.UpdateLlmProxyPartnerPoweredAccountRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLlmProxyPartnerPoweredAccountInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockLlmProxyPartnerPoweredAccountInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - request settings.UpdateLlmProxyPartnerPoweredAccountRequest
func (_e *MockLlmProxyPartnerPoweredAccountInterface_Expecter) Update(ctx interface{}, request interface{}) *MockLlmProxyPartnerPoweredAccountInterface_Update_Call {
	return &MockLlmProxyPartnerPoweredAccountInterface_Update_Call{Call: _e.mock.On("Update", ctx, request)}
}

func (_c *MockLlmProxyPartnerPoweredAccountInterface_Update_Call) Run(run func(ctx context.Context, request settings.UpdateLlmProxyPartnerPoweredAccountRequest)) *MockLlmProxyPartnerPoweredAccountInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(settings.UpdateLlmProxyPartnerPoweredAccountRequest))
	})
	return _c
}

func (_c *MockLlmProxyPartnerPoweredAccountInterface_Update_Call) Return(_a0 *settings.LlmProxyPartnerPoweredAccount, _a1 error) *MockLlmProxyPartnerPoweredAccountInterface_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLlmProxyPartnerPoweredAccountInterface_Update_Call) RunAndReturn(run func(context.Context, settings.UpdateLlmProxyPartnerPoweredAccountRequest) (*settings.LlmProxyPartnerPoweredAccount, error)) *MockLlmProxyPartnerPoweredAccountInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLlmProxyPartnerPoweredAccountInterface creates a new instance of MockLlmProxyPartnerPoweredAccountInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLlmProxyPartnerPoweredAccountInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLlmProxyPartnerPoweredAccountInterface {
	mock := &MockLlmProxyPartnerPoweredAccountInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
