// Code generated by mockery v2.53.2. DO NOT EDIT.

package settings

import (
	context "context"

	settings "github.com/databricks/databricks-sdk-go/service/settings"
	mock "github.com/stretchr/testify/mock"
)

// MockSqlResultsDownloadInterface is an autogenerated mock type for the SqlResultsDownloadInterface type
type MockSqlResultsDownloadInterface struct {
	mock.Mock
}

type MockSqlResultsDownloadInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSqlResultsDownloadInterface) EXPECT() *MockSqlResultsDownloadInterface_Expecter {
	return &MockSqlResultsDownloadInterface_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: ctx, request
func (_m *MockSqlResultsDownloadInterface) Delete(ctx context.Context, request settings.DeleteSqlResultsDownloadRequest) (*settings.DeleteSqlResultsDownloadResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *settings.DeleteSqlResultsDownloadResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, settings.DeleteSqlResultsDownloadRequest) (*settings.DeleteSqlResultsDownloadResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, settings.DeleteSqlResultsDownloadRequest) *settings.DeleteSqlResultsDownloadResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*settings.DeleteSqlResultsDownloadResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, settings.DeleteSqlResultsDownloadRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSqlResultsDownloadInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockSqlResultsDownloadInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - request settings.DeleteSqlResultsDownloadRequest
func (_e *MockSqlResultsDownloadInterface_Expecter) Delete(ctx interface{}, request interface{}) *MockSqlResultsDownloadInterface_Delete_Call {
	return &MockSqlResultsDownloadInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, request)}
}

func (_c *MockSqlResultsDownloadInterface_Delete_Call) Run(run func(ctx context.Context, request settings.DeleteSqlResultsDownloadRequest)) *MockSqlResultsDownloadInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(settings.DeleteSqlResultsDownloadRequest))
	})
	return _c
}

func (_c *MockSqlResultsDownloadInterface_Delete_Call) Return(_a0 *settings.DeleteSqlResultsDownloadResponse, _a1 error) *MockSqlResultsDownloadInterface_Delete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSqlResultsDownloadInterface_Delete_Call) RunAndReturn(run func(context.Context, settings.DeleteSqlResultsDownloadRequest) (*settings.DeleteSqlResultsDownloadResponse, error)) *MockSqlResultsDownloadInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, request
func (_m *MockSqlResultsDownloadInterface) Get(ctx context.Context, request settings.GetSqlResultsDownloadRequest) (*settings.SqlResultsDownload, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *settings.SqlResultsDownload
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, settings.GetSqlResultsDownloadRequest) (*settings.SqlResultsDownload, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, settings.GetSqlResultsDownloadRequest) *settings.SqlResultsDownload); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*settings.SqlResultsDownload)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, settings.GetSqlResultsDownloadRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSqlResultsDownloadInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockSqlResultsDownloadInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - request settings.GetSqlResultsDownloadRequest
func (_e *MockSqlResultsDownloadInterface_Expecter) Get(ctx interface{}, request interface{}) *MockSqlResultsDownloadInterface_Get_Call {
	return &MockSqlResultsDownloadInterface_Get_Call{Call: _e.mock.On("Get", ctx, request)}
}

func (_c *MockSqlResultsDownloadInterface_Get_Call) Run(run func(ctx context.Context, request settings.GetSqlResultsDownloadRequest)) *MockSqlResultsDownloadInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(settings.GetSqlResultsDownloadRequest))
	})
	return _c
}

func (_c *MockSqlResultsDownloadInterface_Get_Call) Return(_a0 *settings.SqlResultsDownload, _a1 error) *MockSqlResultsDownloadInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSqlResultsDownloadInterface_Get_Call) RunAndReturn(run func(context.Context, settings.GetSqlResultsDownloadRequest) (*settings.SqlResultsDownload, error)) *MockSqlResultsDownloadInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, request
func (_m *MockSqlResultsDownloadInterface) Update(ctx context.Context, request settings.UpdateSqlResultsDownloadRequest) (*settings.SqlResultsDownload, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *settings.SqlResultsDownload
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, settings.UpdateSqlResultsDownloadRequest) (*settings.SqlResultsDownload, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, settings.UpdateSqlResultsDownloadRequest) *settings.SqlResultsDownload); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*settings.SqlResultsDownload)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, settings.UpdateSqlResultsDownloadRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSqlResultsDownloadInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockSqlResultsDownloadInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - request settings.UpdateSqlResultsDownloadRequest
func (_e *MockSqlResultsDownloadInterface_Expecter) Update(ctx interface{}, request interface{}) *MockSqlResultsDownloadInterface_Update_Call {
	return &MockSqlResultsDownloadInterface_Update_Call{Call: _e.mock.On("Update", ctx, request)}
}

func (_c *MockSqlResultsDownloadInterface_Update_Call) Run(run func(ctx context.Context, request settings.UpdateSqlResultsDownloadRequest)) *MockSqlResultsDownloadInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(settings.UpdateSqlResultsDownloadRequest))
	})
	return _c
}

func (_c *MockSqlResultsDownloadInterface_Update_Call) Return(_a0 *settings.SqlResultsDownload, _a1 error) *MockSqlResultsDownloadInterface_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSqlResultsDownloadInterface_Update_Call) RunAndReturn(run func(context.Context, settings.UpdateSqlResultsDownloadRequest) (*settings.SqlResultsDownload, error)) *MockSqlResultsDownloadInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSqlResultsDownloadInterface creates a new instance of MockSqlResultsDownloadInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSqlResultsDownloadInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSqlResultsDownloadInterface {
	mock := &MockSqlResultsDownloadInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
