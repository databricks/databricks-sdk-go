// Code generated by mockery v2.43.0. DO NOT EDIT.

package vectorsearch

import (
	context "context"

	listing "github.com/databricks/databricks-sdk-go/listing"
	mock "github.com/stretchr/testify/mock"

	vectorsearch "github.com/databricks/databricks-sdk-go/service/vectorsearch"
)

// MockVectorSearchIndexesInterface is an autogenerated mock type for the VectorSearchIndexesInterface type
type MockVectorSearchIndexesInterface struct {
	mock.Mock
}

type MockVectorSearchIndexesInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVectorSearchIndexesInterface) EXPECT() *MockVectorSearchIndexesInterface_Expecter {
	return &MockVectorSearchIndexesInterface_Expecter{mock: &_m.Mock}
}

// CreateIndex provides a mock function with given fields: ctx, request
func (_m *MockVectorSearchIndexesInterface) CreateIndex(ctx context.Context, request vectorsearch.CreateVectorIndexRequest) (*vectorsearch.CreateVectorIndexResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateIndex")
	}

	var r0 *vectorsearch.CreateVectorIndexResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, vectorsearch.CreateVectorIndexRequest) (*vectorsearch.CreateVectorIndexResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, vectorsearch.CreateVectorIndexRequest) *vectorsearch.CreateVectorIndexResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vectorsearch.CreateVectorIndexResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, vectorsearch.CreateVectorIndexRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVectorSearchIndexesInterface_CreateIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateIndex'
type MockVectorSearchIndexesInterface_CreateIndex_Call struct {
	*mock.Call
}

// CreateIndex is a helper method to define mock.On call
//   - ctx context.Context
//   - request vectorsearch.CreateVectorIndexRequest
func (_e *MockVectorSearchIndexesInterface_Expecter) CreateIndex(ctx interface{}, request interface{}) *MockVectorSearchIndexesInterface_CreateIndex_Call {
	return &MockVectorSearchIndexesInterface_CreateIndex_Call{Call: _e.mock.On("CreateIndex", ctx, request)}
}

func (_c *MockVectorSearchIndexesInterface_CreateIndex_Call) Run(run func(ctx context.Context, request vectorsearch.CreateVectorIndexRequest)) *MockVectorSearchIndexesInterface_CreateIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(vectorsearch.CreateVectorIndexRequest))
	})
	return _c
}

func (_c *MockVectorSearchIndexesInterface_CreateIndex_Call) Return(_a0 *vectorsearch.CreateVectorIndexResponse, _a1 error) *MockVectorSearchIndexesInterface_CreateIndex_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVectorSearchIndexesInterface_CreateIndex_Call) RunAndReturn(run func(context.Context, vectorsearch.CreateVectorIndexRequest) (*vectorsearch.CreateVectorIndexResponse, error)) *MockVectorSearchIndexesInterface_CreateIndex_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDataVectorIndex provides a mock function with given fields: ctx, request
func (_m *MockVectorSearchIndexesInterface) DeleteDataVectorIndex(ctx context.Context, request vectorsearch.DeleteDataVectorIndexRequest) (*vectorsearch.DeleteDataVectorIndexResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDataVectorIndex")
	}

	var r0 *vectorsearch.DeleteDataVectorIndexResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, vectorsearch.DeleteDataVectorIndexRequest) (*vectorsearch.DeleteDataVectorIndexResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, vectorsearch.DeleteDataVectorIndexRequest) *vectorsearch.DeleteDataVectorIndexResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vectorsearch.DeleteDataVectorIndexResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, vectorsearch.DeleteDataVectorIndexRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVectorSearchIndexesInterface_DeleteDataVectorIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDataVectorIndex'
type MockVectorSearchIndexesInterface_DeleteDataVectorIndex_Call struct {
	*mock.Call
}

// DeleteDataVectorIndex is a helper method to define mock.On call
//   - ctx context.Context
//   - request vectorsearch.DeleteDataVectorIndexRequest
func (_e *MockVectorSearchIndexesInterface_Expecter) DeleteDataVectorIndex(ctx interface{}, request interface{}) *MockVectorSearchIndexesInterface_DeleteDataVectorIndex_Call {
	return &MockVectorSearchIndexesInterface_DeleteDataVectorIndex_Call{Call: _e.mock.On("DeleteDataVectorIndex", ctx, request)}
}

func (_c *MockVectorSearchIndexesInterface_DeleteDataVectorIndex_Call) Run(run func(ctx context.Context, request vectorsearch.DeleteDataVectorIndexRequest)) *MockVectorSearchIndexesInterface_DeleteDataVectorIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(vectorsearch.DeleteDataVectorIndexRequest))
	})
	return _c
}

func (_c *MockVectorSearchIndexesInterface_DeleteDataVectorIndex_Call) Return(_a0 *vectorsearch.DeleteDataVectorIndexResponse, _a1 error) *MockVectorSearchIndexesInterface_DeleteDataVectorIndex_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVectorSearchIndexesInterface_DeleteDataVectorIndex_Call) RunAndReturn(run func(context.Context, vectorsearch.DeleteDataVectorIndexRequest) (*vectorsearch.DeleteDataVectorIndexResponse, error)) *MockVectorSearchIndexesInterface_DeleteDataVectorIndex_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteIndex provides a mock function with given fields: ctx, request
func (_m *MockVectorSearchIndexesInterface) DeleteIndex(ctx context.Context, request vectorsearch.DeleteIndexRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for DeleteIndex")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, vectorsearch.DeleteIndexRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockVectorSearchIndexesInterface_DeleteIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteIndex'
type MockVectorSearchIndexesInterface_DeleteIndex_Call struct {
	*mock.Call
}

// DeleteIndex is a helper method to define mock.On call
//   - ctx context.Context
//   - request vectorsearch.DeleteIndexRequest
func (_e *MockVectorSearchIndexesInterface_Expecter) DeleteIndex(ctx interface{}, request interface{}) *MockVectorSearchIndexesInterface_DeleteIndex_Call {
	return &MockVectorSearchIndexesInterface_DeleteIndex_Call{Call: _e.mock.On("DeleteIndex", ctx, request)}
}

func (_c *MockVectorSearchIndexesInterface_DeleteIndex_Call) Run(run func(ctx context.Context, request vectorsearch.DeleteIndexRequest)) *MockVectorSearchIndexesInterface_DeleteIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(vectorsearch.DeleteIndexRequest))
	})
	return _c
}

func (_c *MockVectorSearchIndexesInterface_DeleteIndex_Call) Return(_a0 error) *MockVectorSearchIndexesInterface_DeleteIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVectorSearchIndexesInterface_DeleteIndex_Call) RunAndReturn(run func(context.Context, vectorsearch.DeleteIndexRequest) error) *MockVectorSearchIndexesInterface_DeleteIndex_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteIndexByIndexName provides a mock function with given fields: ctx, indexName
func (_m *MockVectorSearchIndexesInterface) DeleteIndexByIndexName(ctx context.Context, indexName string) error {
	ret := _m.Called(ctx, indexName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteIndexByIndexName")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, indexName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockVectorSearchIndexesInterface_DeleteIndexByIndexName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteIndexByIndexName'
type MockVectorSearchIndexesInterface_DeleteIndexByIndexName_Call struct {
	*mock.Call
}

// DeleteIndexByIndexName is a helper method to define mock.On call
//   - ctx context.Context
//   - indexName string
func (_e *MockVectorSearchIndexesInterface_Expecter) DeleteIndexByIndexName(ctx interface{}, indexName interface{}) *MockVectorSearchIndexesInterface_DeleteIndexByIndexName_Call {
	return &MockVectorSearchIndexesInterface_DeleteIndexByIndexName_Call{Call: _e.mock.On("DeleteIndexByIndexName", ctx, indexName)}
}

func (_c *MockVectorSearchIndexesInterface_DeleteIndexByIndexName_Call) Run(run func(ctx context.Context, indexName string)) *MockVectorSearchIndexesInterface_DeleteIndexByIndexName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockVectorSearchIndexesInterface_DeleteIndexByIndexName_Call) Return(_a0 error) *MockVectorSearchIndexesInterface_DeleteIndexByIndexName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVectorSearchIndexesInterface_DeleteIndexByIndexName_Call) RunAndReturn(run func(context.Context, string) error) *MockVectorSearchIndexesInterface_DeleteIndexByIndexName_Call {
	_c.Call.Return(run)
	return _c
}

// GetIndex provides a mock function with given fields: ctx, request
func (_m *MockVectorSearchIndexesInterface) GetIndex(ctx context.Context, request vectorsearch.GetIndexRequest) (*vectorsearch.VectorIndex, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetIndex")
	}

	var r0 *vectorsearch.VectorIndex
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, vectorsearch.GetIndexRequest) (*vectorsearch.VectorIndex, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, vectorsearch.GetIndexRequest) *vectorsearch.VectorIndex); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vectorsearch.VectorIndex)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, vectorsearch.GetIndexRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVectorSearchIndexesInterface_GetIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIndex'
type MockVectorSearchIndexesInterface_GetIndex_Call struct {
	*mock.Call
}

// GetIndex is a helper method to define mock.On call
//   - ctx context.Context
//   - request vectorsearch.GetIndexRequest
func (_e *MockVectorSearchIndexesInterface_Expecter) GetIndex(ctx interface{}, request interface{}) *MockVectorSearchIndexesInterface_GetIndex_Call {
	return &MockVectorSearchIndexesInterface_GetIndex_Call{Call: _e.mock.On("GetIndex", ctx, request)}
}

func (_c *MockVectorSearchIndexesInterface_GetIndex_Call) Run(run func(ctx context.Context, request vectorsearch.GetIndexRequest)) *MockVectorSearchIndexesInterface_GetIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(vectorsearch.GetIndexRequest))
	})
	return _c
}

func (_c *MockVectorSearchIndexesInterface_GetIndex_Call) Return(_a0 *vectorsearch.VectorIndex, _a1 error) *MockVectorSearchIndexesInterface_GetIndex_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVectorSearchIndexesInterface_GetIndex_Call) RunAndReturn(run func(context.Context, vectorsearch.GetIndexRequest) (*vectorsearch.VectorIndex, error)) *MockVectorSearchIndexesInterface_GetIndex_Call {
	_c.Call.Return(run)
	return _c
}

// GetIndexByIndexName provides a mock function with given fields: ctx, indexName
func (_m *MockVectorSearchIndexesInterface) GetIndexByIndexName(ctx context.Context, indexName string) (*vectorsearch.VectorIndex, error) {
	ret := _m.Called(ctx, indexName)

	if len(ret) == 0 {
		panic("no return value specified for GetIndexByIndexName")
	}

	var r0 *vectorsearch.VectorIndex
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*vectorsearch.VectorIndex, error)); ok {
		return rf(ctx, indexName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *vectorsearch.VectorIndex); ok {
		r0 = rf(ctx, indexName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vectorsearch.VectorIndex)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, indexName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVectorSearchIndexesInterface_GetIndexByIndexName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIndexByIndexName'
type MockVectorSearchIndexesInterface_GetIndexByIndexName_Call struct {
	*mock.Call
}

// GetIndexByIndexName is a helper method to define mock.On call
//   - ctx context.Context
//   - indexName string
func (_e *MockVectorSearchIndexesInterface_Expecter) GetIndexByIndexName(ctx interface{}, indexName interface{}) *MockVectorSearchIndexesInterface_GetIndexByIndexName_Call {
	return &MockVectorSearchIndexesInterface_GetIndexByIndexName_Call{Call: _e.mock.On("GetIndexByIndexName", ctx, indexName)}
}

func (_c *MockVectorSearchIndexesInterface_GetIndexByIndexName_Call) Run(run func(ctx context.Context, indexName string)) *MockVectorSearchIndexesInterface_GetIndexByIndexName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockVectorSearchIndexesInterface_GetIndexByIndexName_Call) Return(_a0 *vectorsearch.VectorIndex, _a1 error) *MockVectorSearchIndexesInterface_GetIndexByIndexName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVectorSearchIndexesInterface_GetIndexByIndexName_Call) RunAndReturn(run func(context.Context, string) (*vectorsearch.VectorIndex, error)) *MockVectorSearchIndexesInterface_GetIndexByIndexName_Call {
	_c.Call.Return(run)
	return _c
}

// Impl provides a mock function with given fields:
func (_m *MockVectorSearchIndexesInterface) Impl() vectorsearch.VectorSearchIndexesService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 vectorsearch.VectorSearchIndexesService
	if rf, ok := ret.Get(0).(func() vectorsearch.VectorSearchIndexesService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(vectorsearch.VectorSearchIndexesService)
		}
	}

	return r0
}

// MockVectorSearchIndexesInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockVectorSearchIndexesInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockVectorSearchIndexesInterface_Expecter) Impl() *MockVectorSearchIndexesInterface_Impl_Call {
	return &MockVectorSearchIndexesInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockVectorSearchIndexesInterface_Impl_Call) Run(run func()) *MockVectorSearchIndexesInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockVectorSearchIndexesInterface_Impl_Call) Return(_a0 vectorsearch.VectorSearchIndexesService) *MockVectorSearchIndexesInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVectorSearchIndexesInterface_Impl_Call) RunAndReturn(run func() vectorsearch.VectorSearchIndexesService) *MockVectorSearchIndexesInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// ListIndexes provides a mock function with given fields: ctx, request
func (_m *MockVectorSearchIndexesInterface) ListIndexes(ctx context.Context, request vectorsearch.ListIndexesRequest) listing.Iterator[vectorsearch.MiniVectorIndex] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListIndexes")
	}

	var r0 listing.Iterator[vectorsearch.MiniVectorIndex]
	if rf, ok := ret.Get(0).(func(context.Context, vectorsearch.ListIndexesRequest) listing.Iterator[vectorsearch.MiniVectorIndex]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listing.Iterator[vectorsearch.MiniVectorIndex])
		}
	}

	return r0
}

// MockVectorSearchIndexesInterface_ListIndexes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListIndexes'
type MockVectorSearchIndexesInterface_ListIndexes_Call struct {
	*mock.Call
}

// ListIndexes is a helper method to define mock.On call
//   - ctx context.Context
//   - request vectorsearch.ListIndexesRequest
func (_e *MockVectorSearchIndexesInterface_Expecter) ListIndexes(ctx interface{}, request interface{}) *MockVectorSearchIndexesInterface_ListIndexes_Call {
	return &MockVectorSearchIndexesInterface_ListIndexes_Call{Call: _e.mock.On("ListIndexes", ctx, request)}
}

func (_c *MockVectorSearchIndexesInterface_ListIndexes_Call) Run(run func(ctx context.Context, request vectorsearch.ListIndexesRequest)) *MockVectorSearchIndexesInterface_ListIndexes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(vectorsearch.ListIndexesRequest))
	})
	return _c
}

func (_c *MockVectorSearchIndexesInterface_ListIndexes_Call) Return(_a0 listing.Iterator[vectorsearch.MiniVectorIndex]) *MockVectorSearchIndexesInterface_ListIndexes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVectorSearchIndexesInterface_ListIndexes_Call) RunAndReturn(run func(context.Context, vectorsearch.ListIndexesRequest) listing.Iterator[vectorsearch.MiniVectorIndex]) *MockVectorSearchIndexesInterface_ListIndexes_Call {
	_c.Call.Return(run)
	return _c
}

// ListIndexesAll provides a mock function with given fields: ctx, request
func (_m *MockVectorSearchIndexesInterface) ListIndexesAll(ctx context.Context, request vectorsearch.ListIndexesRequest) ([]vectorsearch.MiniVectorIndex, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListIndexesAll")
	}

	var r0 []vectorsearch.MiniVectorIndex
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, vectorsearch.ListIndexesRequest) ([]vectorsearch.MiniVectorIndex, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, vectorsearch.ListIndexesRequest) []vectorsearch.MiniVectorIndex); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]vectorsearch.MiniVectorIndex)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, vectorsearch.ListIndexesRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVectorSearchIndexesInterface_ListIndexesAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListIndexesAll'
type MockVectorSearchIndexesInterface_ListIndexesAll_Call struct {
	*mock.Call
}

// ListIndexesAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request vectorsearch.ListIndexesRequest
func (_e *MockVectorSearchIndexesInterface_Expecter) ListIndexesAll(ctx interface{}, request interface{}) *MockVectorSearchIndexesInterface_ListIndexesAll_Call {
	return &MockVectorSearchIndexesInterface_ListIndexesAll_Call{Call: _e.mock.On("ListIndexesAll", ctx, request)}
}

func (_c *MockVectorSearchIndexesInterface_ListIndexesAll_Call) Run(run func(ctx context.Context, request vectorsearch.ListIndexesRequest)) *MockVectorSearchIndexesInterface_ListIndexesAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(vectorsearch.ListIndexesRequest))
	})
	return _c
}

func (_c *MockVectorSearchIndexesInterface_ListIndexesAll_Call) Return(_a0 []vectorsearch.MiniVectorIndex, _a1 error) *MockVectorSearchIndexesInterface_ListIndexesAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVectorSearchIndexesInterface_ListIndexesAll_Call) RunAndReturn(run func(context.Context, vectorsearch.ListIndexesRequest) ([]vectorsearch.MiniVectorIndex, error)) *MockVectorSearchIndexesInterface_ListIndexesAll_Call {
	_c.Call.Return(run)
	return _c
}

// QueryIndex provides a mock function with given fields: ctx, request
func (_m *MockVectorSearchIndexesInterface) QueryIndex(ctx context.Context, request vectorsearch.QueryVectorIndexRequest) (*vectorsearch.QueryVectorIndexResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for QueryIndex")
	}

	var r0 *vectorsearch.QueryVectorIndexResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, vectorsearch.QueryVectorIndexRequest) (*vectorsearch.QueryVectorIndexResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, vectorsearch.QueryVectorIndexRequest) *vectorsearch.QueryVectorIndexResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vectorsearch.QueryVectorIndexResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, vectorsearch.QueryVectorIndexRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVectorSearchIndexesInterface_QueryIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryIndex'
type MockVectorSearchIndexesInterface_QueryIndex_Call struct {
	*mock.Call
}

// QueryIndex is a helper method to define mock.On call
//   - ctx context.Context
//   - request vectorsearch.QueryVectorIndexRequest
func (_e *MockVectorSearchIndexesInterface_Expecter) QueryIndex(ctx interface{}, request interface{}) *MockVectorSearchIndexesInterface_QueryIndex_Call {
	return &MockVectorSearchIndexesInterface_QueryIndex_Call{Call: _e.mock.On("QueryIndex", ctx, request)}
}

func (_c *MockVectorSearchIndexesInterface_QueryIndex_Call) Run(run func(ctx context.Context, request vectorsearch.QueryVectorIndexRequest)) *MockVectorSearchIndexesInterface_QueryIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(vectorsearch.QueryVectorIndexRequest))
	})
	return _c
}

func (_c *MockVectorSearchIndexesInterface_QueryIndex_Call) Return(_a0 *vectorsearch.QueryVectorIndexResponse, _a1 error) *MockVectorSearchIndexesInterface_QueryIndex_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVectorSearchIndexesInterface_QueryIndex_Call) RunAndReturn(run func(context.Context, vectorsearch.QueryVectorIndexRequest) (*vectorsearch.QueryVectorIndexResponse, error)) *MockVectorSearchIndexesInterface_QueryIndex_Call {
	_c.Call.Return(run)
	return _c
}

// ScanIndex provides a mock function with given fields: ctx, request
func (_m *MockVectorSearchIndexesInterface) ScanIndex(ctx context.Context, request vectorsearch.ScanVectorIndexRequest) (*vectorsearch.ScanVectorIndexResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ScanIndex")
	}

	var r0 *vectorsearch.ScanVectorIndexResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, vectorsearch.ScanVectorIndexRequest) (*vectorsearch.ScanVectorIndexResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, vectorsearch.ScanVectorIndexRequest) *vectorsearch.ScanVectorIndexResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vectorsearch.ScanVectorIndexResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, vectorsearch.ScanVectorIndexRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVectorSearchIndexesInterface_ScanIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ScanIndex'
type MockVectorSearchIndexesInterface_ScanIndex_Call struct {
	*mock.Call
}

// ScanIndex is a helper method to define mock.On call
//   - ctx context.Context
//   - request vectorsearch.ScanVectorIndexRequest
func (_e *MockVectorSearchIndexesInterface_Expecter) ScanIndex(ctx interface{}, request interface{}) *MockVectorSearchIndexesInterface_ScanIndex_Call {
	return &MockVectorSearchIndexesInterface_ScanIndex_Call{Call: _e.mock.On("ScanIndex", ctx, request)}
}

func (_c *MockVectorSearchIndexesInterface_ScanIndex_Call) Run(run func(ctx context.Context, request vectorsearch.ScanVectorIndexRequest)) *MockVectorSearchIndexesInterface_ScanIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(vectorsearch.ScanVectorIndexRequest))
	})
	return _c
}

func (_c *MockVectorSearchIndexesInterface_ScanIndex_Call) Return(_a0 *vectorsearch.ScanVectorIndexResponse, _a1 error) *MockVectorSearchIndexesInterface_ScanIndex_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVectorSearchIndexesInterface_ScanIndex_Call) RunAndReturn(run func(context.Context, vectorsearch.ScanVectorIndexRequest) (*vectorsearch.ScanVectorIndexResponse, error)) *MockVectorSearchIndexesInterface_ScanIndex_Call {
	_c.Call.Return(run)
	return _c
}

// SyncIndex provides a mock function with given fields: ctx, request
func (_m *MockVectorSearchIndexesInterface) SyncIndex(ctx context.Context, request vectorsearch.SyncIndexRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for SyncIndex")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, vectorsearch.SyncIndexRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockVectorSearchIndexesInterface_SyncIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SyncIndex'
type MockVectorSearchIndexesInterface_SyncIndex_Call struct {
	*mock.Call
}

// SyncIndex is a helper method to define mock.On call
//   - ctx context.Context
//   - request vectorsearch.SyncIndexRequest
func (_e *MockVectorSearchIndexesInterface_Expecter) SyncIndex(ctx interface{}, request interface{}) *MockVectorSearchIndexesInterface_SyncIndex_Call {
	return &MockVectorSearchIndexesInterface_SyncIndex_Call{Call: _e.mock.On("SyncIndex", ctx, request)}
}

func (_c *MockVectorSearchIndexesInterface_SyncIndex_Call) Run(run func(ctx context.Context, request vectorsearch.SyncIndexRequest)) *MockVectorSearchIndexesInterface_SyncIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(vectorsearch.SyncIndexRequest))
	})
	return _c
}

func (_c *MockVectorSearchIndexesInterface_SyncIndex_Call) Return(_a0 error) *MockVectorSearchIndexesInterface_SyncIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVectorSearchIndexesInterface_SyncIndex_Call) RunAndReturn(run func(context.Context, vectorsearch.SyncIndexRequest) error) *MockVectorSearchIndexesInterface_SyncIndex_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertDataVectorIndex provides a mock function with given fields: ctx, request
func (_m *MockVectorSearchIndexesInterface) UpsertDataVectorIndex(ctx context.Context, request vectorsearch.UpsertDataVectorIndexRequest) (*vectorsearch.UpsertDataVectorIndexResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpsertDataVectorIndex")
	}

	var r0 *vectorsearch.UpsertDataVectorIndexResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, vectorsearch.UpsertDataVectorIndexRequest) (*vectorsearch.UpsertDataVectorIndexResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, vectorsearch.UpsertDataVectorIndexRequest) *vectorsearch.UpsertDataVectorIndexResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vectorsearch.UpsertDataVectorIndexResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, vectorsearch.UpsertDataVectorIndexRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVectorSearchIndexesInterface_UpsertDataVectorIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertDataVectorIndex'
type MockVectorSearchIndexesInterface_UpsertDataVectorIndex_Call struct {
	*mock.Call
}

// UpsertDataVectorIndex is a helper method to define mock.On call
//   - ctx context.Context
//   - request vectorsearch.UpsertDataVectorIndexRequest
func (_e *MockVectorSearchIndexesInterface_Expecter) UpsertDataVectorIndex(ctx interface{}, request interface{}) *MockVectorSearchIndexesInterface_UpsertDataVectorIndex_Call {
	return &MockVectorSearchIndexesInterface_UpsertDataVectorIndex_Call{Call: _e.mock.On("UpsertDataVectorIndex", ctx, request)}
}

func (_c *MockVectorSearchIndexesInterface_UpsertDataVectorIndex_Call) Run(run func(ctx context.Context, request vectorsearch.UpsertDataVectorIndexRequest)) *MockVectorSearchIndexesInterface_UpsertDataVectorIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(vectorsearch.UpsertDataVectorIndexRequest))
	})
	return _c
}

func (_c *MockVectorSearchIndexesInterface_UpsertDataVectorIndex_Call) Return(_a0 *vectorsearch.UpsertDataVectorIndexResponse, _a1 error) *MockVectorSearchIndexesInterface_UpsertDataVectorIndex_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVectorSearchIndexesInterface_UpsertDataVectorIndex_Call) RunAndReturn(run func(context.Context, vectorsearch.UpsertDataVectorIndexRequest) (*vectorsearch.UpsertDataVectorIndexResponse, error)) *MockVectorSearchIndexesInterface_UpsertDataVectorIndex_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockVectorSearchIndexesInterface) WithImpl(impl vectorsearch.VectorSearchIndexesService) vectorsearch.VectorSearchIndexesInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 vectorsearch.VectorSearchIndexesInterface
	if rf, ok := ret.Get(0).(func(vectorsearch.VectorSearchIndexesService) vectorsearch.VectorSearchIndexesInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(vectorsearch.VectorSearchIndexesInterface)
		}
	}

	return r0
}

// MockVectorSearchIndexesInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockVectorSearchIndexesInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl vectorsearch.VectorSearchIndexesService
func (_e *MockVectorSearchIndexesInterface_Expecter) WithImpl(impl interface{}) *MockVectorSearchIndexesInterface_WithImpl_Call {
	return &MockVectorSearchIndexesInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockVectorSearchIndexesInterface_WithImpl_Call) Run(run func(impl vectorsearch.VectorSearchIndexesService)) *MockVectorSearchIndexesInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(vectorsearch.VectorSearchIndexesService))
	})
	return _c
}

func (_c *MockVectorSearchIndexesInterface_WithImpl_Call) Return(_a0 vectorsearch.VectorSearchIndexesInterface) *MockVectorSearchIndexesInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVectorSearchIndexesInterface_WithImpl_Call) RunAndReturn(run func(vectorsearch.VectorSearchIndexesService) vectorsearch.VectorSearchIndexesInterface) *MockVectorSearchIndexesInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockVectorSearchIndexesInterface creates a new instance of MockVectorSearchIndexesInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVectorSearchIndexesInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVectorSearchIndexesInterface {
	mock := &MockVectorSearchIndexesInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
