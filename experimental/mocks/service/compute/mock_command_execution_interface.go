// Code generated by mockery v2.43.0. DO NOT EDIT.

package compute

import (
	context "context"

	compute "github.com/databricks/databricks-sdk-go/service/compute"

	mock "github.com/stretchr/testify/mock"

	retries "github.com/databricks/databricks-sdk-go/retries"

	time "time"
)

// MockCommandExecutionInterface is an autogenerated mock type for the CommandExecutionInterface type
type MockCommandExecutionInterface struct {
	mock.Mock
}

type MockCommandExecutionInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCommandExecutionInterface) EXPECT() *MockCommandExecutionInterface_Expecter {
	return &MockCommandExecutionInterface_Expecter{mock: &_m.Mock}
}

// Cancel provides a mock function with given fields: ctx, cancelCommand
func (_m *MockCommandExecutionInterface) Cancel(ctx context.Context, cancelCommand compute.CancelCommand) (*compute.WaitCommandStatusCommandExecutionCancelled[struct{}], error) {
	ret := _m.Called(ctx, cancelCommand)

	if len(ret) == 0 {
		panic("no return value specified for Cancel")
	}

	var r0 *compute.WaitCommandStatusCommandExecutionCancelled[struct{}]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, compute.CancelCommand) (*compute.WaitCommandStatusCommandExecutionCancelled[struct{}], error)); ok {
		return rf(ctx, cancelCommand)
	}
	if rf, ok := ret.Get(0).(func(context.Context, compute.CancelCommand) *compute.WaitCommandStatusCommandExecutionCancelled[struct{}]); ok {
		r0 = rf(ctx, cancelCommand)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compute.WaitCommandStatusCommandExecutionCancelled[struct{}])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, compute.CancelCommand) error); ok {
		r1 = rf(ctx, cancelCommand)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommandExecutionInterface_Cancel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cancel'
type MockCommandExecutionInterface_Cancel_Call struct {
	*mock.Call
}

// Cancel is a helper method to define mock.On call
//   - ctx context.Context
//   - cancelCommand compute.CancelCommand
func (_e *MockCommandExecutionInterface_Expecter) Cancel(ctx interface{}, cancelCommand interface{}) *MockCommandExecutionInterface_Cancel_Call {
	return &MockCommandExecutionInterface_Cancel_Call{Call: _e.mock.On("Cancel", ctx, cancelCommand)}
}

func (_c *MockCommandExecutionInterface_Cancel_Call) Run(run func(ctx context.Context, cancelCommand compute.CancelCommand)) *MockCommandExecutionInterface_Cancel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(compute.CancelCommand))
	})
	return _c
}

func (_c *MockCommandExecutionInterface_Cancel_Call) Return(_a0 *compute.WaitCommandStatusCommandExecutionCancelled[struct{}], _a1 error) *MockCommandExecutionInterface_Cancel_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommandExecutionInterface_Cancel_Call) RunAndReturn(run func(context.Context, compute.CancelCommand) (*compute.WaitCommandStatusCommandExecutionCancelled[struct{}], error)) *MockCommandExecutionInterface_Cancel_Call {
	_c.Call.Return(run)
	return _c
}

// CancelAndWait provides a mock function with given fields: ctx, cancelCommand, options
func (_m *MockCommandExecutionInterface) CancelAndWait(ctx context.Context, cancelCommand compute.CancelCommand, options ...retries.Option[compute.CommandStatusResponse]) (*compute.CommandStatusResponse, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, cancelCommand)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CancelAndWait")
	}

	var r0 *compute.CommandStatusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, compute.CancelCommand, ...retries.Option[compute.CommandStatusResponse]) (*compute.CommandStatusResponse, error)); ok {
		return rf(ctx, cancelCommand, options...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, compute.CancelCommand, ...retries.Option[compute.CommandStatusResponse]) *compute.CommandStatusResponse); ok {
		r0 = rf(ctx, cancelCommand, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compute.CommandStatusResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, compute.CancelCommand, ...retries.Option[compute.CommandStatusResponse]) error); ok {
		r1 = rf(ctx, cancelCommand, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommandExecutionInterface_CancelAndWait_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelAndWait'
type MockCommandExecutionInterface_CancelAndWait_Call struct {
	*mock.Call
}

// CancelAndWait is a helper method to define mock.On call
//   - ctx context.Context
//   - cancelCommand compute.CancelCommand
//   - options ...retries.Option[compute.CommandStatusResponse]
func (_e *MockCommandExecutionInterface_Expecter) CancelAndWait(ctx interface{}, cancelCommand interface{}, options ...interface{}) *MockCommandExecutionInterface_CancelAndWait_Call {
	return &MockCommandExecutionInterface_CancelAndWait_Call{Call: _e.mock.On("CancelAndWait",
		append([]interface{}{ctx, cancelCommand}, options...)...)}
}

func (_c *MockCommandExecutionInterface_CancelAndWait_Call) Run(run func(ctx context.Context, cancelCommand compute.CancelCommand, options ...retries.Option[compute.CommandStatusResponse])) *MockCommandExecutionInterface_CancelAndWait_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]retries.Option[compute.CommandStatusResponse], len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(retries.Option[compute.CommandStatusResponse])
			}
		}
		run(args[0].(context.Context), args[1].(compute.CancelCommand), variadicArgs...)
	})
	return _c
}

func (_c *MockCommandExecutionInterface_CancelAndWait_Call) Return(_a0 *compute.CommandStatusResponse, _a1 error) *MockCommandExecutionInterface_CancelAndWait_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommandExecutionInterface_CancelAndWait_Call) RunAndReturn(run func(context.Context, compute.CancelCommand, ...retries.Option[compute.CommandStatusResponse]) (*compute.CommandStatusResponse, error)) *MockCommandExecutionInterface_CancelAndWait_Call {
	_c.Call.Return(run)
	return _c
}

// CommandStatus provides a mock function with given fields: ctx, request
func (_m *MockCommandExecutionInterface) CommandStatus(ctx context.Context, request compute.CommandStatusRequest) (*compute.CommandStatusResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CommandStatus")
	}

	var r0 *compute.CommandStatusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, compute.CommandStatusRequest) (*compute.CommandStatusResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, compute.CommandStatusRequest) *compute.CommandStatusResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compute.CommandStatusResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, compute.CommandStatusRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommandExecutionInterface_CommandStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CommandStatus'
type MockCommandExecutionInterface_CommandStatus_Call struct {
	*mock.Call
}

// CommandStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - request compute.CommandStatusRequest
func (_e *MockCommandExecutionInterface_Expecter) CommandStatus(ctx interface{}, request interface{}) *MockCommandExecutionInterface_CommandStatus_Call {
	return &MockCommandExecutionInterface_CommandStatus_Call{Call: _e.mock.On("CommandStatus", ctx, request)}
}

func (_c *MockCommandExecutionInterface_CommandStatus_Call) Run(run func(ctx context.Context, request compute.CommandStatusRequest)) *MockCommandExecutionInterface_CommandStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(compute.CommandStatusRequest))
	})
	return _c
}

func (_c *MockCommandExecutionInterface_CommandStatus_Call) Return(_a0 *compute.CommandStatusResponse, _a1 error) *MockCommandExecutionInterface_CommandStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommandExecutionInterface_CommandStatus_Call) RunAndReturn(run func(context.Context, compute.CommandStatusRequest) (*compute.CommandStatusResponse, error)) *MockCommandExecutionInterface_CommandStatus_Call {
	_c.Call.Return(run)
	return _c
}

// ContextStatus provides a mock function with given fields: ctx, request
func (_m *MockCommandExecutionInterface) ContextStatus(ctx context.Context, request compute.ContextStatusRequest) (*compute.ContextStatusResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ContextStatus")
	}

	var r0 *compute.ContextStatusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, compute.ContextStatusRequest) (*compute.ContextStatusResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, compute.ContextStatusRequest) *compute.ContextStatusResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compute.ContextStatusResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, compute.ContextStatusRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommandExecutionInterface_ContextStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContextStatus'
type MockCommandExecutionInterface_ContextStatus_Call struct {
	*mock.Call
}

// ContextStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - request compute.ContextStatusRequest
func (_e *MockCommandExecutionInterface_Expecter) ContextStatus(ctx interface{}, request interface{}) *MockCommandExecutionInterface_ContextStatus_Call {
	return &MockCommandExecutionInterface_ContextStatus_Call{Call: _e.mock.On("ContextStatus", ctx, request)}
}

func (_c *MockCommandExecutionInterface_ContextStatus_Call) Run(run func(ctx context.Context, request compute.ContextStatusRequest)) *MockCommandExecutionInterface_ContextStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(compute.ContextStatusRequest))
	})
	return _c
}

func (_c *MockCommandExecutionInterface_ContextStatus_Call) Return(_a0 *compute.ContextStatusResponse, _a1 error) *MockCommandExecutionInterface_ContextStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommandExecutionInterface_ContextStatus_Call) RunAndReturn(run func(context.Context, compute.ContextStatusRequest) (*compute.ContextStatusResponse, error)) *MockCommandExecutionInterface_ContextStatus_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, createContext
func (_m *MockCommandExecutionInterface) Create(ctx context.Context, createContext compute.CreateContext) (*compute.WaitContextStatusCommandExecutionRunning[compute.Created], error) {
	ret := _m.Called(ctx, createContext)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *compute.WaitContextStatusCommandExecutionRunning[compute.Created]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, compute.CreateContext) (*compute.WaitContextStatusCommandExecutionRunning[compute.Created], error)); ok {
		return rf(ctx, createContext)
	}
	if rf, ok := ret.Get(0).(func(context.Context, compute.CreateContext) *compute.WaitContextStatusCommandExecutionRunning[compute.Created]); ok {
		r0 = rf(ctx, createContext)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compute.WaitContextStatusCommandExecutionRunning[compute.Created])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, compute.CreateContext) error); ok {
		r1 = rf(ctx, createContext)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommandExecutionInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockCommandExecutionInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - createContext compute.CreateContext
func (_e *MockCommandExecutionInterface_Expecter) Create(ctx interface{}, createContext interface{}) *MockCommandExecutionInterface_Create_Call {
	return &MockCommandExecutionInterface_Create_Call{Call: _e.mock.On("Create", ctx, createContext)}
}

func (_c *MockCommandExecutionInterface_Create_Call) Run(run func(ctx context.Context, createContext compute.CreateContext)) *MockCommandExecutionInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(compute.CreateContext))
	})
	return _c
}

func (_c *MockCommandExecutionInterface_Create_Call) Return(_a0 *compute.WaitContextStatusCommandExecutionRunning[compute.Created], _a1 error) *MockCommandExecutionInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommandExecutionInterface_Create_Call) RunAndReturn(run func(context.Context, compute.CreateContext) (*compute.WaitContextStatusCommandExecutionRunning[compute.Created], error)) *MockCommandExecutionInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAndWait provides a mock function with given fields: ctx, createContext, options
func (_m *MockCommandExecutionInterface) CreateAndWait(ctx context.Context, createContext compute.CreateContext, options ...retries.Option[compute.ContextStatusResponse]) (*compute.ContextStatusResponse, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, createContext)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAndWait")
	}

	var r0 *compute.ContextStatusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, compute.CreateContext, ...retries.Option[compute.ContextStatusResponse]) (*compute.ContextStatusResponse, error)); ok {
		return rf(ctx, createContext, options...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, compute.CreateContext, ...retries.Option[compute.ContextStatusResponse]) *compute.ContextStatusResponse); ok {
		r0 = rf(ctx, createContext, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compute.ContextStatusResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, compute.CreateContext, ...retries.Option[compute.ContextStatusResponse]) error); ok {
		r1 = rf(ctx, createContext, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommandExecutionInterface_CreateAndWait_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAndWait'
type MockCommandExecutionInterface_CreateAndWait_Call struct {
	*mock.Call
}

// CreateAndWait is a helper method to define mock.On call
//   - ctx context.Context
//   - createContext compute.CreateContext
//   - options ...retries.Option[compute.ContextStatusResponse]
func (_e *MockCommandExecutionInterface_Expecter) CreateAndWait(ctx interface{}, createContext interface{}, options ...interface{}) *MockCommandExecutionInterface_CreateAndWait_Call {
	return &MockCommandExecutionInterface_CreateAndWait_Call{Call: _e.mock.On("CreateAndWait",
		append([]interface{}{ctx, createContext}, options...)...)}
}

func (_c *MockCommandExecutionInterface_CreateAndWait_Call) Run(run func(ctx context.Context, createContext compute.CreateContext, options ...retries.Option[compute.ContextStatusResponse])) *MockCommandExecutionInterface_CreateAndWait_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]retries.Option[compute.ContextStatusResponse], len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(retries.Option[compute.ContextStatusResponse])
			}
		}
		run(args[0].(context.Context), args[1].(compute.CreateContext), variadicArgs...)
	})
	return _c
}

func (_c *MockCommandExecutionInterface_CreateAndWait_Call) Return(_a0 *compute.ContextStatusResponse, _a1 error) *MockCommandExecutionInterface_CreateAndWait_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommandExecutionInterface_CreateAndWait_Call) RunAndReturn(run func(context.Context, compute.CreateContext, ...retries.Option[compute.ContextStatusResponse]) (*compute.ContextStatusResponse, error)) *MockCommandExecutionInterface_CreateAndWait_Call {
	_c.Call.Return(run)
	return _c
}

// Destroy provides a mock function with given fields: ctx, request
func (_m *MockCommandExecutionInterface) Destroy(ctx context.Context, request compute.DestroyContext) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Destroy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, compute.DestroyContext) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCommandExecutionInterface_Destroy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Destroy'
type MockCommandExecutionInterface_Destroy_Call struct {
	*mock.Call
}

// Destroy is a helper method to define mock.On call
//   - ctx context.Context
//   - request compute.DestroyContext
func (_e *MockCommandExecutionInterface_Expecter) Destroy(ctx interface{}, request interface{}) *MockCommandExecutionInterface_Destroy_Call {
	return &MockCommandExecutionInterface_Destroy_Call{Call: _e.mock.On("Destroy", ctx, request)}
}

func (_c *MockCommandExecutionInterface_Destroy_Call) Run(run func(ctx context.Context, request compute.DestroyContext)) *MockCommandExecutionInterface_Destroy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(compute.DestroyContext))
	})
	return _c
}

func (_c *MockCommandExecutionInterface_Destroy_Call) Return(_a0 error) *MockCommandExecutionInterface_Destroy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommandExecutionInterface_Destroy_Call) RunAndReturn(run func(context.Context, compute.DestroyContext) error) *MockCommandExecutionInterface_Destroy_Call {
	_c.Call.Return(run)
	return _c
}

// Execute provides a mock function with given fields: ctx, command
func (_m *MockCommandExecutionInterface) Execute(ctx context.Context, command compute.Command) (*compute.WaitCommandStatusCommandExecutionFinishedOrError[compute.Created], error) {
	ret := _m.Called(ctx, command)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 *compute.WaitCommandStatusCommandExecutionFinishedOrError[compute.Created]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, compute.Command) (*compute.WaitCommandStatusCommandExecutionFinishedOrError[compute.Created], error)); ok {
		return rf(ctx, command)
	}
	if rf, ok := ret.Get(0).(func(context.Context, compute.Command) *compute.WaitCommandStatusCommandExecutionFinishedOrError[compute.Created]); ok {
		r0 = rf(ctx, command)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compute.WaitCommandStatusCommandExecutionFinishedOrError[compute.Created])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, compute.Command) error); ok {
		r1 = rf(ctx, command)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommandExecutionInterface_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockCommandExecutionInterface_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
//   - command compute.Command
func (_e *MockCommandExecutionInterface_Expecter) Execute(ctx interface{}, command interface{}) *MockCommandExecutionInterface_Execute_Call {
	return &MockCommandExecutionInterface_Execute_Call{Call: _e.mock.On("Execute", ctx, command)}
}

func (_c *MockCommandExecutionInterface_Execute_Call) Run(run func(ctx context.Context, command compute.Command)) *MockCommandExecutionInterface_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(compute.Command))
	})
	return _c
}

func (_c *MockCommandExecutionInterface_Execute_Call) Return(_a0 *compute.WaitCommandStatusCommandExecutionFinishedOrError[compute.Created], _a1 error) *MockCommandExecutionInterface_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommandExecutionInterface_Execute_Call) RunAndReturn(run func(context.Context, compute.Command) (*compute.WaitCommandStatusCommandExecutionFinishedOrError[compute.Created], error)) *MockCommandExecutionInterface_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// ExecuteAndWait provides a mock function with given fields: ctx, command, options
func (_m *MockCommandExecutionInterface) ExecuteAndWait(ctx context.Context, command compute.Command, options ...retries.Option[compute.CommandStatusResponse]) (*compute.CommandStatusResponse, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, command)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteAndWait")
	}

	var r0 *compute.CommandStatusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, compute.Command, ...retries.Option[compute.CommandStatusResponse]) (*compute.CommandStatusResponse, error)); ok {
		return rf(ctx, command, options...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, compute.Command, ...retries.Option[compute.CommandStatusResponse]) *compute.CommandStatusResponse); ok {
		r0 = rf(ctx, command, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compute.CommandStatusResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, compute.Command, ...retries.Option[compute.CommandStatusResponse]) error); ok {
		r1 = rf(ctx, command, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommandExecutionInterface_ExecuteAndWait_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteAndWait'
type MockCommandExecutionInterface_ExecuteAndWait_Call struct {
	*mock.Call
}

// ExecuteAndWait is a helper method to define mock.On call
//   - ctx context.Context
//   - command compute.Command
//   - options ...retries.Option[compute.CommandStatusResponse]
func (_e *MockCommandExecutionInterface_Expecter) ExecuteAndWait(ctx interface{}, command interface{}, options ...interface{}) *MockCommandExecutionInterface_ExecuteAndWait_Call {
	return &MockCommandExecutionInterface_ExecuteAndWait_Call{Call: _e.mock.On("ExecuteAndWait",
		append([]interface{}{ctx, command}, options...)...)}
}

func (_c *MockCommandExecutionInterface_ExecuteAndWait_Call) Run(run func(ctx context.Context, command compute.Command, options ...retries.Option[compute.CommandStatusResponse])) *MockCommandExecutionInterface_ExecuteAndWait_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]retries.Option[compute.CommandStatusResponse], len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(retries.Option[compute.CommandStatusResponse])
			}
		}
		run(args[0].(context.Context), args[1].(compute.Command), variadicArgs...)
	})
	return _c
}

func (_c *MockCommandExecutionInterface_ExecuteAndWait_Call) Return(_a0 *compute.CommandStatusResponse, _a1 error) *MockCommandExecutionInterface_ExecuteAndWait_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommandExecutionInterface_ExecuteAndWait_Call) RunAndReturn(run func(context.Context, compute.Command, ...retries.Option[compute.CommandStatusResponse]) (*compute.CommandStatusResponse, error)) *MockCommandExecutionInterface_ExecuteAndWait_Call {
	_c.Call.Return(run)
	return _c
}

// Impl provides a mock function with given fields:
func (_m *MockCommandExecutionInterface) Impl() compute.CommandExecutionService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 compute.CommandExecutionService
	if rf, ok := ret.Get(0).(func() compute.CommandExecutionService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(compute.CommandExecutionService)
		}
	}

	return r0
}

// MockCommandExecutionInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockCommandExecutionInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockCommandExecutionInterface_Expecter) Impl() *MockCommandExecutionInterface_Impl_Call {
	return &MockCommandExecutionInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockCommandExecutionInterface_Impl_Call) Run(run func()) *MockCommandExecutionInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCommandExecutionInterface_Impl_Call) Return(_a0 compute.CommandExecutionService) *MockCommandExecutionInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommandExecutionInterface_Impl_Call) RunAndReturn(run func() compute.CommandExecutionService) *MockCommandExecutionInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: ctx, clusterID, language
func (_m *MockCommandExecutionInterface) Start(ctx context.Context, clusterID string, language compute.Language) (*compute.CommandExecutorV2, error) {
	ret := _m.Called(ctx, clusterID, language)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 *compute.CommandExecutorV2
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, compute.Language) (*compute.CommandExecutorV2, error)); ok {
		return rf(ctx, clusterID, language)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, compute.Language) *compute.CommandExecutorV2); ok {
		r0 = rf(ctx, clusterID, language)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compute.CommandExecutorV2)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, compute.Language) error); ok {
		r1 = rf(ctx, clusterID, language)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommandExecutionInterface_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockCommandExecutionInterface_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
//   - clusterID string
//   - language compute.Language
func (_e *MockCommandExecutionInterface_Expecter) Start(ctx interface{}, clusterID interface{}, language interface{}) *MockCommandExecutionInterface_Start_Call {
	return &MockCommandExecutionInterface_Start_Call{Call: _e.mock.On("Start", ctx, clusterID, language)}
}

func (_c *MockCommandExecutionInterface_Start_Call) Run(run func(ctx context.Context, clusterID string, language compute.Language)) *MockCommandExecutionInterface_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(compute.Language))
	})
	return _c
}

func (_c *MockCommandExecutionInterface_Start_Call) Return(_a0 *compute.CommandExecutorV2, _a1 error) *MockCommandExecutionInterface_Start_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommandExecutionInterface_Start_Call) RunAndReturn(run func(context.Context, string, compute.Language) (*compute.CommandExecutorV2, error)) *MockCommandExecutionInterface_Start_Call {
	_c.Call.Return(run)
	return _c
}

// WaitCommandStatusCommandExecutionCancelled provides a mock function with given fields: ctx, clusterId, commandId, contextId, timeout, callback
func (_m *MockCommandExecutionInterface) WaitCommandStatusCommandExecutionCancelled(ctx context.Context, clusterId string, commandId string, contextId string, timeout time.Duration, callback func(*compute.CommandStatusResponse)) (*compute.CommandStatusResponse, error) {
	ret := _m.Called(ctx, clusterId, commandId, contextId, timeout, callback)

	if len(ret) == 0 {
		panic("no return value specified for WaitCommandStatusCommandExecutionCancelled")
	}

	var r0 *compute.CommandStatusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, time.Duration, func(*compute.CommandStatusResponse)) (*compute.CommandStatusResponse, error)); ok {
		return rf(ctx, clusterId, commandId, contextId, timeout, callback)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, time.Duration, func(*compute.CommandStatusResponse)) *compute.CommandStatusResponse); ok {
		r0 = rf(ctx, clusterId, commandId, contextId, timeout, callback)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compute.CommandStatusResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, time.Duration, func(*compute.CommandStatusResponse)) error); ok {
		r1 = rf(ctx, clusterId, commandId, contextId, timeout, callback)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommandExecutionInterface_WaitCommandStatusCommandExecutionCancelled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitCommandStatusCommandExecutionCancelled'
type MockCommandExecutionInterface_WaitCommandStatusCommandExecutionCancelled_Call struct {
	*mock.Call
}

// WaitCommandStatusCommandExecutionCancelled is a helper method to define mock.On call
//   - ctx context.Context
//   - clusterId string
//   - commandId string
//   - contextId string
//   - timeout time.Duration
//   - callback func(*compute.CommandStatusResponse)
func (_e *MockCommandExecutionInterface_Expecter) WaitCommandStatusCommandExecutionCancelled(ctx interface{}, clusterId interface{}, commandId interface{}, contextId interface{}, timeout interface{}, callback interface{}) *MockCommandExecutionInterface_WaitCommandStatusCommandExecutionCancelled_Call {
	return &MockCommandExecutionInterface_WaitCommandStatusCommandExecutionCancelled_Call{Call: _e.mock.On("WaitCommandStatusCommandExecutionCancelled", ctx, clusterId, commandId, contextId, timeout, callback)}
}

func (_c *MockCommandExecutionInterface_WaitCommandStatusCommandExecutionCancelled_Call) Run(run func(ctx context.Context, clusterId string, commandId string, contextId string, timeout time.Duration, callback func(*compute.CommandStatusResponse))) *MockCommandExecutionInterface_WaitCommandStatusCommandExecutionCancelled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(time.Duration), args[5].(func(*compute.CommandStatusResponse)))
	})
	return _c
}

func (_c *MockCommandExecutionInterface_WaitCommandStatusCommandExecutionCancelled_Call) Return(_a0 *compute.CommandStatusResponse, _a1 error) *MockCommandExecutionInterface_WaitCommandStatusCommandExecutionCancelled_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommandExecutionInterface_WaitCommandStatusCommandExecutionCancelled_Call) RunAndReturn(run func(context.Context, string, string, string, time.Duration, func(*compute.CommandStatusResponse)) (*compute.CommandStatusResponse, error)) *MockCommandExecutionInterface_WaitCommandStatusCommandExecutionCancelled_Call {
	_c.Call.Return(run)
	return _c
}

// WaitCommandStatusCommandExecutionFinishedOrError provides a mock function with given fields: ctx, clusterId, commandId, contextId, timeout, callback
func (_m *MockCommandExecutionInterface) WaitCommandStatusCommandExecutionFinishedOrError(ctx context.Context, clusterId string, commandId string, contextId string, timeout time.Duration, callback func(*compute.CommandStatusResponse)) (*compute.CommandStatusResponse, error) {
	ret := _m.Called(ctx, clusterId, commandId, contextId, timeout, callback)

	if len(ret) == 0 {
		panic("no return value specified for WaitCommandStatusCommandExecutionFinishedOrError")
	}

	var r0 *compute.CommandStatusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, time.Duration, func(*compute.CommandStatusResponse)) (*compute.CommandStatusResponse, error)); ok {
		return rf(ctx, clusterId, commandId, contextId, timeout, callback)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, time.Duration, func(*compute.CommandStatusResponse)) *compute.CommandStatusResponse); ok {
		r0 = rf(ctx, clusterId, commandId, contextId, timeout, callback)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compute.CommandStatusResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, time.Duration, func(*compute.CommandStatusResponse)) error); ok {
		r1 = rf(ctx, clusterId, commandId, contextId, timeout, callback)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommandExecutionInterface_WaitCommandStatusCommandExecutionFinishedOrError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitCommandStatusCommandExecutionFinishedOrError'
type MockCommandExecutionInterface_WaitCommandStatusCommandExecutionFinishedOrError_Call struct {
	*mock.Call
}

// WaitCommandStatusCommandExecutionFinishedOrError is a helper method to define mock.On call
//   - ctx context.Context
//   - clusterId string
//   - commandId string
//   - contextId string
//   - timeout time.Duration
//   - callback func(*compute.CommandStatusResponse)
func (_e *MockCommandExecutionInterface_Expecter) WaitCommandStatusCommandExecutionFinishedOrError(ctx interface{}, clusterId interface{}, commandId interface{}, contextId interface{}, timeout interface{}, callback interface{}) *MockCommandExecutionInterface_WaitCommandStatusCommandExecutionFinishedOrError_Call {
	return &MockCommandExecutionInterface_WaitCommandStatusCommandExecutionFinishedOrError_Call{Call: _e.mock.On("WaitCommandStatusCommandExecutionFinishedOrError", ctx, clusterId, commandId, contextId, timeout, callback)}
}

func (_c *MockCommandExecutionInterface_WaitCommandStatusCommandExecutionFinishedOrError_Call) Run(run func(ctx context.Context, clusterId string, commandId string, contextId string, timeout time.Duration, callback func(*compute.CommandStatusResponse))) *MockCommandExecutionInterface_WaitCommandStatusCommandExecutionFinishedOrError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(time.Duration), args[5].(func(*compute.CommandStatusResponse)))
	})
	return _c
}

func (_c *MockCommandExecutionInterface_WaitCommandStatusCommandExecutionFinishedOrError_Call) Return(_a0 *compute.CommandStatusResponse, _a1 error) *MockCommandExecutionInterface_WaitCommandStatusCommandExecutionFinishedOrError_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommandExecutionInterface_WaitCommandStatusCommandExecutionFinishedOrError_Call) RunAndReturn(run func(context.Context, string, string, string, time.Duration, func(*compute.CommandStatusResponse)) (*compute.CommandStatusResponse, error)) *MockCommandExecutionInterface_WaitCommandStatusCommandExecutionFinishedOrError_Call {
	_c.Call.Return(run)
	return _c
}

// WaitContextStatusCommandExecutionRunning provides a mock function with given fields: ctx, clusterId, contextId, timeout, callback
func (_m *MockCommandExecutionInterface) WaitContextStatusCommandExecutionRunning(ctx context.Context, clusterId string, contextId string, timeout time.Duration, callback func(*compute.ContextStatusResponse)) (*compute.ContextStatusResponse, error) {
	ret := _m.Called(ctx, clusterId, contextId, timeout, callback)

	if len(ret) == 0 {
		panic("no return value specified for WaitContextStatusCommandExecutionRunning")
	}

	var r0 *compute.ContextStatusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Duration, func(*compute.ContextStatusResponse)) (*compute.ContextStatusResponse, error)); ok {
		return rf(ctx, clusterId, contextId, timeout, callback)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Duration, func(*compute.ContextStatusResponse)) *compute.ContextStatusResponse); ok {
		r0 = rf(ctx, clusterId, contextId, timeout, callback)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compute.ContextStatusResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, time.Duration, func(*compute.ContextStatusResponse)) error); ok {
		r1 = rf(ctx, clusterId, contextId, timeout, callback)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommandExecutionInterface_WaitContextStatusCommandExecutionRunning_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitContextStatusCommandExecutionRunning'
type MockCommandExecutionInterface_WaitContextStatusCommandExecutionRunning_Call struct {
	*mock.Call
}

// WaitContextStatusCommandExecutionRunning is a helper method to define mock.On call
//   - ctx context.Context
//   - clusterId string
//   - contextId string
//   - timeout time.Duration
//   - callback func(*compute.ContextStatusResponse)
func (_e *MockCommandExecutionInterface_Expecter) WaitContextStatusCommandExecutionRunning(ctx interface{}, clusterId interface{}, contextId interface{}, timeout interface{}, callback interface{}) *MockCommandExecutionInterface_WaitContextStatusCommandExecutionRunning_Call {
	return &MockCommandExecutionInterface_WaitContextStatusCommandExecutionRunning_Call{Call: _e.mock.On("WaitContextStatusCommandExecutionRunning", ctx, clusterId, contextId, timeout, callback)}
}

func (_c *MockCommandExecutionInterface_WaitContextStatusCommandExecutionRunning_Call) Run(run func(ctx context.Context, clusterId string, contextId string, timeout time.Duration, callback func(*compute.ContextStatusResponse))) *MockCommandExecutionInterface_WaitContextStatusCommandExecutionRunning_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(time.Duration), args[4].(func(*compute.ContextStatusResponse)))
	})
	return _c
}

func (_c *MockCommandExecutionInterface_WaitContextStatusCommandExecutionRunning_Call) Return(_a0 *compute.ContextStatusResponse, _a1 error) *MockCommandExecutionInterface_WaitContextStatusCommandExecutionRunning_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommandExecutionInterface_WaitContextStatusCommandExecutionRunning_Call) RunAndReturn(run func(context.Context, string, string, time.Duration, func(*compute.ContextStatusResponse)) (*compute.ContextStatusResponse, error)) *MockCommandExecutionInterface_WaitContextStatusCommandExecutionRunning_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockCommandExecutionInterface) WithImpl(impl compute.CommandExecutionService) compute.CommandExecutionInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 compute.CommandExecutionInterface
	if rf, ok := ret.Get(0).(func(compute.CommandExecutionService) compute.CommandExecutionInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(compute.CommandExecutionInterface)
		}
	}

	return r0
}

// MockCommandExecutionInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockCommandExecutionInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl compute.CommandExecutionService
func (_e *MockCommandExecutionInterface_Expecter) WithImpl(impl interface{}) *MockCommandExecutionInterface_WithImpl_Call {
	return &MockCommandExecutionInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockCommandExecutionInterface_WithImpl_Call) Run(run func(impl compute.CommandExecutionService)) *MockCommandExecutionInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(compute.CommandExecutionService))
	})
	return _c
}

func (_c *MockCommandExecutionInterface_WithImpl_Call) Return(_a0 compute.CommandExecutionInterface) *MockCommandExecutionInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommandExecutionInterface_WithImpl_Call) RunAndReturn(run func(compute.CommandExecutionService) compute.CommandExecutionInterface) *MockCommandExecutionInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCommandExecutionInterface creates a new instance of MockCommandExecutionInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCommandExecutionInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCommandExecutionInterface {
	mock := &MockCommandExecutionInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
