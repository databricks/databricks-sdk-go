// Code generated by mockery v2.43.0. DO NOT EDIT.

package compute

import (
	context "context"

	compute "github.com/databricks/databricks-sdk-go/service/compute"

	listing "github.com/databricks/databricks-sdk-go/listing"

	mock "github.com/stretchr/testify/mock"
)

// MockGlobalInitScriptsInterface is an autogenerated mock type for the GlobalInitScriptsInterface type
type MockGlobalInitScriptsInterface struct {
	mock.Mock
}

type MockGlobalInitScriptsInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGlobalInitScriptsInterface) EXPECT() *MockGlobalInitScriptsInterface_Expecter {
	return &MockGlobalInitScriptsInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, request
func (_m *MockGlobalInitScriptsInterface) Create(ctx context.Context, request compute.GlobalInitScriptCreateRequest) (*compute.CreateResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *compute.CreateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, compute.GlobalInitScriptCreateRequest) (*compute.CreateResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, compute.GlobalInitScriptCreateRequest) *compute.CreateResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compute.CreateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, compute.GlobalInitScriptCreateRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGlobalInitScriptsInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockGlobalInitScriptsInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - request compute.GlobalInitScriptCreateRequest
func (_e *MockGlobalInitScriptsInterface_Expecter) Create(ctx interface{}, request interface{}) *MockGlobalInitScriptsInterface_Create_Call {
	return &MockGlobalInitScriptsInterface_Create_Call{Call: _e.mock.On("Create", ctx, request)}
}

func (_c *MockGlobalInitScriptsInterface_Create_Call) Run(run func(ctx context.Context, request compute.GlobalInitScriptCreateRequest)) *MockGlobalInitScriptsInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(compute.GlobalInitScriptCreateRequest))
	})
	return _c
}

func (_c *MockGlobalInitScriptsInterface_Create_Call) Return(_a0 *compute.CreateResponse, _a1 error) *MockGlobalInitScriptsInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGlobalInitScriptsInterface_Create_Call) RunAndReturn(run func(context.Context, compute.GlobalInitScriptCreateRequest) (*compute.CreateResponse, error)) *MockGlobalInitScriptsInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, request
func (_m *MockGlobalInitScriptsInterface) Delete(ctx context.Context, request compute.DeleteGlobalInitScriptRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, compute.DeleteGlobalInitScriptRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGlobalInitScriptsInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockGlobalInitScriptsInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - request compute.DeleteGlobalInitScriptRequest
func (_e *MockGlobalInitScriptsInterface_Expecter) Delete(ctx interface{}, request interface{}) *MockGlobalInitScriptsInterface_Delete_Call {
	return &MockGlobalInitScriptsInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, request)}
}

func (_c *MockGlobalInitScriptsInterface_Delete_Call) Run(run func(ctx context.Context, request compute.DeleteGlobalInitScriptRequest)) *MockGlobalInitScriptsInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(compute.DeleteGlobalInitScriptRequest))
	})
	return _c
}

func (_c *MockGlobalInitScriptsInterface_Delete_Call) Return(_a0 error) *MockGlobalInitScriptsInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGlobalInitScriptsInterface_Delete_Call) RunAndReturn(run func(context.Context, compute.DeleteGlobalInitScriptRequest) error) *MockGlobalInitScriptsInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByScriptId provides a mock function with given fields: ctx, scriptId
func (_m *MockGlobalInitScriptsInterface) DeleteByScriptId(ctx context.Context, scriptId string) error {
	ret := _m.Called(ctx, scriptId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByScriptId")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, scriptId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGlobalInitScriptsInterface_DeleteByScriptId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByScriptId'
type MockGlobalInitScriptsInterface_DeleteByScriptId_Call struct {
	*mock.Call
}

// DeleteByScriptId is a helper method to define mock.On call
//   - ctx context.Context
//   - scriptId string
func (_e *MockGlobalInitScriptsInterface_Expecter) DeleteByScriptId(ctx interface{}, scriptId interface{}) *MockGlobalInitScriptsInterface_DeleteByScriptId_Call {
	return &MockGlobalInitScriptsInterface_DeleteByScriptId_Call{Call: _e.mock.On("DeleteByScriptId", ctx, scriptId)}
}

func (_c *MockGlobalInitScriptsInterface_DeleteByScriptId_Call) Run(run func(ctx context.Context, scriptId string)) *MockGlobalInitScriptsInterface_DeleteByScriptId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockGlobalInitScriptsInterface_DeleteByScriptId_Call) Return(_a0 error) *MockGlobalInitScriptsInterface_DeleteByScriptId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGlobalInitScriptsInterface_DeleteByScriptId_Call) RunAndReturn(run func(context.Context, string) error) *MockGlobalInitScriptsInterface_DeleteByScriptId_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, request
func (_m *MockGlobalInitScriptsInterface) Get(ctx context.Context, request compute.GetGlobalInitScriptRequest) (*compute.GlobalInitScriptDetailsWithContent, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *compute.GlobalInitScriptDetailsWithContent
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, compute.GetGlobalInitScriptRequest) (*compute.GlobalInitScriptDetailsWithContent, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, compute.GetGlobalInitScriptRequest) *compute.GlobalInitScriptDetailsWithContent); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compute.GlobalInitScriptDetailsWithContent)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, compute.GetGlobalInitScriptRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGlobalInitScriptsInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockGlobalInitScriptsInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - request compute.GetGlobalInitScriptRequest
func (_e *MockGlobalInitScriptsInterface_Expecter) Get(ctx interface{}, request interface{}) *MockGlobalInitScriptsInterface_Get_Call {
	return &MockGlobalInitScriptsInterface_Get_Call{Call: _e.mock.On("Get", ctx, request)}
}

func (_c *MockGlobalInitScriptsInterface_Get_Call) Run(run func(ctx context.Context, request compute.GetGlobalInitScriptRequest)) *MockGlobalInitScriptsInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(compute.GetGlobalInitScriptRequest))
	})
	return _c
}

func (_c *MockGlobalInitScriptsInterface_Get_Call) Return(_a0 *compute.GlobalInitScriptDetailsWithContent, _a1 error) *MockGlobalInitScriptsInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGlobalInitScriptsInterface_Get_Call) RunAndReturn(run func(context.Context, compute.GetGlobalInitScriptRequest) (*compute.GlobalInitScriptDetailsWithContent, error)) *MockGlobalInitScriptsInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByName provides a mock function with given fields: ctx, name
func (_m *MockGlobalInitScriptsInterface) GetByName(ctx context.Context, name string) (*compute.GlobalInitScriptDetails, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetByName")
	}

	var r0 *compute.GlobalInitScriptDetails
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*compute.GlobalInitScriptDetails, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *compute.GlobalInitScriptDetails); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compute.GlobalInitScriptDetails)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGlobalInitScriptsInterface_GetByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByName'
type MockGlobalInitScriptsInterface_GetByName_Call struct {
	*mock.Call
}

// GetByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockGlobalInitScriptsInterface_Expecter) GetByName(ctx interface{}, name interface{}) *MockGlobalInitScriptsInterface_GetByName_Call {
	return &MockGlobalInitScriptsInterface_GetByName_Call{Call: _e.mock.On("GetByName", ctx, name)}
}

func (_c *MockGlobalInitScriptsInterface_GetByName_Call) Run(run func(ctx context.Context, name string)) *MockGlobalInitScriptsInterface_GetByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockGlobalInitScriptsInterface_GetByName_Call) Return(_a0 *compute.GlobalInitScriptDetails, _a1 error) *MockGlobalInitScriptsInterface_GetByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGlobalInitScriptsInterface_GetByName_Call) RunAndReturn(run func(context.Context, string) (*compute.GlobalInitScriptDetails, error)) *MockGlobalInitScriptsInterface_GetByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetByScriptId provides a mock function with given fields: ctx, scriptId
func (_m *MockGlobalInitScriptsInterface) GetByScriptId(ctx context.Context, scriptId string) (*compute.GlobalInitScriptDetailsWithContent, error) {
	ret := _m.Called(ctx, scriptId)

	if len(ret) == 0 {
		panic("no return value specified for GetByScriptId")
	}

	var r0 *compute.GlobalInitScriptDetailsWithContent
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*compute.GlobalInitScriptDetailsWithContent, error)); ok {
		return rf(ctx, scriptId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *compute.GlobalInitScriptDetailsWithContent); ok {
		r0 = rf(ctx, scriptId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compute.GlobalInitScriptDetailsWithContent)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, scriptId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGlobalInitScriptsInterface_GetByScriptId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByScriptId'
type MockGlobalInitScriptsInterface_GetByScriptId_Call struct {
	*mock.Call
}

// GetByScriptId is a helper method to define mock.On call
//   - ctx context.Context
//   - scriptId string
func (_e *MockGlobalInitScriptsInterface_Expecter) GetByScriptId(ctx interface{}, scriptId interface{}) *MockGlobalInitScriptsInterface_GetByScriptId_Call {
	return &MockGlobalInitScriptsInterface_GetByScriptId_Call{Call: _e.mock.On("GetByScriptId", ctx, scriptId)}
}

func (_c *MockGlobalInitScriptsInterface_GetByScriptId_Call) Run(run func(ctx context.Context, scriptId string)) *MockGlobalInitScriptsInterface_GetByScriptId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockGlobalInitScriptsInterface_GetByScriptId_Call) Return(_a0 *compute.GlobalInitScriptDetailsWithContent, _a1 error) *MockGlobalInitScriptsInterface_GetByScriptId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGlobalInitScriptsInterface_GetByScriptId_Call) RunAndReturn(run func(context.Context, string) (*compute.GlobalInitScriptDetailsWithContent, error)) *MockGlobalInitScriptsInterface_GetByScriptId_Call {
	_c.Call.Return(run)
	return _c
}

// GlobalInitScriptDetailsNameToScriptIdMap provides a mock function with given fields: ctx
func (_m *MockGlobalInitScriptsInterface) GlobalInitScriptDetailsNameToScriptIdMap(ctx context.Context) (map[string]string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GlobalInitScriptDetailsNameToScriptIdMap")
	}

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (map[string]string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) map[string]string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGlobalInitScriptsInterface_GlobalInitScriptDetailsNameToScriptIdMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GlobalInitScriptDetailsNameToScriptIdMap'
type MockGlobalInitScriptsInterface_GlobalInitScriptDetailsNameToScriptIdMap_Call struct {
	*mock.Call
}

// GlobalInitScriptDetailsNameToScriptIdMap is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockGlobalInitScriptsInterface_Expecter) GlobalInitScriptDetailsNameToScriptIdMap(ctx interface{}) *MockGlobalInitScriptsInterface_GlobalInitScriptDetailsNameToScriptIdMap_Call {
	return &MockGlobalInitScriptsInterface_GlobalInitScriptDetailsNameToScriptIdMap_Call{Call: _e.mock.On("GlobalInitScriptDetailsNameToScriptIdMap", ctx)}
}

func (_c *MockGlobalInitScriptsInterface_GlobalInitScriptDetailsNameToScriptIdMap_Call) Run(run func(ctx context.Context)) *MockGlobalInitScriptsInterface_GlobalInitScriptDetailsNameToScriptIdMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockGlobalInitScriptsInterface_GlobalInitScriptDetailsNameToScriptIdMap_Call) Return(_a0 map[string]string, _a1 error) *MockGlobalInitScriptsInterface_GlobalInitScriptDetailsNameToScriptIdMap_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGlobalInitScriptsInterface_GlobalInitScriptDetailsNameToScriptIdMap_Call) RunAndReturn(run func(context.Context) (map[string]string, error)) *MockGlobalInitScriptsInterface_GlobalInitScriptDetailsNameToScriptIdMap_Call {
	_c.Call.Return(run)
	return _c
}

// Impl provides a mock function with given fields:
func (_m *MockGlobalInitScriptsInterface) Impl() compute.GlobalInitScriptsService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 compute.GlobalInitScriptsService
	if rf, ok := ret.Get(0).(func() compute.GlobalInitScriptsService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(compute.GlobalInitScriptsService)
		}
	}

	return r0
}

// MockGlobalInitScriptsInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockGlobalInitScriptsInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockGlobalInitScriptsInterface_Expecter) Impl() *MockGlobalInitScriptsInterface_Impl_Call {
	return &MockGlobalInitScriptsInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockGlobalInitScriptsInterface_Impl_Call) Run(run func()) *MockGlobalInitScriptsInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGlobalInitScriptsInterface_Impl_Call) Return(_a0 compute.GlobalInitScriptsService) *MockGlobalInitScriptsInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGlobalInitScriptsInterface_Impl_Call) RunAndReturn(run func() compute.GlobalInitScriptsService) *MockGlobalInitScriptsInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx
func (_m *MockGlobalInitScriptsInterface) List(ctx context.Context) listing.Iterator[compute.GlobalInitScriptDetails] {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 listing.Iterator[compute.GlobalInitScriptDetails]
	if rf, ok := ret.Get(0).(func(context.Context) listing.Iterator[compute.GlobalInitScriptDetails]); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listing.Iterator[compute.GlobalInitScriptDetails])
		}
	}

	return r0
}

// MockGlobalInitScriptsInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockGlobalInitScriptsInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockGlobalInitScriptsInterface_Expecter) List(ctx interface{}) *MockGlobalInitScriptsInterface_List_Call {
	return &MockGlobalInitScriptsInterface_List_Call{Call: _e.mock.On("List", ctx)}
}

func (_c *MockGlobalInitScriptsInterface_List_Call) Run(run func(ctx context.Context)) *MockGlobalInitScriptsInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockGlobalInitScriptsInterface_List_Call) Return(_a0 listing.Iterator[compute.GlobalInitScriptDetails]) *MockGlobalInitScriptsInterface_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGlobalInitScriptsInterface_List_Call) RunAndReturn(run func(context.Context) listing.Iterator[compute.GlobalInitScriptDetails]) *MockGlobalInitScriptsInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListAll provides a mock function with given fields: ctx
func (_m *MockGlobalInitScriptsInterface) ListAll(ctx context.Context) ([]compute.GlobalInitScriptDetails, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListAll")
	}

	var r0 []compute.GlobalInitScriptDetails
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]compute.GlobalInitScriptDetails, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []compute.GlobalInitScriptDetails); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]compute.GlobalInitScriptDetails)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGlobalInitScriptsInterface_ListAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAll'
type MockGlobalInitScriptsInterface_ListAll_Call struct {
	*mock.Call
}

// ListAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockGlobalInitScriptsInterface_Expecter) ListAll(ctx interface{}) *MockGlobalInitScriptsInterface_ListAll_Call {
	return &MockGlobalInitScriptsInterface_ListAll_Call{Call: _e.mock.On("ListAll", ctx)}
}

func (_c *MockGlobalInitScriptsInterface_ListAll_Call) Run(run func(ctx context.Context)) *MockGlobalInitScriptsInterface_ListAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockGlobalInitScriptsInterface_ListAll_Call) Return(_a0 []compute.GlobalInitScriptDetails, _a1 error) *MockGlobalInitScriptsInterface_ListAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGlobalInitScriptsInterface_ListAll_Call) RunAndReturn(run func(context.Context) ([]compute.GlobalInitScriptDetails, error)) *MockGlobalInitScriptsInterface_ListAll_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, request
func (_m *MockGlobalInitScriptsInterface) Update(ctx context.Context, request compute.GlobalInitScriptUpdateRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, compute.GlobalInitScriptUpdateRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGlobalInitScriptsInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockGlobalInitScriptsInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - request compute.GlobalInitScriptUpdateRequest
func (_e *MockGlobalInitScriptsInterface_Expecter) Update(ctx interface{}, request interface{}) *MockGlobalInitScriptsInterface_Update_Call {
	return &MockGlobalInitScriptsInterface_Update_Call{Call: _e.mock.On("Update", ctx, request)}
}

func (_c *MockGlobalInitScriptsInterface_Update_Call) Run(run func(ctx context.Context, request compute.GlobalInitScriptUpdateRequest)) *MockGlobalInitScriptsInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(compute.GlobalInitScriptUpdateRequest))
	})
	return _c
}

func (_c *MockGlobalInitScriptsInterface_Update_Call) Return(_a0 error) *MockGlobalInitScriptsInterface_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGlobalInitScriptsInterface_Update_Call) RunAndReturn(run func(context.Context, compute.GlobalInitScriptUpdateRequest) error) *MockGlobalInitScriptsInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockGlobalInitScriptsInterface) WithImpl(impl compute.GlobalInitScriptsService) compute.GlobalInitScriptsInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 compute.GlobalInitScriptsInterface
	if rf, ok := ret.Get(0).(func(compute.GlobalInitScriptsService) compute.GlobalInitScriptsInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(compute.GlobalInitScriptsInterface)
		}
	}

	return r0
}

// MockGlobalInitScriptsInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockGlobalInitScriptsInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl compute.GlobalInitScriptsService
func (_e *MockGlobalInitScriptsInterface_Expecter) WithImpl(impl interface{}) *MockGlobalInitScriptsInterface_WithImpl_Call {
	return &MockGlobalInitScriptsInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockGlobalInitScriptsInterface_WithImpl_Call) Run(run func(impl compute.GlobalInitScriptsService)) *MockGlobalInitScriptsInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(compute.GlobalInitScriptsService))
	})
	return _c
}

func (_c *MockGlobalInitScriptsInterface_WithImpl_Call) Return(_a0 compute.GlobalInitScriptsInterface) *MockGlobalInitScriptsInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGlobalInitScriptsInterface_WithImpl_Call) RunAndReturn(run func(compute.GlobalInitScriptsService) compute.GlobalInitScriptsInterface) *MockGlobalInitScriptsInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGlobalInitScriptsInterface creates a new instance of MockGlobalInitScriptsInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGlobalInitScriptsInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGlobalInitScriptsInterface {
	mock := &MockGlobalInitScriptsInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
