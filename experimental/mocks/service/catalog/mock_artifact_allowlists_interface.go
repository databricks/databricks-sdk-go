// Code generated by mockery v2.43.0. DO NOT EDIT.

package catalog

import (
	context "context"

	catalog "github.com/databricks/databricks-sdk-go/service/catalog"

	mock "github.com/stretchr/testify/mock"
)

// MockArtifactAllowlistsInterface is an autogenerated mock type for the ArtifactAllowlistsInterface type
type MockArtifactAllowlistsInterface struct {
	mock.Mock
}

type MockArtifactAllowlistsInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockArtifactAllowlistsInterface) EXPECT() *MockArtifactAllowlistsInterface_Expecter {
	return &MockArtifactAllowlistsInterface_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: ctx, request
func (_m *MockArtifactAllowlistsInterface) Get(ctx context.Context, request catalog.GetArtifactAllowlistRequest) (*catalog.ArtifactAllowlistInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *catalog.ArtifactAllowlistInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.GetArtifactAllowlistRequest) (*catalog.ArtifactAllowlistInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.GetArtifactAllowlistRequest) *catalog.ArtifactAllowlistInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.ArtifactAllowlistInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.GetArtifactAllowlistRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockArtifactAllowlistsInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockArtifactAllowlistsInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.GetArtifactAllowlistRequest
func (_e *MockArtifactAllowlistsInterface_Expecter) Get(ctx interface{}, request interface{}) *MockArtifactAllowlistsInterface_Get_Call {
	return &MockArtifactAllowlistsInterface_Get_Call{Call: _e.mock.On("Get", ctx, request)}
}

func (_c *MockArtifactAllowlistsInterface_Get_Call) Run(run func(ctx context.Context, request catalog.GetArtifactAllowlistRequest)) *MockArtifactAllowlistsInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.GetArtifactAllowlistRequest))
	})
	return _c
}

func (_c *MockArtifactAllowlistsInterface_Get_Call) Return(_a0 *catalog.ArtifactAllowlistInfo, _a1 error) *MockArtifactAllowlistsInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockArtifactAllowlistsInterface_Get_Call) RunAndReturn(run func(context.Context, catalog.GetArtifactAllowlistRequest) (*catalog.ArtifactAllowlistInfo, error)) *MockArtifactAllowlistsInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByArtifactType provides a mock function with given fields: ctx, artifactType
func (_m *MockArtifactAllowlistsInterface) GetByArtifactType(ctx context.Context, artifactType catalog.ArtifactType) (*catalog.ArtifactAllowlistInfo, error) {
	ret := _m.Called(ctx, artifactType)

	if len(ret) == 0 {
		panic("no return value specified for GetByArtifactType")
	}

	var r0 *catalog.ArtifactAllowlistInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.ArtifactType) (*catalog.ArtifactAllowlistInfo, error)); ok {
		return rf(ctx, artifactType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.ArtifactType) *catalog.ArtifactAllowlistInfo); ok {
		r0 = rf(ctx, artifactType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.ArtifactAllowlistInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.ArtifactType) error); ok {
		r1 = rf(ctx, artifactType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockArtifactAllowlistsInterface_GetByArtifactType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByArtifactType'
type MockArtifactAllowlistsInterface_GetByArtifactType_Call struct {
	*mock.Call
}

// GetByArtifactType is a helper method to define mock.On call
//   - ctx context.Context
//   - artifactType catalog.ArtifactType
func (_e *MockArtifactAllowlistsInterface_Expecter) GetByArtifactType(ctx interface{}, artifactType interface{}) *MockArtifactAllowlistsInterface_GetByArtifactType_Call {
	return &MockArtifactAllowlistsInterface_GetByArtifactType_Call{Call: _e.mock.On("GetByArtifactType", ctx, artifactType)}
}

func (_c *MockArtifactAllowlistsInterface_GetByArtifactType_Call) Run(run func(ctx context.Context, artifactType catalog.ArtifactType)) *MockArtifactAllowlistsInterface_GetByArtifactType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.ArtifactType))
	})
	return _c
}

func (_c *MockArtifactAllowlistsInterface_GetByArtifactType_Call) Return(_a0 *catalog.ArtifactAllowlistInfo, _a1 error) *MockArtifactAllowlistsInterface_GetByArtifactType_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockArtifactAllowlistsInterface_GetByArtifactType_Call) RunAndReturn(run func(context.Context, catalog.ArtifactType) (*catalog.ArtifactAllowlistInfo, error)) *MockArtifactAllowlistsInterface_GetByArtifactType_Call {
	_c.Call.Return(run)
	return _c
}

// Impl provides a mock function with given fields:
func (_m *MockArtifactAllowlistsInterface) Impl() catalog.ArtifactAllowlistsService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 catalog.ArtifactAllowlistsService
	if rf, ok := ret.Get(0).(func() catalog.ArtifactAllowlistsService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(catalog.ArtifactAllowlistsService)
		}
	}

	return r0
}

// MockArtifactAllowlistsInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockArtifactAllowlistsInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockArtifactAllowlistsInterface_Expecter) Impl() *MockArtifactAllowlistsInterface_Impl_Call {
	return &MockArtifactAllowlistsInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockArtifactAllowlistsInterface_Impl_Call) Run(run func()) *MockArtifactAllowlistsInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockArtifactAllowlistsInterface_Impl_Call) Return(_a0 catalog.ArtifactAllowlistsService) *MockArtifactAllowlistsInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockArtifactAllowlistsInterface_Impl_Call) RunAndReturn(run func() catalog.ArtifactAllowlistsService) *MockArtifactAllowlistsInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, request
func (_m *MockArtifactAllowlistsInterface) Update(ctx context.Context, request catalog.SetArtifactAllowlist) (*catalog.ArtifactAllowlistInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *catalog.ArtifactAllowlistInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.SetArtifactAllowlist) (*catalog.ArtifactAllowlistInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.SetArtifactAllowlist) *catalog.ArtifactAllowlistInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.ArtifactAllowlistInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.SetArtifactAllowlist) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockArtifactAllowlistsInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockArtifactAllowlistsInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.SetArtifactAllowlist
func (_e *MockArtifactAllowlistsInterface_Expecter) Update(ctx interface{}, request interface{}) *MockArtifactAllowlistsInterface_Update_Call {
	return &MockArtifactAllowlistsInterface_Update_Call{Call: _e.mock.On("Update", ctx, request)}
}

func (_c *MockArtifactAllowlistsInterface_Update_Call) Run(run func(ctx context.Context, request catalog.SetArtifactAllowlist)) *MockArtifactAllowlistsInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.SetArtifactAllowlist))
	})
	return _c
}

func (_c *MockArtifactAllowlistsInterface_Update_Call) Return(_a0 *catalog.ArtifactAllowlistInfo, _a1 error) *MockArtifactAllowlistsInterface_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockArtifactAllowlistsInterface_Update_Call) RunAndReturn(run func(context.Context, catalog.SetArtifactAllowlist) (*catalog.ArtifactAllowlistInfo, error)) *MockArtifactAllowlistsInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockArtifactAllowlistsInterface) WithImpl(impl catalog.ArtifactAllowlistsService) catalog.ArtifactAllowlistsInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 catalog.ArtifactAllowlistsInterface
	if rf, ok := ret.Get(0).(func(catalog.ArtifactAllowlistsService) catalog.ArtifactAllowlistsInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(catalog.ArtifactAllowlistsInterface)
		}
	}

	return r0
}

// MockArtifactAllowlistsInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockArtifactAllowlistsInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl catalog.ArtifactAllowlistsService
func (_e *MockArtifactAllowlistsInterface_Expecter) WithImpl(impl interface{}) *MockArtifactAllowlistsInterface_WithImpl_Call {
	return &MockArtifactAllowlistsInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockArtifactAllowlistsInterface_WithImpl_Call) Run(run func(impl catalog.ArtifactAllowlistsService)) *MockArtifactAllowlistsInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(catalog.ArtifactAllowlistsService))
	})
	return _c
}

func (_c *MockArtifactAllowlistsInterface_WithImpl_Call) Return(_a0 catalog.ArtifactAllowlistsInterface) *MockArtifactAllowlistsInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockArtifactAllowlistsInterface_WithImpl_Call) RunAndReturn(run func(catalog.ArtifactAllowlistsService) catalog.ArtifactAllowlistsInterface) *MockArtifactAllowlistsInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockArtifactAllowlistsInterface creates a new instance of MockArtifactAllowlistsInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockArtifactAllowlistsInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockArtifactAllowlistsInterface {
	mock := &MockArtifactAllowlistsInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
