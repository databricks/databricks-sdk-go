// Code generated by mockery v2.43.0. DO NOT EDIT.

package catalog

import (
	context "context"

	catalog "github.com/databricks/databricks-sdk-go/service/catalog"

	mock "github.com/stretchr/testify/mock"
)

// MockQualityMonitorsInterface is an autogenerated mock type for the QualityMonitorsInterface type
type MockQualityMonitorsInterface struct {
	mock.Mock
}

type MockQualityMonitorsInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQualityMonitorsInterface) EXPECT() *MockQualityMonitorsInterface_Expecter {
	return &MockQualityMonitorsInterface_Expecter{mock: &_m.Mock}
}

// CancelRefresh provides a mock function with given fields: ctx, request
func (_m *MockQualityMonitorsInterface) CancelRefresh(ctx context.Context, request catalog.CancelRefreshRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CancelRefresh")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.CancelRefreshRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQualityMonitorsInterface_CancelRefresh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelRefresh'
type MockQualityMonitorsInterface_CancelRefresh_Call struct {
	*mock.Call
}

// CancelRefresh is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.CancelRefreshRequest
func (_e *MockQualityMonitorsInterface_Expecter) CancelRefresh(ctx interface{}, request interface{}) *MockQualityMonitorsInterface_CancelRefresh_Call {
	return &MockQualityMonitorsInterface_CancelRefresh_Call{Call: _e.mock.On("CancelRefresh", ctx, request)}
}

func (_c *MockQualityMonitorsInterface_CancelRefresh_Call) Run(run func(ctx context.Context, request catalog.CancelRefreshRequest)) *MockQualityMonitorsInterface_CancelRefresh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.CancelRefreshRequest))
	})
	return _c
}

func (_c *MockQualityMonitorsInterface_CancelRefresh_Call) Return(_a0 error) *MockQualityMonitorsInterface_CancelRefresh_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQualityMonitorsInterface_CancelRefresh_Call) RunAndReturn(run func(context.Context, catalog.CancelRefreshRequest) error) *MockQualityMonitorsInterface_CancelRefresh_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, request
func (_m *MockQualityMonitorsInterface) Create(ctx context.Context, request catalog.CreateMonitor) (*catalog.MonitorInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *catalog.MonitorInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.CreateMonitor) (*catalog.MonitorInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.CreateMonitor) *catalog.MonitorInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.MonitorInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.CreateMonitor) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQualityMonitorsInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockQualityMonitorsInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.CreateMonitor
func (_e *MockQualityMonitorsInterface_Expecter) Create(ctx interface{}, request interface{}) *MockQualityMonitorsInterface_Create_Call {
	return &MockQualityMonitorsInterface_Create_Call{Call: _e.mock.On("Create", ctx, request)}
}

func (_c *MockQualityMonitorsInterface_Create_Call) Run(run func(ctx context.Context, request catalog.CreateMonitor)) *MockQualityMonitorsInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.CreateMonitor))
	})
	return _c
}

func (_c *MockQualityMonitorsInterface_Create_Call) Return(_a0 *catalog.MonitorInfo, _a1 error) *MockQualityMonitorsInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQualityMonitorsInterface_Create_Call) RunAndReturn(run func(context.Context, catalog.CreateMonitor) (*catalog.MonitorInfo, error)) *MockQualityMonitorsInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, request
func (_m *MockQualityMonitorsInterface) Delete(ctx context.Context, request catalog.DeleteQualityMonitorRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.DeleteQualityMonitorRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQualityMonitorsInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockQualityMonitorsInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.DeleteQualityMonitorRequest
func (_e *MockQualityMonitorsInterface_Expecter) Delete(ctx interface{}, request interface{}) *MockQualityMonitorsInterface_Delete_Call {
	return &MockQualityMonitorsInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, request)}
}

func (_c *MockQualityMonitorsInterface_Delete_Call) Run(run func(ctx context.Context, request catalog.DeleteQualityMonitorRequest)) *MockQualityMonitorsInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.DeleteQualityMonitorRequest))
	})
	return _c
}

func (_c *MockQualityMonitorsInterface_Delete_Call) Return(_a0 error) *MockQualityMonitorsInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQualityMonitorsInterface_Delete_Call) RunAndReturn(run func(context.Context, catalog.DeleteQualityMonitorRequest) error) *MockQualityMonitorsInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByTableName provides a mock function with given fields: ctx, tableName
func (_m *MockQualityMonitorsInterface) DeleteByTableName(ctx context.Context, tableName string) error {
	ret := _m.Called(ctx, tableName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByTableName")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, tableName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQualityMonitorsInterface_DeleteByTableName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByTableName'
type MockQualityMonitorsInterface_DeleteByTableName_Call struct {
	*mock.Call
}

// DeleteByTableName is a helper method to define mock.On call
//   - ctx context.Context
//   - tableName string
func (_e *MockQualityMonitorsInterface_Expecter) DeleteByTableName(ctx interface{}, tableName interface{}) *MockQualityMonitorsInterface_DeleteByTableName_Call {
	return &MockQualityMonitorsInterface_DeleteByTableName_Call{Call: _e.mock.On("DeleteByTableName", ctx, tableName)}
}

func (_c *MockQualityMonitorsInterface_DeleteByTableName_Call) Run(run func(ctx context.Context, tableName string)) *MockQualityMonitorsInterface_DeleteByTableName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockQualityMonitorsInterface_DeleteByTableName_Call) Return(_a0 error) *MockQualityMonitorsInterface_DeleteByTableName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQualityMonitorsInterface_DeleteByTableName_Call) RunAndReturn(run func(context.Context, string) error) *MockQualityMonitorsInterface_DeleteByTableName_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, request
func (_m *MockQualityMonitorsInterface) Get(ctx context.Context, request catalog.GetQualityMonitorRequest) (*catalog.MonitorInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *catalog.MonitorInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.GetQualityMonitorRequest) (*catalog.MonitorInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.GetQualityMonitorRequest) *catalog.MonitorInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.MonitorInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.GetQualityMonitorRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQualityMonitorsInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockQualityMonitorsInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.GetQualityMonitorRequest
func (_e *MockQualityMonitorsInterface_Expecter) Get(ctx interface{}, request interface{}) *MockQualityMonitorsInterface_Get_Call {
	return &MockQualityMonitorsInterface_Get_Call{Call: _e.mock.On("Get", ctx, request)}
}

func (_c *MockQualityMonitorsInterface_Get_Call) Run(run func(ctx context.Context, request catalog.GetQualityMonitorRequest)) *MockQualityMonitorsInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.GetQualityMonitorRequest))
	})
	return _c
}

func (_c *MockQualityMonitorsInterface_Get_Call) Return(_a0 *catalog.MonitorInfo, _a1 error) *MockQualityMonitorsInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQualityMonitorsInterface_Get_Call) RunAndReturn(run func(context.Context, catalog.GetQualityMonitorRequest) (*catalog.MonitorInfo, error)) *MockQualityMonitorsInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByTableName provides a mock function with given fields: ctx, tableName
func (_m *MockQualityMonitorsInterface) GetByTableName(ctx context.Context, tableName string) (*catalog.MonitorInfo, error) {
	ret := _m.Called(ctx, tableName)

	if len(ret) == 0 {
		panic("no return value specified for GetByTableName")
	}

	var r0 *catalog.MonitorInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*catalog.MonitorInfo, error)); ok {
		return rf(ctx, tableName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *catalog.MonitorInfo); ok {
		r0 = rf(ctx, tableName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.MonitorInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, tableName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQualityMonitorsInterface_GetByTableName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByTableName'
type MockQualityMonitorsInterface_GetByTableName_Call struct {
	*mock.Call
}

// GetByTableName is a helper method to define mock.On call
//   - ctx context.Context
//   - tableName string
func (_e *MockQualityMonitorsInterface_Expecter) GetByTableName(ctx interface{}, tableName interface{}) *MockQualityMonitorsInterface_GetByTableName_Call {
	return &MockQualityMonitorsInterface_GetByTableName_Call{Call: _e.mock.On("GetByTableName", ctx, tableName)}
}

func (_c *MockQualityMonitorsInterface_GetByTableName_Call) Run(run func(ctx context.Context, tableName string)) *MockQualityMonitorsInterface_GetByTableName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockQualityMonitorsInterface_GetByTableName_Call) Return(_a0 *catalog.MonitorInfo, _a1 error) *MockQualityMonitorsInterface_GetByTableName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQualityMonitorsInterface_GetByTableName_Call) RunAndReturn(run func(context.Context, string) (*catalog.MonitorInfo, error)) *MockQualityMonitorsInterface_GetByTableName_Call {
	_c.Call.Return(run)
	return _c
}

// GetRefresh provides a mock function with given fields: ctx, request
func (_m *MockQualityMonitorsInterface) GetRefresh(ctx context.Context, request catalog.GetRefreshRequest) (*catalog.MonitorRefreshInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetRefresh")
	}

	var r0 *catalog.MonitorRefreshInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.GetRefreshRequest) (*catalog.MonitorRefreshInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.GetRefreshRequest) *catalog.MonitorRefreshInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.MonitorRefreshInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.GetRefreshRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQualityMonitorsInterface_GetRefresh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRefresh'
type MockQualityMonitorsInterface_GetRefresh_Call struct {
	*mock.Call
}

// GetRefresh is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.GetRefreshRequest
func (_e *MockQualityMonitorsInterface_Expecter) GetRefresh(ctx interface{}, request interface{}) *MockQualityMonitorsInterface_GetRefresh_Call {
	return &MockQualityMonitorsInterface_GetRefresh_Call{Call: _e.mock.On("GetRefresh", ctx, request)}
}

func (_c *MockQualityMonitorsInterface_GetRefresh_Call) Run(run func(ctx context.Context, request catalog.GetRefreshRequest)) *MockQualityMonitorsInterface_GetRefresh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.GetRefreshRequest))
	})
	return _c
}

func (_c *MockQualityMonitorsInterface_GetRefresh_Call) Return(_a0 *catalog.MonitorRefreshInfo, _a1 error) *MockQualityMonitorsInterface_GetRefresh_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQualityMonitorsInterface_GetRefresh_Call) RunAndReturn(run func(context.Context, catalog.GetRefreshRequest) (*catalog.MonitorRefreshInfo, error)) *MockQualityMonitorsInterface_GetRefresh_Call {
	_c.Call.Return(run)
	return _c
}

// GetRefreshByTableNameAndRefreshId provides a mock function with given fields: ctx, tableName, refreshId
func (_m *MockQualityMonitorsInterface) GetRefreshByTableNameAndRefreshId(ctx context.Context, tableName string, refreshId string) (*catalog.MonitorRefreshInfo, error) {
	ret := _m.Called(ctx, tableName, refreshId)

	if len(ret) == 0 {
		panic("no return value specified for GetRefreshByTableNameAndRefreshId")
	}

	var r0 *catalog.MonitorRefreshInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*catalog.MonitorRefreshInfo, error)); ok {
		return rf(ctx, tableName, refreshId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *catalog.MonitorRefreshInfo); ok {
		r0 = rf(ctx, tableName, refreshId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.MonitorRefreshInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, tableName, refreshId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQualityMonitorsInterface_GetRefreshByTableNameAndRefreshId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRefreshByTableNameAndRefreshId'
type MockQualityMonitorsInterface_GetRefreshByTableNameAndRefreshId_Call struct {
	*mock.Call
}

// GetRefreshByTableNameAndRefreshId is a helper method to define mock.On call
//   - ctx context.Context
//   - tableName string
//   - refreshId string
func (_e *MockQualityMonitorsInterface_Expecter) GetRefreshByTableNameAndRefreshId(ctx interface{}, tableName interface{}, refreshId interface{}) *MockQualityMonitorsInterface_GetRefreshByTableNameAndRefreshId_Call {
	return &MockQualityMonitorsInterface_GetRefreshByTableNameAndRefreshId_Call{Call: _e.mock.On("GetRefreshByTableNameAndRefreshId", ctx, tableName, refreshId)}
}

func (_c *MockQualityMonitorsInterface_GetRefreshByTableNameAndRefreshId_Call) Run(run func(ctx context.Context, tableName string, refreshId string)) *MockQualityMonitorsInterface_GetRefreshByTableNameAndRefreshId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockQualityMonitorsInterface_GetRefreshByTableNameAndRefreshId_Call) Return(_a0 *catalog.MonitorRefreshInfo, _a1 error) *MockQualityMonitorsInterface_GetRefreshByTableNameAndRefreshId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQualityMonitorsInterface_GetRefreshByTableNameAndRefreshId_Call) RunAndReturn(run func(context.Context, string, string) (*catalog.MonitorRefreshInfo, error)) *MockQualityMonitorsInterface_GetRefreshByTableNameAndRefreshId_Call {
	_c.Call.Return(run)
	return _c
}

// Impl provides a mock function with given fields:
func (_m *MockQualityMonitorsInterface) Impl() catalog.QualityMonitorsService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 catalog.QualityMonitorsService
	if rf, ok := ret.Get(0).(func() catalog.QualityMonitorsService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(catalog.QualityMonitorsService)
		}
	}

	return r0
}

// MockQualityMonitorsInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockQualityMonitorsInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockQualityMonitorsInterface_Expecter) Impl() *MockQualityMonitorsInterface_Impl_Call {
	return &MockQualityMonitorsInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockQualityMonitorsInterface_Impl_Call) Run(run func()) *MockQualityMonitorsInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockQualityMonitorsInterface_Impl_Call) Return(_a0 catalog.QualityMonitorsService) *MockQualityMonitorsInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQualityMonitorsInterface_Impl_Call) RunAndReturn(run func() catalog.QualityMonitorsService) *MockQualityMonitorsInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// ListRefreshes provides a mock function with given fields: ctx, request
func (_m *MockQualityMonitorsInterface) ListRefreshes(ctx context.Context, request catalog.ListRefreshesRequest) (*catalog.MonitorRefreshListResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListRefreshes")
	}

	var r0 *catalog.MonitorRefreshListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.ListRefreshesRequest) (*catalog.MonitorRefreshListResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.ListRefreshesRequest) *catalog.MonitorRefreshListResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.MonitorRefreshListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.ListRefreshesRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQualityMonitorsInterface_ListRefreshes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRefreshes'
type MockQualityMonitorsInterface_ListRefreshes_Call struct {
	*mock.Call
}

// ListRefreshes is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.ListRefreshesRequest
func (_e *MockQualityMonitorsInterface_Expecter) ListRefreshes(ctx interface{}, request interface{}) *MockQualityMonitorsInterface_ListRefreshes_Call {
	return &MockQualityMonitorsInterface_ListRefreshes_Call{Call: _e.mock.On("ListRefreshes", ctx, request)}
}

func (_c *MockQualityMonitorsInterface_ListRefreshes_Call) Run(run func(ctx context.Context, request catalog.ListRefreshesRequest)) *MockQualityMonitorsInterface_ListRefreshes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.ListRefreshesRequest))
	})
	return _c
}

func (_c *MockQualityMonitorsInterface_ListRefreshes_Call) Return(_a0 *catalog.MonitorRefreshListResponse, _a1 error) *MockQualityMonitorsInterface_ListRefreshes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQualityMonitorsInterface_ListRefreshes_Call) RunAndReturn(run func(context.Context, catalog.ListRefreshesRequest) (*catalog.MonitorRefreshListResponse, error)) *MockQualityMonitorsInterface_ListRefreshes_Call {
	_c.Call.Return(run)
	return _c
}

// ListRefreshesByTableName provides a mock function with given fields: ctx, tableName
func (_m *MockQualityMonitorsInterface) ListRefreshesByTableName(ctx context.Context, tableName string) (*catalog.MonitorRefreshListResponse, error) {
	ret := _m.Called(ctx, tableName)

	if len(ret) == 0 {
		panic("no return value specified for ListRefreshesByTableName")
	}

	var r0 *catalog.MonitorRefreshListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*catalog.MonitorRefreshListResponse, error)); ok {
		return rf(ctx, tableName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *catalog.MonitorRefreshListResponse); ok {
		r0 = rf(ctx, tableName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.MonitorRefreshListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, tableName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQualityMonitorsInterface_ListRefreshesByTableName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRefreshesByTableName'
type MockQualityMonitorsInterface_ListRefreshesByTableName_Call struct {
	*mock.Call
}

// ListRefreshesByTableName is a helper method to define mock.On call
//   - ctx context.Context
//   - tableName string
func (_e *MockQualityMonitorsInterface_Expecter) ListRefreshesByTableName(ctx interface{}, tableName interface{}) *MockQualityMonitorsInterface_ListRefreshesByTableName_Call {
	return &MockQualityMonitorsInterface_ListRefreshesByTableName_Call{Call: _e.mock.On("ListRefreshesByTableName", ctx, tableName)}
}

func (_c *MockQualityMonitorsInterface_ListRefreshesByTableName_Call) Run(run func(ctx context.Context, tableName string)) *MockQualityMonitorsInterface_ListRefreshesByTableName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockQualityMonitorsInterface_ListRefreshesByTableName_Call) Return(_a0 *catalog.MonitorRefreshListResponse, _a1 error) *MockQualityMonitorsInterface_ListRefreshesByTableName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQualityMonitorsInterface_ListRefreshesByTableName_Call) RunAndReturn(run func(context.Context, string) (*catalog.MonitorRefreshListResponse, error)) *MockQualityMonitorsInterface_ListRefreshesByTableName_Call {
	_c.Call.Return(run)
	return _c
}

// RunRefresh provides a mock function with given fields: ctx, request
func (_m *MockQualityMonitorsInterface) RunRefresh(ctx context.Context, request catalog.RunRefreshRequest) (*catalog.MonitorRefreshInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for RunRefresh")
	}

	var r0 *catalog.MonitorRefreshInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.RunRefreshRequest) (*catalog.MonitorRefreshInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.RunRefreshRequest) *catalog.MonitorRefreshInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.MonitorRefreshInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.RunRefreshRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQualityMonitorsInterface_RunRefresh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunRefresh'
type MockQualityMonitorsInterface_RunRefresh_Call struct {
	*mock.Call
}

// RunRefresh is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.RunRefreshRequest
func (_e *MockQualityMonitorsInterface_Expecter) RunRefresh(ctx interface{}, request interface{}) *MockQualityMonitorsInterface_RunRefresh_Call {
	return &MockQualityMonitorsInterface_RunRefresh_Call{Call: _e.mock.On("RunRefresh", ctx, request)}
}

func (_c *MockQualityMonitorsInterface_RunRefresh_Call) Run(run func(ctx context.Context, request catalog.RunRefreshRequest)) *MockQualityMonitorsInterface_RunRefresh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.RunRefreshRequest))
	})
	return _c
}

func (_c *MockQualityMonitorsInterface_RunRefresh_Call) Return(_a0 *catalog.MonitorRefreshInfo, _a1 error) *MockQualityMonitorsInterface_RunRefresh_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQualityMonitorsInterface_RunRefresh_Call) RunAndReturn(run func(context.Context, catalog.RunRefreshRequest) (*catalog.MonitorRefreshInfo, error)) *MockQualityMonitorsInterface_RunRefresh_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, request
func (_m *MockQualityMonitorsInterface) Update(ctx context.Context, request catalog.UpdateMonitor) (*catalog.MonitorInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *catalog.MonitorInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.UpdateMonitor) (*catalog.MonitorInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.UpdateMonitor) *catalog.MonitorInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.MonitorInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.UpdateMonitor) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQualityMonitorsInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockQualityMonitorsInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.UpdateMonitor
func (_e *MockQualityMonitorsInterface_Expecter) Update(ctx interface{}, request interface{}) *MockQualityMonitorsInterface_Update_Call {
	return &MockQualityMonitorsInterface_Update_Call{Call: _e.mock.On("Update", ctx, request)}
}

func (_c *MockQualityMonitorsInterface_Update_Call) Run(run func(ctx context.Context, request catalog.UpdateMonitor)) *MockQualityMonitorsInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.UpdateMonitor))
	})
	return _c
}

func (_c *MockQualityMonitorsInterface_Update_Call) Return(_a0 *catalog.MonitorInfo, _a1 error) *MockQualityMonitorsInterface_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQualityMonitorsInterface_Update_Call) RunAndReturn(run func(context.Context, catalog.UpdateMonitor) (*catalog.MonitorInfo, error)) *MockQualityMonitorsInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockQualityMonitorsInterface) WithImpl(impl catalog.QualityMonitorsService) catalog.QualityMonitorsInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 catalog.QualityMonitorsInterface
	if rf, ok := ret.Get(0).(func(catalog.QualityMonitorsService) catalog.QualityMonitorsInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(catalog.QualityMonitorsInterface)
		}
	}

	return r0
}

// MockQualityMonitorsInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockQualityMonitorsInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl catalog.QualityMonitorsService
func (_e *MockQualityMonitorsInterface_Expecter) WithImpl(impl interface{}) *MockQualityMonitorsInterface_WithImpl_Call {
	return &MockQualityMonitorsInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockQualityMonitorsInterface_WithImpl_Call) Run(run func(impl catalog.QualityMonitorsService)) *MockQualityMonitorsInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(catalog.QualityMonitorsService))
	})
	return _c
}

func (_c *MockQualityMonitorsInterface_WithImpl_Call) Return(_a0 catalog.QualityMonitorsInterface) *MockQualityMonitorsInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQualityMonitorsInterface_WithImpl_Call) RunAndReturn(run func(catalog.QualityMonitorsService) catalog.QualityMonitorsInterface) *MockQualityMonitorsInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockQualityMonitorsInterface creates a new instance of MockQualityMonitorsInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQualityMonitorsInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQualityMonitorsInterface {
	mock := &MockQualityMonitorsInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
