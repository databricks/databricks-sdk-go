// Code generated by mockery v2.43.0. DO NOT EDIT.

package catalog

import (
	context "context"

	catalog "github.com/databricks/databricks-sdk-go/service/catalog"

	listing "github.com/databricks/databricks-sdk-go/listing"

	mock "github.com/stretchr/testify/mock"
)

// MockSchemasInterface is an autogenerated mock type for the SchemasInterface type
type MockSchemasInterface struct {
	mock.Mock
}

type MockSchemasInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSchemasInterface) EXPECT() *MockSchemasInterface_Expecter {
	return &MockSchemasInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, request
func (_m *MockSchemasInterface) Create(ctx context.Context, request catalog.CreateSchema) (*catalog.SchemaInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *catalog.SchemaInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.CreateSchema) (*catalog.SchemaInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.CreateSchema) *catalog.SchemaInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.SchemaInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.CreateSchema) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSchemasInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockSchemasInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.CreateSchema
func (_e *MockSchemasInterface_Expecter) Create(ctx interface{}, request interface{}) *MockSchemasInterface_Create_Call {
	return &MockSchemasInterface_Create_Call{Call: _e.mock.On("Create", ctx, request)}
}

func (_c *MockSchemasInterface_Create_Call) Run(run func(ctx context.Context, request catalog.CreateSchema)) *MockSchemasInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.CreateSchema))
	})
	return _c
}

func (_c *MockSchemasInterface_Create_Call) Return(_a0 *catalog.SchemaInfo, _a1 error) *MockSchemasInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSchemasInterface_Create_Call) RunAndReturn(run func(context.Context, catalog.CreateSchema) (*catalog.SchemaInfo, error)) *MockSchemasInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, request
func (_m *MockSchemasInterface) Delete(ctx context.Context, request catalog.DeleteSchemaRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.DeleteSchemaRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSchemasInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockSchemasInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.DeleteSchemaRequest
func (_e *MockSchemasInterface_Expecter) Delete(ctx interface{}, request interface{}) *MockSchemasInterface_Delete_Call {
	return &MockSchemasInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, request)}
}

func (_c *MockSchemasInterface_Delete_Call) Run(run func(ctx context.Context, request catalog.DeleteSchemaRequest)) *MockSchemasInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.DeleteSchemaRequest))
	})
	return _c
}

func (_c *MockSchemasInterface_Delete_Call) Return(_a0 error) *MockSchemasInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSchemasInterface_Delete_Call) RunAndReturn(run func(context.Context, catalog.DeleteSchemaRequest) error) *MockSchemasInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByFullName provides a mock function with given fields: ctx, fullName
func (_m *MockSchemasInterface) DeleteByFullName(ctx context.Context, fullName string) error {
	ret := _m.Called(ctx, fullName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByFullName")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, fullName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSchemasInterface_DeleteByFullName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByFullName'
type MockSchemasInterface_DeleteByFullName_Call struct {
	*mock.Call
}

// DeleteByFullName is a helper method to define mock.On call
//   - ctx context.Context
//   - fullName string
func (_e *MockSchemasInterface_Expecter) DeleteByFullName(ctx interface{}, fullName interface{}) *MockSchemasInterface_DeleteByFullName_Call {
	return &MockSchemasInterface_DeleteByFullName_Call{Call: _e.mock.On("DeleteByFullName", ctx, fullName)}
}

func (_c *MockSchemasInterface_DeleteByFullName_Call) Run(run func(ctx context.Context, fullName string)) *MockSchemasInterface_DeleteByFullName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSchemasInterface_DeleteByFullName_Call) Return(_a0 error) *MockSchemasInterface_DeleteByFullName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSchemasInterface_DeleteByFullName_Call) RunAndReturn(run func(context.Context, string) error) *MockSchemasInterface_DeleteByFullName_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, request
func (_m *MockSchemasInterface) Get(ctx context.Context, request catalog.GetSchemaRequest) (*catalog.SchemaInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *catalog.SchemaInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.GetSchemaRequest) (*catalog.SchemaInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.GetSchemaRequest) *catalog.SchemaInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.SchemaInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.GetSchemaRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSchemasInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockSchemasInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.GetSchemaRequest
func (_e *MockSchemasInterface_Expecter) Get(ctx interface{}, request interface{}) *MockSchemasInterface_Get_Call {
	return &MockSchemasInterface_Get_Call{Call: _e.mock.On("Get", ctx, request)}
}

func (_c *MockSchemasInterface_Get_Call) Run(run func(ctx context.Context, request catalog.GetSchemaRequest)) *MockSchemasInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.GetSchemaRequest))
	})
	return _c
}

func (_c *MockSchemasInterface_Get_Call) Return(_a0 *catalog.SchemaInfo, _a1 error) *MockSchemasInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSchemasInterface_Get_Call) RunAndReturn(run func(context.Context, catalog.GetSchemaRequest) (*catalog.SchemaInfo, error)) *MockSchemasInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByFullName provides a mock function with given fields: ctx, fullName
func (_m *MockSchemasInterface) GetByFullName(ctx context.Context, fullName string) (*catalog.SchemaInfo, error) {
	ret := _m.Called(ctx, fullName)

	if len(ret) == 0 {
		panic("no return value specified for GetByFullName")
	}

	var r0 *catalog.SchemaInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*catalog.SchemaInfo, error)); ok {
		return rf(ctx, fullName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *catalog.SchemaInfo); ok {
		r0 = rf(ctx, fullName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.SchemaInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, fullName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSchemasInterface_GetByFullName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByFullName'
type MockSchemasInterface_GetByFullName_Call struct {
	*mock.Call
}

// GetByFullName is a helper method to define mock.On call
//   - ctx context.Context
//   - fullName string
func (_e *MockSchemasInterface_Expecter) GetByFullName(ctx interface{}, fullName interface{}) *MockSchemasInterface_GetByFullName_Call {
	return &MockSchemasInterface_GetByFullName_Call{Call: _e.mock.On("GetByFullName", ctx, fullName)}
}

func (_c *MockSchemasInterface_GetByFullName_Call) Run(run func(ctx context.Context, fullName string)) *MockSchemasInterface_GetByFullName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSchemasInterface_GetByFullName_Call) Return(_a0 *catalog.SchemaInfo, _a1 error) *MockSchemasInterface_GetByFullName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSchemasInterface_GetByFullName_Call) RunAndReturn(run func(context.Context, string) (*catalog.SchemaInfo, error)) *MockSchemasInterface_GetByFullName_Call {
	_c.Call.Return(run)
	return _c
}

// GetByName provides a mock function with given fields: ctx, name
func (_m *MockSchemasInterface) GetByName(ctx context.Context, name string) (*catalog.SchemaInfo, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetByName")
	}

	var r0 *catalog.SchemaInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*catalog.SchemaInfo, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *catalog.SchemaInfo); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.SchemaInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSchemasInterface_GetByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByName'
type MockSchemasInterface_GetByName_Call struct {
	*mock.Call
}

// GetByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockSchemasInterface_Expecter) GetByName(ctx interface{}, name interface{}) *MockSchemasInterface_GetByName_Call {
	return &MockSchemasInterface_GetByName_Call{Call: _e.mock.On("GetByName", ctx, name)}
}

func (_c *MockSchemasInterface_GetByName_Call) Run(run func(ctx context.Context, name string)) *MockSchemasInterface_GetByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSchemasInterface_GetByName_Call) Return(_a0 *catalog.SchemaInfo, _a1 error) *MockSchemasInterface_GetByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSchemasInterface_GetByName_Call) RunAndReturn(run func(context.Context, string) (*catalog.SchemaInfo, error)) *MockSchemasInterface_GetByName_Call {
	_c.Call.Return(run)
	return _c
}

// Impl provides a mock function with given fields:
func (_m *MockSchemasInterface) Impl() catalog.SchemasService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 catalog.SchemasService
	if rf, ok := ret.Get(0).(func() catalog.SchemasService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(catalog.SchemasService)
		}
	}

	return r0
}

// MockSchemasInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockSchemasInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockSchemasInterface_Expecter) Impl() *MockSchemasInterface_Impl_Call {
	return &MockSchemasInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockSchemasInterface_Impl_Call) Run(run func()) *MockSchemasInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSchemasInterface_Impl_Call) Return(_a0 catalog.SchemasService) *MockSchemasInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSchemasInterface_Impl_Call) RunAndReturn(run func() catalog.SchemasService) *MockSchemasInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, request
func (_m *MockSchemasInterface) List(ctx context.Context, request catalog.ListSchemasRequest) listing.Iterator[catalog.SchemaInfo] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 listing.Iterator[catalog.SchemaInfo]
	if rf, ok := ret.Get(0).(func(context.Context, catalog.ListSchemasRequest) listing.Iterator[catalog.SchemaInfo]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listing.Iterator[catalog.SchemaInfo])
		}
	}

	return r0
}

// MockSchemasInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockSchemasInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.ListSchemasRequest
func (_e *MockSchemasInterface_Expecter) List(ctx interface{}, request interface{}) *MockSchemasInterface_List_Call {
	return &MockSchemasInterface_List_Call{Call: _e.mock.On("List", ctx, request)}
}

func (_c *MockSchemasInterface_List_Call) Run(run func(ctx context.Context, request catalog.ListSchemasRequest)) *MockSchemasInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.ListSchemasRequest))
	})
	return _c
}

func (_c *MockSchemasInterface_List_Call) Return(_a0 listing.Iterator[catalog.SchemaInfo]) *MockSchemasInterface_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSchemasInterface_List_Call) RunAndReturn(run func(context.Context, catalog.ListSchemasRequest) listing.Iterator[catalog.SchemaInfo]) *MockSchemasInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListAll provides a mock function with given fields: ctx, request
func (_m *MockSchemasInterface) ListAll(ctx context.Context, request catalog.ListSchemasRequest) ([]catalog.SchemaInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListAll")
	}

	var r0 []catalog.SchemaInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.ListSchemasRequest) ([]catalog.SchemaInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.ListSchemasRequest) []catalog.SchemaInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]catalog.SchemaInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.ListSchemasRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSchemasInterface_ListAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAll'
type MockSchemasInterface_ListAll_Call struct {
	*mock.Call
}

// ListAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.ListSchemasRequest
func (_e *MockSchemasInterface_Expecter) ListAll(ctx interface{}, request interface{}) *MockSchemasInterface_ListAll_Call {
	return &MockSchemasInterface_ListAll_Call{Call: _e.mock.On("ListAll", ctx, request)}
}

func (_c *MockSchemasInterface_ListAll_Call) Run(run func(ctx context.Context, request catalog.ListSchemasRequest)) *MockSchemasInterface_ListAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.ListSchemasRequest))
	})
	return _c
}

func (_c *MockSchemasInterface_ListAll_Call) Return(_a0 []catalog.SchemaInfo, _a1 error) *MockSchemasInterface_ListAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSchemasInterface_ListAll_Call) RunAndReturn(run func(context.Context, catalog.ListSchemasRequest) ([]catalog.SchemaInfo, error)) *MockSchemasInterface_ListAll_Call {
	_c.Call.Return(run)
	return _c
}

// SchemaInfoNameToFullNameMap provides a mock function with given fields: ctx, request
func (_m *MockSchemasInterface) SchemaInfoNameToFullNameMap(ctx context.Context, request catalog.ListSchemasRequest) (map[string]string, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for SchemaInfoNameToFullNameMap")
	}

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.ListSchemasRequest) (map[string]string, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.ListSchemasRequest) map[string]string); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.ListSchemasRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSchemasInterface_SchemaInfoNameToFullNameMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SchemaInfoNameToFullNameMap'
type MockSchemasInterface_SchemaInfoNameToFullNameMap_Call struct {
	*mock.Call
}

// SchemaInfoNameToFullNameMap is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.ListSchemasRequest
func (_e *MockSchemasInterface_Expecter) SchemaInfoNameToFullNameMap(ctx interface{}, request interface{}) *MockSchemasInterface_SchemaInfoNameToFullNameMap_Call {
	return &MockSchemasInterface_SchemaInfoNameToFullNameMap_Call{Call: _e.mock.On("SchemaInfoNameToFullNameMap", ctx, request)}
}

func (_c *MockSchemasInterface_SchemaInfoNameToFullNameMap_Call) Run(run func(ctx context.Context, request catalog.ListSchemasRequest)) *MockSchemasInterface_SchemaInfoNameToFullNameMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.ListSchemasRequest))
	})
	return _c
}

func (_c *MockSchemasInterface_SchemaInfoNameToFullNameMap_Call) Return(_a0 map[string]string, _a1 error) *MockSchemasInterface_SchemaInfoNameToFullNameMap_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSchemasInterface_SchemaInfoNameToFullNameMap_Call) RunAndReturn(run func(context.Context, catalog.ListSchemasRequest) (map[string]string, error)) *MockSchemasInterface_SchemaInfoNameToFullNameMap_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, request
func (_m *MockSchemasInterface) Update(ctx context.Context, request catalog.UpdateSchema) (*catalog.SchemaInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *catalog.SchemaInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.UpdateSchema) (*catalog.SchemaInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.UpdateSchema) *catalog.SchemaInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.SchemaInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.UpdateSchema) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSchemasInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockSchemasInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.UpdateSchema
func (_e *MockSchemasInterface_Expecter) Update(ctx interface{}, request interface{}) *MockSchemasInterface_Update_Call {
	return &MockSchemasInterface_Update_Call{Call: _e.mock.On("Update", ctx, request)}
}

func (_c *MockSchemasInterface_Update_Call) Run(run func(ctx context.Context, request catalog.UpdateSchema)) *MockSchemasInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.UpdateSchema))
	})
	return _c
}

func (_c *MockSchemasInterface_Update_Call) Return(_a0 *catalog.SchemaInfo, _a1 error) *MockSchemasInterface_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSchemasInterface_Update_Call) RunAndReturn(run func(context.Context, catalog.UpdateSchema) (*catalog.SchemaInfo, error)) *MockSchemasInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockSchemasInterface) WithImpl(impl catalog.SchemasService) catalog.SchemasInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 catalog.SchemasInterface
	if rf, ok := ret.Get(0).(func(catalog.SchemasService) catalog.SchemasInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(catalog.SchemasInterface)
		}
	}

	return r0
}

// MockSchemasInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockSchemasInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl catalog.SchemasService
func (_e *MockSchemasInterface_Expecter) WithImpl(impl interface{}) *MockSchemasInterface_WithImpl_Call {
	return &MockSchemasInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockSchemasInterface_WithImpl_Call) Run(run func(impl catalog.SchemasService)) *MockSchemasInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(catalog.SchemasService))
	})
	return _c
}

func (_c *MockSchemasInterface_WithImpl_Call) Return(_a0 catalog.SchemasInterface) *MockSchemasInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSchemasInterface_WithImpl_Call) RunAndReturn(run func(catalog.SchemasService) catalog.SchemasInterface) *MockSchemasInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSchemasInterface creates a new instance of MockSchemasInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSchemasInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSchemasInterface {
	mock := &MockSchemasInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
