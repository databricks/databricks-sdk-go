// Code generated by mockery v2.43.0. DO NOT EDIT.

package catalog

import (
	context "context"

	catalog "github.com/databricks/databricks-sdk-go/service/catalog"

	listing "github.com/databricks/databricks-sdk-go/listing"

	mock "github.com/stretchr/testify/mock"
)

// MockModelVersionsInterface is an autogenerated mock type for the ModelVersionsInterface type
type MockModelVersionsInterface struct {
	mock.Mock
}

type MockModelVersionsInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockModelVersionsInterface) EXPECT() *MockModelVersionsInterface_Expecter {
	return &MockModelVersionsInterface_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: ctx, request
func (_m *MockModelVersionsInterface) Delete(ctx context.Context, request catalog.DeleteModelVersionRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.DeleteModelVersionRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockModelVersionsInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockModelVersionsInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.DeleteModelVersionRequest
func (_e *MockModelVersionsInterface_Expecter) Delete(ctx interface{}, request interface{}) *MockModelVersionsInterface_Delete_Call {
	return &MockModelVersionsInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, request)}
}

func (_c *MockModelVersionsInterface_Delete_Call) Run(run func(ctx context.Context, request catalog.DeleteModelVersionRequest)) *MockModelVersionsInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.DeleteModelVersionRequest))
	})
	return _c
}

func (_c *MockModelVersionsInterface_Delete_Call) Return(_a0 error) *MockModelVersionsInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockModelVersionsInterface_Delete_Call) RunAndReturn(run func(context.Context, catalog.DeleteModelVersionRequest) error) *MockModelVersionsInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByFullNameAndVersion provides a mock function with given fields: ctx, fullName, version
func (_m *MockModelVersionsInterface) DeleteByFullNameAndVersion(ctx context.Context, fullName string, version int) error {
	ret := _m.Called(ctx, fullName, version)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByFullNameAndVersion")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) error); ok {
		r0 = rf(ctx, fullName, version)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockModelVersionsInterface_DeleteByFullNameAndVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByFullNameAndVersion'
type MockModelVersionsInterface_DeleteByFullNameAndVersion_Call struct {
	*mock.Call
}

// DeleteByFullNameAndVersion is a helper method to define mock.On call
//   - ctx context.Context
//   - fullName string
//   - version int
func (_e *MockModelVersionsInterface_Expecter) DeleteByFullNameAndVersion(ctx interface{}, fullName interface{}, version interface{}) *MockModelVersionsInterface_DeleteByFullNameAndVersion_Call {
	return &MockModelVersionsInterface_DeleteByFullNameAndVersion_Call{Call: _e.mock.On("DeleteByFullNameAndVersion", ctx, fullName, version)}
}

func (_c *MockModelVersionsInterface_DeleteByFullNameAndVersion_Call) Run(run func(ctx context.Context, fullName string, version int)) *MockModelVersionsInterface_DeleteByFullNameAndVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int))
	})
	return _c
}

func (_c *MockModelVersionsInterface_DeleteByFullNameAndVersion_Call) Return(_a0 error) *MockModelVersionsInterface_DeleteByFullNameAndVersion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockModelVersionsInterface_DeleteByFullNameAndVersion_Call) RunAndReturn(run func(context.Context, string, int) error) *MockModelVersionsInterface_DeleteByFullNameAndVersion_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, request
func (_m *MockModelVersionsInterface) Get(ctx context.Context, request catalog.GetModelVersionRequest) (*catalog.RegisteredModelInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *catalog.RegisteredModelInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.GetModelVersionRequest) (*catalog.RegisteredModelInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.GetModelVersionRequest) *catalog.RegisteredModelInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.RegisteredModelInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.GetModelVersionRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModelVersionsInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockModelVersionsInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.GetModelVersionRequest
func (_e *MockModelVersionsInterface_Expecter) Get(ctx interface{}, request interface{}) *MockModelVersionsInterface_Get_Call {
	return &MockModelVersionsInterface_Get_Call{Call: _e.mock.On("Get", ctx, request)}
}

func (_c *MockModelVersionsInterface_Get_Call) Run(run func(ctx context.Context, request catalog.GetModelVersionRequest)) *MockModelVersionsInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.GetModelVersionRequest))
	})
	return _c
}

func (_c *MockModelVersionsInterface_Get_Call) Return(_a0 *catalog.RegisteredModelInfo, _a1 error) *MockModelVersionsInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModelVersionsInterface_Get_Call) RunAndReturn(run func(context.Context, catalog.GetModelVersionRequest) (*catalog.RegisteredModelInfo, error)) *MockModelVersionsInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByAlias provides a mock function with given fields: ctx, request
func (_m *MockModelVersionsInterface) GetByAlias(ctx context.Context, request catalog.GetByAliasRequest) (*catalog.ModelVersionInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetByAlias")
	}

	var r0 *catalog.ModelVersionInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.GetByAliasRequest) (*catalog.ModelVersionInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.GetByAliasRequest) *catalog.ModelVersionInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.ModelVersionInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.GetByAliasRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModelVersionsInterface_GetByAlias_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByAlias'
type MockModelVersionsInterface_GetByAlias_Call struct {
	*mock.Call
}

// GetByAlias is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.GetByAliasRequest
func (_e *MockModelVersionsInterface_Expecter) GetByAlias(ctx interface{}, request interface{}) *MockModelVersionsInterface_GetByAlias_Call {
	return &MockModelVersionsInterface_GetByAlias_Call{Call: _e.mock.On("GetByAlias", ctx, request)}
}

func (_c *MockModelVersionsInterface_GetByAlias_Call) Run(run func(ctx context.Context, request catalog.GetByAliasRequest)) *MockModelVersionsInterface_GetByAlias_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.GetByAliasRequest))
	})
	return _c
}

func (_c *MockModelVersionsInterface_GetByAlias_Call) Return(_a0 *catalog.ModelVersionInfo, _a1 error) *MockModelVersionsInterface_GetByAlias_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModelVersionsInterface_GetByAlias_Call) RunAndReturn(run func(context.Context, catalog.GetByAliasRequest) (*catalog.ModelVersionInfo, error)) *MockModelVersionsInterface_GetByAlias_Call {
	_c.Call.Return(run)
	return _c
}

// GetByAliasByFullNameAndAlias provides a mock function with given fields: ctx, fullName, alias
func (_m *MockModelVersionsInterface) GetByAliasByFullNameAndAlias(ctx context.Context, fullName string, alias string) (*catalog.ModelVersionInfo, error) {
	ret := _m.Called(ctx, fullName, alias)

	if len(ret) == 0 {
		panic("no return value specified for GetByAliasByFullNameAndAlias")
	}

	var r0 *catalog.ModelVersionInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*catalog.ModelVersionInfo, error)); ok {
		return rf(ctx, fullName, alias)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *catalog.ModelVersionInfo); ok {
		r0 = rf(ctx, fullName, alias)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.ModelVersionInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, fullName, alias)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModelVersionsInterface_GetByAliasByFullNameAndAlias_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByAliasByFullNameAndAlias'
type MockModelVersionsInterface_GetByAliasByFullNameAndAlias_Call struct {
	*mock.Call
}

// GetByAliasByFullNameAndAlias is a helper method to define mock.On call
//   - ctx context.Context
//   - fullName string
//   - alias string
func (_e *MockModelVersionsInterface_Expecter) GetByAliasByFullNameAndAlias(ctx interface{}, fullName interface{}, alias interface{}) *MockModelVersionsInterface_GetByAliasByFullNameAndAlias_Call {
	return &MockModelVersionsInterface_GetByAliasByFullNameAndAlias_Call{Call: _e.mock.On("GetByAliasByFullNameAndAlias", ctx, fullName, alias)}
}

func (_c *MockModelVersionsInterface_GetByAliasByFullNameAndAlias_Call) Run(run func(ctx context.Context, fullName string, alias string)) *MockModelVersionsInterface_GetByAliasByFullNameAndAlias_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockModelVersionsInterface_GetByAliasByFullNameAndAlias_Call) Return(_a0 *catalog.ModelVersionInfo, _a1 error) *MockModelVersionsInterface_GetByAliasByFullNameAndAlias_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModelVersionsInterface_GetByAliasByFullNameAndAlias_Call) RunAndReturn(run func(context.Context, string, string) (*catalog.ModelVersionInfo, error)) *MockModelVersionsInterface_GetByAliasByFullNameAndAlias_Call {
	_c.Call.Return(run)
	return _c
}

// GetByFullNameAndVersion provides a mock function with given fields: ctx, fullName, version
func (_m *MockModelVersionsInterface) GetByFullNameAndVersion(ctx context.Context, fullName string, version int) (*catalog.RegisteredModelInfo, error) {
	ret := _m.Called(ctx, fullName, version)

	if len(ret) == 0 {
		panic("no return value specified for GetByFullNameAndVersion")
	}

	var r0 *catalog.RegisteredModelInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) (*catalog.RegisteredModelInfo, error)); ok {
		return rf(ctx, fullName, version)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int) *catalog.RegisteredModelInfo); ok {
		r0 = rf(ctx, fullName, version)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.RegisteredModelInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int) error); ok {
		r1 = rf(ctx, fullName, version)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModelVersionsInterface_GetByFullNameAndVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByFullNameAndVersion'
type MockModelVersionsInterface_GetByFullNameAndVersion_Call struct {
	*mock.Call
}

// GetByFullNameAndVersion is a helper method to define mock.On call
//   - ctx context.Context
//   - fullName string
//   - version int
func (_e *MockModelVersionsInterface_Expecter) GetByFullNameAndVersion(ctx interface{}, fullName interface{}, version interface{}) *MockModelVersionsInterface_GetByFullNameAndVersion_Call {
	return &MockModelVersionsInterface_GetByFullNameAndVersion_Call{Call: _e.mock.On("GetByFullNameAndVersion", ctx, fullName, version)}
}

func (_c *MockModelVersionsInterface_GetByFullNameAndVersion_Call) Run(run func(ctx context.Context, fullName string, version int)) *MockModelVersionsInterface_GetByFullNameAndVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int))
	})
	return _c
}

func (_c *MockModelVersionsInterface_GetByFullNameAndVersion_Call) Return(_a0 *catalog.RegisteredModelInfo, _a1 error) *MockModelVersionsInterface_GetByFullNameAndVersion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModelVersionsInterface_GetByFullNameAndVersion_Call) RunAndReturn(run func(context.Context, string, int) (*catalog.RegisteredModelInfo, error)) *MockModelVersionsInterface_GetByFullNameAndVersion_Call {
	_c.Call.Return(run)
	return _c
}

// Impl provides a mock function with given fields:
func (_m *MockModelVersionsInterface) Impl() catalog.ModelVersionsService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 catalog.ModelVersionsService
	if rf, ok := ret.Get(0).(func() catalog.ModelVersionsService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(catalog.ModelVersionsService)
		}
	}

	return r0
}

// MockModelVersionsInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockModelVersionsInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockModelVersionsInterface_Expecter) Impl() *MockModelVersionsInterface_Impl_Call {
	return &MockModelVersionsInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockModelVersionsInterface_Impl_Call) Run(run func()) *MockModelVersionsInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockModelVersionsInterface_Impl_Call) Return(_a0 catalog.ModelVersionsService) *MockModelVersionsInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockModelVersionsInterface_Impl_Call) RunAndReturn(run func() catalog.ModelVersionsService) *MockModelVersionsInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, request
func (_m *MockModelVersionsInterface) List(ctx context.Context, request catalog.ListModelVersionsRequest) listing.Iterator[catalog.ModelVersionInfo] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 listing.Iterator[catalog.ModelVersionInfo]
	if rf, ok := ret.Get(0).(func(context.Context, catalog.ListModelVersionsRequest) listing.Iterator[catalog.ModelVersionInfo]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listing.Iterator[catalog.ModelVersionInfo])
		}
	}

	return r0
}

// MockModelVersionsInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockModelVersionsInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.ListModelVersionsRequest
func (_e *MockModelVersionsInterface_Expecter) List(ctx interface{}, request interface{}) *MockModelVersionsInterface_List_Call {
	return &MockModelVersionsInterface_List_Call{Call: _e.mock.On("List", ctx, request)}
}

func (_c *MockModelVersionsInterface_List_Call) Run(run func(ctx context.Context, request catalog.ListModelVersionsRequest)) *MockModelVersionsInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.ListModelVersionsRequest))
	})
	return _c
}

func (_c *MockModelVersionsInterface_List_Call) Return(_a0 listing.Iterator[catalog.ModelVersionInfo]) *MockModelVersionsInterface_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockModelVersionsInterface_List_Call) RunAndReturn(run func(context.Context, catalog.ListModelVersionsRequest) listing.Iterator[catalog.ModelVersionInfo]) *MockModelVersionsInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListAll provides a mock function with given fields: ctx, request
func (_m *MockModelVersionsInterface) ListAll(ctx context.Context, request catalog.ListModelVersionsRequest) ([]catalog.ModelVersionInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListAll")
	}

	var r0 []catalog.ModelVersionInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.ListModelVersionsRequest) ([]catalog.ModelVersionInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.ListModelVersionsRequest) []catalog.ModelVersionInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]catalog.ModelVersionInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.ListModelVersionsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModelVersionsInterface_ListAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAll'
type MockModelVersionsInterface_ListAll_Call struct {
	*mock.Call
}

// ListAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.ListModelVersionsRequest
func (_e *MockModelVersionsInterface_Expecter) ListAll(ctx interface{}, request interface{}) *MockModelVersionsInterface_ListAll_Call {
	return &MockModelVersionsInterface_ListAll_Call{Call: _e.mock.On("ListAll", ctx, request)}
}

func (_c *MockModelVersionsInterface_ListAll_Call) Run(run func(ctx context.Context, request catalog.ListModelVersionsRequest)) *MockModelVersionsInterface_ListAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.ListModelVersionsRequest))
	})
	return _c
}

func (_c *MockModelVersionsInterface_ListAll_Call) Return(_a0 []catalog.ModelVersionInfo, _a1 error) *MockModelVersionsInterface_ListAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModelVersionsInterface_ListAll_Call) RunAndReturn(run func(context.Context, catalog.ListModelVersionsRequest) ([]catalog.ModelVersionInfo, error)) *MockModelVersionsInterface_ListAll_Call {
	_c.Call.Return(run)
	return _c
}

// ListByFullName provides a mock function with given fields: ctx, fullName
func (_m *MockModelVersionsInterface) ListByFullName(ctx context.Context, fullName string) (*catalog.ListModelVersionsResponse, error) {
	ret := _m.Called(ctx, fullName)

	if len(ret) == 0 {
		panic("no return value specified for ListByFullName")
	}

	var r0 *catalog.ListModelVersionsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*catalog.ListModelVersionsResponse, error)); ok {
		return rf(ctx, fullName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *catalog.ListModelVersionsResponse); ok {
		r0 = rf(ctx, fullName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.ListModelVersionsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, fullName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModelVersionsInterface_ListByFullName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByFullName'
type MockModelVersionsInterface_ListByFullName_Call struct {
	*mock.Call
}

// ListByFullName is a helper method to define mock.On call
//   - ctx context.Context
//   - fullName string
func (_e *MockModelVersionsInterface_Expecter) ListByFullName(ctx interface{}, fullName interface{}) *MockModelVersionsInterface_ListByFullName_Call {
	return &MockModelVersionsInterface_ListByFullName_Call{Call: _e.mock.On("ListByFullName", ctx, fullName)}
}

func (_c *MockModelVersionsInterface_ListByFullName_Call) Run(run func(ctx context.Context, fullName string)) *MockModelVersionsInterface_ListByFullName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockModelVersionsInterface_ListByFullName_Call) Return(_a0 *catalog.ListModelVersionsResponse, _a1 error) *MockModelVersionsInterface_ListByFullName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModelVersionsInterface_ListByFullName_Call) RunAndReturn(run func(context.Context, string) (*catalog.ListModelVersionsResponse, error)) *MockModelVersionsInterface_ListByFullName_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, request
func (_m *MockModelVersionsInterface) Update(ctx context.Context, request catalog.UpdateModelVersionRequest) (*catalog.ModelVersionInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *catalog.ModelVersionInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.UpdateModelVersionRequest) (*catalog.ModelVersionInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.UpdateModelVersionRequest) *catalog.ModelVersionInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.ModelVersionInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.UpdateModelVersionRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModelVersionsInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockModelVersionsInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.UpdateModelVersionRequest
func (_e *MockModelVersionsInterface_Expecter) Update(ctx interface{}, request interface{}) *MockModelVersionsInterface_Update_Call {
	return &MockModelVersionsInterface_Update_Call{Call: _e.mock.On("Update", ctx, request)}
}

func (_c *MockModelVersionsInterface_Update_Call) Run(run func(ctx context.Context, request catalog.UpdateModelVersionRequest)) *MockModelVersionsInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.UpdateModelVersionRequest))
	})
	return _c
}

func (_c *MockModelVersionsInterface_Update_Call) Return(_a0 *catalog.ModelVersionInfo, _a1 error) *MockModelVersionsInterface_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModelVersionsInterface_Update_Call) RunAndReturn(run func(context.Context, catalog.UpdateModelVersionRequest) (*catalog.ModelVersionInfo, error)) *MockModelVersionsInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockModelVersionsInterface) WithImpl(impl catalog.ModelVersionsService) catalog.ModelVersionsInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 catalog.ModelVersionsInterface
	if rf, ok := ret.Get(0).(func(catalog.ModelVersionsService) catalog.ModelVersionsInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(catalog.ModelVersionsInterface)
		}
	}

	return r0
}

// MockModelVersionsInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockModelVersionsInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl catalog.ModelVersionsService
func (_e *MockModelVersionsInterface_Expecter) WithImpl(impl interface{}) *MockModelVersionsInterface_WithImpl_Call {
	return &MockModelVersionsInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockModelVersionsInterface_WithImpl_Call) Run(run func(impl catalog.ModelVersionsService)) *MockModelVersionsInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(catalog.ModelVersionsService))
	})
	return _c
}

func (_c *MockModelVersionsInterface_WithImpl_Call) Return(_a0 catalog.ModelVersionsInterface) *MockModelVersionsInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockModelVersionsInterface_WithImpl_Call) RunAndReturn(run func(catalog.ModelVersionsService) catalog.ModelVersionsInterface) *MockModelVersionsInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockModelVersionsInterface creates a new instance of MockModelVersionsInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockModelVersionsInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockModelVersionsInterface {
	mock := &MockModelVersionsInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
