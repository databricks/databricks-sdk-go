// Code generated by mockery v2.53.2. DO NOT EDIT.

package catalog

import (
	context "context"

	catalog "github.com/databricks/databricks-sdk-go/service/catalog"

	listing "github.com/databricks/databricks-sdk-go/listing"

	mock "github.com/stretchr/testify/mock"
)

// MockEntityTagAssignmentsInterface is an autogenerated mock type for the EntityTagAssignmentsInterface type
type MockEntityTagAssignmentsInterface struct {
	mock.Mock
}

type MockEntityTagAssignmentsInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEntityTagAssignmentsInterface) EXPECT() *MockEntityTagAssignmentsInterface_Expecter {
	return &MockEntityTagAssignmentsInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, request
func (_m *MockEntityTagAssignmentsInterface) Create(ctx context.Context, request catalog.CreateEntityTagAssignmentRequest) (*catalog.EntityTagAssignment, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *catalog.EntityTagAssignment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.CreateEntityTagAssignmentRequest) (*catalog.EntityTagAssignment, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.CreateEntityTagAssignmentRequest) *catalog.EntityTagAssignment); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.EntityTagAssignment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.CreateEntityTagAssignmentRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEntityTagAssignmentsInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockEntityTagAssignmentsInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.CreateEntityTagAssignmentRequest
func (_e *MockEntityTagAssignmentsInterface_Expecter) Create(ctx interface{}, request interface{}) *MockEntityTagAssignmentsInterface_Create_Call {
	return &MockEntityTagAssignmentsInterface_Create_Call{Call: _e.mock.On("Create", ctx, request)}
}

func (_c *MockEntityTagAssignmentsInterface_Create_Call) Run(run func(ctx context.Context, request catalog.CreateEntityTagAssignmentRequest)) *MockEntityTagAssignmentsInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.CreateEntityTagAssignmentRequest))
	})
	return _c
}

func (_c *MockEntityTagAssignmentsInterface_Create_Call) Return(_a0 *catalog.EntityTagAssignment, _a1 error) *MockEntityTagAssignmentsInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEntityTagAssignmentsInterface_Create_Call) RunAndReturn(run func(context.Context, catalog.CreateEntityTagAssignmentRequest) (*catalog.EntityTagAssignment, error)) *MockEntityTagAssignmentsInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, request
func (_m *MockEntityTagAssignmentsInterface) Delete(ctx context.Context, request catalog.DeleteEntityTagAssignmentRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.DeleteEntityTagAssignmentRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEntityTagAssignmentsInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockEntityTagAssignmentsInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.DeleteEntityTagAssignmentRequest
func (_e *MockEntityTagAssignmentsInterface_Expecter) Delete(ctx interface{}, request interface{}) *MockEntityTagAssignmentsInterface_Delete_Call {
	return &MockEntityTagAssignmentsInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, request)}
}

func (_c *MockEntityTagAssignmentsInterface_Delete_Call) Run(run func(ctx context.Context, request catalog.DeleteEntityTagAssignmentRequest)) *MockEntityTagAssignmentsInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.DeleteEntityTagAssignmentRequest))
	})
	return _c
}

func (_c *MockEntityTagAssignmentsInterface_Delete_Call) Return(_a0 error) *MockEntityTagAssignmentsInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEntityTagAssignmentsInterface_Delete_Call) RunAndReturn(run func(context.Context, catalog.DeleteEntityTagAssignmentRequest) error) *MockEntityTagAssignmentsInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, request
func (_m *MockEntityTagAssignmentsInterface) Get(ctx context.Context, request catalog.GetEntityTagAssignmentRequest) (*catalog.EntityTagAssignment, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *catalog.EntityTagAssignment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.GetEntityTagAssignmentRequest) (*catalog.EntityTagAssignment, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.GetEntityTagAssignmentRequest) *catalog.EntityTagAssignment); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.EntityTagAssignment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.GetEntityTagAssignmentRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEntityTagAssignmentsInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockEntityTagAssignmentsInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.GetEntityTagAssignmentRequest
func (_e *MockEntityTagAssignmentsInterface_Expecter) Get(ctx interface{}, request interface{}) *MockEntityTagAssignmentsInterface_Get_Call {
	return &MockEntityTagAssignmentsInterface_Get_Call{Call: _e.mock.On("Get", ctx, request)}
}

func (_c *MockEntityTagAssignmentsInterface_Get_Call) Run(run func(ctx context.Context, request catalog.GetEntityTagAssignmentRequest)) *MockEntityTagAssignmentsInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.GetEntityTagAssignmentRequest))
	})
	return _c
}

func (_c *MockEntityTagAssignmentsInterface_Get_Call) Return(_a0 *catalog.EntityTagAssignment, _a1 error) *MockEntityTagAssignmentsInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEntityTagAssignmentsInterface_Get_Call) RunAndReturn(run func(context.Context, catalog.GetEntityTagAssignmentRequest) (*catalog.EntityTagAssignment, error)) *MockEntityTagAssignmentsInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, request
func (_m *MockEntityTagAssignmentsInterface) List(ctx context.Context, request catalog.ListEntityTagAssignmentsRequest) listing.Iterator[catalog.EntityTagAssignment] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 listing.Iterator[catalog.EntityTagAssignment]
	if rf, ok := ret.Get(0).(func(context.Context, catalog.ListEntityTagAssignmentsRequest) listing.Iterator[catalog.EntityTagAssignment]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listing.Iterator[catalog.EntityTagAssignment])
		}
	}

	return r0
}

// MockEntityTagAssignmentsInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockEntityTagAssignmentsInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.ListEntityTagAssignmentsRequest
func (_e *MockEntityTagAssignmentsInterface_Expecter) List(ctx interface{}, request interface{}) *MockEntityTagAssignmentsInterface_List_Call {
	return &MockEntityTagAssignmentsInterface_List_Call{Call: _e.mock.On("List", ctx, request)}
}

func (_c *MockEntityTagAssignmentsInterface_List_Call) Run(run func(ctx context.Context, request catalog.ListEntityTagAssignmentsRequest)) *MockEntityTagAssignmentsInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.ListEntityTagAssignmentsRequest))
	})
	return _c
}

func (_c *MockEntityTagAssignmentsInterface_List_Call) Return(_a0 listing.Iterator[catalog.EntityTagAssignment]) *MockEntityTagAssignmentsInterface_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEntityTagAssignmentsInterface_List_Call) RunAndReturn(run func(context.Context, catalog.ListEntityTagAssignmentsRequest) listing.Iterator[catalog.EntityTagAssignment]) *MockEntityTagAssignmentsInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListAll provides a mock function with given fields: ctx, request
func (_m *MockEntityTagAssignmentsInterface) ListAll(ctx context.Context, request catalog.ListEntityTagAssignmentsRequest) ([]catalog.EntityTagAssignment, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListAll")
	}

	var r0 []catalog.EntityTagAssignment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.ListEntityTagAssignmentsRequest) ([]catalog.EntityTagAssignment, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.ListEntityTagAssignmentsRequest) []catalog.EntityTagAssignment); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]catalog.EntityTagAssignment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.ListEntityTagAssignmentsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEntityTagAssignmentsInterface_ListAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAll'
type MockEntityTagAssignmentsInterface_ListAll_Call struct {
	*mock.Call
}

// ListAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.ListEntityTagAssignmentsRequest
func (_e *MockEntityTagAssignmentsInterface_Expecter) ListAll(ctx interface{}, request interface{}) *MockEntityTagAssignmentsInterface_ListAll_Call {
	return &MockEntityTagAssignmentsInterface_ListAll_Call{Call: _e.mock.On("ListAll", ctx, request)}
}

func (_c *MockEntityTagAssignmentsInterface_ListAll_Call) Run(run func(ctx context.Context, request catalog.ListEntityTagAssignmentsRequest)) *MockEntityTagAssignmentsInterface_ListAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.ListEntityTagAssignmentsRequest))
	})
	return _c
}

func (_c *MockEntityTagAssignmentsInterface_ListAll_Call) Return(_a0 []catalog.EntityTagAssignment, _a1 error) *MockEntityTagAssignmentsInterface_ListAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEntityTagAssignmentsInterface_ListAll_Call) RunAndReturn(run func(context.Context, catalog.ListEntityTagAssignmentsRequest) ([]catalog.EntityTagAssignment, error)) *MockEntityTagAssignmentsInterface_ListAll_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, request
func (_m *MockEntityTagAssignmentsInterface) Update(ctx context.Context, request catalog.UpdateEntityTagAssignmentRequest) (*catalog.EntityTagAssignment, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *catalog.EntityTagAssignment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.UpdateEntityTagAssignmentRequest) (*catalog.EntityTagAssignment, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.UpdateEntityTagAssignmentRequest) *catalog.EntityTagAssignment); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.EntityTagAssignment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.UpdateEntityTagAssignmentRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEntityTagAssignmentsInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockEntityTagAssignmentsInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.UpdateEntityTagAssignmentRequest
func (_e *MockEntityTagAssignmentsInterface_Expecter) Update(ctx interface{}, request interface{}) *MockEntityTagAssignmentsInterface_Update_Call {
	return &MockEntityTagAssignmentsInterface_Update_Call{Call: _e.mock.On("Update", ctx, request)}
}

func (_c *MockEntityTagAssignmentsInterface_Update_Call) Run(run func(ctx context.Context, request catalog.UpdateEntityTagAssignmentRequest)) *MockEntityTagAssignmentsInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.UpdateEntityTagAssignmentRequest))
	})
	return _c
}

func (_c *MockEntityTagAssignmentsInterface_Update_Call) Return(_a0 *catalog.EntityTagAssignment, _a1 error) *MockEntityTagAssignmentsInterface_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEntityTagAssignmentsInterface_Update_Call) RunAndReturn(run func(context.Context, catalog.UpdateEntityTagAssignmentRequest) (*catalog.EntityTagAssignment, error)) *MockEntityTagAssignmentsInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEntityTagAssignmentsInterface creates a new instance of MockEntityTagAssignmentsInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEntityTagAssignmentsInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEntityTagAssignmentsInterface {
	mock := &MockEntityTagAssignmentsInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
