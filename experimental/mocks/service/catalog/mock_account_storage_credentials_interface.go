// Code generated by mockery v2.53.2. DO NOT EDIT.

package catalog

import (
	context "context"

	catalog "github.com/databricks/databricks-sdk-go/service/catalog"

	listing "github.com/databricks/databricks-sdk-go/listing"

	mock "github.com/stretchr/testify/mock"
)

// MockAccountStorageCredentialsInterface is an autogenerated mock type for the AccountStorageCredentialsInterface type
type MockAccountStorageCredentialsInterface struct {
	mock.Mock
}

type MockAccountStorageCredentialsInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccountStorageCredentialsInterface) EXPECT() *MockAccountStorageCredentialsInterface_Expecter {
	return &MockAccountStorageCredentialsInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, request
func (_m *MockAccountStorageCredentialsInterface) Create(ctx context.Context, request catalog.AccountsCreateStorageCredential) (*catalog.AccountsCreateStorageCredentialInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *catalog.AccountsCreateStorageCredentialInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.AccountsCreateStorageCredential) (*catalog.AccountsCreateStorageCredentialInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.AccountsCreateStorageCredential) *catalog.AccountsCreateStorageCredentialInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.AccountsCreateStorageCredentialInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.AccountsCreateStorageCredential) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountStorageCredentialsInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockAccountStorageCredentialsInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.AccountsCreateStorageCredential
func (_e *MockAccountStorageCredentialsInterface_Expecter) Create(ctx interface{}, request interface{}) *MockAccountStorageCredentialsInterface_Create_Call {
	return &MockAccountStorageCredentialsInterface_Create_Call{Call: _e.mock.On("Create", ctx, request)}
}

func (_c *MockAccountStorageCredentialsInterface_Create_Call) Run(run func(ctx context.Context, request catalog.AccountsCreateStorageCredential)) *MockAccountStorageCredentialsInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.AccountsCreateStorageCredential))
	})
	return _c
}

func (_c *MockAccountStorageCredentialsInterface_Create_Call) Return(_a0 *catalog.AccountsCreateStorageCredentialInfo, _a1 error) *MockAccountStorageCredentialsInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountStorageCredentialsInterface_Create_Call) RunAndReturn(run func(context.Context, catalog.AccountsCreateStorageCredential) (*catalog.AccountsCreateStorageCredentialInfo, error)) *MockAccountStorageCredentialsInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, request
func (_m *MockAccountStorageCredentialsInterface) Delete(ctx context.Context, request catalog.DeleteAccountStorageCredentialRequest) (*catalog.AccountsDeleteStorageCredentialResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *catalog.AccountsDeleteStorageCredentialResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.DeleteAccountStorageCredentialRequest) (*catalog.AccountsDeleteStorageCredentialResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.DeleteAccountStorageCredentialRequest) *catalog.AccountsDeleteStorageCredentialResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.AccountsDeleteStorageCredentialResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.DeleteAccountStorageCredentialRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountStorageCredentialsInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockAccountStorageCredentialsInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.DeleteAccountStorageCredentialRequest
func (_e *MockAccountStorageCredentialsInterface_Expecter) Delete(ctx interface{}, request interface{}) *MockAccountStorageCredentialsInterface_Delete_Call {
	return &MockAccountStorageCredentialsInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, request)}
}

func (_c *MockAccountStorageCredentialsInterface_Delete_Call) Run(run func(ctx context.Context, request catalog.DeleteAccountStorageCredentialRequest)) *MockAccountStorageCredentialsInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.DeleteAccountStorageCredentialRequest))
	})
	return _c
}

func (_c *MockAccountStorageCredentialsInterface_Delete_Call) Return(_a0 *catalog.AccountsDeleteStorageCredentialResponse, _a1 error) *MockAccountStorageCredentialsInterface_Delete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountStorageCredentialsInterface_Delete_Call) RunAndReturn(run func(context.Context, catalog.DeleteAccountStorageCredentialRequest) (*catalog.AccountsDeleteStorageCredentialResponse, error)) *MockAccountStorageCredentialsInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, request
func (_m *MockAccountStorageCredentialsInterface) Get(ctx context.Context, request catalog.GetAccountStorageCredentialRequest) (*catalog.AccountsStorageCredentialInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *catalog.AccountsStorageCredentialInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.GetAccountStorageCredentialRequest) (*catalog.AccountsStorageCredentialInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.GetAccountStorageCredentialRequest) *catalog.AccountsStorageCredentialInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.AccountsStorageCredentialInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.GetAccountStorageCredentialRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountStorageCredentialsInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockAccountStorageCredentialsInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.GetAccountStorageCredentialRequest
func (_e *MockAccountStorageCredentialsInterface_Expecter) Get(ctx interface{}, request interface{}) *MockAccountStorageCredentialsInterface_Get_Call {
	return &MockAccountStorageCredentialsInterface_Get_Call{Call: _e.mock.On("Get", ctx, request)}
}

func (_c *MockAccountStorageCredentialsInterface_Get_Call) Run(run func(ctx context.Context, request catalog.GetAccountStorageCredentialRequest)) *MockAccountStorageCredentialsInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.GetAccountStorageCredentialRequest))
	})
	return _c
}

func (_c *MockAccountStorageCredentialsInterface_Get_Call) Return(_a0 *catalog.AccountsStorageCredentialInfo, _a1 error) *MockAccountStorageCredentialsInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountStorageCredentialsInterface_Get_Call) RunAndReturn(run func(context.Context, catalog.GetAccountStorageCredentialRequest) (*catalog.AccountsStorageCredentialInfo, error)) *MockAccountStorageCredentialsInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, request
func (_m *MockAccountStorageCredentialsInterface) List(ctx context.Context, request catalog.ListAccountStorageCredentialsRequest) listing.Iterator[catalog.StorageCredentialInfo] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 listing.Iterator[catalog.StorageCredentialInfo]
	if rf, ok := ret.Get(0).(func(context.Context, catalog.ListAccountStorageCredentialsRequest) listing.Iterator[catalog.StorageCredentialInfo]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listing.Iterator[catalog.StorageCredentialInfo])
		}
	}

	return r0
}

// MockAccountStorageCredentialsInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockAccountStorageCredentialsInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.ListAccountStorageCredentialsRequest
func (_e *MockAccountStorageCredentialsInterface_Expecter) List(ctx interface{}, request interface{}) *MockAccountStorageCredentialsInterface_List_Call {
	return &MockAccountStorageCredentialsInterface_List_Call{Call: _e.mock.On("List", ctx, request)}
}

func (_c *MockAccountStorageCredentialsInterface_List_Call) Run(run func(ctx context.Context, request catalog.ListAccountStorageCredentialsRequest)) *MockAccountStorageCredentialsInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.ListAccountStorageCredentialsRequest))
	})
	return _c
}

func (_c *MockAccountStorageCredentialsInterface_List_Call) Return(_a0 listing.Iterator[catalog.StorageCredentialInfo]) *MockAccountStorageCredentialsInterface_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountStorageCredentialsInterface_List_Call) RunAndReturn(run func(context.Context, catalog.ListAccountStorageCredentialsRequest) listing.Iterator[catalog.StorageCredentialInfo]) *MockAccountStorageCredentialsInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListAll provides a mock function with given fields: ctx, request
func (_m *MockAccountStorageCredentialsInterface) ListAll(ctx context.Context, request catalog.ListAccountStorageCredentialsRequest) ([]catalog.StorageCredentialInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListAll")
	}

	var r0 []catalog.StorageCredentialInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.ListAccountStorageCredentialsRequest) ([]catalog.StorageCredentialInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.ListAccountStorageCredentialsRequest) []catalog.StorageCredentialInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]catalog.StorageCredentialInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.ListAccountStorageCredentialsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountStorageCredentialsInterface_ListAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAll'
type MockAccountStorageCredentialsInterface_ListAll_Call struct {
	*mock.Call
}

// ListAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.ListAccountStorageCredentialsRequest
func (_e *MockAccountStorageCredentialsInterface_Expecter) ListAll(ctx interface{}, request interface{}) *MockAccountStorageCredentialsInterface_ListAll_Call {
	return &MockAccountStorageCredentialsInterface_ListAll_Call{Call: _e.mock.On("ListAll", ctx, request)}
}

func (_c *MockAccountStorageCredentialsInterface_ListAll_Call) Run(run func(ctx context.Context, request catalog.ListAccountStorageCredentialsRequest)) *MockAccountStorageCredentialsInterface_ListAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.ListAccountStorageCredentialsRequest))
	})
	return _c
}

func (_c *MockAccountStorageCredentialsInterface_ListAll_Call) Return(_a0 []catalog.StorageCredentialInfo, _a1 error) *MockAccountStorageCredentialsInterface_ListAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountStorageCredentialsInterface_ListAll_Call) RunAndReturn(run func(context.Context, catalog.ListAccountStorageCredentialsRequest) ([]catalog.StorageCredentialInfo, error)) *MockAccountStorageCredentialsInterface_ListAll_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, request
func (_m *MockAccountStorageCredentialsInterface) Update(ctx context.Context, request catalog.AccountsUpdateStorageCredential) (*catalog.AccountsUpdateStorageCredentialResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *catalog.AccountsUpdateStorageCredentialResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.AccountsUpdateStorageCredential) (*catalog.AccountsUpdateStorageCredentialResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.AccountsUpdateStorageCredential) *catalog.AccountsUpdateStorageCredentialResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.AccountsUpdateStorageCredentialResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.AccountsUpdateStorageCredential) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountStorageCredentialsInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockAccountStorageCredentialsInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.AccountsUpdateStorageCredential
func (_e *MockAccountStorageCredentialsInterface_Expecter) Update(ctx interface{}, request interface{}) *MockAccountStorageCredentialsInterface_Update_Call {
	return &MockAccountStorageCredentialsInterface_Update_Call{Call: _e.mock.On("Update", ctx, request)}
}

func (_c *MockAccountStorageCredentialsInterface_Update_Call) Run(run func(ctx context.Context, request catalog.AccountsUpdateStorageCredential)) *MockAccountStorageCredentialsInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.AccountsUpdateStorageCredential))
	})
	return _c
}

func (_c *MockAccountStorageCredentialsInterface_Update_Call) Return(_a0 *catalog.AccountsUpdateStorageCredentialResponse, _a1 error) *MockAccountStorageCredentialsInterface_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountStorageCredentialsInterface_Update_Call) RunAndReturn(run func(context.Context, catalog.AccountsUpdateStorageCredential) (*catalog.AccountsUpdateStorageCredentialResponse, error)) *MockAccountStorageCredentialsInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAccountStorageCredentialsInterface creates a new instance of MockAccountStorageCredentialsInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccountStorageCredentialsInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccountStorageCredentialsInterface {
	mock := &MockAccountStorageCredentialsInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
