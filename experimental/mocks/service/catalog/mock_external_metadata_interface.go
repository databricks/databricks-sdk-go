// Code generated by mockery v2.53.2. DO NOT EDIT.

package catalog

import (
	context "context"

	catalog "github.com/databricks/databricks-sdk-go/service/catalog"

	listing "github.com/databricks/databricks-sdk-go/listing"

	mock "github.com/stretchr/testify/mock"
)

// MockExternalMetadataInterface is an autogenerated mock type for the ExternalMetadataInterface type
type MockExternalMetadataInterface struct {
	mock.Mock
}

type MockExternalMetadataInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExternalMetadataInterface) EXPECT() *MockExternalMetadataInterface_Expecter {
	return &MockExternalMetadataInterface_Expecter{mock: &_m.Mock}
}

// CreateExternalMetadata provides a mock function with given fields: ctx, request
func (_m *MockExternalMetadataInterface) CreateExternalMetadata(ctx context.Context, request catalog.CreateExternalMetadataRequest) (*catalog.ExternalMetadata, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateExternalMetadata")
	}

	var r0 *catalog.ExternalMetadata
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.CreateExternalMetadataRequest) (*catalog.ExternalMetadata, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.CreateExternalMetadataRequest) *catalog.ExternalMetadata); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.ExternalMetadata)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.CreateExternalMetadataRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExternalMetadataInterface_CreateExternalMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateExternalMetadata'
type MockExternalMetadataInterface_CreateExternalMetadata_Call struct {
	*mock.Call
}

// CreateExternalMetadata is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.CreateExternalMetadataRequest
func (_e *MockExternalMetadataInterface_Expecter) CreateExternalMetadata(ctx interface{}, request interface{}) *MockExternalMetadataInterface_CreateExternalMetadata_Call {
	return &MockExternalMetadataInterface_CreateExternalMetadata_Call{Call: _e.mock.On("CreateExternalMetadata", ctx, request)}
}

func (_c *MockExternalMetadataInterface_CreateExternalMetadata_Call) Run(run func(ctx context.Context, request catalog.CreateExternalMetadataRequest)) *MockExternalMetadataInterface_CreateExternalMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.CreateExternalMetadataRequest))
	})
	return _c
}

func (_c *MockExternalMetadataInterface_CreateExternalMetadata_Call) Return(_a0 *catalog.ExternalMetadata, _a1 error) *MockExternalMetadataInterface_CreateExternalMetadata_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExternalMetadataInterface_CreateExternalMetadata_Call) RunAndReturn(run func(context.Context, catalog.CreateExternalMetadataRequest) (*catalog.ExternalMetadata, error)) *MockExternalMetadataInterface_CreateExternalMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteExternalMetadata provides a mock function with given fields: ctx, request
func (_m *MockExternalMetadataInterface) DeleteExternalMetadata(ctx context.Context, request catalog.DeleteExternalMetadataRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for DeleteExternalMetadata")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.DeleteExternalMetadataRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockExternalMetadataInterface_DeleteExternalMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteExternalMetadata'
type MockExternalMetadataInterface_DeleteExternalMetadata_Call struct {
	*mock.Call
}

// DeleteExternalMetadata is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.DeleteExternalMetadataRequest
func (_e *MockExternalMetadataInterface_Expecter) DeleteExternalMetadata(ctx interface{}, request interface{}) *MockExternalMetadataInterface_DeleteExternalMetadata_Call {
	return &MockExternalMetadataInterface_DeleteExternalMetadata_Call{Call: _e.mock.On("DeleteExternalMetadata", ctx, request)}
}

func (_c *MockExternalMetadataInterface_DeleteExternalMetadata_Call) Run(run func(ctx context.Context, request catalog.DeleteExternalMetadataRequest)) *MockExternalMetadataInterface_DeleteExternalMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.DeleteExternalMetadataRequest))
	})
	return _c
}

func (_c *MockExternalMetadataInterface_DeleteExternalMetadata_Call) Return(_a0 error) *MockExternalMetadataInterface_DeleteExternalMetadata_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExternalMetadataInterface_DeleteExternalMetadata_Call) RunAndReturn(run func(context.Context, catalog.DeleteExternalMetadataRequest) error) *MockExternalMetadataInterface_DeleteExternalMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteExternalMetadataByName provides a mock function with given fields: ctx, name
func (_m *MockExternalMetadataInterface) DeleteExternalMetadataByName(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteExternalMetadataByName")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockExternalMetadataInterface_DeleteExternalMetadataByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteExternalMetadataByName'
type MockExternalMetadataInterface_DeleteExternalMetadataByName_Call struct {
	*mock.Call
}

// DeleteExternalMetadataByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockExternalMetadataInterface_Expecter) DeleteExternalMetadataByName(ctx interface{}, name interface{}) *MockExternalMetadataInterface_DeleteExternalMetadataByName_Call {
	return &MockExternalMetadataInterface_DeleteExternalMetadataByName_Call{Call: _e.mock.On("DeleteExternalMetadataByName", ctx, name)}
}

func (_c *MockExternalMetadataInterface_DeleteExternalMetadataByName_Call) Run(run func(ctx context.Context, name string)) *MockExternalMetadataInterface_DeleteExternalMetadataByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockExternalMetadataInterface_DeleteExternalMetadataByName_Call) Return(_a0 error) *MockExternalMetadataInterface_DeleteExternalMetadataByName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExternalMetadataInterface_DeleteExternalMetadataByName_Call) RunAndReturn(run func(context.Context, string) error) *MockExternalMetadataInterface_DeleteExternalMetadataByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetExternalMetadata provides a mock function with given fields: ctx, request
func (_m *MockExternalMetadataInterface) GetExternalMetadata(ctx context.Context, request catalog.GetExternalMetadataRequest) (*catalog.ExternalMetadata, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetExternalMetadata")
	}

	var r0 *catalog.ExternalMetadata
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.GetExternalMetadataRequest) (*catalog.ExternalMetadata, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.GetExternalMetadataRequest) *catalog.ExternalMetadata); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.ExternalMetadata)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.GetExternalMetadataRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExternalMetadataInterface_GetExternalMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExternalMetadata'
type MockExternalMetadataInterface_GetExternalMetadata_Call struct {
	*mock.Call
}

// GetExternalMetadata is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.GetExternalMetadataRequest
func (_e *MockExternalMetadataInterface_Expecter) GetExternalMetadata(ctx interface{}, request interface{}) *MockExternalMetadataInterface_GetExternalMetadata_Call {
	return &MockExternalMetadataInterface_GetExternalMetadata_Call{Call: _e.mock.On("GetExternalMetadata", ctx, request)}
}

func (_c *MockExternalMetadataInterface_GetExternalMetadata_Call) Run(run func(ctx context.Context, request catalog.GetExternalMetadataRequest)) *MockExternalMetadataInterface_GetExternalMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.GetExternalMetadataRequest))
	})
	return _c
}

func (_c *MockExternalMetadataInterface_GetExternalMetadata_Call) Return(_a0 *catalog.ExternalMetadata, _a1 error) *MockExternalMetadataInterface_GetExternalMetadata_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExternalMetadataInterface_GetExternalMetadata_Call) RunAndReturn(run func(context.Context, catalog.GetExternalMetadataRequest) (*catalog.ExternalMetadata, error)) *MockExternalMetadataInterface_GetExternalMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// GetExternalMetadataByName provides a mock function with given fields: ctx, name
func (_m *MockExternalMetadataInterface) GetExternalMetadataByName(ctx context.Context, name string) (*catalog.ExternalMetadata, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetExternalMetadataByName")
	}

	var r0 *catalog.ExternalMetadata
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*catalog.ExternalMetadata, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *catalog.ExternalMetadata); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.ExternalMetadata)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExternalMetadataInterface_GetExternalMetadataByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExternalMetadataByName'
type MockExternalMetadataInterface_GetExternalMetadataByName_Call struct {
	*mock.Call
}

// GetExternalMetadataByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockExternalMetadataInterface_Expecter) GetExternalMetadataByName(ctx interface{}, name interface{}) *MockExternalMetadataInterface_GetExternalMetadataByName_Call {
	return &MockExternalMetadataInterface_GetExternalMetadataByName_Call{Call: _e.mock.On("GetExternalMetadataByName", ctx, name)}
}

func (_c *MockExternalMetadataInterface_GetExternalMetadataByName_Call) Run(run func(ctx context.Context, name string)) *MockExternalMetadataInterface_GetExternalMetadataByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockExternalMetadataInterface_GetExternalMetadataByName_Call) Return(_a0 *catalog.ExternalMetadata, _a1 error) *MockExternalMetadataInterface_GetExternalMetadataByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExternalMetadataInterface_GetExternalMetadataByName_Call) RunAndReturn(run func(context.Context, string) (*catalog.ExternalMetadata, error)) *MockExternalMetadataInterface_GetExternalMetadataByName_Call {
	_c.Call.Return(run)
	return _c
}

// ListExternalMetadata provides a mock function with given fields: ctx, request
func (_m *MockExternalMetadataInterface) ListExternalMetadata(ctx context.Context, request catalog.ListExternalMetadataRequest) listing.Iterator[catalog.ExternalMetadata] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListExternalMetadata")
	}

	var r0 listing.Iterator[catalog.ExternalMetadata]
	if rf, ok := ret.Get(0).(func(context.Context, catalog.ListExternalMetadataRequest) listing.Iterator[catalog.ExternalMetadata]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listing.Iterator[catalog.ExternalMetadata])
		}
	}

	return r0
}

// MockExternalMetadataInterface_ListExternalMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListExternalMetadata'
type MockExternalMetadataInterface_ListExternalMetadata_Call struct {
	*mock.Call
}

// ListExternalMetadata is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.ListExternalMetadataRequest
func (_e *MockExternalMetadataInterface_Expecter) ListExternalMetadata(ctx interface{}, request interface{}) *MockExternalMetadataInterface_ListExternalMetadata_Call {
	return &MockExternalMetadataInterface_ListExternalMetadata_Call{Call: _e.mock.On("ListExternalMetadata", ctx, request)}
}

func (_c *MockExternalMetadataInterface_ListExternalMetadata_Call) Run(run func(ctx context.Context, request catalog.ListExternalMetadataRequest)) *MockExternalMetadataInterface_ListExternalMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.ListExternalMetadataRequest))
	})
	return _c
}

func (_c *MockExternalMetadataInterface_ListExternalMetadata_Call) Return(_a0 listing.Iterator[catalog.ExternalMetadata]) *MockExternalMetadataInterface_ListExternalMetadata_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExternalMetadataInterface_ListExternalMetadata_Call) RunAndReturn(run func(context.Context, catalog.ListExternalMetadataRequest) listing.Iterator[catalog.ExternalMetadata]) *MockExternalMetadataInterface_ListExternalMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// ListExternalMetadataAll provides a mock function with given fields: ctx, request
func (_m *MockExternalMetadataInterface) ListExternalMetadataAll(ctx context.Context, request catalog.ListExternalMetadataRequest) ([]catalog.ExternalMetadata, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListExternalMetadataAll")
	}

	var r0 []catalog.ExternalMetadata
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.ListExternalMetadataRequest) ([]catalog.ExternalMetadata, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.ListExternalMetadataRequest) []catalog.ExternalMetadata); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]catalog.ExternalMetadata)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.ListExternalMetadataRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExternalMetadataInterface_ListExternalMetadataAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListExternalMetadataAll'
type MockExternalMetadataInterface_ListExternalMetadataAll_Call struct {
	*mock.Call
}

// ListExternalMetadataAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.ListExternalMetadataRequest
func (_e *MockExternalMetadataInterface_Expecter) ListExternalMetadataAll(ctx interface{}, request interface{}) *MockExternalMetadataInterface_ListExternalMetadataAll_Call {
	return &MockExternalMetadataInterface_ListExternalMetadataAll_Call{Call: _e.mock.On("ListExternalMetadataAll", ctx, request)}
}

func (_c *MockExternalMetadataInterface_ListExternalMetadataAll_Call) Run(run func(ctx context.Context, request catalog.ListExternalMetadataRequest)) *MockExternalMetadataInterface_ListExternalMetadataAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.ListExternalMetadataRequest))
	})
	return _c
}

func (_c *MockExternalMetadataInterface_ListExternalMetadataAll_Call) Return(_a0 []catalog.ExternalMetadata, _a1 error) *MockExternalMetadataInterface_ListExternalMetadataAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExternalMetadataInterface_ListExternalMetadataAll_Call) RunAndReturn(run func(context.Context, catalog.ListExternalMetadataRequest) ([]catalog.ExternalMetadata, error)) *MockExternalMetadataInterface_ListExternalMetadataAll_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateExternalMetadata provides a mock function with given fields: ctx, request
func (_m *MockExternalMetadataInterface) UpdateExternalMetadata(ctx context.Context, request catalog.UpdateExternalMetadataRequest) (*catalog.ExternalMetadata, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateExternalMetadata")
	}

	var r0 *catalog.ExternalMetadata
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.UpdateExternalMetadataRequest) (*catalog.ExternalMetadata, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.UpdateExternalMetadataRequest) *catalog.ExternalMetadata); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.ExternalMetadata)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.UpdateExternalMetadataRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExternalMetadataInterface_UpdateExternalMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateExternalMetadata'
type MockExternalMetadataInterface_UpdateExternalMetadata_Call struct {
	*mock.Call
}

// UpdateExternalMetadata is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.UpdateExternalMetadataRequest
func (_e *MockExternalMetadataInterface_Expecter) UpdateExternalMetadata(ctx interface{}, request interface{}) *MockExternalMetadataInterface_UpdateExternalMetadata_Call {
	return &MockExternalMetadataInterface_UpdateExternalMetadata_Call{Call: _e.mock.On("UpdateExternalMetadata", ctx, request)}
}

func (_c *MockExternalMetadataInterface_UpdateExternalMetadata_Call) Run(run func(ctx context.Context, request catalog.UpdateExternalMetadataRequest)) *MockExternalMetadataInterface_UpdateExternalMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.UpdateExternalMetadataRequest))
	})
	return _c
}

func (_c *MockExternalMetadataInterface_UpdateExternalMetadata_Call) Return(_a0 *catalog.ExternalMetadata, _a1 error) *MockExternalMetadataInterface_UpdateExternalMetadata_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExternalMetadataInterface_UpdateExternalMetadata_Call) RunAndReturn(run func(context.Context, catalog.UpdateExternalMetadataRequest) (*catalog.ExternalMetadata, error)) *MockExternalMetadataInterface_UpdateExternalMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockExternalMetadataInterface creates a new instance of MockExternalMetadataInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExternalMetadataInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExternalMetadataInterface {
	mock := &MockExternalMetadataInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
