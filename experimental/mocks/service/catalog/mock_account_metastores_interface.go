// Code generated by mockery v2.53.2. DO NOT EDIT.

package catalog

import (
	context "context"

	catalog "github.com/databricks/databricks-sdk-go/service/catalog"

	listing "github.com/databricks/databricks-sdk-go/listing"

	mock "github.com/stretchr/testify/mock"
)

// MockAccountMetastoresInterface is an autogenerated mock type for the AccountMetastoresInterface type
type MockAccountMetastoresInterface struct {
	mock.Mock
}

type MockAccountMetastoresInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccountMetastoresInterface) EXPECT() *MockAccountMetastoresInterface_Expecter {
	return &MockAccountMetastoresInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, request
func (_m *MockAccountMetastoresInterface) Create(ctx context.Context, request catalog.AccountsCreateMetastore) (*catalog.AccountsCreateMetastoreResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *catalog.AccountsCreateMetastoreResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.AccountsCreateMetastore) (*catalog.AccountsCreateMetastoreResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.AccountsCreateMetastore) *catalog.AccountsCreateMetastoreResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.AccountsCreateMetastoreResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.AccountsCreateMetastore) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountMetastoresInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockAccountMetastoresInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.AccountsCreateMetastore
func (_e *MockAccountMetastoresInterface_Expecter) Create(ctx interface{}, request interface{}) *MockAccountMetastoresInterface_Create_Call {
	return &MockAccountMetastoresInterface_Create_Call{Call: _e.mock.On("Create", ctx, request)}
}

func (_c *MockAccountMetastoresInterface_Create_Call) Run(run func(ctx context.Context, request catalog.AccountsCreateMetastore)) *MockAccountMetastoresInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.AccountsCreateMetastore))
	})
	return _c
}

func (_c *MockAccountMetastoresInterface_Create_Call) Return(_a0 *catalog.AccountsCreateMetastoreResponse, _a1 error) *MockAccountMetastoresInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountMetastoresInterface_Create_Call) RunAndReturn(run func(context.Context, catalog.AccountsCreateMetastore) (*catalog.AccountsCreateMetastoreResponse, error)) *MockAccountMetastoresInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, request
func (_m *MockAccountMetastoresInterface) Delete(ctx context.Context, request catalog.DeleteAccountMetastoreRequest) (*catalog.AccountsDeleteMetastoreResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *catalog.AccountsDeleteMetastoreResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.DeleteAccountMetastoreRequest) (*catalog.AccountsDeleteMetastoreResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.DeleteAccountMetastoreRequest) *catalog.AccountsDeleteMetastoreResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.AccountsDeleteMetastoreResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.DeleteAccountMetastoreRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountMetastoresInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockAccountMetastoresInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.DeleteAccountMetastoreRequest
func (_e *MockAccountMetastoresInterface_Expecter) Delete(ctx interface{}, request interface{}) *MockAccountMetastoresInterface_Delete_Call {
	return &MockAccountMetastoresInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, request)}
}

func (_c *MockAccountMetastoresInterface_Delete_Call) Run(run func(ctx context.Context, request catalog.DeleteAccountMetastoreRequest)) *MockAccountMetastoresInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.DeleteAccountMetastoreRequest))
	})
	return _c
}

func (_c *MockAccountMetastoresInterface_Delete_Call) Return(_a0 *catalog.AccountsDeleteMetastoreResponse, _a1 error) *MockAccountMetastoresInterface_Delete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountMetastoresInterface_Delete_Call) RunAndReturn(run func(context.Context, catalog.DeleteAccountMetastoreRequest) (*catalog.AccountsDeleteMetastoreResponse, error)) *MockAccountMetastoresInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, request
func (_m *MockAccountMetastoresInterface) Get(ctx context.Context, request catalog.GetAccountMetastoreRequest) (*catalog.AccountsGetMetastoreResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *catalog.AccountsGetMetastoreResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.GetAccountMetastoreRequest) (*catalog.AccountsGetMetastoreResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.GetAccountMetastoreRequest) *catalog.AccountsGetMetastoreResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.AccountsGetMetastoreResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.GetAccountMetastoreRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountMetastoresInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockAccountMetastoresInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.GetAccountMetastoreRequest
func (_e *MockAccountMetastoresInterface_Expecter) Get(ctx interface{}, request interface{}) *MockAccountMetastoresInterface_Get_Call {
	return &MockAccountMetastoresInterface_Get_Call{Call: _e.mock.On("Get", ctx, request)}
}

func (_c *MockAccountMetastoresInterface_Get_Call) Run(run func(ctx context.Context, request catalog.GetAccountMetastoreRequest)) *MockAccountMetastoresInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.GetAccountMetastoreRequest))
	})
	return _c
}

func (_c *MockAccountMetastoresInterface_Get_Call) Return(_a0 *catalog.AccountsGetMetastoreResponse, _a1 error) *MockAccountMetastoresInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountMetastoresInterface_Get_Call) RunAndReturn(run func(context.Context, catalog.GetAccountMetastoreRequest) (*catalog.AccountsGetMetastoreResponse, error)) *MockAccountMetastoresInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx
func (_m *MockAccountMetastoresInterface) List(ctx context.Context) listing.Iterator[catalog.MetastoreInfo] {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 listing.Iterator[catalog.MetastoreInfo]
	if rf, ok := ret.Get(0).(func(context.Context) listing.Iterator[catalog.MetastoreInfo]); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listing.Iterator[catalog.MetastoreInfo])
		}
	}

	return r0
}

// MockAccountMetastoresInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockAccountMetastoresInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAccountMetastoresInterface_Expecter) List(ctx interface{}) *MockAccountMetastoresInterface_List_Call {
	return &MockAccountMetastoresInterface_List_Call{Call: _e.mock.On("List", ctx)}
}

func (_c *MockAccountMetastoresInterface_List_Call) Run(run func(ctx context.Context)) *MockAccountMetastoresInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockAccountMetastoresInterface_List_Call) Return(_a0 listing.Iterator[catalog.MetastoreInfo]) *MockAccountMetastoresInterface_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountMetastoresInterface_List_Call) RunAndReturn(run func(context.Context) listing.Iterator[catalog.MetastoreInfo]) *MockAccountMetastoresInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListAll provides a mock function with given fields: ctx
func (_m *MockAccountMetastoresInterface) ListAll(ctx context.Context) ([]catalog.MetastoreInfo, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListAll")
	}

	var r0 []catalog.MetastoreInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]catalog.MetastoreInfo, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []catalog.MetastoreInfo); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]catalog.MetastoreInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountMetastoresInterface_ListAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAll'
type MockAccountMetastoresInterface_ListAll_Call struct {
	*mock.Call
}

// ListAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAccountMetastoresInterface_Expecter) ListAll(ctx interface{}) *MockAccountMetastoresInterface_ListAll_Call {
	return &MockAccountMetastoresInterface_ListAll_Call{Call: _e.mock.On("ListAll", ctx)}
}

func (_c *MockAccountMetastoresInterface_ListAll_Call) Run(run func(ctx context.Context)) *MockAccountMetastoresInterface_ListAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockAccountMetastoresInterface_ListAll_Call) Return(_a0 []catalog.MetastoreInfo, _a1 error) *MockAccountMetastoresInterface_ListAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountMetastoresInterface_ListAll_Call) RunAndReturn(run func(context.Context) ([]catalog.MetastoreInfo, error)) *MockAccountMetastoresInterface_ListAll_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, request
func (_m *MockAccountMetastoresInterface) Update(ctx context.Context, request catalog.AccountsUpdateMetastore) (*catalog.AccountsUpdateMetastoreResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *catalog.AccountsUpdateMetastoreResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.AccountsUpdateMetastore) (*catalog.AccountsUpdateMetastoreResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.AccountsUpdateMetastore) *catalog.AccountsUpdateMetastoreResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.AccountsUpdateMetastoreResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.AccountsUpdateMetastore) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountMetastoresInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockAccountMetastoresInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.AccountsUpdateMetastore
func (_e *MockAccountMetastoresInterface_Expecter) Update(ctx interface{}, request interface{}) *MockAccountMetastoresInterface_Update_Call {
	return &MockAccountMetastoresInterface_Update_Call{Call: _e.mock.On("Update", ctx, request)}
}

func (_c *MockAccountMetastoresInterface_Update_Call) Run(run func(ctx context.Context, request catalog.AccountsUpdateMetastore)) *MockAccountMetastoresInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.AccountsUpdateMetastore))
	})
	return _c
}

func (_c *MockAccountMetastoresInterface_Update_Call) Return(_a0 *catalog.AccountsUpdateMetastoreResponse, _a1 error) *MockAccountMetastoresInterface_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountMetastoresInterface_Update_Call) RunAndReturn(run func(context.Context, catalog.AccountsUpdateMetastore) (*catalog.AccountsUpdateMetastoreResponse, error)) *MockAccountMetastoresInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAccountMetastoresInterface creates a new instance of MockAccountMetastoresInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccountMetastoresInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccountMetastoresInterface {
	mock := &MockAccountMetastoresInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
