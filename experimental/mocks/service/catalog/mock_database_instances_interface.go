// Code generated by mockery v2.53.2. DO NOT EDIT.

package catalog

import (
	context "context"

	catalog "github.com/databricks/databricks-sdk-go/service/catalog"

	listing "github.com/databricks/databricks-sdk-go/listing"

	mock "github.com/stretchr/testify/mock"
)

// MockDatabaseInstancesInterface is an autogenerated mock type for the DatabaseInstancesInterface type
type MockDatabaseInstancesInterface struct {
	mock.Mock
}

type MockDatabaseInstancesInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDatabaseInstancesInterface) EXPECT() *MockDatabaseInstancesInterface_Expecter {
	return &MockDatabaseInstancesInterface_Expecter{mock: &_m.Mock}
}

// CreateDatabaseCatalog provides a mock function with given fields: ctx, request
func (_m *MockDatabaseInstancesInterface) CreateDatabaseCatalog(ctx context.Context, request catalog.CreateDatabaseCatalogRequest) (*catalog.DatabaseCatalog, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateDatabaseCatalog")
	}

	var r0 *catalog.DatabaseCatalog
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.CreateDatabaseCatalogRequest) (*catalog.DatabaseCatalog, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.CreateDatabaseCatalogRequest) *catalog.DatabaseCatalog); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.DatabaseCatalog)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.CreateDatabaseCatalogRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabaseInstancesInterface_CreateDatabaseCatalog_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDatabaseCatalog'
type MockDatabaseInstancesInterface_CreateDatabaseCatalog_Call struct {
	*mock.Call
}

// CreateDatabaseCatalog is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.CreateDatabaseCatalogRequest
func (_e *MockDatabaseInstancesInterface_Expecter) CreateDatabaseCatalog(ctx interface{}, request interface{}) *MockDatabaseInstancesInterface_CreateDatabaseCatalog_Call {
	return &MockDatabaseInstancesInterface_CreateDatabaseCatalog_Call{Call: _e.mock.On("CreateDatabaseCatalog", ctx, request)}
}

func (_c *MockDatabaseInstancesInterface_CreateDatabaseCatalog_Call) Run(run func(ctx context.Context, request catalog.CreateDatabaseCatalogRequest)) *MockDatabaseInstancesInterface_CreateDatabaseCatalog_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.CreateDatabaseCatalogRequest))
	})
	return _c
}

func (_c *MockDatabaseInstancesInterface_CreateDatabaseCatalog_Call) Return(_a0 *catalog.DatabaseCatalog, _a1 error) *MockDatabaseInstancesInterface_CreateDatabaseCatalog_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabaseInstancesInterface_CreateDatabaseCatalog_Call) RunAndReturn(run func(context.Context, catalog.CreateDatabaseCatalogRequest) (*catalog.DatabaseCatalog, error)) *MockDatabaseInstancesInterface_CreateDatabaseCatalog_Call {
	_c.Call.Return(run)
	return _c
}

// CreateDatabaseInstance provides a mock function with given fields: ctx, request
func (_m *MockDatabaseInstancesInterface) CreateDatabaseInstance(ctx context.Context, request catalog.CreateDatabaseInstanceRequest) (*catalog.DatabaseInstance, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateDatabaseInstance")
	}

	var r0 *catalog.DatabaseInstance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.CreateDatabaseInstanceRequest) (*catalog.DatabaseInstance, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.CreateDatabaseInstanceRequest) *catalog.DatabaseInstance); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.DatabaseInstance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.CreateDatabaseInstanceRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabaseInstancesInterface_CreateDatabaseInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDatabaseInstance'
type MockDatabaseInstancesInterface_CreateDatabaseInstance_Call struct {
	*mock.Call
}

// CreateDatabaseInstance is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.CreateDatabaseInstanceRequest
func (_e *MockDatabaseInstancesInterface_Expecter) CreateDatabaseInstance(ctx interface{}, request interface{}) *MockDatabaseInstancesInterface_CreateDatabaseInstance_Call {
	return &MockDatabaseInstancesInterface_CreateDatabaseInstance_Call{Call: _e.mock.On("CreateDatabaseInstance", ctx, request)}
}

func (_c *MockDatabaseInstancesInterface_CreateDatabaseInstance_Call) Run(run func(ctx context.Context, request catalog.CreateDatabaseInstanceRequest)) *MockDatabaseInstancesInterface_CreateDatabaseInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.CreateDatabaseInstanceRequest))
	})
	return _c
}

func (_c *MockDatabaseInstancesInterface_CreateDatabaseInstance_Call) Return(_a0 *catalog.DatabaseInstance, _a1 error) *MockDatabaseInstancesInterface_CreateDatabaseInstance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabaseInstancesInterface_CreateDatabaseInstance_Call) RunAndReturn(run func(context.Context, catalog.CreateDatabaseInstanceRequest) (*catalog.DatabaseInstance, error)) *MockDatabaseInstancesInterface_CreateDatabaseInstance_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSyncedDatabaseTable provides a mock function with given fields: ctx, request
func (_m *MockDatabaseInstancesInterface) CreateSyncedDatabaseTable(ctx context.Context, request catalog.CreateSyncedDatabaseTableRequest) (*catalog.SyncedDatabaseTable, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateSyncedDatabaseTable")
	}

	var r0 *catalog.SyncedDatabaseTable
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.CreateSyncedDatabaseTableRequest) (*catalog.SyncedDatabaseTable, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.CreateSyncedDatabaseTableRequest) *catalog.SyncedDatabaseTable); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.SyncedDatabaseTable)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.CreateSyncedDatabaseTableRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabaseInstancesInterface_CreateSyncedDatabaseTable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSyncedDatabaseTable'
type MockDatabaseInstancesInterface_CreateSyncedDatabaseTable_Call struct {
	*mock.Call
}

// CreateSyncedDatabaseTable is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.CreateSyncedDatabaseTableRequest
func (_e *MockDatabaseInstancesInterface_Expecter) CreateSyncedDatabaseTable(ctx interface{}, request interface{}) *MockDatabaseInstancesInterface_CreateSyncedDatabaseTable_Call {
	return &MockDatabaseInstancesInterface_CreateSyncedDatabaseTable_Call{Call: _e.mock.On("CreateSyncedDatabaseTable", ctx, request)}
}

func (_c *MockDatabaseInstancesInterface_CreateSyncedDatabaseTable_Call) Run(run func(ctx context.Context, request catalog.CreateSyncedDatabaseTableRequest)) *MockDatabaseInstancesInterface_CreateSyncedDatabaseTable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.CreateSyncedDatabaseTableRequest))
	})
	return _c
}

func (_c *MockDatabaseInstancesInterface_CreateSyncedDatabaseTable_Call) Return(_a0 *catalog.SyncedDatabaseTable, _a1 error) *MockDatabaseInstancesInterface_CreateSyncedDatabaseTable_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabaseInstancesInterface_CreateSyncedDatabaseTable_Call) RunAndReturn(run func(context.Context, catalog.CreateSyncedDatabaseTableRequest) (*catalog.SyncedDatabaseTable, error)) *MockDatabaseInstancesInterface_CreateSyncedDatabaseTable_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDatabaseCatalog provides a mock function with given fields: ctx, request
func (_m *MockDatabaseInstancesInterface) DeleteDatabaseCatalog(ctx context.Context, request catalog.DeleteDatabaseCatalogRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDatabaseCatalog")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.DeleteDatabaseCatalogRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabaseInstancesInterface_DeleteDatabaseCatalog_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDatabaseCatalog'
type MockDatabaseInstancesInterface_DeleteDatabaseCatalog_Call struct {
	*mock.Call
}

// DeleteDatabaseCatalog is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.DeleteDatabaseCatalogRequest
func (_e *MockDatabaseInstancesInterface_Expecter) DeleteDatabaseCatalog(ctx interface{}, request interface{}) *MockDatabaseInstancesInterface_DeleteDatabaseCatalog_Call {
	return &MockDatabaseInstancesInterface_DeleteDatabaseCatalog_Call{Call: _e.mock.On("DeleteDatabaseCatalog", ctx, request)}
}

func (_c *MockDatabaseInstancesInterface_DeleteDatabaseCatalog_Call) Run(run func(ctx context.Context, request catalog.DeleteDatabaseCatalogRequest)) *MockDatabaseInstancesInterface_DeleteDatabaseCatalog_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.DeleteDatabaseCatalogRequest))
	})
	return _c
}

func (_c *MockDatabaseInstancesInterface_DeleteDatabaseCatalog_Call) Return(_a0 error) *MockDatabaseInstancesInterface_DeleteDatabaseCatalog_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabaseInstancesInterface_DeleteDatabaseCatalog_Call) RunAndReturn(run func(context.Context, catalog.DeleteDatabaseCatalogRequest) error) *MockDatabaseInstancesInterface_DeleteDatabaseCatalog_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDatabaseCatalogByName provides a mock function with given fields: ctx, name
func (_m *MockDatabaseInstancesInterface) DeleteDatabaseCatalogByName(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDatabaseCatalogByName")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabaseInstancesInterface_DeleteDatabaseCatalogByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDatabaseCatalogByName'
type MockDatabaseInstancesInterface_DeleteDatabaseCatalogByName_Call struct {
	*mock.Call
}

// DeleteDatabaseCatalogByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockDatabaseInstancesInterface_Expecter) DeleteDatabaseCatalogByName(ctx interface{}, name interface{}) *MockDatabaseInstancesInterface_DeleteDatabaseCatalogByName_Call {
	return &MockDatabaseInstancesInterface_DeleteDatabaseCatalogByName_Call{Call: _e.mock.On("DeleteDatabaseCatalogByName", ctx, name)}
}

func (_c *MockDatabaseInstancesInterface_DeleteDatabaseCatalogByName_Call) Run(run func(ctx context.Context, name string)) *MockDatabaseInstancesInterface_DeleteDatabaseCatalogByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDatabaseInstancesInterface_DeleteDatabaseCatalogByName_Call) Return(_a0 error) *MockDatabaseInstancesInterface_DeleteDatabaseCatalogByName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabaseInstancesInterface_DeleteDatabaseCatalogByName_Call) RunAndReturn(run func(context.Context, string) error) *MockDatabaseInstancesInterface_DeleteDatabaseCatalogByName_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDatabaseInstance provides a mock function with given fields: ctx, request
func (_m *MockDatabaseInstancesInterface) DeleteDatabaseInstance(ctx context.Context, request catalog.DeleteDatabaseInstanceRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDatabaseInstance")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.DeleteDatabaseInstanceRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabaseInstancesInterface_DeleteDatabaseInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDatabaseInstance'
type MockDatabaseInstancesInterface_DeleteDatabaseInstance_Call struct {
	*mock.Call
}

// DeleteDatabaseInstance is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.DeleteDatabaseInstanceRequest
func (_e *MockDatabaseInstancesInterface_Expecter) DeleteDatabaseInstance(ctx interface{}, request interface{}) *MockDatabaseInstancesInterface_DeleteDatabaseInstance_Call {
	return &MockDatabaseInstancesInterface_DeleteDatabaseInstance_Call{Call: _e.mock.On("DeleteDatabaseInstance", ctx, request)}
}

func (_c *MockDatabaseInstancesInterface_DeleteDatabaseInstance_Call) Run(run func(ctx context.Context, request catalog.DeleteDatabaseInstanceRequest)) *MockDatabaseInstancesInterface_DeleteDatabaseInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.DeleteDatabaseInstanceRequest))
	})
	return _c
}

func (_c *MockDatabaseInstancesInterface_DeleteDatabaseInstance_Call) Return(_a0 error) *MockDatabaseInstancesInterface_DeleteDatabaseInstance_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabaseInstancesInterface_DeleteDatabaseInstance_Call) RunAndReturn(run func(context.Context, catalog.DeleteDatabaseInstanceRequest) error) *MockDatabaseInstancesInterface_DeleteDatabaseInstance_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDatabaseInstanceByName provides a mock function with given fields: ctx, name
func (_m *MockDatabaseInstancesInterface) DeleteDatabaseInstanceByName(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDatabaseInstanceByName")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabaseInstancesInterface_DeleteDatabaseInstanceByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDatabaseInstanceByName'
type MockDatabaseInstancesInterface_DeleteDatabaseInstanceByName_Call struct {
	*mock.Call
}

// DeleteDatabaseInstanceByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockDatabaseInstancesInterface_Expecter) DeleteDatabaseInstanceByName(ctx interface{}, name interface{}) *MockDatabaseInstancesInterface_DeleteDatabaseInstanceByName_Call {
	return &MockDatabaseInstancesInterface_DeleteDatabaseInstanceByName_Call{Call: _e.mock.On("DeleteDatabaseInstanceByName", ctx, name)}
}

func (_c *MockDatabaseInstancesInterface_DeleteDatabaseInstanceByName_Call) Run(run func(ctx context.Context, name string)) *MockDatabaseInstancesInterface_DeleteDatabaseInstanceByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDatabaseInstancesInterface_DeleteDatabaseInstanceByName_Call) Return(_a0 error) *MockDatabaseInstancesInterface_DeleteDatabaseInstanceByName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabaseInstancesInterface_DeleteDatabaseInstanceByName_Call) RunAndReturn(run func(context.Context, string) error) *MockDatabaseInstancesInterface_DeleteDatabaseInstanceByName_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSyncedDatabaseTable provides a mock function with given fields: ctx, request
func (_m *MockDatabaseInstancesInterface) DeleteSyncedDatabaseTable(ctx context.Context, request catalog.DeleteSyncedDatabaseTableRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSyncedDatabaseTable")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.DeleteSyncedDatabaseTableRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabaseInstancesInterface_DeleteSyncedDatabaseTable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSyncedDatabaseTable'
type MockDatabaseInstancesInterface_DeleteSyncedDatabaseTable_Call struct {
	*mock.Call
}

// DeleteSyncedDatabaseTable is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.DeleteSyncedDatabaseTableRequest
func (_e *MockDatabaseInstancesInterface_Expecter) DeleteSyncedDatabaseTable(ctx interface{}, request interface{}) *MockDatabaseInstancesInterface_DeleteSyncedDatabaseTable_Call {
	return &MockDatabaseInstancesInterface_DeleteSyncedDatabaseTable_Call{Call: _e.mock.On("DeleteSyncedDatabaseTable", ctx, request)}
}

func (_c *MockDatabaseInstancesInterface_DeleteSyncedDatabaseTable_Call) Run(run func(ctx context.Context, request catalog.DeleteSyncedDatabaseTableRequest)) *MockDatabaseInstancesInterface_DeleteSyncedDatabaseTable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.DeleteSyncedDatabaseTableRequest))
	})
	return _c
}

func (_c *MockDatabaseInstancesInterface_DeleteSyncedDatabaseTable_Call) Return(_a0 error) *MockDatabaseInstancesInterface_DeleteSyncedDatabaseTable_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabaseInstancesInterface_DeleteSyncedDatabaseTable_Call) RunAndReturn(run func(context.Context, catalog.DeleteSyncedDatabaseTableRequest) error) *MockDatabaseInstancesInterface_DeleteSyncedDatabaseTable_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSyncedDatabaseTableByName provides a mock function with given fields: ctx, name
func (_m *MockDatabaseInstancesInterface) DeleteSyncedDatabaseTableByName(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSyncedDatabaseTableByName")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabaseInstancesInterface_DeleteSyncedDatabaseTableByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSyncedDatabaseTableByName'
type MockDatabaseInstancesInterface_DeleteSyncedDatabaseTableByName_Call struct {
	*mock.Call
}

// DeleteSyncedDatabaseTableByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockDatabaseInstancesInterface_Expecter) DeleteSyncedDatabaseTableByName(ctx interface{}, name interface{}) *MockDatabaseInstancesInterface_DeleteSyncedDatabaseTableByName_Call {
	return &MockDatabaseInstancesInterface_DeleteSyncedDatabaseTableByName_Call{Call: _e.mock.On("DeleteSyncedDatabaseTableByName", ctx, name)}
}

func (_c *MockDatabaseInstancesInterface_DeleteSyncedDatabaseTableByName_Call) Run(run func(ctx context.Context, name string)) *MockDatabaseInstancesInterface_DeleteSyncedDatabaseTableByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDatabaseInstancesInterface_DeleteSyncedDatabaseTableByName_Call) Return(_a0 error) *MockDatabaseInstancesInterface_DeleteSyncedDatabaseTableByName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabaseInstancesInterface_DeleteSyncedDatabaseTableByName_Call) RunAndReturn(run func(context.Context, string) error) *MockDatabaseInstancesInterface_DeleteSyncedDatabaseTableByName_Call {
	_c.Call.Return(run)
	return _c
}

// FindDatabaseInstanceByUid provides a mock function with given fields: ctx, request
func (_m *MockDatabaseInstancesInterface) FindDatabaseInstanceByUid(ctx context.Context, request catalog.FindDatabaseInstanceByUidRequest) (*catalog.DatabaseInstance, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for FindDatabaseInstanceByUid")
	}

	var r0 *catalog.DatabaseInstance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.FindDatabaseInstanceByUidRequest) (*catalog.DatabaseInstance, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.FindDatabaseInstanceByUidRequest) *catalog.DatabaseInstance); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.DatabaseInstance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.FindDatabaseInstanceByUidRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabaseInstancesInterface_FindDatabaseInstanceByUid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindDatabaseInstanceByUid'
type MockDatabaseInstancesInterface_FindDatabaseInstanceByUid_Call struct {
	*mock.Call
}

// FindDatabaseInstanceByUid is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.FindDatabaseInstanceByUidRequest
func (_e *MockDatabaseInstancesInterface_Expecter) FindDatabaseInstanceByUid(ctx interface{}, request interface{}) *MockDatabaseInstancesInterface_FindDatabaseInstanceByUid_Call {
	return &MockDatabaseInstancesInterface_FindDatabaseInstanceByUid_Call{Call: _e.mock.On("FindDatabaseInstanceByUid", ctx, request)}
}

func (_c *MockDatabaseInstancesInterface_FindDatabaseInstanceByUid_Call) Run(run func(ctx context.Context, request catalog.FindDatabaseInstanceByUidRequest)) *MockDatabaseInstancesInterface_FindDatabaseInstanceByUid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.FindDatabaseInstanceByUidRequest))
	})
	return _c
}

func (_c *MockDatabaseInstancesInterface_FindDatabaseInstanceByUid_Call) Return(_a0 *catalog.DatabaseInstance, _a1 error) *MockDatabaseInstancesInterface_FindDatabaseInstanceByUid_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabaseInstancesInterface_FindDatabaseInstanceByUid_Call) RunAndReturn(run func(context.Context, catalog.FindDatabaseInstanceByUidRequest) (*catalog.DatabaseInstance, error)) *MockDatabaseInstancesInterface_FindDatabaseInstanceByUid_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatabaseCatalog provides a mock function with given fields: ctx, request
func (_m *MockDatabaseInstancesInterface) GetDatabaseCatalog(ctx context.Context, request catalog.GetDatabaseCatalogRequest) (*catalog.DatabaseCatalog, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetDatabaseCatalog")
	}

	var r0 *catalog.DatabaseCatalog
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.GetDatabaseCatalogRequest) (*catalog.DatabaseCatalog, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.GetDatabaseCatalogRequest) *catalog.DatabaseCatalog); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.DatabaseCatalog)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.GetDatabaseCatalogRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabaseInstancesInterface_GetDatabaseCatalog_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatabaseCatalog'
type MockDatabaseInstancesInterface_GetDatabaseCatalog_Call struct {
	*mock.Call
}

// GetDatabaseCatalog is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.GetDatabaseCatalogRequest
func (_e *MockDatabaseInstancesInterface_Expecter) GetDatabaseCatalog(ctx interface{}, request interface{}) *MockDatabaseInstancesInterface_GetDatabaseCatalog_Call {
	return &MockDatabaseInstancesInterface_GetDatabaseCatalog_Call{Call: _e.mock.On("GetDatabaseCatalog", ctx, request)}
}

func (_c *MockDatabaseInstancesInterface_GetDatabaseCatalog_Call) Run(run func(ctx context.Context, request catalog.GetDatabaseCatalogRequest)) *MockDatabaseInstancesInterface_GetDatabaseCatalog_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.GetDatabaseCatalogRequest))
	})
	return _c
}

func (_c *MockDatabaseInstancesInterface_GetDatabaseCatalog_Call) Return(_a0 *catalog.DatabaseCatalog, _a1 error) *MockDatabaseInstancesInterface_GetDatabaseCatalog_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabaseInstancesInterface_GetDatabaseCatalog_Call) RunAndReturn(run func(context.Context, catalog.GetDatabaseCatalogRequest) (*catalog.DatabaseCatalog, error)) *MockDatabaseInstancesInterface_GetDatabaseCatalog_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatabaseCatalogByName provides a mock function with given fields: ctx, name
func (_m *MockDatabaseInstancesInterface) GetDatabaseCatalogByName(ctx context.Context, name string) (*catalog.DatabaseCatalog, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetDatabaseCatalogByName")
	}

	var r0 *catalog.DatabaseCatalog
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*catalog.DatabaseCatalog, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *catalog.DatabaseCatalog); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.DatabaseCatalog)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabaseInstancesInterface_GetDatabaseCatalogByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatabaseCatalogByName'
type MockDatabaseInstancesInterface_GetDatabaseCatalogByName_Call struct {
	*mock.Call
}

// GetDatabaseCatalogByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockDatabaseInstancesInterface_Expecter) GetDatabaseCatalogByName(ctx interface{}, name interface{}) *MockDatabaseInstancesInterface_GetDatabaseCatalogByName_Call {
	return &MockDatabaseInstancesInterface_GetDatabaseCatalogByName_Call{Call: _e.mock.On("GetDatabaseCatalogByName", ctx, name)}
}

func (_c *MockDatabaseInstancesInterface_GetDatabaseCatalogByName_Call) Run(run func(ctx context.Context, name string)) *MockDatabaseInstancesInterface_GetDatabaseCatalogByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDatabaseInstancesInterface_GetDatabaseCatalogByName_Call) Return(_a0 *catalog.DatabaseCatalog, _a1 error) *MockDatabaseInstancesInterface_GetDatabaseCatalogByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabaseInstancesInterface_GetDatabaseCatalogByName_Call) RunAndReturn(run func(context.Context, string) (*catalog.DatabaseCatalog, error)) *MockDatabaseInstancesInterface_GetDatabaseCatalogByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatabaseInstance provides a mock function with given fields: ctx, request
func (_m *MockDatabaseInstancesInterface) GetDatabaseInstance(ctx context.Context, request catalog.GetDatabaseInstanceRequest) (*catalog.DatabaseInstance, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetDatabaseInstance")
	}

	var r0 *catalog.DatabaseInstance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.GetDatabaseInstanceRequest) (*catalog.DatabaseInstance, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.GetDatabaseInstanceRequest) *catalog.DatabaseInstance); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.DatabaseInstance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.GetDatabaseInstanceRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabaseInstancesInterface_GetDatabaseInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatabaseInstance'
type MockDatabaseInstancesInterface_GetDatabaseInstance_Call struct {
	*mock.Call
}

// GetDatabaseInstance is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.GetDatabaseInstanceRequest
func (_e *MockDatabaseInstancesInterface_Expecter) GetDatabaseInstance(ctx interface{}, request interface{}) *MockDatabaseInstancesInterface_GetDatabaseInstance_Call {
	return &MockDatabaseInstancesInterface_GetDatabaseInstance_Call{Call: _e.mock.On("GetDatabaseInstance", ctx, request)}
}

func (_c *MockDatabaseInstancesInterface_GetDatabaseInstance_Call) Run(run func(ctx context.Context, request catalog.GetDatabaseInstanceRequest)) *MockDatabaseInstancesInterface_GetDatabaseInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.GetDatabaseInstanceRequest))
	})
	return _c
}

func (_c *MockDatabaseInstancesInterface_GetDatabaseInstance_Call) Return(_a0 *catalog.DatabaseInstance, _a1 error) *MockDatabaseInstancesInterface_GetDatabaseInstance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabaseInstancesInterface_GetDatabaseInstance_Call) RunAndReturn(run func(context.Context, catalog.GetDatabaseInstanceRequest) (*catalog.DatabaseInstance, error)) *MockDatabaseInstancesInterface_GetDatabaseInstance_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatabaseInstanceByName provides a mock function with given fields: ctx, name
func (_m *MockDatabaseInstancesInterface) GetDatabaseInstanceByName(ctx context.Context, name string) (*catalog.DatabaseInstance, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetDatabaseInstanceByName")
	}

	var r0 *catalog.DatabaseInstance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*catalog.DatabaseInstance, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *catalog.DatabaseInstance); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.DatabaseInstance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabaseInstancesInterface_GetDatabaseInstanceByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatabaseInstanceByName'
type MockDatabaseInstancesInterface_GetDatabaseInstanceByName_Call struct {
	*mock.Call
}

// GetDatabaseInstanceByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockDatabaseInstancesInterface_Expecter) GetDatabaseInstanceByName(ctx interface{}, name interface{}) *MockDatabaseInstancesInterface_GetDatabaseInstanceByName_Call {
	return &MockDatabaseInstancesInterface_GetDatabaseInstanceByName_Call{Call: _e.mock.On("GetDatabaseInstanceByName", ctx, name)}
}

func (_c *MockDatabaseInstancesInterface_GetDatabaseInstanceByName_Call) Run(run func(ctx context.Context, name string)) *MockDatabaseInstancesInterface_GetDatabaseInstanceByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDatabaseInstancesInterface_GetDatabaseInstanceByName_Call) Return(_a0 *catalog.DatabaseInstance, _a1 error) *MockDatabaseInstancesInterface_GetDatabaseInstanceByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabaseInstancesInterface_GetDatabaseInstanceByName_Call) RunAndReturn(run func(context.Context, string) (*catalog.DatabaseInstance, error)) *MockDatabaseInstancesInterface_GetDatabaseInstanceByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetSyncedDatabaseTable provides a mock function with given fields: ctx, request
func (_m *MockDatabaseInstancesInterface) GetSyncedDatabaseTable(ctx context.Context, request catalog.GetSyncedDatabaseTableRequest) (*catalog.SyncedDatabaseTable, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetSyncedDatabaseTable")
	}

	var r0 *catalog.SyncedDatabaseTable
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.GetSyncedDatabaseTableRequest) (*catalog.SyncedDatabaseTable, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.GetSyncedDatabaseTableRequest) *catalog.SyncedDatabaseTable); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.SyncedDatabaseTable)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.GetSyncedDatabaseTableRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabaseInstancesInterface_GetSyncedDatabaseTable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSyncedDatabaseTable'
type MockDatabaseInstancesInterface_GetSyncedDatabaseTable_Call struct {
	*mock.Call
}

// GetSyncedDatabaseTable is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.GetSyncedDatabaseTableRequest
func (_e *MockDatabaseInstancesInterface_Expecter) GetSyncedDatabaseTable(ctx interface{}, request interface{}) *MockDatabaseInstancesInterface_GetSyncedDatabaseTable_Call {
	return &MockDatabaseInstancesInterface_GetSyncedDatabaseTable_Call{Call: _e.mock.On("GetSyncedDatabaseTable", ctx, request)}
}

func (_c *MockDatabaseInstancesInterface_GetSyncedDatabaseTable_Call) Run(run func(ctx context.Context, request catalog.GetSyncedDatabaseTableRequest)) *MockDatabaseInstancesInterface_GetSyncedDatabaseTable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.GetSyncedDatabaseTableRequest))
	})
	return _c
}

func (_c *MockDatabaseInstancesInterface_GetSyncedDatabaseTable_Call) Return(_a0 *catalog.SyncedDatabaseTable, _a1 error) *MockDatabaseInstancesInterface_GetSyncedDatabaseTable_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabaseInstancesInterface_GetSyncedDatabaseTable_Call) RunAndReturn(run func(context.Context, catalog.GetSyncedDatabaseTableRequest) (*catalog.SyncedDatabaseTable, error)) *MockDatabaseInstancesInterface_GetSyncedDatabaseTable_Call {
	_c.Call.Return(run)
	return _c
}

// GetSyncedDatabaseTableByName provides a mock function with given fields: ctx, name
func (_m *MockDatabaseInstancesInterface) GetSyncedDatabaseTableByName(ctx context.Context, name string) (*catalog.SyncedDatabaseTable, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetSyncedDatabaseTableByName")
	}

	var r0 *catalog.SyncedDatabaseTable
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*catalog.SyncedDatabaseTable, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *catalog.SyncedDatabaseTable); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.SyncedDatabaseTable)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabaseInstancesInterface_GetSyncedDatabaseTableByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSyncedDatabaseTableByName'
type MockDatabaseInstancesInterface_GetSyncedDatabaseTableByName_Call struct {
	*mock.Call
}

// GetSyncedDatabaseTableByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockDatabaseInstancesInterface_Expecter) GetSyncedDatabaseTableByName(ctx interface{}, name interface{}) *MockDatabaseInstancesInterface_GetSyncedDatabaseTableByName_Call {
	return &MockDatabaseInstancesInterface_GetSyncedDatabaseTableByName_Call{Call: _e.mock.On("GetSyncedDatabaseTableByName", ctx, name)}
}

func (_c *MockDatabaseInstancesInterface_GetSyncedDatabaseTableByName_Call) Run(run func(ctx context.Context, name string)) *MockDatabaseInstancesInterface_GetSyncedDatabaseTableByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDatabaseInstancesInterface_GetSyncedDatabaseTableByName_Call) Return(_a0 *catalog.SyncedDatabaseTable, _a1 error) *MockDatabaseInstancesInterface_GetSyncedDatabaseTableByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabaseInstancesInterface_GetSyncedDatabaseTableByName_Call) RunAndReturn(run func(context.Context, string) (*catalog.SyncedDatabaseTable, error)) *MockDatabaseInstancesInterface_GetSyncedDatabaseTableByName_Call {
	_c.Call.Return(run)
	return _c
}

// ListDatabaseInstances provides a mock function with given fields: ctx, request
func (_m *MockDatabaseInstancesInterface) ListDatabaseInstances(ctx context.Context, request catalog.ListDatabaseInstancesRequest) listing.Iterator[catalog.DatabaseInstance] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListDatabaseInstances")
	}

	var r0 listing.Iterator[catalog.DatabaseInstance]
	if rf, ok := ret.Get(0).(func(context.Context, catalog.ListDatabaseInstancesRequest) listing.Iterator[catalog.DatabaseInstance]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listing.Iterator[catalog.DatabaseInstance])
		}
	}

	return r0
}

// MockDatabaseInstancesInterface_ListDatabaseInstances_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDatabaseInstances'
type MockDatabaseInstancesInterface_ListDatabaseInstances_Call struct {
	*mock.Call
}

// ListDatabaseInstances is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.ListDatabaseInstancesRequest
func (_e *MockDatabaseInstancesInterface_Expecter) ListDatabaseInstances(ctx interface{}, request interface{}) *MockDatabaseInstancesInterface_ListDatabaseInstances_Call {
	return &MockDatabaseInstancesInterface_ListDatabaseInstances_Call{Call: _e.mock.On("ListDatabaseInstances", ctx, request)}
}

func (_c *MockDatabaseInstancesInterface_ListDatabaseInstances_Call) Run(run func(ctx context.Context, request catalog.ListDatabaseInstancesRequest)) *MockDatabaseInstancesInterface_ListDatabaseInstances_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.ListDatabaseInstancesRequest))
	})
	return _c
}

func (_c *MockDatabaseInstancesInterface_ListDatabaseInstances_Call) Return(_a0 listing.Iterator[catalog.DatabaseInstance]) *MockDatabaseInstancesInterface_ListDatabaseInstances_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabaseInstancesInterface_ListDatabaseInstances_Call) RunAndReturn(run func(context.Context, catalog.ListDatabaseInstancesRequest) listing.Iterator[catalog.DatabaseInstance]) *MockDatabaseInstancesInterface_ListDatabaseInstances_Call {
	_c.Call.Return(run)
	return _c
}

// ListDatabaseInstancesAll provides a mock function with given fields: ctx, request
func (_m *MockDatabaseInstancesInterface) ListDatabaseInstancesAll(ctx context.Context, request catalog.ListDatabaseInstancesRequest) ([]catalog.DatabaseInstance, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListDatabaseInstancesAll")
	}

	var r0 []catalog.DatabaseInstance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.ListDatabaseInstancesRequest) ([]catalog.DatabaseInstance, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.ListDatabaseInstancesRequest) []catalog.DatabaseInstance); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]catalog.DatabaseInstance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.ListDatabaseInstancesRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabaseInstancesInterface_ListDatabaseInstancesAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDatabaseInstancesAll'
type MockDatabaseInstancesInterface_ListDatabaseInstancesAll_Call struct {
	*mock.Call
}

// ListDatabaseInstancesAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.ListDatabaseInstancesRequest
func (_e *MockDatabaseInstancesInterface_Expecter) ListDatabaseInstancesAll(ctx interface{}, request interface{}) *MockDatabaseInstancesInterface_ListDatabaseInstancesAll_Call {
	return &MockDatabaseInstancesInterface_ListDatabaseInstancesAll_Call{Call: _e.mock.On("ListDatabaseInstancesAll", ctx, request)}
}

func (_c *MockDatabaseInstancesInterface_ListDatabaseInstancesAll_Call) Run(run func(ctx context.Context, request catalog.ListDatabaseInstancesRequest)) *MockDatabaseInstancesInterface_ListDatabaseInstancesAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.ListDatabaseInstancesRequest))
	})
	return _c
}

func (_c *MockDatabaseInstancesInterface_ListDatabaseInstancesAll_Call) Return(_a0 []catalog.DatabaseInstance, _a1 error) *MockDatabaseInstancesInterface_ListDatabaseInstancesAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabaseInstancesInterface_ListDatabaseInstancesAll_Call) RunAndReturn(run func(context.Context, catalog.ListDatabaseInstancesRequest) ([]catalog.DatabaseInstance, error)) *MockDatabaseInstancesInterface_ListDatabaseInstancesAll_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDatabaseInstance provides a mock function with given fields: ctx, request
func (_m *MockDatabaseInstancesInterface) UpdateDatabaseInstance(ctx context.Context, request catalog.UpdateDatabaseInstanceRequest) (*catalog.DatabaseInstance, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDatabaseInstance")
	}

	var r0 *catalog.DatabaseInstance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.UpdateDatabaseInstanceRequest) (*catalog.DatabaseInstance, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.UpdateDatabaseInstanceRequest) *catalog.DatabaseInstance); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.DatabaseInstance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.UpdateDatabaseInstanceRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabaseInstancesInterface_UpdateDatabaseInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDatabaseInstance'
type MockDatabaseInstancesInterface_UpdateDatabaseInstance_Call struct {
	*mock.Call
}

// UpdateDatabaseInstance is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.UpdateDatabaseInstanceRequest
func (_e *MockDatabaseInstancesInterface_Expecter) UpdateDatabaseInstance(ctx interface{}, request interface{}) *MockDatabaseInstancesInterface_UpdateDatabaseInstance_Call {
	return &MockDatabaseInstancesInterface_UpdateDatabaseInstance_Call{Call: _e.mock.On("UpdateDatabaseInstance", ctx, request)}
}

func (_c *MockDatabaseInstancesInterface_UpdateDatabaseInstance_Call) Run(run func(ctx context.Context, request catalog.UpdateDatabaseInstanceRequest)) *MockDatabaseInstancesInterface_UpdateDatabaseInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.UpdateDatabaseInstanceRequest))
	})
	return _c
}

func (_c *MockDatabaseInstancesInterface_UpdateDatabaseInstance_Call) Return(_a0 *catalog.DatabaseInstance, _a1 error) *MockDatabaseInstancesInterface_UpdateDatabaseInstance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabaseInstancesInterface_UpdateDatabaseInstance_Call) RunAndReturn(run func(context.Context, catalog.UpdateDatabaseInstanceRequest) (*catalog.DatabaseInstance, error)) *MockDatabaseInstancesInterface_UpdateDatabaseInstance_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDatabaseInstancesInterface creates a new instance of MockDatabaseInstancesInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDatabaseInstancesInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDatabaseInstancesInterface {
	mock := &MockDatabaseInstancesInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
