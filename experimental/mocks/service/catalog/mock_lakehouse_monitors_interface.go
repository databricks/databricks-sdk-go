// Code generated by mockery v2.43.0. DO NOT EDIT.

package catalog

import (
	context "context"

	catalog "github.com/databricks/databricks-sdk-go/service/catalog"

	mock "github.com/stretchr/testify/mock"
)

// MockLakehouseMonitorsInterface is an autogenerated mock type for the LakehouseMonitorsInterface type
type MockLakehouseMonitorsInterface struct {
	mock.Mock
}

type MockLakehouseMonitorsInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLakehouseMonitorsInterface) EXPECT() *MockLakehouseMonitorsInterface_Expecter {
	return &MockLakehouseMonitorsInterface_Expecter{mock: &_m.Mock}
}

// CancelRefresh provides a mock function with given fields: ctx, request
func (_m *MockLakehouseMonitorsInterface) CancelRefresh(ctx context.Context, request catalog.CancelRefreshRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CancelRefresh")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.CancelRefreshRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLakehouseMonitorsInterface_CancelRefresh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelRefresh'
type MockLakehouseMonitorsInterface_CancelRefresh_Call struct {
	*mock.Call
}

// CancelRefresh is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.CancelRefreshRequest
func (_e *MockLakehouseMonitorsInterface_Expecter) CancelRefresh(ctx interface{}, request interface{}) *MockLakehouseMonitorsInterface_CancelRefresh_Call {
	return &MockLakehouseMonitorsInterface_CancelRefresh_Call{Call: _e.mock.On("CancelRefresh", ctx, request)}
}

func (_c *MockLakehouseMonitorsInterface_CancelRefresh_Call) Run(run func(ctx context.Context, request catalog.CancelRefreshRequest)) *MockLakehouseMonitorsInterface_CancelRefresh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.CancelRefreshRequest))
	})
	return _c
}

func (_c *MockLakehouseMonitorsInterface_CancelRefresh_Call) Return(_a0 error) *MockLakehouseMonitorsInterface_CancelRefresh_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLakehouseMonitorsInterface_CancelRefresh_Call) RunAndReturn(run func(context.Context, catalog.CancelRefreshRequest) error) *MockLakehouseMonitorsInterface_CancelRefresh_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, request
func (_m *MockLakehouseMonitorsInterface) Create(ctx context.Context, request catalog.CreateMonitor) (*catalog.MonitorInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *catalog.MonitorInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.CreateMonitor) (*catalog.MonitorInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.CreateMonitor) *catalog.MonitorInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.MonitorInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.CreateMonitor) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLakehouseMonitorsInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockLakehouseMonitorsInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.CreateMonitor
func (_e *MockLakehouseMonitorsInterface_Expecter) Create(ctx interface{}, request interface{}) *MockLakehouseMonitorsInterface_Create_Call {
	return &MockLakehouseMonitorsInterface_Create_Call{Call: _e.mock.On("Create", ctx, request)}
}

func (_c *MockLakehouseMonitorsInterface_Create_Call) Run(run func(ctx context.Context, request catalog.CreateMonitor)) *MockLakehouseMonitorsInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.CreateMonitor))
	})
	return _c
}

func (_c *MockLakehouseMonitorsInterface_Create_Call) Return(_a0 *catalog.MonitorInfo, _a1 error) *MockLakehouseMonitorsInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLakehouseMonitorsInterface_Create_Call) RunAndReturn(run func(context.Context, catalog.CreateMonitor) (*catalog.MonitorInfo, error)) *MockLakehouseMonitorsInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, request
func (_m *MockLakehouseMonitorsInterface) Delete(ctx context.Context, request catalog.DeleteLakehouseMonitorRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.DeleteLakehouseMonitorRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLakehouseMonitorsInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockLakehouseMonitorsInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.DeleteLakehouseMonitorRequest
func (_e *MockLakehouseMonitorsInterface_Expecter) Delete(ctx interface{}, request interface{}) *MockLakehouseMonitorsInterface_Delete_Call {
	return &MockLakehouseMonitorsInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, request)}
}

func (_c *MockLakehouseMonitorsInterface_Delete_Call) Run(run func(ctx context.Context, request catalog.DeleteLakehouseMonitorRequest)) *MockLakehouseMonitorsInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.DeleteLakehouseMonitorRequest))
	})
	return _c
}

func (_c *MockLakehouseMonitorsInterface_Delete_Call) Return(_a0 error) *MockLakehouseMonitorsInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLakehouseMonitorsInterface_Delete_Call) RunAndReturn(run func(context.Context, catalog.DeleteLakehouseMonitorRequest) error) *MockLakehouseMonitorsInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByTableName provides a mock function with given fields: ctx, tableName
func (_m *MockLakehouseMonitorsInterface) DeleteByTableName(ctx context.Context, tableName string) error {
	ret := _m.Called(ctx, tableName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByTableName")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, tableName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLakehouseMonitorsInterface_DeleteByTableName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByTableName'
type MockLakehouseMonitorsInterface_DeleteByTableName_Call struct {
	*mock.Call
}

// DeleteByTableName is a helper method to define mock.On call
//   - ctx context.Context
//   - tableName string
func (_e *MockLakehouseMonitorsInterface_Expecter) DeleteByTableName(ctx interface{}, tableName interface{}) *MockLakehouseMonitorsInterface_DeleteByTableName_Call {
	return &MockLakehouseMonitorsInterface_DeleteByTableName_Call{Call: _e.mock.On("DeleteByTableName", ctx, tableName)}
}

func (_c *MockLakehouseMonitorsInterface_DeleteByTableName_Call) Run(run func(ctx context.Context, tableName string)) *MockLakehouseMonitorsInterface_DeleteByTableName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockLakehouseMonitorsInterface_DeleteByTableName_Call) Return(_a0 error) *MockLakehouseMonitorsInterface_DeleteByTableName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLakehouseMonitorsInterface_DeleteByTableName_Call) RunAndReturn(run func(context.Context, string) error) *MockLakehouseMonitorsInterface_DeleteByTableName_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, request
func (_m *MockLakehouseMonitorsInterface) Get(ctx context.Context, request catalog.GetLakehouseMonitorRequest) (*catalog.MonitorInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *catalog.MonitorInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.GetLakehouseMonitorRequest) (*catalog.MonitorInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.GetLakehouseMonitorRequest) *catalog.MonitorInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.MonitorInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.GetLakehouseMonitorRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLakehouseMonitorsInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockLakehouseMonitorsInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.GetLakehouseMonitorRequest
func (_e *MockLakehouseMonitorsInterface_Expecter) Get(ctx interface{}, request interface{}) *MockLakehouseMonitorsInterface_Get_Call {
	return &MockLakehouseMonitorsInterface_Get_Call{Call: _e.mock.On("Get", ctx, request)}
}

func (_c *MockLakehouseMonitorsInterface_Get_Call) Run(run func(ctx context.Context, request catalog.GetLakehouseMonitorRequest)) *MockLakehouseMonitorsInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.GetLakehouseMonitorRequest))
	})
	return _c
}

func (_c *MockLakehouseMonitorsInterface_Get_Call) Return(_a0 *catalog.MonitorInfo, _a1 error) *MockLakehouseMonitorsInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLakehouseMonitorsInterface_Get_Call) RunAndReturn(run func(context.Context, catalog.GetLakehouseMonitorRequest) (*catalog.MonitorInfo, error)) *MockLakehouseMonitorsInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByTableName provides a mock function with given fields: ctx, tableName
func (_m *MockLakehouseMonitorsInterface) GetByTableName(ctx context.Context, tableName string) (*catalog.MonitorInfo, error) {
	ret := _m.Called(ctx, tableName)

	if len(ret) == 0 {
		panic("no return value specified for GetByTableName")
	}

	var r0 *catalog.MonitorInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*catalog.MonitorInfo, error)); ok {
		return rf(ctx, tableName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *catalog.MonitorInfo); ok {
		r0 = rf(ctx, tableName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.MonitorInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, tableName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLakehouseMonitorsInterface_GetByTableName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByTableName'
type MockLakehouseMonitorsInterface_GetByTableName_Call struct {
	*mock.Call
}

// GetByTableName is a helper method to define mock.On call
//   - ctx context.Context
//   - tableName string
func (_e *MockLakehouseMonitorsInterface_Expecter) GetByTableName(ctx interface{}, tableName interface{}) *MockLakehouseMonitorsInterface_GetByTableName_Call {
	return &MockLakehouseMonitorsInterface_GetByTableName_Call{Call: _e.mock.On("GetByTableName", ctx, tableName)}
}

func (_c *MockLakehouseMonitorsInterface_GetByTableName_Call) Run(run func(ctx context.Context, tableName string)) *MockLakehouseMonitorsInterface_GetByTableName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockLakehouseMonitorsInterface_GetByTableName_Call) Return(_a0 *catalog.MonitorInfo, _a1 error) *MockLakehouseMonitorsInterface_GetByTableName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLakehouseMonitorsInterface_GetByTableName_Call) RunAndReturn(run func(context.Context, string) (*catalog.MonitorInfo, error)) *MockLakehouseMonitorsInterface_GetByTableName_Call {
	_c.Call.Return(run)
	return _c
}

// GetRefresh provides a mock function with given fields: ctx, request
func (_m *MockLakehouseMonitorsInterface) GetRefresh(ctx context.Context, request catalog.GetRefreshRequest) (*catalog.MonitorRefreshInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetRefresh")
	}

	var r0 *catalog.MonitorRefreshInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.GetRefreshRequest) (*catalog.MonitorRefreshInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.GetRefreshRequest) *catalog.MonitorRefreshInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.MonitorRefreshInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.GetRefreshRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLakehouseMonitorsInterface_GetRefresh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRefresh'
type MockLakehouseMonitorsInterface_GetRefresh_Call struct {
	*mock.Call
}

// GetRefresh is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.GetRefreshRequest
func (_e *MockLakehouseMonitorsInterface_Expecter) GetRefresh(ctx interface{}, request interface{}) *MockLakehouseMonitorsInterface_GetRefresh_Call {
	return &MockLakehouseMonitorsInterface_GetRefresh_Call{Call: _e.mock.On("GetRefresh", ctx, request)}
}

func (_c *MockLakehouseMonitorsInterface_GetRefresh_Call) Run(run func(ctx context.Context, request catalog.GetRefreshRequest)) *MockLakehouseMonitorsInterface_GetRefresh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.GetRefreshRequest))
	})
	return _c
}

func (_c *MockLakehouseMonitorsInterface_GetRefresh_Call) Return(_a0 *catalog.MonitorRefreshInfo, _a1 error) *MockLakehouseMonitorsInterface_GetRefresh_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLakehouseMonitorsInterface_GetRefresh_Call) RunAndReturn(run func(context.Context, catalog.GetRefreshRequest) (*catalog.MonitorRefreshInfo, error)) *MockLakehouseMonitorsInterface_GetRefresh_Call {
	_c.Call.Return(run)
	return _c
}

// GetRefreshByTableNameAndRefreshId provides a mock function with given fields: ctx, tableName, refreshId
func (_m *MockLakehouseMonitorsInterface) GetRefreshByTableNameAndRefreshId(ctx context.Context, tableName string, refreshId string) (*catalog.MonitorRefreshInfo, error) {
	ret := _m.Called(ctx, tableName, refreshId)

	if len(ret) == 0 {
		panic("no return value specified for GetRefreshByTableNameAndRefreshId")
	}

	var r0 *catalog.MonitorRefreshInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*catalog.MonitorRefreshInfo, error)); ok {
		return rf(ctx, tableName, refreshId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *catalog.MonitorRefreshInfo); ok {
		r0 = rf(ctx, tableName, refreshId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.MonitorRefreshInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, tableName, refreshId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLakehouseMonitorsInterface_GetRefreshByTableNameAndRefreshId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRefreshByTableNameAndRefreshId'
type MockLakehouseMonitorsInterface_GetRefreshByTableNameAndRefreshId_Call struct {
	*mock.Call
}

// GetRefreshByTableNameAndRefreshId is a helper method to define mock.On call
//   - ctx context.Context
//   - tableName string
//   - refreshId string
func (_e *MockLakehouseMonitorsInterface_Expecter) GetRefreshByTableNameAndRefreshId(ctx interface{}, tableName interface{}, refreshId interface{}) *MockLakehouseMonitorsInterface_GetRefreshByTableNameAndRefreshId_Call {
	return &MockLakehouseMonitorsInterface_GetRefreshByTableNameAndRefreshId_Call{Call: _e.mock.On("GetRefreshByTableNameAndRefreshId", ctx, tableName, refreshId)}
}

func (_c *MockLakehouseMonitorsInterface_GetRefreshByTableNameAndRefreshId_Call) Run(run func(ctx context.Context, tableName string, refreshId string)) *MockLakehouseMonitorsInterface_GetRefreshByTableNameAndRefreshId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockLakehouseMonitorsInterface_GetRefreshByTableNameAndRefreshId_Call) Return(_a0 *catalog.MonitorRefreshInfo, _a1 error) *MockLakehouseMonitorsInterface_GetRefreshByTableNameAndRefreshId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLakehouseMonitorsInterface_GetRefreshByTableNameAndRefreshId_Call) RunAndReturn(run func(context.Context, string, string) (*catalog.MonitorRefreshInfo, error)) *MockLakehouseMonitorsInterface_GetRefreshByTableNameAndRefreshId_Call {
	_c.Call.Return(run)
	return _c
}

// Impl provides a mock function with given fields:
func (_m *MockLakehouseMonitorsInterface) Impl() catalog.LakehouseMonitorsService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 catalog.LakehouseMonitorsService
	if rf, ok := ret.Get(0).(func() catalog.LakehouseMonitorsService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(catalog.LakehouseMonitorsService)
		}
	}

	return r0
}

// MockLakehouseMonitorsInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockLakehouseMonitorsInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockLakehouseMonitorsInterface_Expecter) Impl() *MockLakehouseMonitorsInterface_Impl_Call {
	return &MockLakehouseMonitorsInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockLakehouseMonitorsInterface_Impl_Call) Run(run func()) *MockLakehouseMonitorsInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLakehouseMonitorsInterface_Impl_Call) Return(_a0 catalog.LakehouseMonitorsService) *MockLakehouseMonitorsInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLakehouseMonitorsInterface_Impl_Call) RunAndReturn(run func() catalog.LakehouseMonitorsService) *MockLakehouseMonitorsInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// ListRefreshes provides a mock function with given fields: ctx, request
func (_m *MockLakehouseMonitorsInterface) ListRefreshes(ctx context.Context, request catalog.ListRefreshesRequest) ([]catalog.MonitorRefreshInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListRefreshes")
	}

	var r0 []catalog.MonitorRefreshInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.ListRefreshesRequest) ([]catalog.MonitorRefreshInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.ListRefreshesRequest) []catalog.MonitorRefreshInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]catalog.MonitorRefreshInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.ListRefreshesRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLakehouseMonitorsInterface_ListRefreshes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRefreshes'
type MockLakehouseMonitorsInterface_ListRefreshes_Call struct {
	*mock.Call
}

// ListRefreshes is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.ListRefreshesRequest
func (_e *MockLakehouseMonitorsInterface_Expecter) ListRefreshes(ctx interface{}, request interface{}) *MockLakehouseMonitorsInterface_ListRefreshes_Call {
	return &MockLakehouseMonitorsInterface_ListRefreshes_Call{Call: _e.mock.On("ListRefreshes", ctx, request)}
}

func (_c *MockLakehouseMonitorsInterface_ListRefreshes_Call) Run(run func(ctx context.Context, request catalog.ListRefreshesRequest)) *MockLakehouseMonitorsInterface_ListRefreshes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.ListRefreshesRequest))
	})
	return _c
}

func (_c *MockLakehouseMonitorsInterface_ListRefreshes_Call) Return(_a0 []catalog.MonitorRefreshInfo, _a1 error) *MockLakehouseMonitorsInterface_ListRefreshes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLakehouseMonitorsInterface_ListRefreshes_Call) RunAndReturn(run func(context.Context, catalog.ListRefreshesRequest) ([]catalog.MonitorRefreshInfo, error)) *MockLakehouseMonitorsInterface_ListRefreshes_Call {
	_c.Call.Return(run)
	return _c
}

// ListRefreshesByTableName provides a mock function with given fields: ctx, tableName
func (_m *MockLakehouseMonitorsInterface) ListRefreshesByTableName(ctx context.Context, tableName string) ([]catalog.MonitorRefreshInfo, error) {
	ret := _m.Called(ctx, tableName)

	if len(ret) == 0 {
		panic("no return value specified for ListRefreshesByTableName")
	}

	var r0 []catalog.MonitorRefreshInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]catalog.MonitorRefreshInfo, error)); ok {
		return rf(ctx, tableName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []catalog.MonitorRefreshInfo); ok {
		r0 = rf(ctx, tableName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]catalog.MonitorRefreshInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, tableName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLakehouseMonitorsInterface_ListRefreshesByTableName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRefreshesByTableName'
type MockLakehouseMonitorsInterface_ListRefreshesByTableName_Call struct {
	*mock.Call
}

// ListRefreshesByTableName is a helper method to define mock.On call
//   - ctx context.Context
//   - tableName string
func (_e *MockLakehouseMonitorsInterface_Expecter) ListRefreshesByTableName(ctx interface{}, tableName interface{}) *MockLakehouseMonitorsInterface_ListRefreshesByTableName_Call {
	return &MockLakehouseMonitorsInterface_ListRefreshesByTableName_Call{Call: _e.mock.On("ListRefreshesByTableName", ctx, tableName)}
}

func (_c *MockLakehouseMonitorsInterface_ListRefreshesByTableName_Call) Run(run func(ctx context.Context, tableName string)) *MockLakehouseMonitorsInterface_ListRefreshesByTableName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockLakehouseMonitorsInterface_ListRefreshesByTableName_Call) Return(_a0 []catalog.MonitorRefreshInfo, _a1 error) *MockLakehouseMonitorsInterface_ListRefreshesByTableName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLakehouseMonitorsInterface_ListRefreshesByTableName_Call) RunAndReturn(run func(context.Context, string) ([]catalog.MonitorRefreshInfo, error)) *MockLakehouseMonitorsInterface_ListRefreshesByTableName_Call {
	_c.Call.Return(run)
	return _c
}

// RunRefresh provides a mock function with given fields: ctx, request
func (_m *MockLakehouseMonitorsInterface) RunRefresh(ctx context.Context, request catalog.RunRefreshRequest) (*catalog.MonitorRefreshInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for RunRefresh")
	}

	var r0 *catalog.MonitorRefreshInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.RunRefreshRequest) (*catalog.MonitorRefreshInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.RunRefreshRequest) *catalog.MonitorRefreshInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.MonitorRefreshInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.RunRefreshRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLakehouseMonitorsInterface_RunRefresh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunRefresh'
type MockLakehouseMonitorsInterface_RunRefresh_Call struct {
	*mock.Call
}

// RunRefresh is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.RunRefreshRequest
func (_e *MockLakehouseMonitorsInterface_Expecter) RunRefresh(ctx interface{}, request interface{}) *MockLakehouseMonitorsInterface_RunRefresh_Call {
	return &MockLakehouseMonitorsInterface_RunRefresh_Call{Call: _e.mock.On("RunRefresh", ctx, request)}
}

func (_c *MockLakehouseMonitorsInterface_RunRefresh_Call) Run(run func(ctx context.Context, request catalog.RunRefreshRequest)) *MockLakehouseMonitorsInterface_RunRefresh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.RunRefreshRequest))
	})
	return _c
}

func (_c *MockLakehouseMonitorsInterface_RunRefresh_Call) Return(_a0 *catalog.MonitorRefreshInfo, _a1 error) *MockLakehouseMonitorsInterface_RunRefresh_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLakehouseMonitorsInterface_RunRefresh_Call) RunAndReturn(run func(context.Context, catalog.RunRefreshRequest) (*catalog.MonitorRefreshInfo, error)) *MockLakehouseMonitorsInterface_RunRefresh_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, request
func (_m *MockLakehouseMonitorsInterface) Update(ctx context.Context, request catalog.UpdateMonitor) (*catalog.MonitorInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *catalog.MonitorInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.UpdateMonitor) (*catalog.MonitorInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.UpdateMonitor) *catalog.MonitorInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.MonitorInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.UpdateMonitor) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLakehouseMonitorsInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockLakehouseMonitorsInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.UpdateMonitor
func (_e *MockLakehouseMonitorsInterface_Expecter) Update(ctx interface{}, request interface{}) *MockLakehouseMonitorsInterface_Update_Call {
	return &MockLakehouseMonitorsInterface_Update_Call{Call: _e.mock.On("Update", ctx, request)}
}

func (_c *MockLakehouseMonitorsInterface_Update_Call) Run(run func(ctx context.Context, request catalog.UpdateMonitor)) *MockLakehouseMonitorsInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.UpdateMonitor))
	})
	return _c
}

func (_c *MockLakehouseMonitorsInterface_Update_Call) Return(_a0 *catalog.MonitorInfo, _a1 error) *MockLakehouseMonitorsInterface_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLakehouseMonitorsInterface_Update_Call) RunAndReturn(run func(context.Context, catalog.UpdateMonitor) (*catalog.MonitorInfo, error)) *MockLakehouseMonitorsInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockLakehouseMonitorsInterface) WithImpl(impl catalog.LakehouseMonitorsService) catalog.LakehouseMonitorsInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 catalog.LakehouseMonitorsInterface
	if rf, ok := ret.Get(0).(func(catalog.LakehouseMonitorsService) catalog.LakehouseMonitorsInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(catalog.LakehouseMonitorsInterface)
		}
	}

	return r0
}

// MockLakehouseMonitorsInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockLakehouseMonitorsInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl catalog.LakehouseMonitorsService
func (_e *MockLakehouseMonitorsInterface_Expecter) WithImpl(impl interface{}) *MockLakehouseMonitorsInterface_WithImpl_Call {
	return &MockLakehouseMonitorsInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockLakehouseMonitorsInterface_WithImpl_Call) Run(run func(impl catalog.LakehouseMonitorsService)) *MockLakehouseMonitorsInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(catalog.LakehouseMonitorsService))
	})
	return _c
}

func (_c *MockLakehouseMonitorsInterface_WithImpl_Call) Return(_a0 catalog.LakehouseMonitorsInterface) *MockLakehouseMonitorsInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLakehouseMonitorsInterface_WithImpl_Call) RunAndReturn(run func(catalog.LakehouseMonitorsService) catalog.LakehouseMonitorsInterface) *MockLakehouseMonitorsInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLakehouseMonitorsInterface creates a new instance of MockLakehouseMonitorsInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLakehouseMonitorsInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLakehouseMonitorsInterface {
	mock := &MockLakehouseMonitorsInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
