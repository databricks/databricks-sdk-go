// Code generated by mockery v2.53.2. DO NOT EDIT.

package catalog

import (
	context "context"

	catalog "github.com/databricks/databricks-sdk-go/service/catalog"

	listing "github.com/databricks/databricks-sdk-go/listing"

	mock "github.com/stretchr/testify/mock"
)

// MockPoliciesInterface is an autogenerated mock type for the PoliciesInterface type
type MockPoliciesInterface struct {
	mock.Mock
}

type MockPoliciesInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPoliciesInterface) EXPECT() *MockPoliciesInterface_Expecter {
	return &MockPoliciesInterface_Expecter{mock: &_m.Mock}
}

// CreatePolicy provides a mock function with given fields: ctx, request
func (_m *MockPoliciesInterface) CreatePolicy(ctx context.Context, request catalog.CreatePolicyRequest) (*catalog.PolicyInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreatePolicy")
	}

	var r0 *catalog.PolicyInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.CreatePolicyRequest) (*catalog.PolicyInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.CreatePolicyRequest) *catalog.PolicyInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.PolicyInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.CreatePolicyRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPoliciesInterface_CreatePolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePolicy'
type MockPoliciesInterface_CreatePolicy_Call struct {
	*mock.Call
}

// CreatePolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.CreatePolicyRequest
func (_e *MockPoliciesInterface_Expecter) CreatePolicy(ctx interface{}, request interface{}) *MockPoliciesInterface_CreatePolicy_Call {
	return &MockPoliciesInterface_CreatePolicy_Call{Call: _e.mock.On("CreatePolicy", ctx, request)}
}

func (_c *MockPoliciesInterface_CreatePolicy_Call) Run(run func(ctx context.Context, request catalog.CreatePolicyRequest)) *MockPoliciesInterface_CreatePolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.CreatePolicyRequest))
	})
	return _c
}

func (_c *MockPoliciesInterface_CreatePolicy_Call) Return(_a0 *catalog.PolicyInfo, _a1 error) *MockPoliciesInterface_CreatePolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPoliciesInterface_CreatePolicy_Call) RunAndReturn(run func(context.Context, catalog.CreatePolicyRequest) (*catalog.PolicyInfo, error)) *MockPoliciesInterface_CreatePolicy_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePolicy provides a mock function with given fields: ctx, request
func (_m *MockPoliciesInterface) DeletePolicy(ctx context.Context, request catalog.DeletePolicyRequest) (*catalog.DeletePolicyResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for DeletePolicy")
	}

	var r0 *catalog.DeletePolicyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.DeletePolicyRequest) (*catalog.DeletePolicyResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.DeletePolicyRequest) *catalog.DeletePolicyResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.DeletePolicyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.DeletePolicyRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPoliciesInterface_DeletePolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePolicy'
type MockPoliciesInterface_DeletePolicy_Call struct {
	*mock.Call
}

// DeletePolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.DeletePolicyRequest
func (_e *MockPoliciesInterface_Expecter) DeletePolicy(ctx interface{}, request interface{}) *MockPoliciesInterface_DeletePolicy_Call {
	return &MockPoliciesInterface_DeletePolicy_Call{Call: _e.mock.On("DeletePolicy", ctx, request)}
}

func (_c *MockPoliciesInterface_DeletePolicy_Call) Run(run func(ctx context.Context, request catalog.DeletePolicyRequest)) *MockPoliciesInterface_DeletePolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.DeletePolicyRequest))
	})
	return _c
}

func (_c *MockPoliciesInterface_DeletePolicy_Call) Return(_a0 *catalog.DeletePolicyResponse, _a1 error) *MockPoliciesInterface_DeletePolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPoliciesInterface_DeletePolicy_Call) RunAndReturn(run func(context.Context, catalog.DeletePolicyRequest) (*catalog.DeletePolicyResponse, error)) *MockPoliciesInterface_DeletePolicy_Call {
	_c.Call.Return(run)
	return _c
}

// GetPolicy provides a mock function with given fields: ctx, request
func (_m *MockPoliciesInterface) GetPolicy(ctx context.Context, request catalog.GetPolicyRequest) (*catalog.PolicyInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetPolicy")
	}

	var r0 *catalog.PolicyInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.GetPolicyRequest) (*catalog.PolicyInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.GetPolicyRequest) *catalog.PolicyInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.PolicyInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.GetPolicyRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPoliciesInterface_GetPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPolicy'
type MockPoliciesInterface_GetPolicy_Call struct {
	*mock.Call
}

// GetPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.GetPolicyRequest
func (_e *MockPoliciesInterface_Expecter) GetPolicy(ctx interface{}, request interface{}) *MockPoliciesInterface_GetPolicy_Call {
	return &MockPoliciesInterface_GetPolicy_Call{Call: _e.mock.On("GetPolicy", ctx, request)}
}

func (_c *MockPoliciesInterface_GetPolicy_Call) Run(run func(ctx context.Context, request catalog.GetPolicyRequest)) *MockPoliciesInterface_GetPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.GetPolicyRequest))
	})
	return _c
}

func (_c *MockPoliciesInterface_GetPolicy_Call) Return(_a0 *catalog.PolicyInfo, _a1 error) *MockPoliciesInterface_GetPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPoliciesInterface_GetPolicy_Call) RunAndReturn(run func(context.Context, catalog.GetPolicyRequest) (*catalog.PolicyInfo, error)) *MockPoliciesInterface_GetPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// ListPolicies provides a mock function with given fields: ctx, request
func (_m *MockPoliciesInterface) ListPolicies(ctx context.Context, request catalog.ListPoliciesRequest) listing.Iterator[catalog.PolicyInfo] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListPolicies")
	}

	var r0 listing.Iterator[catalog.PolicyInfo]
	if rf, ok := ret.Get(0).(func(context.Context, catalog.ListPoliciesRequest) listing.Iterator[catalog.PolicyInfo]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listing.Iterator[catalog.PolicyInfo])
		}
	}

	return r0
}

// MockPoliciesInterface_ListPolicies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPolicies'
type MockPoliciesInterface_ListPolicies_Call struct {
	*mock.Call
}

// ListPolicies is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.ListPoliciesRequest
func (_e *MockPoliciesInterface_Expecter) ListPolicies(ctx interface{}, request interface{}) *MockPoliciesInterface_ListPolicies_Call {
	return &MockPoliciesInterface_ListPolicies_Call{Call: _e.mock.On("ListPolicies", ctx, request)}
}

func (_c *MockPoliciesInterface_ListPolicies_Call) Run(run func(ctx context.Context, request catalog.ListPoliciesRequest)) *MockPoliciesInterface_ListPolicies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.ListPoliciesRequest))
	})
	return _c
}

func (_c *MockPoliciesInterface_ListPolicies_Call) Return(_a0 listing.Iterator[catalog.PolicyInfo]) *MockPoliciesInterface_ListPolicies_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPoliciesInterface_ListPolicies_Call) RunAndReturn(run func(context.Context, catalog.ListPoliciesRequest) listing.Iterator[catalog.PolicyInfo]) *MockPoliciesInterface_ListPolicies_Call {
	_c.Call.Return(run)
	return _c
}

// ListPoliciesAll provides a mock function with given fields: ctx, request
func (_m *MockPoliciesInterface) ListPoliciesAll(ctx context.Context, request catalog.ListPoliciesRequest) ([]catalog.PolicyInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListPoliciesAll")
	}

	var r0 []catalog.PolicyInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.ListPoliciesRequest) ([]catalog.PolicyInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.ListPoliciesRequest) []catalog.PolicyInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]catalog.PolicyInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.ListPoliciesRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPoliciesInterface_ListPoliciesAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPoliciesAll'
type MockPoliciesInterface_ListPoliciesAll_Call struct {
	*mock.Call
}

// ListPoliciesAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.ListPoliciesRequest
func (_e *MockPoliciesInterface_Expecter) ListPoliciesAll(ctx interface{}, request interface{}) *MockPoliciesInterface_ListPoliciesAll_Call {
	return &MockPoliciesInterface_ListPoliciesAll_Call{Call: _e.mock.On("ListPoliciesAll", ctx, request)}
}

func (_c *MockPoliciesInterface_ListPoliciesAll_Call) Run(run func(ctx context.Context, request catalog.ListPoliciesRequest)) *MockPoliciesInterface_ListPoliciesAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.ListPoliciesRequest))
	})
	return _c
}

func (_c *MockPoliciesInterface_ListPoliciesAll_Call) Return(_a0 []catalog.PolicyInfo, _a1 error) *MockPoliciesInterface_ListPoliciesAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPoliciesInterface_ListPoliciesAll_Call) RunAndReturn(run func(context.Context, catalog.ListPoliciesRequest) ([]catalog.PolicyInfo, error)) *MockPoliciesInterface_ListPoliciesAll_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePolicy provides a mock function with given fields: ctx, request
func (_m *MockPoliciesInterface) UpdatePolicy(ctx context.Context, request catalog.UpdatePolicyRequest) (*catalog.PolicyInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePolicy")
	}

	var r0 *catalog.PolicyInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.UpdatePolicyRequest) (*catalog.PolicyInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.UpdatePolicyRequest) *catalog.PolicyInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.PolicyInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.UpdatePolicyRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPoliciesInterface_UpdatePolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePolicy'
type MockPoliciesInterface_UpdatePolicy_Call struct {
	*mock.Call
}

// UpdatePolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - request catalog.UpdatePolicyRequest
func (_e *MockPoliciesInterface_Expecter) UpdatePolicy(ctx interface{}, request interface{}) *MockPoliciesInterface_UpdatePolicy_Call {
	return &MockPoliciesInterface_UpdatePolicy_Call{Call: _e.mock.On("UpdatePolicy", ctx, request)}
}

func (_c *MockPoliciesInterface_UpdatePolicy_Call) Run(run func(ctx context.Context, request catalog.UpdatePolicyRequest)) *MockPoliciesInterface_UpdatePolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.UpdatePolicyRequest))
	})
	return _c
}

func (_c *MockPoliciesInterface_UpdatePolicy_Call) Return(_a0 *catalog.PolicyInfo, _a1 error) *MockPoliciesInterface_UpdatePolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPoliciesInterface_UpdatePolicy_Call) RunAndReturn(run func(context.Context, catalog.UpdatePolicyRequest) (*catalog.PolicyInfo, error)) *MockPoliciesInterface_UpdatePolicy_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPoliciesInterface creates a new instance of MockPoliciesInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPoliciesInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPoliciesInterface {
	mock := &MockPoliciesInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
