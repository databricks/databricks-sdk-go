// Code generated by mockery v2.53.2. DO NOT EDIT.

package agentbricks

import (
	context "context"

	agentbricks "github.com/databricks/databricks-sdk-go/service/agentbricks"

	mock "github.com/stretchr/testify/mock"
)

// MockAgentBricksInterface is an autogenerated mock type for the AgentBricksInterface type
type MockAgentBricksInterface struct {
	mock.Mock
}

type MockAgentBricksInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAgentBricksInterface) EXPECT() *MockAgentBricksInterface_Expecter {
	return &MockAgentBricksInterface_Expecter{mock: &_m.Mock}
}

// CancelOptimize provides a mock function with given fields: ctx, request
func (_m *MockAgentBricksInterface) CancelOptimize(ctx context.Context, request agentbricks.CancelCustomLlmOptimizationRunRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CancelOptimize")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, agentbricks.CancelCustomLlmOptimizationRunRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAgentBricksInterface_CancelOptimize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelOptimize'
type MockAgentBricksInterface_CancelOptimize_Call struct {
	*mock.Call
}

// CancelOptimize is a helper method to define mock.On call
//   - ctx context.Context
//   - request agentbricks.CancelCustomLlmOptimizationRunRequest
func (_e *MockAgentBricksInterface_Expecter) CancelOptimize(ctx interface{}, request interface{}) *MockAgentBricksInterface_CancelOptimize_Call {
	return &MockAgentBricksInterface_CancelOptimize_Call{Call: _e.mock.On("CancelOptimize", ctx, request)}
}

func (_c *MockAgentBricksInterface_CancelOptimize_Call) Run(run func(ctx context.Context, request agentbricks.CancelCustomLlmOptimizationRunRequest)) *MockAgentBricksInterface_CancelOptimize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(agentbricks.CancelCustomLlmOptimizationRunRequest))
	})
	return _c
}

func (_c *MockAgentBricksInterface_CancelOptimize_Call) Return(_a0 error) *MockAgentBricksInterface_CancelOptimize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAgentBricksInterface_CancelOptimize_Call) RunAndReturn(run func(context.Context, agentbricks.CancelCustomLlmOptimizationRunRequest) error) *MockAgentBricksInterface_CancelOptimize_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCustomLlm provides a mock function with given fields: ctx, request
func (_m *MockAgentBricksInterface) CreateCustomLlm(ctx context.Context, request agentbricks.CreateCustomLlmRequest) (*agentbricks.CustomLlm, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateCustomLlm")
	}

	var r0 *agentbricks.CustomLlm
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, agentbricks.CreateCustomLlmRequest) (*agentbricks.CustomLlm, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, agentbricks.CreateCustomLlmRequest) *agentbricks.CustomLlm); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*agentbricks.CustomLlm)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, agentbricks.CreateCustomLlmRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAgentBricksInterface_CreateCustomLlm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCustomLlm'
type MockAgentBricksInterface_CreateCustomLlm_Call struct {
	*mock.Call
}

// CreateCustomLlm is a helper method to define mock.On call
//   - ctx context.Context
//   - request agentbricks.CreateCustomLlmRequest
func (_e *MockAgentBricksInterface_Expecter) CreateCustomLlm(ctx interface{}, request interface{}) *MockAgentBricksInterface_CreateCustomLlm_Call {
	return &MockAgentBricksInterface_CreateCustomLlm_Call{Call: _e.mock.On("CreateCustomLlm", ctx, request)}
}

func (_c *MockAgentBricksInterface_CreateCustomLlm_Call) Run(run func(ctx context.Context, request agentbricks.CreateCustomLlmRequest)) *MockAgentBricksInterface_CreateCustomLlm_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(agentbricks.CreateCustomLlmRequest))
	})
	return _c
}

func (_c *MockAgentBricksInterface_CreateCustomLlm_Call) Return(_a0 *agentbricks.CustomLlm, _a1 error) *MockAgentBricksInterface_CreateCustomLlm_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAgentBricksInterface_CreateCustomLlm_Call) RunAndReturn(run func(context.Context, agentbricks.CreateCustomLlmRequest) (*agentbricks.CustomLlm, error)) *MockAgentBricksInterface_CreateCustomLlm_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCustomLlm provides a mock function with given fields: ctx, request
func (_m *MockAgentBricksInterface) DeleteCustomLlm(ctx context.Context, request agentbricks.DeleteCustomLlmRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCustomLlm")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, agentbricks.DeleteCustomLlmRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAgentBricksInterface_DeleteCustomLlm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCustomLlm'
type MockAgentBricksInterface_DeleteCustomLlm_Call struct {
	*mock.Call
}

// DeleteCustomLlm is a helper method to define mock.On call
//   - ctx context.Context
//   - request agentbricks.DeleteCustomLlmRequest
func (_e *MockAgentBricksInterface_Expecter) DeleteCustomLlm(ctx interface{}, request interface{}) *MockAgentBricksInterface_DeleteCustomLlm_Call {
	return &MockAgentBricksInterface_DeleteCustomLlm_Call{Call: _e.mock.On("DeleteCustomLlm", ctx, request)}
}

func (_c *MockAgentBricksInterface_DeleteCustomLlm_Call) Run(run func(ctx context.Context, request agentbricks.DeleteCustomLlmRequest)) *MockAgentBricksInterface_DeleteCustomLlm_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(agentbricks.DeleteCustomLlmRequest))
	})
	return _c
}

func (_c *MockAgentBricksInterface_DeleteCustomLlm_Call) Return(_a0 error) *MockAgentBricksInterface_DeleteCustomLlm_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAgentBricksInterface_DeleteCustomLlm_Call) RunAndReturn(run func(context.Context, agentbricks.DeleteCustomLlmRequest) error) *MockAgentBricksInterface_DeleteCustomLlm_Call {
	_c.Call.Return(run)
	return _c
}

// GetCustomLlm provides a mock function with given fields: ctx, request
func (_m *MockAgentBricksInterface) GetCustomLlm(ctx context.Context, request agentbricks.GetCustomLlmRequest) (*agentbricks.CustomLlm, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomLlm")
	}

	var r0 *agentbricks.CustomLlm
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, agentbricks.GetCustomLlmRequest) (*agentbricks.CustomLlm, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, agentbricks.GetCustomLlmRequest) *agentbricks.CustomLlm); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*agentbricks.CustomLlm)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, agentbricks.GetCustomLlmRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAgentBricksInterface_GetCustomLlm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCustomLlm'
type MockAgentBricksInterface_GetCustomLlm_Call struct {
	*mock.Call
}

// GetCustomLlm is a helper method to define mock.On call
//   - ctx context.Context
//   - request agentbricks.GetCustomLlmRequest
func (_e *MockAgentBricksInterface_Expecter) GetCustomLlm(ctx interface{}, request interface{}) *MockAgentBricksInterface_GetCustomLlm_Call {
	return &MockAgentBricksInterface_GetCustomLlm_Call{Call: _e.mock.On("GetCustomLlm", ctx, request)}
}

func (_c *MockAgentBricksInterface_GetCustomLlm_Call) Run(run func(ctx context.Context, request agentbricks.GetCustomLlmRequest)) *MockAgentBricksInterface_GetCustomLlm_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(agentbricks.GetCustomLlmRequest))
	})
	return _c
}

func (_c *MockAgentBricksInterface_GetCustomLlm_Call) Return(_a0 *agentbricks.CustomLlm, _a1 error) *MockAgentBricksInterface_GetCustomLlm_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAgentBricksInterface_GetCustomLlm_Call) RunAndReturn(run func(context.Context, agentbricks.GetCustomLlmRequest) (*agentbricks.CustomLlm, error)) *MockAgentBricksInterface_GetCustomLlm_Call {
	_c.Call.Return(run)
	return _c
}

// StartOptimize provides a mock function with given fields: ctx, request
func (_m *MockAgentBricksInterface) StartOptimize(ctx context.Context, request agentbricks.StartCustomLlmOptimizationRunRequest) (*agentbricks.CustomLlm, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for StartOptimize")
	}

	var r0 *agentbricks.CustomLlm
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, agentbricks.StartCustomLlmOptimizationRunRequest) (*agentbricks.CustomLlm, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, agentbricks.StartCustomLlmOptimizationRunRequest) *agentbricks.CustomLlm); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*agentbricks.CustomLlm)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, agentbricks.StartCustomLlmOptimizationRunRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAgentBricksInterface_StartOptimize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartOptimize'
type MockAgentBricksInterface_StartOptimize_Call struct {
	*mock.Call
}

// StartOptimize is a helper method to define mock.On call
//   - ctx context.Context
//   - request agentbricks.StartCustomLlmOptimizationRunRequest
func (_e *MockAgentBricksInterface_Expecter) StartOptimize(ctx interface{}, request interface{}) *MockAgentBricksInterface_StartOptimize_Call {
	return &MockAgentBricksInterface_StartOptimize_Call{Call: _e.mock.On("StartOptimize", ctx, request)}
}

func (_c *MockAgentBricksInterface_StartOptimize_Call) Run(run func(ctx context.Context, request agentbricks.StartCustomLlmOptimizationRunRequest)) *MockAgentBricksInterface_StartOptimize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(agentbricks.StartCustomLlmOptimizationRunRequest))
	})
	return _c
}

func (_c *MockAgentBricksInterface_StartOptimize_Call) Return(_a0 *agentbricks.CustomLlm, _a1 error) *MockAgentBricksInterface_StartOptimize_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAgentBricksInterface_StartOptimize_Call) RunAndReturn(run func(context.Context, agentbricks.StartCustomLlmOptimizationRunRequest) (*agentbricks.CustomLlm, error)) *MockAgentBricksInterface_StartOptimize_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCustomLlm provides a mock function with given fields: ctx, request
func (_m *MockAgentBricksInterface) UpdateCustomLlm(ctx context.Context, request agentbricks.UpdateCustomLlmRequest) (*agentbricks.CustomLlm, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCustomLlm")
	}

	var r0 *agentbricks.CustomLlm
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, agentbricks.UpdateCustomLlmRequest) (*agentbricks.CustomLlm, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, agentbricks.UpdateCustomLlmRequest) *agentbricks.CustomLlm); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*agentbricks.CustomLlm)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, agentbricks.UpdateCustomLlmRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAgentBricksInterface_UpdateCustomLlm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCustomLlm'
type MockAgentBricksInterface_UpdateCustomLlm_Call struct {
	*mock.Call
}

// UpdateCustomLlm is a helper method to define mock.On call
//   - ctx context.Context
//   - request agentbricks.UpdateCustomLlmRequest
func (_e *MockAgentBricksInterface_Expecter) UpdateCustomLlm(ctx interface{}, request interface{}) *MockAgentBricksInterface_UpdateCustomLlm_Call {
	return &MockAgentBricksInterface_UpdateCustomLlm_Call{Call: _e.mock.On("UpdateCustomLlm", ctx, request)}
}

func (_c *MockAgentBricksInterface_UpdateCustomLlm_Call) Run(run func(ctx context.Context, request agentbricks.UpdateCustomLlmRequest)) *MockAgentBricksInterface_UpdateCustomLlm_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(agentbricks.UpdateCustomLlmRequest))
	})
	return _c
}

func (_c *MockAgentBricksInterface_UpdateCustomLlm_Call) Return(_a0 *agentbricks.CustomLlm, _a1 error) *MockAgentBricksInterface_UpdateCustomLlm_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAgentBricksInterface_UpdateCustomLlm_Call) RunAndReturn(run func(context.Context, agentbricks.UpdateCustomLlmRequest) (*agentbricks.CustomLlm, error)) *MockAgentBricksInterface_UpdateCustomLlm_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAgentBricksInterface creates a new instance of MockAgentBricksInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAgentBricksInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAgentBricksInterface {
	mock := &MockAgentBricksInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
