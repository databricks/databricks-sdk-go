// Code generated by mockery v2.53.2. DO NOT EDIT.

package qualitymonitor

import (
	context "context"

	listing "github.com/databricks/databricks-sdk-go/listing"
	mock "github.com/stretchr/testify/mock"

	qualitymonitor "github.com/databricks/databricks-sdk-go/service/qualitymonitor"
)

// MockQualityMonitorsV2Interface is an autogenerated mock type for the QualityMonitorsV2Interface type
type MockQualityMonitorsV2Interface struct {
	mock.Mock
}

type MockQualityMonitorsV2Interface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQualityMonitorsV2Interface) EXPECT() *MockQualityMonitorsV2Interface_Expecter {
	return &MockQualityMonitorsV2Interface_Expecter{mock: &_m.Mock}
}

// CreateQualityMonitor provides a mock function with given fields: ctx, request
func (_m *MockQualityMonitorsV2Interface) CreateQualityMonitor(ctx context.Context, request qualitymonitor.CreateQualityMonitorRequest) (*qualitymonitor.QualityMonitor, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateQualityMonitor")
	}

	var r0 *qualitymonitor.QualityMonitor
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, qualitymonitor.CreateQualityMonitorRequest) (*qualitymonitor.QualityMonitor, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, qualitymonitor.CreateQualityMonitorRequest) *qualitymonitor.QualityMonitor); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qualitymonitor.QualityMonitor)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, qualitymonitor.CreateQualityMonitorRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQualityMonitorsV2Interface_CreateQualityMonitor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateQualityMonitor'
type MockQualityMonitorsV2Interface_CreateQualityMonitor_Call struct {
	*mock.Call
}

// CreateQualityMonitor is a helper method to define mock.On call
//   - ctx context.Context
//   - request qualitymonitor.CreateQualityMonitorRequest
func (_e *MockQualityMonitorsV2Interface_Expecter) CreateQualityMonitor(ctx interface{}, request interface{}) *MockQualityMonitorsV2Interface_CreateQualityMonitor_Call {
	return &MockQualityMonitorsV2Interface_CreateQualityMonitor_Call{Call: _e.mock.On("CreateQualityMonitor", ctx, request)}
}

func (_c *MockQualityMonitorsV2Interface_CreateQualityMonitor_Call) Run(run func(ctx context.Context, request qualitymonitor.CreateQualityMonitorRequest)) *MockQualityMonitorsV2Interface_CreateQualityMonitor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(qualitymonitor.CreateQualityMonitorRequest))
	})
	return _c
}

func (_c *MockQualityMonitorsV2Interface_CreateQualityMonitor_Call) Return(_a0 *qualitymonitor.QualityMonitor, _a1 error) *MockQualityMonitorsV2Interface_CreateQualityMonitor_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQualityMonitorsV2Interface_CreateQualityMonitor_Call) RunAndReturn(run func(context.Context, qualitymonitor.CreateQualityMonitorRequest) (*qualitymonitor.QualityMonitor, error)) *MockQualityMonitorsV2Interface_CreateQualityMonitor_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteQualityMonitor provides a mock function with given fields: ctx, request
func (_m *MockQualityMonitorsV2Interface) DeleteQualityMonitor(ctx context.Context, request qualitymonitor.DeleteQualityMonitorRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for DeleteQualityMonitor")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, qualitymonitor.DeleteQualityMonitorRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQualityMonitorsV2Interface_DeleteQualityMonitor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteQualityMonitor'
type MockQualityMonitorsV2Interface_DeleteQualityMonitor_Call struct {
	*mock.Call
}

// DeleteQualityMonitor is a helper method to define mock.On call
//   - ctx context.Context
//   - request qualitymonitor.DeleteQualityMonitorRequest
func (_e *MockQualityMonitorsV2Interface_Expecter) DeleteQualityMonitor(ctx interface{}, request interface{}) *MockQualityMonitorsV2Interface_DeleteQualityMonitor_Call {
	return &MockQualityMonitorsV2Interface_DeleteQualityMonitor_Call{Call: _e.mock.On("DeleteQualityMonitor", ctx, request)}
}

func (_c *MockQualityMonitorsV2Interface_DeleteQualityMonitor_Call) Run(run func(ctx context.Context, request qualitymonitor.DeleteQualityMonitorRequest)) *MockQualityMonitorsV2Interface_DeleteQualityMonitor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(qualitymonitor.DeleteQualityMonitorRequest))
	})
	return _c
}

func (_c *MockQualityMonitorsV2Interface_DeleteQualityMonitor_Call) Return(_a0 error) *MockQualityMonitorsV2Interface_DeleteQualityMonitor_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQualityMonitorsV2Interface_DeleteQualityMonitor_Call) RunAndReturn(run func(context.Context, qualitymonitor.DeleteQualityMonitorRequest) error) *MockQualityMonitorsV2Interface_DeleteQualityMonitor_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteQualityMonitorByObjectTypeAndObjectId provides a mock function with given fields: ctx, objectType, objectId
func (_m *MockQualityMonitorsV2Interface) DeleteQualityMonitorByObjectTypeAndObjectId(ctx context.Context, objectType string, objectId string) error {
	ret := _m.Called(ctx, objectType, objectId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteQualityMonitorByObjectTypeAndObjectId")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, objectType, objectId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQualityMonitorsV2Interface_DeleteQualityMonitorByObjectTypeAndObjectId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteQualityMonitorByObjectTypeAndObjectId'
type MockQualityMonitorsV2Interface_DeleteQualityMonitorByObjectTypeAndObjectId_Call struct {
	*mock.Call
}

// DeleteQualityMonitorByObjectTypeAndObjectId is a helper method to define mock.On call
//   - ctx context.Context
//   - objectType string
//   - objectId string
func (_e *MockQualityMonitorsV2Interface_Expecter) DeleteQualityMonitorByObjectTypeAndObjectId(ctx interface{}, objectType interface{}, objectId interface{}) *MockQualityMonitorsV2Interface_DeleteQualityMonitorByObjectTypeAndObjectId_Call {
	return &MockQualityMonitorsV2Interface_DeleteQualityMonitorByObjectTypeAndObjectId_Call{Call: _e.mock.On("DeleteQualityMonitorByObjectTypeAndObjectId", ctx, objectType, objectId)}
}

func (_c *MockQualityMonitorsV2Interface_DeleteQualityMonitorByObjectTypeAndObjectId_Call) Run(run func(ctx context.Context, objectType string, objectId string)) *MockQualityMonitorsV2Interface_DeleteQualityMonitorByObjectTypeAndObjectId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockQualityMonitorsV2Interface_DeleteQualityMonitorByObjectTypeAndObjectId_Call) Return(_a0 error) *MockQualityMonitorsV2Interface_DeleteQualityMonitorByObjectTypeAndObjectId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQualityMonitorsV2Interface_DeleteQualityMonitorByObjectTypeAndObjectId_Call) RunAndReturn(run func(context.Context, string, string) error) *MockQualityMonitorsV2Interface_DeleteQualityMonitorByObjectTypeAndObjectId_Call {
	_c.Call.Return(run)
	return _c
}

// GetQualityMonitor provides a mock function with given fields: ctx, request
func (_m *MockQualityMonitorsV2Interface) GetQualityMonitor(ctx context.Context, request qualitymonitor.GetQualityMonitorRequest) (*qualitymonitor.QualityMonitor, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetQualityMonitor")
	}

	var r0 *qualitymonitor.QualityMonitor
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, qualitymonitor.GetQualityMonitorRequest) (*qualitymonitor.QualityMonitor, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, qualitymonitor.GetQualityMonitorRequest) *qualitymonitor.QualityMonitor); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qualitymonitor.QualityMonitor)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, qualitymonitor.GetQualityMonitorRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQualityMonitorsV2Interface_GetQualityMonitor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQualityMonitor'
type MockQualityMonitorsV2Interface_GetQualityMonitor_Call struct {
	*mock.Call
}

// GetQualityMonitor is a helper method to define mock.On call
//   - ctx context.Context
//   - request qualitymonitor.GetQualityMonitorRequest
func (_e *MockQualityMonitorsV2Interface_Expecter) GetQualityMonitor(ctx interface{}, request interface{}) *MockQualityMonitorsV2Interface_GetQualityMonitor_Call {
	return &MockQualityMonitorsV2Interface_GetQualityMonitor_Call{Call: _e.mock.On("GetQualityMonitor", ctx, request)}
}

func (_c *MockQualityMonitorsV2Interface_GetQualityMonitor_Call) Run(run func(ctx context.Context, request qualitymonitor.GetQualityMonitorRequest)) *MockQualityMonitorsV2Interface_GetQualityMonitor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(qualitymonitor.GetQualityMonitorRequest))
	})
	return _c
}

func (_c *MockQualityMonitorsV2Interface_GetQualityMonitor_Call) Return(_a0 *qualitymonitor.QualityMonitor, _a1 error) *MockQualityMonitorsV2Interface_GetQualityMonitor_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQualityMonitorsV2Interface_GetQualityMonitor_Call) RunAndReturn(run func(context.Context, qualitymonitor.GetQualityMonitorRequest) (*qualitymonitor.QualityMonitor, error)) *MockQualityMonitorsV2Interface_GetQualityMonitor_Call {
	_c.Call.Return(run)
	return _c
}

// GetQualityMonitorByObjectTypeAndObjectId provides a mock function with given fields: ctx, objectType, objectId
func (_m *MockQualityMonitorsV2Interface) GetQualityMonitorByObjectTypeAndObjectId(ctx context.Context, objectType string, objectId string) (*qualitymonitor.QualityMonitor, error) {
	ret := _m.Called(ctx, objectType, objectId)

	if len(ret) == 0 {
		panic("no return value specified for GetQualityMonitorByObjectTypeAndObjectId")
	}

	var r0 *qualitymonitor.QualityMonitor
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*qualitymonitor.QualityMonitor, error)); ok {
		return rf(ctx, objectType, objectId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *qualitymonitor.QualityMonitor); ok {
		r0 = rf(ctx, objectType, objectId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qualitymonitor.QualityMonitor)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, objectType, objectId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQualityMonitorsV2Interface_GetQualityMonitorByObjectTypeAndObjectId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQualityMonitorByObjectTypeAndObjectId'
type MockQualityMonitorsV2Interface_GetQualityMonitorByObjectTypeAndObjectId_Call struct {
	*mock.Call
}

// GetQualityMonitorByObjectTypeAndObjectId is a helper method to define mock.On call
//   - ctx context.Context
//   - objectType string
//   - objectId string
func (_e *MockQualityMonitorsV2Interface_Expecter) GetQualityMonitorByObjectTypeAndObjectId(ctx interface{}, objectType interface{}, objectId interface{}) *MockQualityMonitorsV2Interface_GetQualityMonitorByObjectTypeAndObjectId_Call {
	return &MockQualityMonitorsV2Interface_GetQualityMonitorByObjectTypeAndObjectId_Call{Call: _e.mock.On("GetQualityMonitorByObjectTypeAndObjectId", ctx, objectType, objectId)}
}

func (_c *MockQualityMonitorsV2Interface_GetQualityMonitorByObjectTypeAndObjectId_Call) Run(run func(ctx context.Context, objectType string, objectId string)) *MockQualityMonitorsV2Interface_GetQualityMonitorByObjectTypeAndObjectId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockQualityMonitorsV2Interface_GetQualityMonitorByObjectTypeAndObjectId_Call) Return(_a0 *qualitymonitor.QualityMonitor, _a1 error) *MockQualityMonitorsV2Interface_GetQualityMonitorByObjectTypeAndObjectId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQualityMonitorsV2Interface_GetQualityMonitorByObjectTypeAndObjectId_Call) RunAndReturn(run func(context.Context, string, string) (*qualitymonitor.QualityMonitor, error)) *MockQualityMonitorsV2Interface_GetQualityMonitorByObjectTypeAndObjectId_Call {
	_c.Call.Return(run)
	return _c
}

// ListQualityMonitor provides a mock function with given fields: ctx, request
func (_m *MockQualityMonitorsV2Interface) ListQualityMonitor(ctx context.Context, request qualitymonitor.ListQualityMonitorRequest) listing.Iterator[qualitymonitor.QualityMonitor] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListQualityMonitor")
	}

	var r0 listing.Iterator[qualitymonitor.QualityMonitor]
	if rf, ok := ret.Get(0).(func(context.Context, qualitymonitor.ListQualityMonitorRequest) listing.Iterator[qualitymonitor.QualityMonitor]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listing.Iterator[qualitymonitor.QualityMonitor])
		}
	}

	return r0
}

// MockQualityMonitorsV2Interface_ListQualityMonitor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListQualityMonitor'
type MockQualityMonitorsV2Interface_ListQualityMonitor_Call struct {
	*mock.Call
}

// ListQualityMonitor is a helper method to define mock.On call
//   - ctx context.Context
//   - request qualitymonitor.ListQualityMonitorRequest
func (_e *MockQualityMonitorsV2Interface_Expecter) ListQualityMonitor(ctx interface{}, request interface{}) *MockQualityMonitorsV2Interface_ListQualityMonitor_Call {
	return &MockQualityMonitorsV2Interface_ListQualityMonitor_Call{Call: _e.mock.On("ListQualityMonitor", ctx, request)}
}

func (_c *MockQualityMonitorsV2Interface_ListQualityMonitor_Call) Run(run func(ctx context.Context, request qualitymonitor.ListQualityMonitorRequest)) *MockQualityMonitorsV2Interface_ListQualityMonitor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(qualitymonitor.ListQualityMonitorRequest))
	})
	return _c
}

func (_c *MockQualityMonitorsV2Interface_ListQualityMonitor_Call) Return(_a0 listing.Iterator[qualitymonitor.QualityMonitor]) *MockQualityMonitorsV2Interface_ListQualityMonitor_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQualityMonitorsV2Interface_ListQualityMonitor_Call) RunAndReturn(run func(context.Context, qualitymonitor.ListQualityMonitorRequest) listing.Iterator[qualitymonitor.QualityMonitor]) *MockQualityMonitorsV2Interface_ListQualityMonitor_Call {
	_c.Call.Return(run)
	return _c
}

// ListQualityMonitorAll provides a mock function with given fields: ctx, request
func (_m *MockQualityMonitorsV2Interface) ListQualityMonitorAll(ctx context.Context, request qualitymonitor.ListQualityMonitorRequest) ([]qualitymonitor.QualityMonitor, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListQualityMonitorAll")
	}

	var r0 []qualitymonitor.QualityMonitor
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, qualitymonitor.ListQualityMonitorRequest) ([]qualitymonitor.QualityMonitor, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, qualitymonitor.ListQualityMonitorRequest) []qualitymonitor.QualityMonitor); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]qualitymonitor.QualityMonitor)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, qualitymonitor.ListQualityMonitorRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQualityMonitorsV2Interface_ListQualityMonitorAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListQualityMonitorAll'
type MockQualityMonitorsV2Interface_ListQualityMonitorAll_Call struct {
	*mock.Call
}

// ListQualityMonitorAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request qualitymonitor.ListQualityMonitorRequest
func (_e *MockQualityMonitorsV2Interface_Expecter) ListQualityMonitorAll(ctx interface{}, request interface{}) *MockQualityMonitorsV2Interface_ListQualityMonitorAll_Call {
	return &MockQualityMonitorsV2Interface_ListQualityMonitorAll_Call{Call: _e.mock.On("ListQualityMonitorAll", ctx, request)}
}

func (_c *MockQualityMonitorsV2Interface_ListQualityMonitorAll_Call) Run(run func(ctx context.Context, request qualitymonitor.ListQualityMonitorRequest)) *MockQualityMonitorsV2Interface_ListQualityMonitorAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(qualitymonitor.ListQualityMonitorRequest))
	})
	return _c
}

func (_c *MockQualityMonitorsV2Interface_ListQualityMonitorAll_Call) Return(_a0 []qualitymonitor.QualityMonitor, _a1 error) *MockQualityMonitorsV2Interface_ListQualityMonitorAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQualityMonitorsV2Interface_ListQualityMonitorAll_Call) RunAndReturn(run func(context.Context, qualitymonitor.ListQualityMonitorRequest) ([]qualitymonitor.QualityMonitor, error)) *MockQualityMonitorsV2Interface_ListQualityMonitorAll_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateQualityMonitor provides a mock function with given fields: ctx, request
func (_m *MockQualityMonitorsV2Interface) UpdateQualityMonitor(ctx context.Context, request qualitymonitor.UpdateQualityMonitorRequest) (*qualitymonitor.QualityMonitor, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateQualityMonitor")
	}

	var r0 *qualitymonitor.QualityMonitor
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, qualitymonitor.UpdateQualityMonitorRequest) (*qualitymonitor.QualityMonitor, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, qualitymonitor.UpdateQualityMonitorRequest) *qualitymonitor.QualityMonitor); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qualitymonitor.QualityMonitor)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, qualitymonitor.UpdateQualityMonitorRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQualityMonitorsV2Interface_UpdateQualityMonitor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateQualityMonitor'
type MockQualityMonitorsV2Interface_UpdateQualityMonitor_Call struct {
	*mock.Call
}

// UpdateQualityMonitor is a helper method to define mock.On call
//   - ctx context.Context
//   - request qualitymonitor.UpdateQualityMonitorRequest
func (_e *MockQualityMonitorsV2Interface_Expecter) UpdateQualityMonitor(ctx interface{}, request interface{}) *MockQualityMonitorsV2Interface_UpdateQualityMonitor_Call {
	return &MockQualityMonitorsV2Interface_UpdateQualityMonitor_Call{Call: _e.mock.On("UpdateQualityMonitor", ctx, request)}
}

func (_c *MockQualityMonitorsV2Interface_UpdateQualityMonitor_Call) Run(run func(ctx context.Context, request qualitymonitor.UpdateQualityMonitorRequest)) *MockQualityMonitorsV2Interface_UpdateQualityMonitor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(qualitymonitor.UpdateQualityMonitorRequest))
	})
	return _c
}

func (_c *MockQualityMonitorsV2Interface_UpdateQualityMonitor_Call) Return(_a0 *qualitymonitor.QualityMonitor, _a1 error) *MockQualityMonitorsV2Interface_UpdateQualityMonitor_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQualityMonitorsV2Interface_UpdateQualityMonitor_Call) RunAndReturn(run func(context.Context, qualitymonitor.UpdateQualityMonitorRequest) (*qualitymonitor.QualityMonitor, error)) *MockQualityMonitorsV2Interface_UpdateQualityMonitor_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockQualityMonitorsV2Interface creates a new instance of MockQualityMonitorsV2Interface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQualityMonitorsV2Interface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQualityMonitorsV2Interface {
	mock := &MockQualityMonitorsV2Interface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
