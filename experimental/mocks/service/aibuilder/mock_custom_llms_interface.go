// Code generated by mockery v2.53.2. DO NOT EDIT.

package aibuilder

import (
	context "context"

	aibuilder "github.com/databricks/databricks-sdk-go/service/aibuilder"

	mock "github.com/stretchr/testify/mock"
)

// MockCustomLlmsInterface is an autogenerated mock type for the CustomLlmsInterface type
type MockCustomLlmsInterface struct {
	mock.Mock
}

type MockCustomLlmsInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCustomLlmsInterface) EXPECT() *MockCustomLlmsInterface_Expecter {
	return &MockCustomLlmsInterface_Expecter{mock: &_m.Mock}
}

// Cancel provides a mock function with given fields: ctx, request
func (_m *MockCustomLlmsInterface) Cancel(ctx context.Context, request aibuilder.CancelCustomLlmOptimizationRunRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Cancel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, aibuilder.CancelCustomLlmOptimizationRunRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCustomLlmsInterface_Cancel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cancel'
type MockCustomLlmsInterface_Cancel_Call struct {
	*mock.Call
}

// Cancel is a helper method to define mock.On call
//   - ctx context.Context
//   - request aibuilder.CancelCustomLlmOptimizationRunRequest
func (_e *MockCustomLlmsInterface_Expecter) Cancel(ctx interface{}, request interface{}) *MockCustomLlmsInterface_Cancel_Call {
	return &MockCustomLlmsInterface_Cancel_Call{Call: _e.mock.On("Cancel", ctx, request)}
}

func (_c *MockCustomLlmsInterface_Cancel_Call) Run(run func(ctx context.Context, request aibuilder.CancelCustomLlmOptimizationRunRequest)) *MockCustomLlmsInterface_Cancel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(aibuilder.CancelCustomLlmOptimizationRunRequest))
	})
	return _c
}

func (_c *MockCustomLlmsInterface_Cancel_Call) Return(_a0 error) *MockCustomLlmsInterface_Cancel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCustomLlmsInterface_Cancel_Call) RunAndReturn(run func(context.Context, aibuilder.CancelCustomLlmOptimizationRunRequest) error) *MockCustomLlmsInterface_Cancel_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, request
func (_m *MockCustomLlmsInterface) Create(ctx context.Context, request aibuilder.StartCustomLlmOptimizationRunRequest) (*aibuilder.CustomLlm, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *aibuilder.CustomLlm
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, aibuilder.StartCustomLlmOptimizationRunRequest) (*aibuilder.CustomLlm, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, aibuilder.StartCustomLlmOptimizationRunRequest) *aibuilder.CustomLlm); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aibuilder.CustomLlm)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, aibuilder.StartCustomLlmOptimizationRunRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCustomLlmsInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockCustomLlmsInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - request aibuilder.StartCustomLlmOptimizationRunRequest
func (_e *MockCustomLlmsInterface_Expecter) Create(ctx interface{}, request interface{}) *MockCustomLlmsInterface_Create_Call {
	return &MockCustomLlmsInterface_Create_Call{Call: _e.mock.On("Create", ctx, request)}
}

func (_c *MockCustomLlmsInterface_Create_Call) Run(run func(ctx context.Context, request aibuilder.StartCustomLlmOptimizationRunRequest)) *MockCustomLlmsInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(aibuilder.StartCustomLlmOptimizationRunRequest))
	})
	return _c
}

func (_c *MockCustomLlmsInterface_Create_Call) Return(_a0 *aibuilder.CustomLlm, _a1 error) *MockCustomLlmsInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCustomLlmsInterface_Create_Call) RunAndReturn(run func(context.Context, aibuilder.StartCustomLlmOptimizationRunRequest) (*aibuilder.CustomLlm, error)) *MockCustomLlmsInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, request
func (_m *MockCustomLlmsInterface) Get(ctx context.Context, request aibuilder.GetCustomLlmRequest) (*aibuilder.CustomLlm, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *aibuilder.CustomLlm
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, aibuilder.GetCustomLlmRequest) (*aibuilder.CustomLlm, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, aibuilder.GetCustomLlmRequest) *aibuilder.CustomLlm); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aibuilder.CustomLlm)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, aibuilder.GetCustomLlmRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCustomLlmsInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockCustomLlmsInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - request aibuilder.GetCustomLlmRequest
func (_e *MockCustomLlmsInterface_Expecter) Get(ctx interface{}, request interface{}) *MockCustomLlmsInterface_Get_Call {
	return &MockCustomLlmsInterface_Get_Call{Call: _e.mock.On("Get", ctx, request)}
}

func (_c *MockCustomLlmsInterface_Get_Call) Run(run func(ctx context.Context, request aibuilder.GetCustomLlmRequest)) *MockCustomLlmsInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(aibuilder.GetCustomLlmRequest))
	})
	return _c
}

func (_c *MockCustomLlmsInterface_Get_Call) Return(_a0 *aibuilder.CustomLlm, _a1 error) *MockCustomLlmsInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCustomLlmsInterface_Get_Call) RunAndReturn(run func(context.Context, aibuilder.GetCustomLlmRequest) (*aibuilder.CustomLlm, error)) *MockCustomLlmsInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetById provides a mock function with given fields: ctx, id
func (_m *MockCustomLlmsInterface) GetById(ctx context.Context, id string) (*aibuilder.CustomLlm, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 *aibuilder.CustomLlm
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*aibuilder.CustomLlm, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *aibuilder.CustomLlm); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aibuilder.CustomLlm)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCustomLlmsInterface_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type MockCustomLlmsInterface_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockCustomLlmsInterface_Expecter) GetById(ctx interface{}, id interface{}) *MockCustomLlmsInterface_GetById_Call {
	return &MockCustomLlmsInterface_GetById_Call{Call: _e.mock.On("GetById", ctx, id)}
}

func (_c *MockCustomLlmsInterface_GetById_Call) Run(run func(ctx context.Context, id string)) *MockCustomLlmsInterface_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockCustomLlmsInterface_GetById_Call) Return(_a0 *aibuilder.CustomLlm, _a1 error) *MockCustomLlmsInterface_GetById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCustomLlmsInterface_GetById_Call) RunAndReturn(run func(context.Context, string) (*aibuilder.CustomLlm, error)) *MockCustomLlmsInterface_GetById_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, request
func (_m *MockCustomLlmsInterface) Update(ctx context.Context, request aibuilder.UpdateCustomLlmRequest) (*aibuilder.CustomLlm, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *aibuilder.CustomLlm
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, aibuilder.UpdateCustomLlmRequest) (*aibuilder.CustomLlm, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, aibuilder.UpdateCustomLlmRequest) *aibuilder.CustomLlm); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aibuilder.CustomLlm)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, aibuilder.UpdateCustomLlmRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCustomLlmsInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockCustomLlmsInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - request aibuilder.UpdateCustomLlmRequest
func (_e *MockCustomLlmsInterface_Expecter) Update(ctx interface{}, request interface{}) *MockCustomLlmsInterface_Update_Call {
	return &MockCustomLlmsInterface_Update_Call{Call: _e.mock.On("Update", ctx, request)}
}

func (_c *MockCustomLlmsInterface_Update_Call) Run(run func(ctx context.Context, request aibuilder.UpdateCustomLlmRequest)) *MockCustomLlmsInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(aibuilder.UpdateCustomLlmRequest))
	})
	return _c
}

func (_c *MockCustomLlmsInterface_Update_Call) Return(_a0 *aibuilder.CustomLlm, _a1 error) *MockCustomLlmsInterface_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCustomLlmsInterface_Update_Call) RunAndReturn(run func(context.Context, aibuilder.UpdateCustomLlmRequest) (*aibuilder.CustomLlm, error)) *MockCustomLlmsInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCustomLlmsInterface creates a new instance of MockCustomLlmsInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCustomLlmsInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCustomLlmsInterface {
	mock := &MockCustomLlmsInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
