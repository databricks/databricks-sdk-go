// Code generated by mockery v2.53.2. DO NOT EDIT.

package aibuilder

import (
	context "context"

	aibuilder "github.com/databricks/databricks-sdk-go/service/aibuilder"

	mock "github.com/stretchr/testify/mock"
)

// MockAiBuilderInterface is an autogenerated mock type for the AiBuilderInterface type
type MockAiBuilderInterface struct {
	mock.Mock
}

type MockAiBuilderInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAiBuilderInterface) EXPECT() *MockAiBuilderInterface_Expecter {
	return &MockAiBuilderInterface_Expecter{mock: &_m.Mock}
}

// CancelOptimize provides a mock function with given fields: ctx, request
func (_m *MockAiBuilderInterface) CancelOptimize(ctx context.Context, request aibuilder.CancelCustomLlmOptimizationRunRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CancelOptimize")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, aibuilder.CancelCustomLlmOptimizationRunRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAiBuilderInterface_CancelOptimize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelOptimize'
type MockAiBuilderInterface_CancelOptimize_Call struct {
	*mock.Call
}

// CancelOptimize is a helper method to define mock.On call
//   - ctx context.Context
//   - request aibuilder.CancelCustomLlmOptimizationRunRequest
func (_e *MockAiBuilderInterface_Expecter) CancelOptimize(ctx interface{}, request interface{}) *MockAiBuilderInterface_CancelOptimize_Call {
	return &MockAiBuilderInterface_CancelOptimize_Call{Call: _e.mock.On("CancelOptimize", ctx, request)}
}

func (_c *MockAiBuilderInterface_CancelOptimize_Call) Run(run func(ctx context.Context, request aibuilder.CancelCustomLlmOptimizationRunRequest)) *MockAiBuilderInterface_CancelOptimize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(aibuilder.CancelCustomLlmOptimizationRunRequest))
	})
	return _c
}

func (_c *MockAiBuilderInterface_CancelOptimize_Call) Return(_a0 error) *MockAiBuilderInterface_CancelOptimize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAiBuilderInterface_CancelOptimize_Call) RunAndReturn(run func(context.Context, aibuilder.CancelCustomLlmOptimizationRunRequest) error) *MockAiBuilderInterface_CancelOptimize_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCustomLlm provides a mock function with given fields: ctx, request
func (_m *MockAiBuilderInterface) CreateCustomLlm(ctx context.Context, request aibuilder.CreateCustomLlmRequest) (*aibuilder.CustomLlm, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateCustomLlm")
	}

	var r0 *aibuilder.CustomLlm
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, aibuilder.CreateCustomLlmRequest) (*aibuilder.CustomLlm, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, aibuilder.CreateCustomLlmRequest) *aibuilder.CustomLlm); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aibuilder.CustomLlm)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, aibuilder.CreateCustomLlmRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAiBuilderInterface_CreateCustomLlm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCustomLlm'
type MockAiBuilderInterface_CreateCustomLlm_Call struct {
	*mock.Call
}

// CreateCustomLlm is a helper method to define mock.On call
//   - ctx context.Context
//   - request aibuilder.CreateCustomLlmRequest
func (_e *MockAiBuilderInterface_Expecter) CreateCustomLlm(ctx interface{}, request interface{}) *MockAiBuilderInterface_CreateCustomLlm_Call {
	return &MockAiBuilderInterface_CreateCustomLlm_Call{Call: _e.mock.On("CreateCustomLlm", ctx, request)}
}

func (_c *MockAiBuilderInterface_CreateCustomLlm_Call) Run(run func(ctx context.Context, request aibuilder.CreateCustomLlmRequest)) *MockAiBuilderInterface_CreateCustomLlm_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(aibuilder.CreateCustomLlmRequest))
	})
	return _c
}

func (_c *MockAiBuilderInterface_CreateCustomLlm_Call) Return(_a0 *aibuilder.CustomLlm, _a1 error) *MockAiBuilderInterface_CreateCustomLlm_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAiBuilderInterface_CreateCustomLlm_Call) RunAndReturn(run func(context.Context, aibuilder.CreateCustomLlmRequest) (*aibuilder.CustomLlm, error)) *MockAiBuilderInterface_CreateCustomLlm_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCustomLlm provides a mock function with given fields: ctx, request
func (_m *MockAiBuilderInterface) DeleteCustomLlm(ctx context.Context, request aibuilder.DeleteCustomLlmRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCustomLlm")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, aibuilder.DeleteCustomLlmRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAiBuilderInterface_DeleteCustomLlm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCustomLlm'
type MockAiBuilderInterface_DeleteCustomLlm_Call struct {
	*mock.Call
}

// DeleteCustomLlm is a helper method to define mock.On call
//   - ctx context.Context
//   - request aibuilder.DeleteCustomLlmRequest
func (_e *MockAiBuilderInterface_Expecter) DeleteCustomLlm(ctx interface{}, request interface{}) *MockAiBuilderInterface_DeleteCustomLlm_Call {
	return &MockAiBuilderInterface_DeleteCustomLlm_Call{Call: _e.mock.On("DeleteCustomLlm", ctx, request)}
}

func (_c *MockAiBuilderInterface_DeleteCustomLlm_Call) Run(run func(ctx context.Context, request aibuilder.DeleteCustomLlmRequest)) *MockAiBuilderInterface_DeleteCustomLlm_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(aibuilder.DeleteCustomLlmRequest))
	})
	return _c
}

func (_c *MockAiBuilderInterface_DeleteCustomLlm_Call) Return(_a0 error) *MockAiBuilderInterface_DeleteCustomLlm_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAiBuilderInterface_DeleteCustomLlm_Call) RunAndReturn(run func(context.Context, aibuilder.DeleteCustomLlmRequest) error) *MockAiBuilderInterface_DeleteCustomLlm_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCustomLlmById provides a mock function with given fields: ctx, id
func (_m *MockAiBuilderInterface) DeleteCustomLlmById(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCustomLlmById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAiBuilderInterface_DeleteCustomLlmById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCustomLlmById'
type MockAiBuilderInterface_DeleteCustomLlmById_Call struct {
	*mock.Call
}

// DeleteCustomLlmById is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockAiBuilderInterface_Expecter) DeleteCustomLlmById(ctx interface{}, id interface{}) *MockAiBuilderInterface_DeleteCustomLlmById_Call {
	return &MockAiBuilderInterface_DeleteCustomLlmById_Call{Call: _e.mock.On("DeleteCustomLlmById", ctx, id)}
}

func (_c *MockAiBuilderInterface_DeleteCustomLlmById_Call) Run(run func(ctx context.Context, id string)) *MockAiBuilderInterface_DeleteCustomLlmById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAiBuilderInterface_DeleteCustomLlmById_Call) Return(_a0 error) *MockAiBuilderInterface_DeleteCustomLlmById_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAiBuilderInterface_DeleteCustomLlmById_Call) RunAndReturn(run func(context.Context, string) error) *MockAiBuilderInterface_DeleteCustomLlmById_Call {
	_c.Call.Return(run)
	return _c
}

// GetCustomLlm provides a mock function with given fields: ctx, request
func (_m *MockAiBuilderInterface) GetCustomLlm(ctx context.Context, request aibuilder.GetCustomLlmRequest) (*aibuilder.CustomLlm, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomLlm")
	}

	var r0 *aibuilder.CustomLlm
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, aibuilder.GetCustomLlmRequest) (*aibuilder.CustomLlm, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, aibuilder.GetCustomLlmRequest) *aibuilder.CustomLlm); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aibuilder.CustomLlm)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, aibuilder.GetCustomLlmRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAiBuilderInterface_GetCustomLlm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCustomLlm'
type MockAiBuilderInterface_GetCustomLlm_Call struct {
	*mock.Call
}

// GetCustomLlm is a helper method to define mock.On call
//   - ctx context.Context
//   - request aibuilder.GetCustomLlmRequest
func (_e *MockAiBuilderInterface_Expecter) GetCustomLlm(ctx interface{}, request interface{}) *MockAiBuilderInterface_GetCustomLlm_Call {
	return &MockAiBuilderInterface_GetCustomLlm_Call{Call: _e.mock.On("GetCustomLlm", ctx, request)}
}

func (_c *MockAiBuilderInterface_GetCustomLlm_Call) Run(run func(ctx context.Context, request aibuilder.GetCustomLlmRequest)) *MockAiBuilderInterface_GetCustomLlm_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(aibuilder.GetCustomLlmRequest))
	})
	return _c
}

func (_c *MockAiBuilderInterface_GetCustomLlm_Call) Return(_a0 *aibuilder.CustomLlm, _a1 error) *MockAiBuilderInterface_GetCustomLlm_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAiBuilderInterface_GetCustomLlm_Call) RunAndReturn(run func(context.Context, aibuilder.GetCustomLlmRequest) (*aibuilder.CustomLlm, error)) *MockAiBuilderInterface_GetCustomLlm_Call {
	_c.Call.Return(run)
	return _c
}

// GetCustomLlmById provides a mock function with given fields: ctx, id
func (_m *MockAiBuilderInterface) GetCustomLlmById(ctx context.Context, id string) (*aibuilder.CustomLlm, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomLlmById")
	}

	var r0 *aibuilder.CustomLlm
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*aibuilder.CustomLlm, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *aibuilder.CustomLlm); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aibuilder.CustomLlm)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAiBuilderInterface_GetCustomLlmById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCustomLlmById'
type MockAiBuilderInterface_GetCustomLlmById_Call struct {
	*mock.Call
}

// GetCustomLlmById is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockAiBuilderInterface_Expecter) GetCustomLlmById(ctx interface{}, id interface{}) *MockAiBuilderInterface_GetCustomLlmById_Call {
	return &MockAiBuilderInterface_GetCustomLlmById_Call{Call: _e.mock.On("GetCustomLlmById", ctx, id)}
}

func (_c *MockAiBuilderInterface_GetCustomLlmById_Call) Run(run func(ctx context.Context, id string)) *MockAiBuilderInterface_GetCustomLlmById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAiBuilderInterface_GetCustomLlmById_Call) Return(_a0 *aibuilder.CustomLlm, _a1 error) *MockAiBuilderInterface_GetCustomLlmById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAiBuilderInterface_GetCustomLlmById_Call) RunAndReturn(run func(context.Context, string) (*aibuilder.CustomLlm, error)) *MockAiBuilderInterface_GetCustomLlmById_Call {
	_c.Call.Return(run)
	return _c
}

// StartOptimize provides a mock function with given fields: ctx, request
func (_m *MockAiBuilderInterface) StartOptimize(ctx context.Context, request aibuilder.StartCustomLlmOptimizationRunRequest) (*aibuilder.CustomLlm, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for StartOptimize")
	}

	var r0 *aibuilder.CustomLlm
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, aibuilder.StartCustomLlmOptimizationRunRequest) (*aibuilder.CustomLlm, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, aibuilder.StartCustomLlmOptimizationRunRequest) *aibuilder.CustomLlm); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aibuilder.CustomLlm)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, aibuilder.StartCustomLlmOptimizationRunRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAiBuilderInterface_StartOptimize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartOptimize'
type MockAiBuilderInterface_StartOptimize_Call struct {
	*mock.Call
}

// StartOptimize is a helper method to define mock.On call
//   - ctx context.Context
//   - request aibuilder.StartCustomLlmOptimizationRunRequest
func (_e *MockAiBuilderInterface_Expecter) StartOptimize(ctx interface{}, request interface{}) *MockAiBuilderInterface_StartOptimize_Call {
	return &MockAiBuilderInterface_StartOptimize_Call{Call: _e.mock.On("StartOptimize", ctx, request)}
}

func (_c *MockAiBuilderInterface_StartOptimize_Call) Run(run func(ctx context.Context, request aibuilder.StartCustomLlmOptimizationRunRequest)) *MockAiBuilderInterface_StartOptimize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(aibuilder.StartCustomLlmOptimizationRunRequest))
	})
	return _c
}

func (_c *MockAiBuilderInterface_StartOptimize_Call) Return(_a0 *aibuilder.CustomLlm, _a1 error) *MockAiBuilderInterface_StartOptimize_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAiBuilderInterface_StartOptimize_Call) RunAndReturn(run func(context.Context, aibuilder.StartCustomLlmOptimizationRunRequest) (*aibuilder.CustomLlm, error)) *MockAiBuilderInterface_StartOptimize_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCustomLlm provides a mock function with given fields: ctx, request
func (_m *MockAiBuilderInterface) UpdateCustomLlm(ctx context.Context, request aibuilder.UpdateCustomLlmRequest) (*aibuilder.CustomLlm, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCustomLlm")
	}

	var r0 *aibuilder.CustomLlm
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, aibuilder.UpdateCustomLlmRequest) (*aibuilder.CustomLlm, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, aibuilder.UpdateCustomLlmRequest) *aibuilder.CustomLlm); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aibuilder.CustomLlm)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, aibuilder.UpdateCustomLlmRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAiBuilderInterface_UpdateCustomLlm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCustomLlm'
type MockAiBuilderInterface_UpdateCustomLlm_Call struct {
	*mock.Call
}

// UpdateCustomLlm is a helper method to define mock.On call
//   - ctx context.Context
//   - request aibuilder.UpdateCustomLlmRequest
func (_e *MockAiBuilderInterface_Expecter) UpdateCustomLlm(ctx interface{}, request interface{}) *MockAiBuilderInterface_UpdateCustomLlm_Call {
	return &MockAiBuilderInterface_UpdateCustomLlm_Call{Call: _e.mock.On("UpdateCustomLlm", ctx, request)}
}

func (_c *MockAiBuilderInterface_UpdateCustomLlm_Call) Run(run func(ctx context.Context, request aibuilder.UpdateCustomLlmRequest)) *MockAiBuilderInterface_UpdateCustomLlm_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(aibuilder.UpdateCustomLlmRequest))
	})
	return _c
}

func (_c *MockAiBuilderInterface_UpdateCustomLlm_Call) Return(_a0 *aibuilder.CustomLlm, _a1 error) *MockAiBuilderInterface_UpdateCustomLlm_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAiBuilderInterface_UpdateCustomLlm_Call) RunAndReturn(run func(context.Context, aibuilder.UpdateCustomLlmRequest) (*aibuilder.CustomLlm, error)) *MockAiBuilderInterface_UpdateCustomLlm_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAiBuilderInterface creates a new instance of MockAiBuilderInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAiBuilderInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAiBuilderInterface {
	mock := &MockAiBuilderInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
