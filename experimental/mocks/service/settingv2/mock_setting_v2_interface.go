// Code generated by mockery v2.53.2. DO NOT EDIT.

package settingv2

import (
	context "context"

	settingv2 "github.com/databricks/databricks-sdk-go/service/settingv2"
	mock "github.com/stretchr/testify/mock"
)

// MockSettingV2Interface is an autogenerated mock type for the SettingV2Interface type
type MockSettingV2Interface struct {
	mock.Mock
}

type MockSettingV2Interface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSettingV2Interface) EXPECT() *MockSettingV2Interface_Expecter {
	return &MockSettingV2Interface_Expecter{mock: &_m.Mock}
}

// GetPublicAccountSetting provides a mock function with given fields: ctx, request
func (_m *MockSettingV2Interface) GetPublicAccountSetting(ctx context.Context, request settingv2.GetPublicAccountSettingRequest) (*settingv2.Setting, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetPublicAccountSetting")
	}

	var r0 *settingv2.Setting
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, settingv2.GetPublicAccountSettingRequest) (*settingv2.Setting, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, settingv2.GetPublicAccountSettingRequest) *settingv2.Setting); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*settingv2.Setting)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, settingv2.GetPublicAccountSettingRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSettingV2Interface_GetPublicAccountSetting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPublicAccountSetting'
type MockSettingV2Interface_GetPublicAccountSetting_Call struct {
	*mock.Call
}

// GetPublicAccountSetting is a helper method to define mock.On call
//   - ctx context.Context
//   - request settingv2.GetPublicAccountSettingRequest
func (_e *MockSettingV2Interface_Expecter) GetPublicAccountSetting(ctx interface{}, request interface{}) *MockSettingV2Interface_GetPublicAccountSetting_Call {
	return &MockSettingV2Interface_GetPublicAccountSetting_Call{Call: _e.mock.On("GetPublicAccountSetting", ctx, request)}
}

func (_c *MockSettingV2Interface_GetPublicAccountSetting_Call) Run(run func(ctx context.Context, request settingv2.GetPublicAccountSettingRequest)) *MockSettingV2Interface_GetPublicAccountSetting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(settingv2.GetPublicAccountSettingRequest))
	})
	return _c
}

func (_c *MockSettingV2Interface_GetPublicAccountSetting_Call) Return(_a0 *settingv2.Setting, _a1 error) *MockSettingV2Interface_GetPublicAccountSetting_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSettingV2Interface_GetPublicAccountSetting_Call) RunAndReturn(run func(context.Context, settingv2.GetPublicAccountSettingRequest) (*settingv2.Setting, error)) *MockSettingV2Interface_GetPublicAccountSetting_Call {
	_c.Call.Return(run)
	return _c
}

// GetPublicAccountSettingByAccountIdAndName provides a mock function with given fields: ctx, accountId, name
func (_m *MockSettingV2Interface) GetPublicAccountSettingByAccountIdAndName(ctx context.Context, accountId string, name string) (*settingv2.Setting, error) {
	ret := _m.Called(ctx, accountId, name)

	if len(ret) == 0 {
		panic("no return value specified for GetPublicAccountSettingByAccountIdAndName")
	}

	var r0 *settingv2.Setting
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*settingv2.Setting, error)); ok {
		return rf(ctx, accountId, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *settingv2.Setting); ok {
		r0 = rf(ctx, accountId, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*settingv2.Setting)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, accountId, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSettingV2Interface_GetPublicAccountSettingByAccountIdAndName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPublicAccountSettingByAccountIdAndName'
type MockSettingV2Interface_GetPublicAccountSettingByAccountIdAndName_Call struct {
	*mock.Call
}

// GetPublicAccountSettingByAccountIdAndName is a helper method to define mock.On call
//   - ctx context.Context
//   - accountId string
//   - name string
func (_e *MockSettingV2Interface_Expecter) GetPublicAccountSettingByAccountIdAndName(ctx interface{}, accountId interface{}, name interface{}) *MockSettingV2Interface_GetPublicAccountSettingByAccountIdAndName_Call {
	return &MockSettingV2Interface_GetPublicAccountSettingByAccountIdAndName_Call{Call: _e.mock.On("GetPublicAccountSettingByAccountIdAndName", ctx, accountId, name)}
}

func (_c *MockSettingV2Interface_GetPublicAccountSettingByAccountIdAndName_Call) Run(run func(ctx context.Context, accountId string, name string)) *MockSettingV2Interface_GetPublicAccountSettingByAccountIdAndName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockSettingV2Interface_GetPublicAccountSettingByAccountIdAndName_Call) Return(_a0 *settingv2.Setting, _a1 error) *MockSettingV2Interface_GetPublicAccountSettingByAccountIdAndName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSettingV2Interface_GetPublicAccountSettingByAccountIdAndName_Call) RunAndReturn(run func(context.Context, string, string) (*settingv2.Setting, error)) *MockSettingV2Interface_GetPublicAccountSettingByAccountIdAndName_Call {
	_c.Call.Return(run)
	return _c
}

// GetPublicWorkspaceSetting provides a mock function with given fields: ctx, request
func (_m *MockSettingV2Interface) GetPublicWorkspaceSetting(ctx context.Context, request settingv2.GetPublicWorkspaceSettingRequest) (*settingv2.Setting, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetPublicWorkspaceSetting")
	}

	var r0 *settingv2.Setting
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, settingv2.GetPublicWorkspaceSettingRequest) (*settingv2.Setting, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, settingv2.GetPublicWorkspaceSettingRequest) *settingv2.Setting); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*settingv2.Setting)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, settingv2.GetPublicWorkspaceSettingRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSettingV2Interface_GetPublicWorkspaceSetting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPublicWorkspaceSetting'
type MockSettingV2Interface_GetPublicWorkspaceSetting_Call struct {
	*mock.Call
}

// GetPublicWorkspaceSetting is a helper method to define mock.On call
//   - ctx context.Context
//   - request settingv2.GetPublicWorkspaceSettingRequest
func (_e *MockSettingV2Interface_Expecter) GetPublicWorkspaceSetting(ctx interface{}, request interface{}) *MockSettingV2Interface_GetPublicWorkspaceSetting_Call {
	return &MockSettingV2Interface_GetPublicWorkspaceSetting_Call{Call: _e.mock.On("GetPublicWorkspaceSetting", ctx, request)}
}

func (_c *MockSettingV2Interface_GetPublicWorkspaceSetting_Call) Run(run func(ctx context.Context, request settingv2.GetPublicWorkspaceSettingRequest)) *MockSettingV2Interface_GetPublicWorkspaceSetting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(settingv2.GetPublicWorkspaceSettingRequest))
	})
	return _c
}

func (_c *MockSettingV2Interface_GetPublicWorkspaceSetting_Call) Return(_a0 *settingv2.Setting, _a1 error) *MockSettingV2Interface_GetPublicWorkspaceSetting_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSettingV2Interface_GetPublicWorkspaceSetting_Call) RunAndReturn(run func(context.Context, settingv2.GetPublicWorkspaceSettingRequest) (*settingv2.Setting, error)) *MockSettingV2Interface_GetPublicWorkspaceSetting_Call {
	_c.Call.Return(run)
	return _c
}

// GetPublicWorkspaceSettingByName provides a mock function with given fields: ctx, name
func (_m *MockSettingV2Interface) GetPublicWorkspaceSettingByName(ctx context.Context, name string) (*settingv2.Setting, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetPublicWorkspaceSettingByName")
	}

	var r0 *settingv2.Setting
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*settingv2.Setting, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *settingv2.Setting); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*settingv2.Setting)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSettingV2Interface_GetPublicWorkspaceSettingByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPublicWorkspaceSettingByName'
type MockSettingV2Interface_GetPublicWorkspaceSettingByName_Call struct {
	*mock.Call
}

// GetPublicWorkspaceSettingByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockSettingV2Interface_Expecter) GetPublicWorkspaceSettingByName(ctx interface{}, name interface{}) *MockSettingV2Interface_GetPublicWorkspaceSettingByName_Call {
	return &MockSettingV2Interface_GetPublicWorkspaceSettingByName_Call{Call: _e.mock.On("GetPublicWorkspaceSettingByName", ctx, name)}
}

func (_c *MockSettingV2Interface_GetPublicWorkspaceSettingByName_Call) Run(run func(ctx context.Context, name string)) *MockSettingV2Interface_GetPublicWorkspaceSettingByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSettingV2Interface_GetPublicWorkspaceSettingByName_Call) Return(_a0 *settingv2.Setting, _a1 error) *MockSettingV2Interface_GetPublicWorkspaceSettingByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSettingV2Interface_GetPublicWorkspaceSettingByName_Call) RunAndReturn(run func(context.Context, string) (*settingv2.Setting, error)) *MockSettingV2Interface_GetPublicWorkspaceSettingByName_Call {
	_c.Call.Return(run)
	return _c
}

// PatchPublicAccountSetting provides a mock function with given fields: ctx, request
func (_m *MockSettingV2Interface) PatchPublicAccountSetting(ctx context.Context, request settingv2.PatchPublicAccountSettingRequest) (*settingv2.Setting, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for PatchPublicAccountSetting")
	}

	var r0 *settingv2.Setting
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, settingv2.PatchPublicAccountSettingRequest) (*settingv2.Setting, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, settingv2.PatchPublicAccountSettingRequest) *settingv2.Setting); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*settingv2.Setting)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, settingv2.PatchPublicAccountSettingRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSettingV2Interface_PatchPublicAccountSetting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchPublicAccountSetting'
type MockSettingV2Interface_PatchPublicAccountSetting_Call struct {
	*mock.Call
}

// PatchPublicAccountSetting is a helper method to define mock.On call
//   - ctx context.Context
//   - request settingv2.PatchPublicAccountSettingRequest
func (_e *MockSettingV2Interface_Expecter) PatchPublicAccountSetting(ctx interface{}, request interface{}) *MockSettingV2Interface_PatchPublicAccountSetting_Call {
	return &MockSettingV2Interface_PatchPublicAccountSetting_Call{Call: _e.mock.On("PatchPublicAccountSetting", ctx, request)}
}

func (_c *MockSettingV2Interface_PatchPublicAccountSetting_Call) Run(run func(ctx context.Context, request settingv2.PatchPublicAccountSettingRequest)) *MockSettingV2Interface_PatchPublicAccountSetting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(settingv2.PatchPublicAccountSettingRequest))
	})
	return _c
}

func (_c *MockSettingV2Interface_PatchPublicAccountSetting_Call) Return(_a0 *settingv2.Setting, _a1 error) *MockSettingV2Interface_PatchPublicAccountSetting_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSettingV2Interface_PatchPublicAccountSetting_Call) RunAndReturn(run func(context.Context, settingv2.PatchPublicAccountSettingRequest) (*settingv2.Setting, error)) *MockSettingV2Interface_PatchPublicAccountSetting_Call {
	_c.Call.Return(run)
	return _c
}

// PatchPublicWorkspaceSetting provides a mock function with given fields: ctx, request
func (_m *MockSettingV2Interface) PatchPublicWorkspaceSetting(ctx context.Context, request settingv2.PatchPublicWorkspaceSettingRequest) (*settingv2.Setting, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for PatchPublicWorkspaceSetting")
	}

	var r0 *settingv2.Setting
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, settingv2.PatchPublicWorkspaceSettingRequest) (*settingv2.Setting, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, settingv2.PatchPublicWorkspaceSettingRequest) *settingv2.Setting); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*settingv2.Setting)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, settingv2.PatchPublicWorkspaceSettingRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSettingV2Interface_PatchPublicWorkspaceSetting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchPublicWorkspaceSetting'
type MockSettingV2Interface_PatchPublicWorkspaceSetting_Call struct {
	*mock.Call
}

// PatchPublicWorkspaceSetting is a helper method to define mock.On call
//   - ctx context.Context
//   - request settingv2.PatchPublicWorkspaceSettingRequest
func (_e *MockSettingV2Interface_Expecter) PatchPublicWorkspaceSetting(ctx interface{}, request interface{}) *MockSettingV2Interface_PatchPublicWorkspaceSetting_Call {
	return &MockSettingV2Interface_PatchPublicWorkspaceSetting_Call{Call: _e.mock.On("PatchPublicWorkspaceSetting", ctx, request)}
}

func (_c *MockSettingV2Interface_PatchPublicWorkspaceSetting_Call) Run(run func(ctx context.Context, request settingv2.PatchPublicWorkspaceSettingRequest)) *MockSettingV2Interface_PatchPublicWorkspaceSetting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(settingv2.PatchPublicWorkspaceSettingRequest))
	})
	return _c
}

func (_c *MockSettingV2Interface_PatchPublicWorkspaceSetting_Call) Return(_a0 *settingv2.Setting, _a1 error) *MockSettingV2Interface_PatchPublicWorkspaceSetting_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSettingV2Interface_PatchPublicWorkspaceSetting_Call) RunAndReturn(run func(context.Context, settingv2.PatchPublicWorkspaceSettingRequest) (*settingv2.Setting, error)) *MockSettingV2Interface_PatchPublicWorkspaceSetting_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSettingV2Interface creates a new instance of MockSettingV2Interface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSettingV2Interface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSettingV2Interface {
	mock := &MockSettingV2Interface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
