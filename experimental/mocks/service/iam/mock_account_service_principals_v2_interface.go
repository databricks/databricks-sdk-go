// Code generated by mockery v2.53.2. DO NOT EDIT.

package iam

import (
	context "context"

	listing "github.com/databricks/databricks-sdk-go/listing"
	iam "github.com/databricks/databricks-sdk-go/service/iam"

	mock "github.com/stretchr/testify/mock"
)

// MockAccountServicePrincipalsV2Interface is an autogenerated mock type for the AccountServicePrincipalsV2Interface type
type MockAccountServicePrincipalsV2Interface struct {
	mock.Mock
}

type MockAccountServicePrincipalsV2Interface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccountServicePrincipalsV2Interface) EXPECT() *MockAccountServicePrincipalsV2Interface_Expecter {
	return &MockAccountServicePrincipalsV2Interface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, request
func (_m *MockAccountServicePrincipalsV2Interface) Create(ctx context.Context, request iam.CreateAccountServicePrincipalRequest) (*iam.AccountServicePrincipal, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *iam.AccountServicePrincipal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iam.CreateAccountServicePrincipalRequest) (*iam.AccountServicePrincipal, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iam.CreateAccountServicePrincipalRequest) *iam.AccountServicePrincipal); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.AccountServicePrincipal)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iam.CreateAccountServicePrincipalRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountServicePrincipalsV2Interface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockAccountServicePrincipalsV2Interface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - request iam.CreateAccountServicePrincipalRequest
func (_e *MockAccountServicePrincipalsV2Interface_Expecter) Create(ctx interface{}, request interface{}) *MockAccountServicePrincipalsV2Interface_Create_Call {
	return &MockAccountServicePrincipalsV2Interface_Create_Call{Call: _e.mock.On("Create", ctx, request)}
}

func (_c *MockAccountServicePrincipalsV2Interface_Create_Call) Run(run func(ctx context.Context, request iam.CreateAccountServicePrincipalRequest)) *MockAccountServicePrincipalsV2Interface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iam.CreateAccountServicePrincipalRequest))
	})
	return _c
}

func (_c *MockAccountServicePrincipalsV2Interface_Create_Call) Return(_a0 *iam.AccountServicePrincipal, _a1 error) *MockAccountServicePrincipalsV2Interface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountServicePrincipalsV2Interface_Create_Call) RunAndReturn(run func(context.Context, iam.CreateAccountServicePrincipalRequest) (*iam.AccountServicePrincipal, error)) *MockAccountServicePrincipalsV2Interface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, request
func (_m *MockAccountServicePrincipalsV2Interface) Delete(ctx context.Context, request iam.DeleteAccountServicePrincipalRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, iam.DeleteAccountServicePrincipalRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccountServicePrincipalsV2Interface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockAccountServicePrincipalsV2Interface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - request iam.DeleteAccountServicePrincipalRequest
func (_e *MockAccountServicePrincipalsV2Interface_Expecter) Delete(ctx interface{}, request interface{}) *MockAccountServicePrincipalsV2Interface_Delete_Call {
	return &MockAccountServicePrincipalsV2Interface_Delete_Call{Call: _e.mock.On("Delete", ctx, request)}
}

func (_c *MockAccountServicePrincipalsV2Interface_Delete_Call) Run(run func(ctx context.Context, request iam.DeleteAccountServicePrincipalRequest)) *MockAccountServicePrincipalsV2Interface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iam.DeleteAccountServicePrincipalRequest))
	})
	return _c
}

func (_c *MockAccountServicePrincipalsV2Interface_Delete_Call) Return(_a0 error) *MockAccountServicePrincipalsV2Interface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountServicePrincipalsV2Interface_Delete_Call) RunAndReturn(run func(context.Context, iam.DeleteAccountServicePrincipalRequest) error) *MockAccountServicePrincipalsV2Interface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteById provides a mock function with given fields: ctx, id
func (_m *MockAccountServicePrincipalsV2Interface) DeleteById(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccountServicePrincipalsV2Interface_DeleteById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteById'
type MockAccountServicePrincipalsV2Interface_DeleteById_Call struct {
	*mock.Call
}

// DeleteById is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockAccountServicePrincipalsV2Interface_Expecter) DeleteById(ctx interface{}, id interface{}) *MockAccountServicePrincipalsV2Interface_DeleteById_Call {
	return &MockAccountServicePrincipalsV2Interface_DeleteById_Call{Call: _e.mock.On("DeleteById", ctx, id)}
}

func (_c *MockAccountServicePrincipalsV2Interface_DeleteById_Call) Run(run func(ctx context.Context, id string)) *MockAccountServicePrincipalsV2Interface_DeleteById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAccountServicePrincipalsV2Interface_DeleteById_Call) Return(_a0 error) *MockAccountServicePrincipalsV2Interface_DeleteById_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountServicePrincipalsV2Interface_DeleteById_Call) RunAndReturn(run func(context.Context, string) error) *MockAccountServicePrincipalsV2Interface_DeleteById_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, request
func (_m *MockAccountServicePrincipalsV2Interface) Get(ctx context.Context, request iam.GetAccountServicePrincipalRequest) (*iam.AccountServicePrincipal, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *iam.AccountServicePrincipal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iam.GetAccountServicePrincipalRequest) (*iam.AccountServicePrincipal, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iam.GetAccountServicePrincipalRequest) *iam.AccountServicePrincipal); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.AccountServicePrincipal)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iam.GetAccountServicePrincipalRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountServicePrincipalsV2Interface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockAccountServicePrincipalsV2Interface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - request iam.GetAccountServicePrincipalRequest
func (_e *MockAccountServicePrincipalsV2Interface_Expecter) Get(ctx interface{}, request interface{}) *MockAccountServicePrincipalsV2Interface_Get_Call {
	return &MockAccountServicePrincipalsV2Interface_Get_Call{Call: _e.mock.On("Get", ctx, request)}
}

func (_c *MockAccountServicePrincipalsV2Interface_Get_Call) Run(run func(ctx context.Context, request iam.GetAccountServicePrincipalRequest)) *MockAccountServicePrincipalsV2Interface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iam.GetAccountServicePrincipalRequest))
	})
	return _c
}

func (_c *MockAccountServicePrincipalsV2Interface_Get_Call) Return(_a0 *iam.AccountServicePrincipal, _a1 error) *MockAccountServicePrincipalsV2Interface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountServicePrincipalsV2Interface_Get_Call) RunAndReturn(run func(context.Context, iam.GetAccountServicePrincipalRequest) (*iam.AccountServicePrincipal, error)) *MockAccountServicePrincipalsV2Interface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetById provides a mock function with given fields: ctx, id
func (_m *MockAccountServicePrincipalsV2Interface) GetById(ctx context.Context, id string) (*iam.AccountServicePrincipal, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 *iam.AccountServicePrincipal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*iam.AccountServicePrincipal, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *iam.AccountServicePrincipal); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.AccountServicePrincipal)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountServicePrincipalsV2Interface_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type MockAccountServicePrincipalsV2Interface_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockAccountServicePrincipalsV2Interface_Expecter) GetById(ctx interface{}, id interface{}) *MockAccountServicePrincipalsV2Interface_GetById_Call {
	return &MockAccountServicePrincipalsV2Interface_GetById_Call{Call: _e.mock.On("GetById", ctx, id)}
}

func (_c *MockAccountServicePrincipalsV2Interface_GetById_Call) Run(run func(ctx context.Context, id string)) *MockAccountServicePrincipalsV2Interface_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAccountServicePrincipalsV2Interface_GetById_Call) Return(_a0 *iam.AccountServicePrincipal, _a1 error) *MockAccountServicePrincipalsV2Interface_GetById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountServicePrincipalsV2Interface_GetById_Call) RunAndReturn(run func(context.Context, string) (*iam.AccountServicePrincipal, error)) *MockAccountServicePrincipalsV2Interface_GetById_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, request
func (_m *MockAccountServicePrincipalsV2Interface) List(ctx context.Context, request iam.ListAccountServicePrincipalsRequest) listing.Iterator[iam.AccountServicePrincipal] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 listing.Iterator[iam.AccountServicePrincipal]
	if rf, ok := ret.Get(0).(func(context.Context, iam.ListAccountServicePrincipalsRequest) listing.Iterator[iam.AccountServicePrincipal]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listing.Iterator[iam.AccountServicePrincipal])
		}
	}

	return r0
}

// MockAccountServicePrincipalsV2Interface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockAccountServicePrincipalsV2Interface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - request iam.ListAccountServicePrincipalsRequest
func (_e *MockAccountServicePrincipalsV2Interface_Expecter) List(ctx interface{}, request interface{}) *MockAccountServicePrincipalsV2Interface_List_Call {
	return &MockAccountServicePrincipalsV2Interface_List_Call{Call: _e.mock.On("List", ctx, request)}
}

func (_c *MockAccountServicePrincipalsV2Interface_List_Call) Run(run func(ctx context.Context, request iam.ListAccountServicePrincipalsRequest)) *MockAccountServicePrincipalsV2Interface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iam.ListAccountServicePrincipalsRequest))
	})
	return _c
}

func (_c *MockAccountServicePrincipalsV2Interface_List_Call) Return(_a0 listing.Iterator[iam.AccountServicePrincipal]) *MockAccountServicePrincipalsV2Interface_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountServicePrincipalsV2Interface_List_Call) RunAndReturn(run func(context.Context, iam.ListAccountServicePrincipalsRequest) listing.Iterator[iam.AccountServicePrincipal]) *MockAccountServicePrincipalsV2Interface_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListAll provides a mock function with given fields: ctx, request
func (_m *MockAccountServicePrincipalsV2Interface) ListAll(ctx context.Context, request iam.ListAccountServicePrincipalsRequest) ([]iam.AccountServicePrincipal, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListAll")
	}

	var r0 []iam.AccountServicePrincipal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iam.ListAccountServicePrincipalsRequest) ([]iam.AccountServicePrincipal, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iam.ListAccountServicePrincipalsRequest) []iam.AccountServicePrincipal); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]iam.AccountServicePrincipal)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iam.ListAccountServicePrincipalsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountServicePrincipalsV2Interface_ListAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAll'
type MockAccountServicePrincipalsV2Interface_ListAll_Call struct {
	*mock.Call
}

// ListAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request iam.ListAccountServicePrincipalsRequest
func (_e *MockAccountServicePrincipalsV2Interface_Expecter) ListAll(ctx interface{}, request interface{}) *MockAccountServicePrincipalsV2Interface_ListAll_Call {
	return &MockAccountServicePrincipalsV2Interface_ListAll_Call{Call: _e.mock.On("ListAll", ctx, request)}
}

func (_c *MockAccountServicePrincipalsV2Interface_ListAll_Call) Run(run func(ctx context.Context, request iam.ListAccountServicePrincipalsRequest)) *MockAccountServicePrincipalsV2Interface_ListAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iam.ListAccountServicePrincipalsRequest))
	})
	return _c
}

func (_c *MockAccountServicePrincipalsV2Interface_ListAll_Call) Return(_a0 []iam.AccountServicePrincipal, _a1 error) *MockAccountServicePrincipalsV2Interface_ListAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountServicePrincipalsV2Interface_ListAll_Call) RunAndReturn(run func(context.Context, iam.ListAccountServicePrincipalsRequest) ([]iam.AccountServicePrincipal, error)) *MockAccountServicePrincipalsV2Interface_ListAll_Call {
	_c.Call.Return(run)
	return _c
}

// Patch provides a mock function with given fields: ctx, request
func (_m *MockAccountServicePrincipalsV2Interface) Patch(ctx context.Context, request iam.PatchAccountServicePrincipalRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Patch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, iam.PatchAccountServicePrincipalRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccountServicePrincipalsV2Interface_Patch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Patch'
type MockAccountServicePrincipalsV2Interface_Patch_Call struct {
	*mock.Call
}

// Patch is a helper method to define mock.On call
//   - ctx context.Context
//   - request iam.PatchAccountServicePrincipalRequest
func (_e *MockAccountServicePrincipalsV2Interface_Expecter) Patch(ctx interface{}, request interface{}) *MockAccountServicePrincipalsV2Interface_Patch_Call {
	return &MockAccountServicePrincipalsV2Interface_Patch_Call{Call: _e.mock.On("Patch", ctx, request)}
}

func (_c *MockAccountServicePrincipalsV2Interface_Patch_Call) Run(run func(ctx context.Context, request iam.PatchAccountServicePrincipalRequest)) *MockAccountServicePrincipalsV2Interface_Patch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iam.PatchAccountServicePrincipalRequest))
	})
	return _c
}

func (_c *MockAccountServicePrincipalsV2Interface_Patch_Call) Return(_a0 error) *MockAccountServicePrincipalsV2Interface_Patch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountServicePrincipalsV2Interface_Patch_Call) RunAndReturn(run func(context.Context, iam.PatchAccountServicePrincipalRequest) error) *MockAccountServicePrincipalsV2Interface_Patch_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, request
func (_m *MockAccountServicePrincipalsV2Interface) Update(ctx context.Context, request iam.UpdateAccountServicePrincipalRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, iam.UpdateAccountServicePrincipalRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccountServicePrincipalsV2Interface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockAccountServicePrincipalsV2Interface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - request iam.UpdateAccountServicePrincipalRequest
func (_e *MockAccountServicePrincipalsV2Interface_Expecter) Update(ctx interface{}, request interface{}) *MockAccountServicePrincipalsV2Interface_Update_Call {
	return &MockAccountServicePrincipalsV2Interface_Update_Call{Call: _e.mock.On("Update", ctx, request)}
}

func (_c *MockAccountServicePrincipalsV2Interface_Update_Call) Run(run func(ctx context.Context, request iam.UpdateAccountServicePrincipalRequest)) *MockAccountServicePrincipalsV2Interface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iam.UpdateAccountServicePrincipalRequest))
	})
	return _c
}

func (_c *MockAccountServicePrincipalsV2Interface_Update_Call) Return(_a0 error) *MockAccountServicePrincipalsV2Interface_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountServicePrincipalsV2Interface_Update_Call) RunAndReturn(run func(context.Context, iam.UpdateAccountServicePrincipalRequest) error) *MockAccountServicePrincipalsV2Interface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAccountServicePrincipalsV2Interface creates a new instance of MockAccountServicePrincipalsV2Interface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccountServicePrincipalsV2Interface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccountServicePrincipalsV2Interface {
	mock := &MockAccountServicePrincipalsV2Interface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
