// Code generated by mockery v2.53.2. DO NOT EDIT.

package iam

import (
	context "context"

	listing "github.com/databricks/databricks-sdk-go/listing"
	iam "github.com/databricks/databricks-sdk-go/service/iam"

	mock "github.com/stretchr/testify/mock"
)

// MockUsersV2Interface is an autogenerated mock type for the UsersV2Interface type
type MockUsersV2Interface struct {
	mock.Mock
}

type MockUsersV2Interface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUsersV2Interface) EXPECT() *MockUsersV2Interface_Expecter {
	return &MockUsersV2Interface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, request
func (_m *MockUsersV2Interface) Create(ctx context.Context, request iam.CreateUserRequest) (*iam.User, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *iam.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iam.CreateUserRequest) (*iam.User, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iam.CreateUserRequest) *iam.User); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iam.CreateUserRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUsersV2Interface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockUsersV2Interface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - request iam.CreateUserRequest
func (_e *MockUsersV2Interface_Expecter) Create(ctx interface{}, request interface{}) *MockUsersV2Interface_Create_Call {
	return &MockUsersV2Interface_Create_Call{Call: _e.mock.On("Create", ctx, request)}
}

func (_c *MockUsersV2Interface_Create_Call) Run(run func(ctx context.Context, request iam.CreateUserRequest)) *MockUsersV2Interface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iam.CreateUserRequest))
	})
	return _c
}

func (_c *MockUsersV2Interface_Create_Call) Return(_a0 *iam.User, _a1 error) *MockUsersV2Interface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUsersV2Interface_Create_Call) RunAndReturn(run func(context.Context, iam.CreateUserRequest) (*iam.User, error)) *MockUsersV2Interface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, request
func (_m *MockUsersV2Interface) Delete(ctx context.Context, request iam.DeleteUserRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, iam.DeleteUserRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUsersV2Interface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockUsersV2Interface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - request iam.DeleteUserRequest
func (_e *MockUsersV2Interface_Expecter) Delete(ctx interface{}, request interface{}) *MockUsersV2Interface_Delete_Call {
	return &MockUsersV2Interface_Delete_Call{Call: _e.mock.On("Delete", ctx, request)}
}

func (_c *MockUsersV2Interface_Delete_Call) Run(run func(ctx context.Context, request iam.DeleteUserRequest)) *MockUsersV2Interface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iam.DeleteUserRequest))
	})
	return _c
}

func (_c *MockUsersV2Interface_Delete_Call) Return(_a0 error) *MockUsersV2Interface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUsersV2Interface_Delete_Call) RunAndReturn(run func(context.Context, iam.DeleteUserRequest) error) *MockUsersV2Interface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, request
func (_m *MockUsersV2Interface) Get(ctx context.Context, request iam.GetUserRequest) (*iam.User, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *iam.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iam.GetUserRequest) (*iam.User, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iam.GetUserRequest) *iam.User); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iam.GetUserRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUsersV2Interface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockUsersV2Interface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - request iam.GetUserRequest
func (_e *MockUsersV2Interface_Expecter) Get(ctx interface{}, request interface{}) *MockUsersV2Interface_Get_Call {
	return &MockUsersV2Interface_Get_Call{Call: _e.mock.On("Get", ctx, request)}
}

func (_c *MockUsersV2Interface_Get_Call) Run(run func(ctx context.Context, request iam.GetUserRequest)) *MockUsersV2Interface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iam.GetUserRequest))
	})
	return _c
}

func (_c *MockUsersV2Interface_Get_Call) Return(_a0 *iam.User, _a1 error) *MockUsersV2Interface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUsersV2Interface_Get_Call) RunAndReturn(run func(context.Context, iam.GetUserRequest) (*iam.User, error)) *MockUsersV2Interface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetPermissionLevels provides a mock function with given fields: ctx, request
func (_m *MockUsersV2Interface) GetPermissionLevels(ctx context.Context, request iam.GetPasswordPermissionLevelsRequest) (*iam.GetPasswordPermissionLevelsResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetPermissionLevels")
	}

	var r0 *iam.GetPasswordPermissionLevelsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iam.GetPasswordPermissionLevelsRequest) (*iam.GetPasswordPermissionLevelsResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iam.GetPasswordPermissionLevelsRequest) *iam.GetPasswordPermissionLevelsResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.GetPasswordPermissionLevelsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iam.GetPasswordPermissionLevelsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUsersV2Interface_GetPermissionLevels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPermissionLevels'
type MockUsersV2Interface_GetPermissionLevels_Call struct {
	*mock.Call
}

// GetPermissionLevels is a helper method to define mock.On call
//   - ctx context.Context
//   - request iam.GetPasswordPermissionLevelsRequest
func (_e *MockUsersV2Interface_Expecter) GetPermissionLevels(ctx interface{}, request interface{}) *MockUsersV2Interface_GetPermissionLevels_Call {
	return &MockUsersV2Interface_GetPermissionLevels_Call{Call: _e.mock.On("GetPermissionLevels", ctx, request)}
}

func (_c *MockUsersV2Interface_GetPermissionLevels_Call) Run(run func(ctx context.Context, request iam.GetPasswordPermissionLevelsRequest)) *MockUsersV2Interface_GetPermissionLevels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iam.GetPasswordPermissionLevelsRequest))
	})
	return _c
}

func (_c *MockUsersV2Interface_GetPermissionLevels_Call) Return(_a0 *iam.GetPasswordPermissionLevelsResponse, _a1 error) *MockUsersV2Interface_GetPermissionLevels_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUsersV2Interface_GetPermissionLevels_Call) RunAndReturn(run func(context.Context, iam.GetPasswordPermissionLevelsRequest) (*iam.GetPasswordPermissionLevelsResponse, error)) *MockUsersV2Interface_GetPermissionLevels_Call {
	_c.Call.Return(run)
	return _c
}

// GetPermissions provides a mock function with given fields: ctx, request
func (_m *MockUsersV2Interface) GetPermissions(ctx context.Context, request iam.GetPasswordPermissionsRequest) (*iam.PasswordPermissions, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetPermissions")
	}

	var r0 *iam.PasswordPermissions
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iam.GetPasswordPermissionsRequest) (*iam.PasswordPermissions, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iam.GetPasswordPermissionsRequest) *iam.PasswordPermissions); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.PasswordPermissions)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iam.GetPasswordPermissionsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUsersV2Interface_GetPermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPermissions'
type MockUsersV2Interface_GetPermissions_Call struct {
	*mock.Call
}

// GetPermissions is a helper method to define mock.On call
//   - ctx context.Context
//   - request iam.GetPasswordPermissionsRequest
func (_e *MockUsersV2Interface_Expecter) GetPermissions(ctx interface{}, request interface{}) *MockUsersV2Interface_GetPermissions_Call {
	return &MockUsersV2Interface_GetPermissions_Call{Call: _e.mock.On("GetPermissions", ctx, request)}
}

func (_c *MockUsersV2Interface_GetPermissions_Call) Run(run func(ctx context.Context, request iam.GetPasswordPermissionsRequest)) *MockUsersV2Interface_GetPermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iam.GetPasswordPermissionsRequest))
	})
	return _c
}

func (_c *MockUsersV2Interface_GetPermissions_Call) Return(_a0 *iam.PasswordPermissions, _a1 error) *MockUsersV2Interface_GetPermissions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUsersV2Interface_GetPermissions_Call) RunAndReturn(run func(context.Context, iam.GetPasswordPermissionsRequest) (*iam.PasswordPermissions, error)) *MockUsersV2Interface_GetPermissions_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, request
func (_m *MockUsersV2Interface) List(ctx context.Context, request iam.ListUsersRequest) listing.Iterator[iam.User] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 listing.Iterator[iam.User]
	if rf, ok := ret.Get(0).(func(context.Context, iam.ListUsersRequest) listing.Iterator[iam.User]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listing.Iterator[iam.User])
		}
	}

	return r0
}

// MockUsersV2Interface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockUsersV2Interface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - request iam.ListUsersRequest
func (_e *MockUsersV2Interface_Expecter) List(ctx interface{}, request interface{}) *MockUsersV2Interface_List_Call {
	return &MockUsersV2Interface_List_Call{Call: _e.mock.On("List", ctx, request)}
}

func (_c *MockUsersV2Interface_List_Call) Run(run func(ctx context.Context, request iam.ListUsersRequest)) *MockUsersV2Interface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iam.ListUsersRequest))
	})
	return _c
}

func (_c *MockUsersV2Interface_List_Call) Return(_a0 listing.Iterator[iam.User]) *MockUsersV2Interface_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUsersV2Interface_List_Call) RunAndReturn(run func(context.Context, iam.ListUsersRequest) listing.Iterator[iam.User]) *MockUsersV2Interface_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListAll provides a mock function with given fields: ctx, request
func (_m *MockUsersV2Interface) ListAll(ctx context.Context, request iam.ListUsersRequest) ([]iam.User, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListAll")
	}

	var r0 []iam.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iam.ListUsersRequest) ([]iam.User, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iam.ListUsersRequest) []iam.User); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]iam.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iam.ListUsersRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUsersV2Interface_ListAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAll'
type MockUsersV2Interface_ListAll_Call struct {
	*mock.Call
}

// ListAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request iam.ListUsersRequest
func (_e *MockUsersV2Interface_Expecter) ListAll(ctx interface{}, request interface{}) *MockUsersV2Interface_ListAll_Call {
	return &MockUsersV2Interface_ListAll_Call{Call: _e.mock.On("ListAll", ctx, request)}
}

func (_c *MockUsersV2Interface_ListAll_Call) Run(run func(ctx context.Context, request iam.ListUsersRequest)) *MockUsersV2Interface_ListAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iam.ListUsersRequest))
	})
	return _c
}

func (_c *MockUsersV2Interface_ListAll_Call) Return(_a0 []iam.User, _a1 error) *MockUsersV2Interface_ListAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUsersV2Interface_ListAll_Call) RunAndReturn(run func(context.Context, iam.ListUsersRequest) ([]iam.User, error)) *MockUsersV2Interface_ListAll_Call {
	_c.Call.Return(run)
	return _c
}

// Patch provides a mock function with given fields: ctx, request
func (_m *MockUsersV2Interface) Patch(ctx context.Context, request iam.PatchUserRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Patch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, iam.PatchUserRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUsersV2Interface_Patch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Patch'
type MockUsersV2Interface_Patch_Call struct {
	*mock.Call
}

// Patch is a helper method to define mock.On call
//   - ctx context.Context
//   - request iam.PatchUserRequest
func (_e *MockUsersV2Interface_Expecter) Patch(ctx interface{}, request interface{}) *MockUsersV2Interface_Patch_Call {
	return &MockUsersV2Interface_Patch_Call{Call: _e.mock.On("Patch", ctx, request)}
}

func (_c *MockUsersV2Interface_Patch_Call) Run(run func(ctx context.Context, request iam.PatchUserRequest)) *MockUsersV2Interface_Patch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iam.PatchUserRequest))
	})
	return _c
}

func (_c *MockUsersV2Interface_Patch_Call) Return(_a0 error) *MockUsersV2Interface_Patch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUsersV2Interface_Patch_Call) RunAndReturn(run func(context.Context, iam.PatchUserRequest) error) *MockUsersV2Interface_Patch_Call {
	_c.Call.Return(run)
	return _c
}

// SetPermissions provides a mock function with given fields: ctx, request
func (_m *MockUsersV2Interface) SetPermissions(ctx context.Context, request iam.PasswordPermissionsRequest) (*iam.PasswordPermissions, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for SetPermissions")
	}

	var r0 *iam.PasswordPermissions
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iam.PasswordPermissionsRequest) (*iam.PasswordPermissions, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iam.PasswordPermissionsRequest) *iam.PasswordPermissions); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.PasswordPermissions)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iam.PasswordPermissionsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUsersV2Interface_SetPermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetPermissions'
type MockUsersV2Interface_SetPermissions_Call struct {
	*mock.Call
}

// SetPermissions is a helper method to define mock.On call
//   - ctx context.Context
//   - request iam.PasswordPermissionsRequest
func (_e *MockUsersV2Interface_Expecter) SetPermissions(ctx interface{}, request interface{}) *MockUsersV2Interface_SetPermissions_Call {
	return &MockUsersV2Interface_SetPermissions_Call{Call: _e.mock.On("SetPermissions", ctx, request)}
}

func (_c *MockUsersV2Interface_SetPermissions_Call) Run(run func(ctx context.Context, request iam.PasswordPermissionsRequest)) *MockUsersV2Interface_SetPermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iam.PasswordPermissionsRequest))
	})
	return _c
}

func (_c *MockUsersV2Interface_SetPermissions_Call) Return(_a0 *iam.PasswordPermissions, _a1 error) *MockUsersV2Interface_SetPermissions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUsersV2Interface_SetPermissions_Call) RunAndReturn(run func(context.Context, iam.PasswordPermissionsRequest) (*iam.PasswordPermissions, error)) *MockUsersV2Interface_SetPermissions_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, request
func (_m *MockUsersV2Interface) Update(ctx context.Context, request iam.UpdateUserRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, iam.UpdateUserRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUsersV2Interface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockUsersV2Interface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - request iam.UpdateUserRequest
func (_e *MockUsersV2Interface_Expecter) Update(ctx interface{}, request interface{}) *MockUsersV2Interface_Update_Call {
	return &MockUsersV2Interface_Update_Call{Call: _e.mock.On("Update", ctx, request)}
}

func (_c *MockUsersV2Interface_Update_Call) Run(run func(ctx context.Context, request iam.UpdateUserRequest)) *MockUsersV2Interface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iam.UpdateUserRequest))
	})
	return _c
}

func (_c *MockUsersV2Interface_Update_Call) Return(_a0 error) *MockUsersV2Interface_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUsersV2Interface_Update_Call) RunAndReturn(run func(context.Context, iam.UpdateUserRequest) error) *MockUsersV2Interface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePermissions provides a mock function with given fields: ctx, request
func (_m *MockUsersV2Interface) UpdatePermissions(ctx context.Context, request iam.PasswordPermissionsRequest) (*iam.PasswordPermissions, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePermissions")
	}

	var r0 *iam.PasswordPermissions
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iam.PasswordPermissionsRequest) (*iam.PasswordPermissions, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iam.PasswordPermissionsRequest) *iam.PasswordPermissions); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.PasswordPermissions)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iam.PasswordPermissionsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUsersV2Interface_UpdatePermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePermissions'
type MockUsersV2Interface_UpdatePermissions_Call struct {
	*mock.Call
}

// UpdatePermissions is a helper method to define mock.On call
//   - ctx context.Context
//   - request iam.PasswordPermissionsRequest
func (_e *MockUsersV2Interface_Expecter) UpdatePermissions(ctx interface{}, request interface{}) *MockUsersV2Interface_UpdatePermissions_Call {
	return &MockUsersV2Interface_UpdatePermissions_Call{Call: _e.mock.On("UpdatePermissions", ctx, request)}
}

func (_c *MockUsersV2Interface_UpdatePermissions_Call) Run(run func(ctx context.Context, request iam.PasswordPermissionsRequest)) *MockUsersV2Interface_UpdatePermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iam.PasswordPermissionsRequest))
	})
	return _c
}

func (_c *MockUsersV2Interface_UpdatePermissions_Call) Return(_a0 *iam.PasswordPermissions, _a1 error) *MockUsersV2Interface_UpdatePermissions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUsersV2Interface_UpdatePermissions_Call) RunAndReturn(run func(context.Context, iam.PasswordPermissionsRequest) (*iam.PasswordPermissions, error)) *MockUsersV2Interface_UpdatePermissions_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUsersV2Interface creates a new instance of MockUsersV2Interface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUsersV2Interface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUsersV2Interface {
	mock := &MockUsersV2Interface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
