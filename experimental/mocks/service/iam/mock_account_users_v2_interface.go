// Code generated by mockery v2.53.2. DO NOT EDIT.

package iam

import (
	context "context"

	listing "github.com/databricks/databricks-sdk-go/listing"
	iam "github.com/databricks/databricks-sdk-go/service/iam"

	mock "github.com/stretchr/testify/mock"
)

// MockAccountUsersV2Interface is an autogenerated mock type for the AccountUsersV2Interface type
type MockAccountUsersV2Interface struct {
	mock.Mock
}

type MockAccountUsersV2Interface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccountUsersV2Interface) EXPECT() *MockAccountUsersV2Interface_Expecter {
	return &MockAccountUsersV2Interface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, request
func (_m *MockAccountUsersV2Interface) Create(ctx context.Context, request iam.CreateAccountUserRequest) (*iam.AccountUser, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *iam.AccountUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iam.CreateAccountUserRequest) (*iam.AccountUser, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iam.CreateAccountUserRequest) *iam.AccountUser); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.AccountUser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iam.CreateAccountUserRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountUsersV2Interface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockAccountUsersV2Interface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - request iam.CreateAccountUserRequest
func (_e *MockAccountUsersV2Interface_Expecter) Create(ctx interface{}, request interface{}) *MockAccountUsersV2Interface_Create_Call {
	return &MockAccountUsersV2Interface_Create_Call{Call: _e.mock.On("Create", ctx, request)}
}

func (_c *MockAccountUsersV2Interface_Create_Call) Run(run func(ctx context.Context, request iam.CreateAccountUserRequest)) *MockAccountUsersV2Interface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iam.CreateAccountUserRequest))
	})
	return _c
}

func (_c *MockAccountUsersV2Interface_Create_Call) Return(_a0 *iam.AccountUser, _a1 error) *MockAccountUsersV2Interface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountUsersV2Interface_Create_Call) RunAndReturn(run func(context.Context, iam.CreateAccountUserRequest) (*iam.AccountUser, error)) *MockAccountUsersV2Interface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, request
func (_m *MockAccountUsersV2Interface) Delete(ctx context.Context, request iam.DeleteAccountUserRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, iam.DeleteAccountUserRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccountUsersV2Interface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockAccountUsersV2Interface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - request iam.DeleteAccountUserRequest
func (_e *MockAccountUsersV2Interface_Expecter) Delete(ctx interface{}, request interface{}) *MockAccountUsersV2Interface_Delete_Call {
	return &MockAccountUsersV2Interface_Delete_Call{Call: _e.mock.On("Delete", ctx, request)}
}

func (_c *MockAccountUsersV2Interface_Delete_Call) Run(run func(ctx context.Context, request iam.DeleteAccountUserRequest)) *MockAccountUsersV2Interface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iam.DeleteAccountUserRequest))
	})
	return _c
}

func (_c *MockAccountUsersV2Interface_Delete_Call) Return(_a0 error) *MockAccountUsersV2Interface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountUsersV2Interface_Delete_Call) RunAndReturn(run func(context.Context, iam.DeleteAccountUserRequest) error) *MockAccountUsersV2Interface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, request
func (_m *MockAccountUsersV2Interface) Get(ctx context.Context, request iam.GetAccountUserRequest) (*iam.AccountUser, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *iam.AccountUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iam.GetAccountUserRequest) (*iam.AccountUser, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iam.GetAccountUserRequest) *iam.AccountUser); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.AccountUser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iam.GetAccountUserRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountUsersV2Interface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockAccountUsersV2Interface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - request iam.GetAccountUserRequest
func (_e *MockAccountUsersV2Interface_Expecter) Get(ctx interface{}, request interface{}) *MockAccountUsersV2Interface_Get_Call {
	return &MockAccountUsersV2Interface_Get_Call{Call: _e.mock.On("Get", ctx, request)}
}

func (_c *MockAccountUsersV2Interface_Get_Call) Run(run func(ctx context.Context, request iam.GetAccountUserRequest)) *MockAccountUsersV2Interface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iam.GetAccountUserRequest))
	})
	return _c
}

func (_c *MockAccountUsersV2Interface_Get_Call) Return(_a0 *iam.AccountUser, _a1 error) *MockAccountUsersV2Interface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountUsersV2Interface_Get_Call) RunAndReturn(run func(context.Context, iam.GetAccountUserRequest) (*iam.AccountUser, error)) *MockAccountUsersV2Interface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, request
func (_m *MockAccountUsersV2Interface) List(ctx context.Context, request iam.ListAccountUsersRequest) listing.Iterator[iam.AccountGroup] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 listing.Iterator[iam.AccountGroup]
	if rf, ok := ret.Get(0).(func(context.Context, iam.ListAccountUsersRequest) listing.Iterator[iam.AccountGroup]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listing.Iterator[iam.AccountGroup])
		}
	}

	return r0
}

// MockAccountUsersV2Interface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockAccountUsersV2Interface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - request iam.ListAccountUsersRequest
func (_e *MockAccountUsersV2Interface_Expecter) List(ctx interface{}, request interface{}) *MockAccountUsersV2Interface_List_Call {
	return &MockAccountUsersV2Interface_List_Call{Call: _e.mock.On("List", ctx, request)}
}

func (_c *MockAccountUsersV2Interface_List_Call) Run(run func(ctx context.Context, request iam.ListAccountUsersRequest)) *MockAccountUsersV2Interface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iam.ListAccountUsersRequest))
	})
	return _c
}

func (_c *MockAccountUsersV2Interface_List_Call) Return(_a0 listing.Iterator[iam.AccountGroup]) *MockAccountUsersV2Interface_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountUsersV2Interface_List_Call) RunAndReturn(run func(context.Context, iam.ListAccountUsersRequest) listing.Iterator[iam.AccountGroup]) *MockAccountUsersV2Interface_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListAll provides a mock function with given fields: ctx, request
func (_m *MockAccountUsersV2Interface) ListAll(ctx context.Context, request iam.ListAccountUsersRequest) ([]iam.AccountGroup, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListAll")
	}

	var r0 []iam.AccountGroup
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iam.ListAccountUsersRequest) ([]iam.AccountGroup, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iam.ListAccountUsersRequest) []iam.AccountGroup); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]iam.AccountGroup)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iam.ListAccountUsersRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountUsersV2Interface_ListAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAll'
type MockAccountUsersV2Interface_ListAll_Call struct {
	*mock.Call
}

// ListAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request iam.ListAccountUsersRequest
func (_e *MockAccountUsersV2Interface_Expecter) ListAll(ctx interface{}, request interface{}) *MockAccountUsersV2Interface_ListAll_Call {
	return &MockAccountUsersV2Interface_ListAll_Call{Call: _e.mock.On("ListAll", ctx, request)}
}

func (_c *MockAccountUsersV2Interface_ListAll_Call) Run(run func(ctx context.Context, request iam.ListAccountUsersRequest)) *MockAccountUsersV2Interface_ListAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iam.ListAccountUsersRequest))
	})
	return _c
}

func (_c *MockAccountUsersV2Interface_ListAll_Call) Return(_a0 []iam.AccountGroup, _a1 error) *MockAccountUsersV2Interface_ListAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountUsersV2Interface_ListAll_Call) RunAndReturn(run func(context.Context, iam.ListAccountUsersRequest) ([]iam.AccountGroup, error)) *MockAccountUsersV2Interface_ListAll_Call {
	_c.Call.Return(run)
	return _c
}

// Patch provides a mock function with given fields: ctx, request
func (_m *MockAccountUsersV2Interface) Patch(ctx context.Context, request iam.PatchAccountUserRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Patch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, iam.PatchAccountUserRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccountUsersV2Interface_Patch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Patch'
type MockAccountUsersV2Interface_Patch_Call struct {
	*mock.Call
}

// Patch is a helper method to define mock.On call
//   - ctx context.Context
//   - request iam.PatchAccountUserRequest
func (_e *MockAccountUsersV2Interface_Expecter) Patch(ctx interface{}, request interface{}) *MockAccountUsersV2Interface_Patch_Call {
	return &MockAccountUsersV2Interface_Patch_Call{Call: _e.mock.On("Patch", ctx, request)}
}

func (_c *MockAccountUsersV2Interface_Patch_Call) Run(run func(ctx context.Context, request iam.PatchAccountUserRequest)) *MockAccountUsersV2Interface_Patch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iam.PatchAccountUserRequest))
	})
	return _c
}

func (_c *MockAccountUsersV2Interface_Patch_Call) Return(_a0 error) *MockAccountUsersV2Interface_Patch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountUsersV2Interface_Patch_Call) RunAndReturn(run func(context.Context, iam.PatchAccountUserRequest) error) *MockAccountUsersV2Interface_Patch_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, request
func (_m *MockAccountUsersV2Interface) Update(ctx context.Context, request iam.UpdateAccountUserRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, iam.UpdateAccountUserRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccountUsersV2Interface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockAccountUsersV2Interface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - request iam.UpdateAccountUserRequest
func (_e *MockAccountUsersV2Interface_Expecter) Update(ctx interface{}, request interface{}) *MockAccountUsersV2Interface_Update_Call {
	return &MockAccountUsersV2Interface_Update_Call{Call: _e.mock.On("Update", ctx, request)}
}

func (_c *MockAccountUsersV2Interface_Update_Call) Run(run func(ctx context.Context, request iam.UpdateAccountUserRequest)) *MockAccountUsersV2Interface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iam.UpdateAccountUserRequest))
	})
	return _c
}

func (_c *MockAccountUsersV2Interface_Update_Call) Return(_a0 error) *MockAccountUsersV2Interface_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountUsersV2Interface_Update_Call) RunAndReturn(run func(context.Context, iam.UpdateAccountUserRequest) error) *MockAccountUsersV2Interface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAccountUsersV2Interface creates a new instance of MockAccountUsersV2Interface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccountUsersV2Interface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccountUsersV2Interface {
	mock := &MockAccountUsersV2Interface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
