// Code generated by mockery v2.43.0. DO NOT EDIT.

package iam

import (
	context "context"

	iam "github.com/databricks/databricks-sdk-go/service/iam"
	mock "github.com/stretchr/testify/mock"
)

// MockAccountAccessControlInterface is an autogenerated mock type for the AccountAccessControlInterface type
type MockAccountAccessControlInterface struct {
	mock.Mock
}

type MockAccountAccessControlInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccountAccessControlInterface) EXPECT() *MockAccountAccessControlInterface_Expecter {
	return &MockAccountAccessControlInterface_Expecter{mock: &_m.Mock}
}

// GetAssignableRolesForResource provides a mock function with given fields: ctx, request
func (_m *MockAccountAccessControlInterface) GetAssignableRolesForResource(ctx context.Context, request iam.GetAssignableRolesForResourceRequest) (*iam.GetAssignableRolesForResourceResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetAssignableRolesForResource")
	}

	var r0 *iam.GetAssignableRolesForResourceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iam.GetAssignableRolesForResourceRequest) (*iam.GetAssignableRolesForResourceResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iam.GetAssignableRolesForResourceRequest) *iam.GetAssignableRolesForResourceResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.GetAssignableRolesForResourceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iam.GetAssignableRolesForResourceRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountAccessControlInterface_GetAssignableRolesForResource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAssignableRolesForResource'
type MockAccountAccessControlInterface_GetAssignableRolesForResource_Call struct {
	*mock.Call
}

// GetAssignableRolesForResource is a helper method to define mock.On call
//   - ctx context.Context
//   - request iam.GetAssignableRolesForResourceRequest
func (_e *MockAccountAccessControlInterface_Expecter) GetAssignableRolesForResource(ctx interface{}, request interface{}) *MockAccountAccessControlInterface_GetAssignableRolesForResource_Call {
	return &MockAccountAccessControlInterface_GetAssignableRolesForResource_Call{Call: _e.mock.On("GetAssignableRolesForResource", ctx, request)}
}

func (_c *MockAccountAccessControlInterface_GetAssignableRolesForResource_Call) Run(run func(ctx context.Context, request iam.GetAssignableRolesForResourceRequest)) *MockAccountAccessControlInterface_GetAssignableRolesForResource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iam.GetAssignableRolesForResourceRequest))
	})
	return _c
}

func (_c *MockAccountAccessControlInterface_GetAssignableRolesForResource_Call) Return(_a0 *iam.GetAssignableRolesForResourceResponse, _a1 error) *MockAccountAccessControlInterface_GetAssignableRolesForResource_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountAccessControlInterface_GetAssignableRolesForResource_Call) RunAndReturn(run func(context.Context, iam.GetAssignableRolesForResourceRequest) (*iam.GetAssignableRolesForResourceResponse, error)) *MockAccountAccessControlInterface_GetAssignableRolesForResource_Call {
	_c.Call.Return(run)
	return _c
}

// GetRuleSet provides a mock function with given fields: ctx, request
func (_m *MockAccountAccessControlInterface) GetRuleSet(ctx context.Context, request iam.GetRuleSetRequest) (*iam.RuleSetResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetRuleSet")
	}

	var r0 *iam.RuleSetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iam.GetRuleSetRequest) (*iam.RuleSetResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iam.GetRuleSetRequest) *iam.RuleSetResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.RuleSetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iam.GetRuleSetRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountAccessControlInterface_GetRuleSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRuleSet'
type MockAccountAccessControlInterface_GetRuleSet_Call struct {
	*mock.Call
}

// GetRuleSet is a helper method to define mock.On call
//   - ctx context.Context
//   - request iam.GetRuleSetRequest
func (_e *MockAccountAccessControlInterface_Expecter) GetRuleSet(ctx interface{}, request interface{}) *MockAccountAccessControlInterface_GetRuleSet_Call {
	return &MockAccountAccessControlInterface_GetRuleSet_Call{Call: _e.mock.On("GetRuleSet", ctx, request)}
}

func (_c *MockAccountAccessControlInterface_GetRuleSet_Call) Run(run func(ctx context.Context, request iam.GetRuleSetRequest)) *MockAccountAccessControlInterface_GetRuleSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iam.GetRuleSetRequest))
	})
	return _c
}

func (_c *MockAccountAccessControlInterface_GetRuleSet_Call) Return(_a0 *iam.RuleSetResponse, _a1 error) *MockAccountAccessControlInterface_GetRuleSet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountAccessControlInterface_GetRuleSet_Call) RunAndReturn(run func(context.Context, iam.GetRuleSetRequest) (*iam.RuleSetResponse, error)) *MockAccountAccessControlInterface_GetRuleSet_Call {
	_c.Call.Return(run)
	return _c
}

// Impl provides a mock function with given fields:
func (_m *MockAccountAccessControlInterface) Impl() iam.AccountAccessControlService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 iam.AccountAccessControlService
	if rf, ok := ret.Get(0).(func() iam.AccountAccessControlService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(iam.AccountAccessControlService)
		}
	}

	return r0
}

// MockAccountAccessControlInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockAccountAccessControlInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockAccountAccessControlInterface_Expecter) Impl() *MockAccountAccessControlInterface_Impl_Call {
	return &MockAccountAccessControlInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockAccountAccessControlInterface_Impl_Call) Run(run func()) *MockAccountAccessControlInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAccountAccessControlInterface_Impl_Call) Return(_a0 iam.AccountAccessControlService) *MockAccountAccessControlInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountAccessControlInterface_Impl_Call) RunAndReturn(run func() iam.AccountAccessControlService) *MockAccountAccessControlInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRuleSet provides a mock function with given fields: ctx, request
func (_m *MockAccountAccessControlInterface) UpdateRuleSet(ctx context.Context, request iam.UpdateRuleSetRequest) (*iam.RuleSetResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRuleSet")
	}

	var r0 *iam.RuleSetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iam.UpdateRuleSetRequest) (*iam.RuleSetResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iam.UpdateRuleSetRequest) *iam.RuleSetResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.RuleSetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iam.UpdateRuleSetRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountAccessControlInterface_UpdateRuleSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRuleSet'
type MockAccountAccessControlInterface_UpdateRuleSet_Call struct {
	*mock.Call
}

// UpdateRuleSet is a helper method to define mock.On call
//   - ctx context.Context
//   - request iam.UpdateRuleSetRequest
func (_e *MockAccountAccessControlInterface_Expecter) UpdateRuleSet(ctx interface{}, request interface{}) *MockAccountAccessControlInterface_UpdateRuleSet_Call {
	return &MockAccountAccessControlInterface_UpdateRuleSet_Call{Call: _e.mock.On("UpdateRuleSet", ctx, request)}
}

func (_c *MockAccountAccessControlInterface_UpdateRuleSet_Call) Run(run func(ctx context.Context, request iam.UpdateRuleSetRequest)) *MockAccountAccessControlInterface_UpdateRuleSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iam.UpdateRuleSetRequest))
	})
	return _c
}

func (_c *MockAccountAccessControlInterface_UpdateRuleSet_Call) Return(_a0 *iam.RuleSetResponse, _a1 error) *MockAccountAccessControlInterface_UpdateRuleSet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountAccessControlInterface_UpdateRuleSet_Call) RunAndReturn(run func(context.Context, iam.UpdateRuleSetRequest) (*iam.RuleSetResponse, error)) *MockAccountAccessControlInterface_UpdateRuleSet_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockAccountAccessControlInterface) WithImpl(impl iam.AccountAccessControlService) iam.AccountAccessControlInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 iam.AccountAccessControlInterface
	if rf, ok := ret.Get(0).(func(iam.AccountAccessControlService) iam.AccountAccessControlInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(iam.AccountAccessControlInterface)
		}
	}

	return r0
}

// MockAccountAccessControlInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockAccountAccessControlInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl iam.AccountAccessControlService
func (_e *MockAccountAccessControlInterface_Expecter) WithImpl(impl interface{}) *MockAccountAccessControlInterface_WithImpl_Call {
	return &MockAccountAccessControlInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockAccountAccessControlInterface_WithImpl_Call) Run(run func(impl iam.AccountAccessControlService)) *MockAccountAccessControlInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(iam.AccountAccessControlService))
	})
	return _c
}

func (_c *MockAccountAccessControlInterface_WithImpl_Call) Return(_a0 iam.AccountAccessControlInterface) *MockAccountAccessControlInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountAccessControlInterface_WithImpl_Call) RunAndReturn(run func(iam.AccountAccessControlService) iam.AccountAccessControlInterface) *MockAccountAccessControlInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAccountAccessControlInterface creates a new instance of MockAccountAccessControlInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccountAccessControlInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccountAccessControlInterface {
	mock := &MockAccountAccessControlInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
