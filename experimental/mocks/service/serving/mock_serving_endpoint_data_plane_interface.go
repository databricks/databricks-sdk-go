// Code generated by mockery v2.43.0. DO NOT EDIT.

package serving

import (
	context "context"

	serving "github.com/databricks/databricks-sdk-go/service/serving"
	mock "github.com/stretchr/testify/mock"
)

// MockServingEndpointDataPlaneInterface is an autogenerated mock type for the ServingEndpointDataPlaneInterface type
type MockServingEndpointDataPlaneInterface struct {
	mock.Mock
}

type MockServingEndpointDataPlaneInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServingEndpointDataPlaneInterface) EXPECT() *MockServingEndpointDataPlaneInterface_Expecter {
	return &MockServingEndpointDataPlaneInterface_Expecter{mock: &_m.Mock}
}

// Impl provides a mock function with given fields:
func (_m *MockServingEndpointDataPlaneInterface) Impl() serving.ServingEndpointDataPlaneService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 serving.ServingEndpointDataPlaneService
	if rf, ok := ret.Get(0).(func() serving.ServingEndpointDataPlaneService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(serving.ServingEndpointDataPlaneService)
		}
	}

	return r0
}

// MockServingEndpointDataPlaneInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockServingEndpointDataPlaneInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockServingEndpointDataPlaneInterface_Expecter) Impl() *MockServingEndpointDataPlaneInterface_Impl_Call {
	return &MockServingEndpointDataPlaneInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockServingEndpointDataPlaneInterface_Impl_Call) Run(run func()) *MockServingEndpointDataPlaneInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockServingEndpointDataPlaneInterface_Impl_Call) Return(_a0 serving.ServingEndpointDataPlaneService) *MockServingEndpointDataPlaneInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServingEndpointDataPlaneInterface_Impl_Call) RunAndReturn(run func() serving.ServingEndpointDataPlaneService) *MockServingEndpointDataPlaneInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function with given fields: ctx, request
func (_m *MockServingEndpointDataPlaneInterface) Query(ctx context.Context, request serving.QueryEndpointInput) (*serving.QueryEndpointResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 *serving.QueryEndpointResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, serving.QueryEndpointInput) (*serving.QueryEndpointResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, serving.QueryEndpointInput) *serving.QueryEndpointResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serving.QueryEndpointResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, serving.QueryEndpointInput) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServingEndpointDataPlaneInterface_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type MockServingEndpointDataPlaneInterface_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - ctx context.Context
//   - request serving.QueryEndpointInput
func (_e *MockServingEndpointDataPlaneInterface_Expecter) Query(ctx interface{}, request interface{}) *MockServingEndpointDataPlaneInterface_Query_Call {
	return &MockServingEndpointDataPlaneInterface_Query_Call{Call: _e.mock.On("Query", ctx, request)}
}

func (_c *MockServingEndpointDataPlaneInterface_Query_Call) Run(run func(ctx context.Context, request serving.QueryEndpointInput)) *MockServingEndpointDataPlaneInterface_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(serving.QueryEndpointInput))
	})
	return _c
}

func (_c *MockServingEndpointDataPlaneInterface_Query_Call) Return(_a0 *serving.QueryEndpointResponse, _a1 error) *MockServingEndpointDataPlaneInterface_Query_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServingEndpointDataPlaneInterface_Query_Call) RunAndReturn(run func(context.Context, serving.QueryEndpointInput) (*serving.QueryEndpointResponse, error)) *MockServingEndpointDataPlaneInterface_Query_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockServingEndpointDataPlaneInterface) WithImpl(impl serving.ServingEndpointDataPlaneService) serving.ServingEndpointDataPlaneInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 serving.ServingEndpointDataPlaneInterface
	if rf, ok := ret.Get(0).(func(serving.ServingEndpointDataPlaneService) serving.ServingEndpointDataPlaneInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(serving.ServingEndpointDataPlaneInterface)
		}
	}

	return r0
}

// MockServingEndpointDataPlaneInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockServingEndpointDataPlaneInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl serving.ServingEndpointDataPlaneService
func (_e *MockServingEndpointDataPlaneInterface_Expecter) WithImpl(impl interface{}) *MockServingEndpointDataPlaneInterface_WithImpl_Call {
	return &MockServingEndpointDataPlaneInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockServingEndpointDataPlaneInterface_WithImpl_Call) Run(run func(impl serving.ServingEndpointDataPlaneService)) *MockServingEndpointDataPlaneInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(serving.ServingEndpointDataPlaneService))
	})
	return _c
}

func (_c *MockServingEndpointDataPlaneInterface_WithImpl_Call) Return(_a0 serving.ServingEndpointDataPlaneInterface) *MockServingEndpointDataPlaneInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServingEndpointDataPlaneInterface_WithImpl_Call) RunAndReturn(run func(serving.ServingEndpointDataPlaneService) serving.ServingEndpointDataPlaneInterface) *MockServingEndpointDataPlaneInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockServingEndpointDataPlaneInterface creates a new instance of MockServingEndpointDataPlaneInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServingEndpointDataPlaneInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServingEndpointDataPlaneInterface {
	mock := &MockServingEndpointDataPlaneInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
