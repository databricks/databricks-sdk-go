// Code generated by mockery v2.43.0. DO NOT EDIT.

package serving

import (
	context "context"

	listing "github.com/databricks/databricks-sdk-go/listing"
	mock "github.com/stretchr/testify/mock"

	retries "github.com/databricks/databricks-sdk-go/retries"

	serving "github.com/databricks/databricks-sdk-go/service/serving"

	time "time"
)

// MockAppsInterface is an autogenerated mock type for the AppsInterface type
type MockAppsInterface struct {
	mock.Mock
}

type MockAppsInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAppsInterface) EXPECT() *MockAppsInterface_Expecter {
	return &MockAppsInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, createAppRequest
func (_m *MockAppsInterface) Create(ctx context.Context, createAppRequest serving.CreateAppRequest) (*serving.WaitGetAppIdle[serving.App], error) {
	ret := _m.Called(ctx, createAppRequest)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *serving.WaitGetAppIdle[serving.App]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, serving.CreateAppRequest) (*serving.WaitGetAppIdle[serving.App], error)); ok {
		return rf(ctx, createAppRequest)
	}
	if rf, ok := ret.Get(0).(func(context.Context, serving.CreateAppRequest) *serving.WaitGetAppIdle[serving.App]); ok {
		r0 = rf(ctx, createAppRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serving.WaitGetAppIdle[serving.App])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, serving.CreateAppRequest) error); ok {
		r1 = rf(ctx, createAppRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAppsInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockAppsInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - createAppRequest serving.CreateAppRequest
func (_e *MockAppsInterface_Expecter) Create(ctx interface{}, createAppRequest interface{}) *MockAppsInterface_Create_Call {
	return &MockAppsInterface_Create_Call{Call: _e.mock.On("Create", ctx, createAppRequest)}
}

func (_c *MockAppsInterface_Create_Call) Run(run func(ctx context.Context, createAppRequest serving.CreateAppRequest)) *MockAppsInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(serving.CreateAppRequest))
	})
	return _c
}

func (_c *MockAppsInterface_Create_Call) Return(_a0 *serving.WaitGetAppIdle[serving.App], _a1 error) *MockAppsInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAppsInterface_Create_Call) RunAndReturn(run func(context.Context, serving.CreateAppRequest) (*serving.WaitGetAppIdle[serving.App], error)) *MockAppsInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAndWait provides a mock function with given fields: ctx, createAppRequest, options
func (_m *MockAppsInterface) CreateAndWait(ctx context.Context, createAppRequest serving.CreateAppRequest, options ...retries.Option[serving.App]) (*serving.App, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, createAppRequest)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAndWait")
	}

	var r0 *serving.App
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, serving.CreateAppRequest, ...retries.Option[serving.App]) (*serving.App, error)); ok {
		return rf(ctx, createAppRequest, options...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, serving.CreateAppRequest, ...retries.Option[serving.App]) *serving.App); ok {
		r0 = rf(ctx, createAppRequest, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serving.App)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, serving.CreateAppRequest, ...retries.Option[serving.App]) error); ok {
		r1 = rf(ctx, createAppRequest, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAppsInterface_CreateAndWait_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAndWait'
type MockAppsInterface_CreateAndWait_Call struct {
	*mock.Call
}

// CreateAndWait is a helper method to define mock.On call
//   - ctx context.Context
//   - createAppRequest serving.CreateAppRequest
//   - options ...retries.Option[serving.App]
func (_e *MockAppsInterface_Expecter) CreateAndWait(ctx interface{}, createAppRequest interface{}, options ...interface{}) *MockAppsInterface_CreateAndWait_Call {
	return &MockAppsInterface_CreateAndWait_Call{Call: _e.mock.On("CreateAndWait",
		append([]interface{}{ctx, createAppRequest}, options...)...)}
}

func (_c *MockAppsInterface_CreateAndWait_Call) Run(run func(ctx context.Context, createAppRequest serving.CreateAppRequest, options ...retries.Option[serving.App])) *MockAppsInterface_CreateAndWait_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]retries.Option[serving.App], len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(retries.Option[serving.App])
			}
		}
		run(args[0].(context.Context), args[1].(serving.CreateAppRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAppsInterface_CreateAndWait_Call) Return(_a0 *serving.App, _a1 error) *MockAppsInterface_CreateAndWait_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAppsInterface_CreateAndWait_Call) RunAndReturn(run func(context.Context, serving.CreateAppRequest, ...retries.Option[serving.App]) (*serving.App, error)) *MockAppsInterface_CreateAndWait_Call {
	_c.Call.Return(run)
	return _c
}

// CreateDeployment provides a mock function with given fields: ctx, createAppDeploymentRequest
func (_m *MockAppsInterface) CreateDeployment(ctx context.Context, createAppDeploymentRequest serving.CreateAppDeploymentRequest) (*serving.WaitGetDeploymentAppSucceeded[serving.AppDeployment], error) {
	ret := _m.Called(ctx, createAppDeploymentRequest)

	if len(ret) == 0 {
		panic("no return value specified for CreateDeployment")
	}

	var r0 *serving.WaitGetDeploymentAppSucceeded[serving.AppDeployment]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, serving.CreateAppDeploymentRequest) (*serving.WaitGetDeploymentAppSucceeded[serving.AppDeployment], error)); ok {
		return rf(ctx, createAppDeploymentRequest)
	}
	if rf, ok := ret.Get(0).(func(context.Context, serving.CreateAppDeploymentRequest) *serving.WaitGetDeploymentAppSucceeded[serving.AppDeployment]); ok {
		r0 = rf(ctx, createAppDeploymentRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serving.WaitGetDeploymentAppSucceeded[serving.AppDeployment])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, serving.CreateAppDeploymentRequest) error); ok {
		r1 = rf(ctx, createAppDeploymentRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAppsInterface_CreateDeployment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDeployment'
type MockAppsInterface_CreateDeployment_Call struct {
	*mock.Call
}

// CreateDeployment is a helper method to define mock.On call
//   - ctx context.Context
//   - createAppDeploymentRequest serving.CreateAppDeploymentRequest
func (_e *MockAppsInterface_Expecter) CreateDeployment(ctx interface{}, createAppDeploymentRequest interface{}) *MockAppsInterface_CreateDeployment_Call {
	return &MockAppsInterface_CreateDeployment_Call{Call: _e.mock.On("CreateDeployment", ctx, createAppDeploymentRequest)}
}

func (_c *MockAppsInterface_CreateDeployment_Call) Run(run func(ctx context.Context, createAppDeploymentRequest serving.CreateAppDeploymentRequest)) *MockAppsInterface_CreateDeployment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(serving.CreateAppDeploymentRequest))
	})
	return _c
}

func (_c *MockAppsInterface_CreateDeployment_Call) Return(_a0 *serving.WaitGetDeploymentAppSucceeded[serving.AppDeployment], _a1 error) *MockAppsInterface_CreateDeployment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAppsInterface_CreateDeployment_Call) RunAndReturn(run func(context.Context, serving.CreateAppDeploymentRequest) (*serving.WaitGetDeploymentAppSucceeded[serving.AppDeployment], error)) *MockAppsInterface_CreateDeployment_Call {
	_c.Call.Return(run)
	return _c
}

// CreateDeploymentAndWait provides a mock function with given fields: ctx, createAppDeploymentRequest, options
func (_m *MockAppsInterface) CreateDeploymentAndWait(ctx context.Context, createAppDeploymentRequest serving.CreateAppDeploymentRequest, options ...retries.Option[serving.AppDeployment]) (*serving.AppDeployment, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, createAppDeploymentRequest)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDeploymentAndWait")
	}

	var r0 *serving.AppDeployment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, serving.CreateAppDeploymentRequest, ...retries.Option[serving.AppDeployment]) (*serving.AppDeployment, error)); ok {
		return rf(ctx, createAppDeploymentRequest, options...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, serving.CreateAppDeploymentRequest, ...retries.Option[serving.AppDeployment]) *serving.AppDeployment); ok {
		r0 = rf(ctx, createAppDeploymentRequest, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serving.AppDeployment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, serving.CreateAppDeploymentRequest, ...retries.Option[serving.AppDeployment]) error); ok {
		r1 = rf(ctx, createAppDeploymentRequest, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAppsInterface_CreateDeploymentAndWait_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDeploymentAndWait'
type MockAppsInterface_CreateDeploymentAndWait_Call struct {
	*mock.Call
}

// CreateDeploymentAndWait is a helper method to define mock.On call
//   - ctx context.Context
//   - createAppDeploymentRequest serving.CreateAppDeploymentRequest
//   - options ...retries.Option[serving.AppDeployment]
func (_e *MockAppsInterface_Expecter) CreateDeploymentAndWait(ctx interface{}, createAppDeploymentRequest interface{}, options ...interface{}) *MockAppsInterface_CreateDeploymentAndWait_Call {
	return &MockAppsInterface_CreateDeploymentAndWait_Call{Call: _e.mock.On("CreateDeploymentAndWait",
		append([]interface{}{ctx, createAppDeploymentRequest}, options...)...)}
}

func (_c *MockAppsInterface_CreateDeploymentAndWait_Call) Run(run func(ctx context.Context, createAppDeploymentRequest serving.CreateAppDeploymentRequest, options ...retries.Option[serving.AppDeployment])) *MockAppsInterface_CreateDeploymentAndWait_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]retries.Option[serving.AppDeployment], len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(retries.Option[serving.AppDeployment])
			}
		}
		run(args[0].(context.Context), args[1].(serving.CreateAppDeploymentRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAppsInterface_CreateDeploymentAndWait_Call) Return(_a0 *serving.AppDeployment, _a1 error) *MockAppsInterface_CreateDeploymentAndWait_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAppsInterface_CreateDeploymentAndWait_Call) RunAndReturn(run func(context.Context, serving.CreateAppDeploymentRequest, ...retries.Option[serving.AppDeployment]) (*serving.AppDeployment, error)) *MockAppsInterface_CreateDeploymentAndWait_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, request
func (_m *MockAppsInterface) Delete(ctx context.Context, request serving.DeleteAppRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, serving.DeleteAppRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAppsInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockAppsInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - request serving.DeleteAppRequest
func (_e *MockAppsInterface_Expecter) Delete(ctx interface{}, request interface{}) *MockAppsInterface_Delete_Call {
	return &MockAppsInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, request)}
}

func (_c *MockAppsInterface_Delete_Call) Run(run func(ctx context.Context, request serving.DeleteAppRequest)) *MockAppsInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(serving.DeleteAppRequest))
	})
	return _c
}

func (_c *MockAppsInterface_Delete_Call) Return(_a0 error) *MockAppsInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAppsInterface_Delete_Call) RunAndReturn(run func(context.Context, serving.DeleteAppRequest) error) *MockAppsInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByName provides a mock function with given fields: ctx, name
func (_m *MockAppsInterface) DeleteByName(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByName")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAppsInterface_DeleteByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByName'
type MockAppsInterface_DeleteByName_Call struct {
	*mock.Call
}

// DeleteByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockAppsInterface_Expecter) DeleteByName(ctx interface{}, name interface{}) *MockAppsInterface_DeleteByName_Call {
	return &MockAppsInterface_DeleteByName_Call{Call: _e.mock.On("DeleteByName", ctx, name)}
}

func (_c *MockAppsInterface_DeleteByName_Call) Run(run func(ctx context.Context, name string)) *MockAppsInterface_DeleteByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAppsInterface_DeleteByName_Call) Return(_a0 error) *MockAppsInterface_DeleteByName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAppsInterface_DeleteByName_Call) RunAndReturn(run func(context.Context, string) error) *MockAppsInterface_DeleteByName_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, request
func (_m *MockAppsInterface) Get(ctx context.Context, request serving.GetAppRequest) (*serving.App, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *serving.App
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, serving.GetAppRequest) (*serving.App, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, serving.GetAppRequest) *serving.App); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serving.App)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, serving.GetAppRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAppsInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockAppsInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - request serving.GetAppRequest
func (_e *MockAppsInterface_Expecter) Get(ctx interface{}, request interface{}) *MockAppsInterface_Get_Call {
	return &MockAppsInterface_Get_Call{Call: _e.mock.On("Get", ctx, request)}
}

func (_c *MockAppsInterface_Get_Call) Run(run func(ctx context.Context, request serving.GetAppRequest)) *MockAppsInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(serving.GetAppRequest))
	})
	return _c
}

func (_c *MockAppsInterface_Get_Call) Return(_a0 *serving.App, _a1 error) *MockAppsInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAppsInterface_Get_Call) RunAndReturn(run func(context.Context, serving.GetAppRequest) (*serving.App, error)) *MockAppsInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByName provides a mock function with given fields: ctx, name
func (_m *MockAppsInterface) GetByName(ctx context.Context, name string) (*serving.App, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetByName")
	}

	var r0 *serving.App
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*serving.App, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *serving.App); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serving.App)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAppsInterface_GetByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByName'
type MockAppsInterface_GetByName_Call struct {
	*mock.Call
}

// GetByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockAppsInterface_Expecter) GetByName(ctx interface{}, name interface{}) *MockAppsInterface_GetByName_Call {
	return &MockAppsInterface_GetByName_Call{Call: _e.mock.On("GetByName", ctx, name)}
}

func (_c *MockAppsInterface_GetByName_Call) Run(run func(ctx context.Context, name string)) *MockAppsInterface_GetByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAppsInterface_GetByName_Call) Return(_a0 *serving.App, _a1 error) *MockAppsInterface_GetByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAppsInterface_GetByName_Call) RunAndReturn(run func(context.Context, string) (*serving.App, error)) *MockAppsInterface_GetByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetDeployment provides a mock function with given fields: ctx, request
func (_m *MockAppsInterface) GetDeployment(ctx context.Context, request serving.GetAppDeploymentRequest) (*serving.AppDeployment, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetDeployment")
	}

	var r0 *serving.AppDeployment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, serving.GetAppDeploymentRequest) (*serving.AppDeployment, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, serving.GetAppDeploymentRequest) *serving.AppDeployment); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serving.AppDeployment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, serving.GetAppDeploymentRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAppsInterface_GetDeployment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDeployment'
type MockAppsInterface_GetDeployment_Call struct {
	*mock.Call
}

// GetDeployment is a helper method to define mock.On call
//   - ctx context.Context
//   - request serving.GetAppDeploymentRequest
func (_e *MockAppsInterface_Expecter) GetDeployment(ctx interface{}, request interface{}) *MockAppsInterface_GetDeployment_Call {
	return &MockAppsInterface_GetDeployment_Call{Call: _e.mock.On("GetDeployment", ctx, request)}
}

func (_c *MockAppsInterface_GetDeployment_Call) Run(run func(ctx context.Context, request serving.GetAppDeploymentRequest)) *MockAppsInterface_GetDeployment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(serving.GetAppDeploymentRequest))
	})
	return _c
}

func (_c *MockAppsInterface_GetDeployment_Call) Return(_a0 *serving.AppDeployment, _a1 error) *MockAppsInterface_GetDeployment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAppsInterface_GetDeployment_Call) RunAndReturn(run func(context.Context, serving.GetAppDeploymentRequest) (*serving.AppDeployment, error)) *MockAppsInterface_GetDeployment_Call {
	_c.Call.Return(run)
	return _c
}

// GetDeploymentByAppNameAndDeploymentId provides a mock function with given fields: ctx, appName, deploymentId
func (_m *MockAppsInterface) GetDeploymentByAppNameAndDeploymentId(ctx context.Context, appName string, deploymentId string) (*serving.AppDeployment, error) {
	ret := _m.Called(ctx, appName, deploymentId)

	if len(ret) == 0 {
		panic("no return value specified for GetDeploymentByAppNameAndDeploymentId")
	}

	var r0 *serving.AppDeployment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*serving.AppDeployment, error)); ok {
		return rf(ctx, appName, deploymentId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *serving.AppDeployment); ok {
		r0 = rf(ctx, appName, deploymentId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serving.AppDeployment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, appName, deploymentId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAppsInterface_GetDeploymentByAppNameAndDeploymentId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDeploymentByAppNameAndDeploymentId'
type MockAppsInterface_GetDeploymentByAppNameAndDeploymentId_Call struct {
	*mock.Call
}

// GetDeploymentByAppNameAndDeploymentId is a helper method to define mock.On call
//   - ctx context.Context
//   - appName string
//   - deploymentId string
func (_e *MockAppsInterface_Expecter) GetDeploymentByAppNameAndDeploymentId(ctx interface{}, appName interface{}, deploymentId interface{}) *MockAppsInterface_GetDeploymentByAppNameAndDeploymentId_Call {
	return &MockAppsInterface_GetDeploymentByAppNameAndDeploymentId_Call{Call: _e.mock.On("GetDeploymentByAppNameAndDeploymentId", ctx, appName, deploymentId)}
}

func (_c *MockAppsInterface_GetDeploymentByAppNameAndDeploymentId_Call) Run(run func(ctx context.Context, appName string, deploymentId string)) *MockAppsInterface_GetDeploymentByAppNameAndDeploymentId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockAppsInterface_GetDeploymentByAppNameAndDeploymentId_Call) Return(_a0 *serving.AppDeployment, _a1 error) *MockAppsInterface_GetDeploymentByAppNameAndDeploymentId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAppsInterface_GetDeploymentByAppNameAndDeploymentId_Call) RunAndReturn(run func(context.Context, string, string) (*serving.AppDeployment, error)) *MockAppsInterface_GetDeploymentByAppNameAndDeploymentId_Call {
	_c.Call.Return(run)
	return _c
}

// GetEnvironment provides a mock function with given fields: ctx, request
func (_m *MockAppsInterface) GetEnvironment(ctx context.Context, request serving.GetAppEnvironmentRequest) (*serving.AppEnvironment, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetEnvironment")
	}

	var r0 *serving.AppEnvironment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, serving.GetAppEnvironmentRequest) (*serving.AppEnvironment, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, serving.GetAppEnvironmentRequest) *serving.AppEnvironment); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serving.AppEnvironment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, serving.GetAppEnvironmentRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAppsInterface_GetEnvironment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEnvironment'
type MockAppsInterface_GetEnvironment_Call struct {
	*mock.Call
}

// GetEnvironment is a helper method to define mock.On call
//   - ctx context.Context
//   - request serving.GetAppEnvironmentRequest
func (_e *MockAppsInterface_Expecter) GetEnvironment(ctx interface{}, request interface{}) *MockAppsInterface_GetEnvironment_Call {
	return &MockAppsInterface_GetEnvironment_Call{Call: _e.mock.On("GetEnvironment", ctx, request)}
}

func (_c *MockAppsInterface_GetEnvironment_Call) Run(run func(ctx context.Context, request serving.GetAppEnvironmentRequest)) *MockAppsInterface_GetEnvironment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(serving.GetAppEnvironmentRequest))
	})
	return _c
}

func (_c *MockAppsInterface_GetEnvironment_Call) Return(_a0 *serving.AppEnvironment, _a1 error) *MockAppsInterface_GetEnvironment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAppsInterface_GetEnvironment_Call) RunAndReturn(run func(context.Context, serving.GetAppEnvironmentRequest) (*serving.AppEnvironment, error)) *MockAppsInterface_GetEnvironment_Call {
	_c.Call.Return(run)
	return _c
}

// GetEnvironmentByName provides a mock function with given fields: ctx, name
func (_m *MockAppsInterface) GetEnvironmentByName(ctx context.Context, name string) (*serving.AppEnvironment, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetEnvironmentByName")
	}

	var r0 *serving.AppEnvironment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*serving.AppEnvironment, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *serving.AppEnvironment); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serving.AppEnvironment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAppsInterface_GetEnvironmentByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEnvironmentByName'
type MockAppsInterface_GetEnvironmentByName_Call struct {
	*mock.Call
}

// GetEnvironmentByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockAppsInterface_Expecter) GetEnvironmentByName(ctx interface{}, name interface{}) *MockAppsInterface_GetEnvironmentByName_Call {
	return &MockAppsInterface_GetEnvironmentByName_Call{Call: _e.mock.On("GetEnvironmentByName", ctx, name)}
}

func (_c *MockAppsInterface_GetEnvironmentByName_Call) Run(run func(ctx context.Context, name string)) *MockAppsInterface_GetEnvironmentByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAppsInterface_GetEnvironmentByName_Call) Return(_a0 *serving.AppEnvironment, _a1 error) *MockAppsInterface_GetEnvironmentByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAppsInterface_GetEnvironmentByName_Call) RunAndReturn(run func(context.Context, string) (*serving.AppEnvironment, error)) *MockAppsInterface_GetEnvironmentByName_Call {
	_c.Call.Return(run)
	return _c
}

// Impl provides a mock function with given fields:
func (_m *MockAppsInterface) Impl() serving.AppsService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 serving.AppsService
	if rf, ok := ret.Get(0).(func() serving.AppsService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(serving.AppsService)
		}
	}

	return r0
}

// MockAppsInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockAppsInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockAppsInterface_Expecter) Impl() *MockAppsInterface_Impl_Call {
	return &MockAppsInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockAppsInterface_Impl_Call) Run(run func()) *MockAppsInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAppsInterface_Impl_Call) Return(_a0 serving.AppsService) *MockAppsInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAppsInterface_Impl_Call) RunAndReturn(run func() serving.AppsService) *MockAppsInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, request
func (_m *MockAppsInterface) List(ctx context.Context, request serving.ListAppsRequest) listing.Iterator[serving.App] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 listing.Iterator[serving.App]
	if rf, ok := ret.Get(0).(func(context.Context, serving.ListAppsRequest) listing.Iterator[serving.App]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listing.Iterator[serving.App])
		}
	}

	return r0
}

// MockAppsInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockAppsInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - request serving.ListAppsRequest
func (_e *MockAppsInterface_Expecter) List(ctx interface{}, request interface{}) *MockAppsInterface_List_Call {
	return &MockAppsInterface_List_Call{Call: _e.mock.On("List", ctx, request)}
}

func (_c *MockAppsInterface_List_Call) Run(run func(ctx context.Context, request serving.ListAppsRequest)) *MockAppsInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(serving.ListAppsRequest))
	})
	return _c
}

func (_c *MockAppsInterface_List_Call) Return(_a0 listing.Iterator[serving.App]) *MockAppsInterface_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAppsInterface_List_Call) RunAndReturn(run func(context.Context, serving.ListAppsRequest) listing.Iterator[serving.App]) *MockAppsInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListAll provides a mock function with given fields: ctx, request
func (_m *MockAppsInterface) ListAll(ctx context.Context, request serving.ListAppsRequest) ([]serving.App, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListAll")
	}

	var r0 []serving.App
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, serving.ListAppsRequest) ([]serving.App, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, serving.ListAppsRequest) []serving.App); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]serving.App)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, serving.ListAppsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAppsInterface_ListAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAll'
type MockAppsInterface_ListAll_Call struct {
	*mock.Call
}

// ListAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request serving.ListAppsRequest
func (_e *MockAppsInterface_Expecter) ListAll(ctx interface{}, request interface{}) *MockAppsInterface_ListAll_Call {
	return &MockAppsInterface_ListAll_Call{Call: _e.mock.On("ListAll", ctx, request)}
}

func (_c *MockAppsInterface_ListAll_Call) Run(run func(ctx context.Context, request serving.ListAppsRequest)) *MockAppsInterface_ListAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(serving.ListAppsRequest))
	})
	return _c
}

func (_c *MockAppsInterface_ListAll_Call) Return(_a0 []serving.App, _a1 error) *MockAppsInterface_ListAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAppsInterface_ListAll_Call) RunAndReturn(run func(context.Context, serving.ListAppsRequest) ([]serving.App, error)) *MockAppsInterface_ListAll_Call {
	_c.Call.Return(run)
	return _c
}

// ListDeployments provides a mock function with given fields: ctx, request
func (_m *MockAppsInterface) ListDeployments(ctx context.Context, request serving.ListAppDeploymentsRequest) listing.Iterator[serving.AppDeployment] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListDeployments")
	}

	var r0 listing.Iterator[serving.AppDeployment]
	if rf, ok := ret.Get(0).(func(context.Context, serving.ListAppDeploymentsRequest) listing.Iterator[serving.AppDeployment]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listing.Iterator[serving.AppDeployment])
		}
	}

	return r0
}

// MockAppsInterface_ListDeployments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDeployments'
type MockAppsInterface_ListDeployments_Call struct {
	*mock.Call
}

// ListDeployments is a helper method to define mock.On call
//   - ctx context.Context
//   - request serving.ListAppDeploymentsRequest
func (_e *MockAppsInterface_Expecter) ListDeployments(ctx interface{}, request interface{}) *MockAppsInterface_ListDeployments_Call {
	return &MockAppsInterface_ListDeployments_Call{Call: _e.mock.On("ListDeployments", ctx, request)}
}

func (_c *MockAppsInterface_ListDeployments_Call) Run(run func(ctx context.Context, request serving.ListAppDeploymentsRequest)) *MockAppsInterface_ListDeployments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(serving.ListAppDeploymentsRequest))
	})
	return _c
}

func (_c *MockAppsInterface_ListDeployments_Call) Return(_a0 listing.Iterator[serving.AppDeployment]) *MockAppsInterface_ListDeployments_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAppsInterface_ListDeployments_Call) RunAndReturn(run func(context.Context, serving.ListAppDeploymentsRequest) listing.Iterator[serving.AppDeployment]) *MockAppsInterface_ListDeployments_Call {
	_c.Call.Return(run)
	return _c
}

// ListDeploymentsAll provides a mock function with given fields: ctx, request
func (_m *MockAppsInterface) ListDeploymentsAll(ctx context.Context, request serving.ListAppDeploymentsRequest) ([]serving.AppDeployment, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListDeploymentsAll")
	}

	var r0 []serving.AppDeployment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, serving.ListAppDeploymentsRequest) ([]serving.AppDeployment, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, serving.ListAppDeploymentsRequest) []serving.AppDeployment); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]serving.AppDeployment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, serving.ListAppDeploymentsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAppsInterface_ListDeploymentsAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDeploymentsAll'
type MockAppsInterface_ListDeploymentsAll_Call struct {
	*mock.Call
}

// ListDeploymentsAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request serving.ListAppDeploymentsRequest
func (_e *MockAppsInterface_Expecter) ListDeploymentsAll(ctx interface{}, request interface{}) *MockAppsInterface_ListDeploymentsAll_Call {
	return &MockAppsInterface_ListDeploymentsAll_Call{Call: _e.mock.On("ListDeploymentsAll", ctx, request)}
}

func (_c *MockAppsInterface_ListDeploymentsAll_Call) Run(run func(ctx context.Context, request serving.ListAppDeploymentsRequest)) *MockAppsInterface_ListDeploymentsAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(serving.ListAppDeploymentsRequest))
	})
	return _c
}

func (_c *MockAppsInterface_ListDeploymentsAll_Call) Return(_a0 []serving.AppDeployment, _a1 error) *MockAppsInterface_ListDeploymentsAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAppsInterface_ListDeploymentsAll_Call) RunAndReturn(run func(context.Context, serving.ListAppDeploymentsRequest) ([]serving.AppDeployment, error)) *MockAppsInterface_ListDeploymentsAll_Call {
	_c.Call.Return(run)
	return _c
}

// ListDeploymentsByAppName provides a mock function with given fields: ctx, appName
func (_m *MockAppsInterface) ListDeploymentsByAppName(ctx context.Context, appName string) (*serving.ListAppDeploymentsResponse, error) {
	ret := _m.Called(ctx, appName)

	if len(ret) == 0 {
		panic("no return value specified for ListDeploymentsByAppName")
	}

	var r0 *serving.ListAppDeploymentsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*serving.ListAppDeploymentsResponse, error)); ok {
		return rf(ctx, appName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *serving.ListAppDeploymentsResponse); ok {
		r0 = rf(ctx, appName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serving.ListAppDeploymentsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, appName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAppsInterface_ListDeploymentsByAppName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDeploymentsByAppName'
type MockAppsInterface_ListDeploymentsByAppName_Call struct {
	*mock.Call
}

// ListDeploymentsByAppName is a helper method to define mock.On call
//   - ctx context.Context
//   - appName string
func (_e *MockAppsInterface_Expecter) ListDeploymentsByAppName(ctx interface{}, appName interface{}) *MockAppsInterface_ListDeploymentsByAppName_Call {
	return &MockAppsInterface_ListDeploymentsByAppName_Call{Call: _e.mock.On("ListDeploymentsByAppName", ctx, appName)}
}

func (_c *MockAppsInterface_ListDeploymentsByAppName_Call) Run(run func(ctx context.Context, appName string)) *MockAppsInterface_ListDeploymentsByAppName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAppsInterface_ListDeploymentsByAppName_Call) Return(_a0 *serving.ListAppDeploymentsResponse, _a1 error) *MockAppsInterface_ListDeploymentsByAppName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAppsInterface_ListDeploymentsByAppName_Call) RunAndReturn(run func(context.Context, string) (*serving.ListAppDeploymentsResponse, error)) *MockAppsInterface_ListDeploymentsByAppName_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with given fields: ctx, request
func (_m *MockAppsInterface) Stop(ctx context.Context, request serving.StopAppRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, serving.StopAppRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAppsInterface_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockAppsInterface_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
//   - ctx context.Context
//   - request serving.StopAppRequest
func (_e *MockAppsInterface_Expecter) Stop(ctx interface{}, request interface{}) *MockAppsInterface_Stop_Call {
	return &MockAppsInterface_Stop_Call{Call: _e.mock.On("Stop", ctx, request)}
}

func (_c *MockAppsInterface_Stop_Call) Run(run func(ctx context.Context, request serving.StopAppRequest)) *MockAppsInterface_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(serving.StopAppRequest))
	})
	return _c
}

func (_c *MockAppsInterface_Stop_Call) Return(_a0 error) *MockAppsInterface_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAppsInterface_Stop_Call) RunAndReturn(run func(context.Context, serving.StopAppRequest) error) *MockAppsInterface_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, request
func (_m *MockAppsInterface) Update(ctx context.Context, request serving.UpdateAppRequest) (*serving.App, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *serving.App
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, serving.UpdateAppRequest) (*serving.App, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, serving.UpdateAppRequest) *serving.App); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serving.App)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, serving.UpdateAppRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAppsInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockAppsInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - request serving.UpdateAppRequest
func (_e *MockAppsInterface_Expecter) Update(ctx interface{}, request interface{}) *MockAppsInterface_Update_Call {
	return &MockAppsInterface_Update_Call{Call: _e.mock.On("Update", ctx, request)}
}

func (_c *MockAppsInterface_Update_Call) Run(run func(ctx context.Context, request serving.UpdateAppRequest)) *MockAppsInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(serving.UpdateAppRequest))
	})
	return _c
}

func (_c *MockAppsInterface_Update_Call) Return(_a0 *serving.App, _a1 error) *MockAppsInterface_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAppsInterface_Update_Call) RunAndReturn(run func(context.Context, serving.UpdateAppRequest) (*serving.App, error)) *MockAppsInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// WaitGetAppIdle provides a mock function with given fields: ctx, name, timeout, callback
func (_m *MockAppsInterface) WaitGetAppIdle(ctx context.Context, name string, timeout time.Duration, callback func(*serving.App)) (*serving.App, error) {
	ret := _m.Called(ctx, name, timeout, callback)

	if len(ret) == 0 {
		panic("no return value specified for WaitGetAppIdle")
	}

	var r0 *serving.App
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration, func(*serving.App)) (*serving.App, error)); ok {
		return rf(ctx, name, timeout, callback)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration, func(*serving.App)) *serving.App); ok {
		r0 = rf(ctx, name, timeout, callback)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serving.App)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, time.Duration, func(*serving.App)) error); ok {
		r1 = rf(ctx, name, timeout, callback)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAppsInterface_WaitGetAppIdle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitGetAppIdle'
type MockAppsInterface_WaitGetAppIdle_Call struct {
	*mock.Call
}

// WaitGetAppIdle is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - timeout time.Duration
//   - callback func(*serving.App)
func (_e *MockAppsInterface_Expecter) WaitGetAppIdle(ctx interface{}, name interface{}, timeout interface{}, callback interface{}) *MockAppsInterface_WaitGetAppIdle_Call {
	return &MockAppsInterface_WaitGetAppIdle_Call{Call: _e.mock.On("WaitGetAppIdle", ctx, name, timeout, callback)}
}

func (_c *MockAppsInterface_WaitGetAppIdle_Call) Run(run func(ctx context.Context, name string, timeout time.Duration, callback func(*serving.App))) *MockAppsInterface_WaitGetAppIdle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Duration), args[3].(func(*serving.App)))
	})
	return _c
}

func (_c *MockAppsInterface_WaitGetAppIdle_Call) Return(_a0 *serving.App, _a1 error) *MockAppsInterface_WaitGetAppIdle_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAppsInterface_WaitGetAppIdle_Call) RunAndReturn(run func(context.Context, string, time.Duration, func(*serving.App)) (*serving.App, error)) *MockAppsInterface_WaitGetAppIdle_Call {
	_c.Call.Return(run)
	return _c
}

// WaitGetDeploymentAppSucceeded provides a mock function with given fields: ctx, appName, deploymentId, timeout, callback
func (_m *MockAppsInterface) WaitGetDeploymentAppSucceeded(ctx context.Context, appName string, deploymentId string, timeout time.Duration, callback func(*serving.AppDeployment)) (*serving.AppDeployment, error) {
	ret := _m.Called(ctx, appName, deploymentId, timeout, callback)

	if len(ret) == 0 {
		panic("no return value specified for WaitGetDeploymentAppSucceeded")
	}

	var r0 *serving.AppDeployment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Duration, func(*serving.AppDeployment)) (*serving.AppDeployment, error)); ok {
		return rf(ctx, appName, deploymentId, timeout, callback)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Duration, func(*serving.AppDeployment)) *serving.AppDeployment); ok {
		r0 = rf(ctx, appName, deploymentId, timeout, callback)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serving.AppDeployment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, time.Duration, func(*serving.AppDeployment)) error); ok {
		r1 = rf(ctx, appName, deploymentId, timeout, callback)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAppsInterface_WaitGetDeploymentAppSucceeded_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitGetDeploymentAppSucceeded'
type MockAppsInterface_WaitGetDeploymentAppSucceeded_Call struct {
	*mock.Call
}

// WaitGetDeploymentAppSucceeded is a helper method to define mock.On call
//   - ctx context.Context
//   - appName string
//   - deploymentId string
//   - timeout time.Duration
//   - callback func(*serving.AppDeployment)
func (_e *MockAppsInterface_Expecter) WaitGetDeploymentAppSucceeded(ctx interface{}, appName interface{}, deploymentId interface{}, timeout interface{}, callback interface{}) *MockAppsInterface_WaitGetDeploymentAppSucceeded_Call {
	return &MockAppsInterface_WaitGetDeploymentAppSucceeded_Call{Call: _e.mock.On("WaitGetDeploymentAppSucceeded", ctx, appName, deploymentId, timeout, callback)}
}

func (_c *MockAppsInterface_WaitGetDeploymentAppSucceeded_Call) Run(run func(ctx context.Context, appName string, deploymentId string, timeout time.Duration, callback func(*serving.AppDeployment))) *MockAppsInterface_WaitGetDeploymentAppSucceeded_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(time.Duration), args[4].(func(*serving.AppDeployment)))
	})
	return _c
}

func (_c *MockAppsInterface_WaitGetDeploymentAppSucceeded_Call) Return(_a0 *serving.AppDeployment, _a1 error) *MockAppsInterface_WaitGetDeploymentAppSucceeded_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAppsInterface_WaitGetDeploymentAppSucceeded_Call) RunAndReturn(run func(context.Context, string, string, time.Duration, func(*serving.AppDeployment)) (*serving.AppDeployment, error)) *MockAppsInterface_WaitGetDeploymentAppSucceeded_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockAppsInterface) WithImpl(impl serving.AppsService) serving.AppsInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 serving.AppsInterface
	if rf, ok := ret.Get(0).(func(serving.AppsService) serving.AppsInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(serving.AppsInterface)
		}
	}

	return r0
}

// MockAppsInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockAppsInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl serving.AppsService
func (_e *MockAppsInterface_Expecter) WithImpl(impl interface{}) *MockAppsInterface_WithImpl_Call {
	return &MockAppsInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockAppsInterface_WithImpl_Call) Run(run func(impl serving.AppsService)) *MockAppsInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(serving.AppsService))
	})
	return _c
}

func (_c *MockAppsInterface_WithImpl_Call) Return(_a0 serving.AppsInterface) *MockAppsInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAppsInterface_WithImpl_Call) RunAndReturn(run func(serving.AppsService) serving.AppsInterface) *MockAppsInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAppsInterface creates a new instance of MockAppsInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAppsInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAppsInterface {
	mock := &MockAppsInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
