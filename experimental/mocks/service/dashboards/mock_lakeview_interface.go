// Code generated by mockery v2.39.1. DO NOT EDIT.

package dashboards

import (
	context "context"

	dashboards "github.com/databricks/databricks-sdk-go/service/dashboards"
	mock "github.com/stretchr/testify/mock"
)

// MockLakeviewInterface is an autogenerated mock type for the LakeviewInterface type
type MockLakeviewInterface struct {
	mock.Mock
}

type MockLakeviewInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLakeviewInterface) EXPECT() *MockLakeviewInterface_Expecter {
	return &MockLakeviewInterface_Expecter{mock: &_m.Mock}
}

// Impl provides a mock function with given fields:
func (_m *MockLakeviewInterface) Impl() dashboards.LakeviewService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 dashboards.LakeviewService
	if rf, ok := ret.Get(0).(func() dashboards.LakeviewService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(dashboards.LakeviewService)
		}
	}

	return r0
}

// MockLakeviewInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockLakeviewInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockLakeviewInterface_Expecter) Impl() *MockLakeviewInterface_Impl_Call {
	return &MockLakeviewInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockLakeviewInterface_Impl_Call) Run(run func()) *MockLakeviewInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLakeviewInterface_Impl_Call) Return(_a0 dashboards.LakeviewService) *MockLakeviewInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLakeviewInterface_Impl_Call) RunAndReturn(run func() dashboards.LakeviewService) *MockLakeviewInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// Publish provides a mock function with given fields: ctx, request
func (_m *MockLakeviewInterface) Publish(ctx context.Context, request dashboards.PublishRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dashboards.PublishRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLakeviewInterface_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type MockLakeviewInterface_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - ctx context.Context
//   - request dashboards.PublishRequest
func (_e *MockLakeviewInterface_Expecter) Publish(ctx interface{}, request interface{}) *MockLakeviewInterface_Publish_Call {
	return &MockLakeviewInterface_Publish_Call{Call: _e.mock.On("Publish", ctx, request)}
}

func (_c *MockLakeviewInterface_Publish_Call) Run(run func(ctx context.Context, request dashboards.PublishRequest)) *MockLakeviewInterface_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dashboards.PublishRequest))
	})
	return _c
}

func (_c *MockLakeviewInterface_Publish_Call) Return(_a0 error) *MockLakeviewInterface_Publish_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLakeviewInterface_Publish_Call) RunAndReturn(run func(context.Context, dashboards.PublishRequest) error) *MockLakeviewInterface_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockLakeviewInterface) WithImpl(impl dashboards.LakeviewService) dashboards.LakeviewInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 dashboards.LakeviewInterface
	if rf, ok := ret.Get(0).(func(dashboards.LakeviewService) dashboards.LakeviewInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(dashboards.LakeviewInterface)
		}
	}

	return r0
}

// MockLakeviewInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockLakeviewInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl dashboards.LakeviewService
func (_e *MockLakeviewInterface_Expecter) WithImpl(impl interface{}) *MockLakeviewInterface_WithImpl_Call {
	return &MockLakeviewInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockLakeviewInterface_WithImpl_Call) Run(run func(impl dashboards.LakeviewService)) *MockLakeviewInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(dashboards.LakeviewService))
	})
	return _c
}

func (_c *MockLakeviewInterface_WithImpl_Call) Return(_a0 dashboards.LakeviewInterface) *MockLakeviewInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLakeviewInterface_WithImpl_Call) RunAndReturn(run func(dashboards.LakeviewService) dashboards.LakeviewInterface) *MockLakeviewInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLakeviewInterface creates a new instance of MockLakeviewInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLakeviewInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLakeviewInterface {
	mock := &MockLakeviewInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
