// Code generated by mockery v2.43.0. DO NOT EDIT.

package dashboards

import (
	context "context"

	listing "github.com/databricks/databricks-sdk-go/listing"
	dashboards "github.com/databricks/databricks-sdk-go/service/dashboards"

	mock "github.com/stretchr/testify/mock"
)

// MockLakeviewInterface is an autogenerated mock type for the LakeviewInterface type
type MockLakeviewInterface struct {
	mock.Mock
}

type MockLakeviewInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLakeviewInterface) EXPECT() *MockLakeviewInterface_Expecter {
	return &MockLakeviewInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, request
func (_m *MockLakeviewInterface) Create(ctx context.Context, request dashboards.CreateDashboardRequest) (*dashboards.Dashboard, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *dashboards.Dashboard
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dashboards.CreateDashboardRequest) (*dashboards.Dashboard, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dashboards.CreateDashboardRequest) *dashboards.Dashboard); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dashboards.Dashboard)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dashboards.CreateDashboardRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLakeviewInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockLakeviewInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - request dashboards.CreateDashboardRequest
func (_e *MockLakeviewInterface_Expecter) Create(ctx interface{}, request interface{}) *MockLakeviewInterface_Create_Call {
	return &MockLakeviewInterface_Create_Call{Call: _e.mock.On("Create", ctx, request)}
}

func (_c *MockLakeviewInterface_Create_Call) Run(run func(ctx context.Context, request dashboards.CreateDashboardRequest)) *MockLakeviewInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dashboards.CreateDashboardRequest))
	})
	return _c
}

func (_c *MockLakeviewInterface_Create_Call) Return(_a0 *dashboards.Dashboard, _a1 error) *MockLakeviewInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLakeviewInterface_Create_Call) RunAndReturn(run func(context.Context, dashboards.CreateDashboardRequest) (*dashboards.Dashboard, error)) *MockLakeviewInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSchedule provides a mock function with given fields: ctx, request
func (_m *MockLakeviewInterface) CreateSchedule(ctx context.Context, request dashboards.CreateScheduleRequest) (*dashboards.Schedule, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateSchedule")
	}

	var r0 *dashboards.Schedule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dashboards.CreateScheduleRequest) (*dashboards.Schedule, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dashboards.CreateScheduleRequest) *dashboards.Schedule); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dashboards.Schedule)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dashboards.CreateScheduleRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLakeviewInterface_CreateSchedule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSchedule'
type MockLakeviewInterface_CreateSchedule_Call struct {
	*mock.Call
}

// CreateSchedule is a helper method to define mock.On call
//   - ctx context.Context
//   - request dashboards.CreateScheduleRequest
func (_e *MockLakeviewInterface_Expecter) CreateSchedule(ctx interface{}, request interface{}) *MockLakeviewInterface_CreateSchedule_Call {
	return &MockLakeviewInterface_CreateSchedule_Call{Call: _e.mock.On("CreateSchedule", ctx, request)}
}

func (_c *MockLakeviewInterface_CreateSchedule_Call) Run(run func(ctx context.Context, request dashboards.CreateScheduleRequest)) *MockLakeviewInterface_CreateSchedule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dashboards.CreateScheduleRequest))
	})
	return _c
}

func (_c *MockLakeviewInterface_CreateSchedule_Call) Return(_a0 *dashboards.Schedule, _a1 error) *MockLakeviewInterface_CreateSchedule_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLakeviewInterface_CreateSchedule_Call) RunAndReturn(run func(context.Context, dashboards.CreateScheduleRequest) (*dashboards.Schedule, error)) *MockLakeviewInterface_CreateSchedule_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSubscription provides a mock function with given fields: ctx, request
func (_m *MockLakeviewInterface) CreateSubscription(ctx context.Context, request dashboards.CreateSubscriptionRequest) (*dashboards.Subscription, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateSubscription")
	}

	var r0 *dashboards.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dashboards.CreateSubscriptionRequest) (*dashboards.Subscription, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dashboards.CreateSubscriptionRequest) *dashboards.Subscription); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dashboards.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dashboards.CreateSubscriptionRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLakeviewInterface_CreateSubscription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSubscription'
type MockLakeviewInterface_CreateSubscription_Call struct {
	*mock.Call
}

// CreateSubscription is a helper method to define mock.On call
//   - ctx context.Context
//   - request dashboards.CreateSubscriptionRequest
func (_e *MockLakeviewInterface_Expecter) CreateSubscription(ctx interface{}, request interface{}) *MockLakeviewInterface_CreateSubscription_Call {
	return &MockLakeviewInterface_CreateSubscription_Call{Call: _e.mock.On("CreateSubscription", ctx, request)}
}

func (_c *MockLakeviewInterface_CreateSubscription_Call) Run(run func(ctx context.Context, request dashboards.CreateSubscriptionRequest)) *MockLakeviewInterface_CreateSubscription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dashboards.CreateSubscriptionRequest))
	})
	return _c
}

func (_c *MockLakeviewInterface_CreateSubscription_Call) Return(_a0 *dashboards.Subscription, _a1 error) *MockLakeviewInterface_CreateSubscription_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLakeviewInterface_CreateSubscription_Call) RunAndReturn(run func(context.Context, dashboards.CreateSubscriptionRequest) (*dashboards.Subscription, error)) *MockLakeviewInterface_CreateSubscription_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSchedule provides a mock function with given fields: ctx, request
func (_m *MockLakeviewInterface) DeleteSchedule(ctx context.Context, request dashboards.DeleteScheduleRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSchedule")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dashboards.DeleteScheduleRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLakeviewInterface_DeleteSchedule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSchedule'
type MockLakeviewInterface_DeleteSchedule_Call struct {
	*mock.Call
}

// DeleteSchedule is a helper method to define mock.On call
//   - ctx context.Context
//   - request dashboards.DeleteScheduleRequest
func (_e *MockLakeviewInterface_Expecter) DeleteSchedule(ctx interface{}, request interface{}) *MockLakeviewInterface_DeleteSchedule_Call {
	return &MockLakeviewInterface_DeleteSchedule_Call{Call: _e.mock.On("DeleteSchedule", ctx, request)}
}

func (_c *MockLakeviewInterface_DeleteSchedule_Call) Run(run func(ctx context.Context, request dashboards.DeleteScheduleRequest)) *MockLakeviewInterface_DeleteSchedule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dashboards.DeleteScheduleRequest))
	})
	return _c
}

func (_c *MockLakeviewInterface_DeleteSchedule_Call) Return(_a0 error) *MockLakeviewInterface_DeleteSchedule_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLakeviewInterface_DeleteSchedule_Call) RunAndReturn(run func(context.Context, dashboards.DeleteScheduleRequest) error) *MockLakeviewInterface_DeleteSchedule_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteScheduleByDashboardIdAndScheduleId provides a mock function with given fields: ctx, dashboardId, scheduleId
func (_m *MockLakeviewInterface) DeleteScheduleByDashboardIdAndScheduleId(ctx context.Context, dashboardId string, scheduleId string) error {
	ret := _m.Called(ctx, dashboardId, scheduleId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteScheduleByDashboardIdAndScheduleId")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, dashboardId, scheduleId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLakeviewInterface_DeleteScheduleByDashboardIdAndScheduleId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteScheduleByDashboardIdAndScheduleId'
type MockLakeviewInterface_DeleteScheduleByDashboardIdAndScheduleId_Call struct {
	*mock.Call
}

// DeleteScheduleByDashboardIdAndScheduleId is a helper method to define mock.On call
//   - ctx context.Context
//   - dashboardId string
//   - scheduleId string
func (_e *MockLakeviewInterface_Expecter) DeleteScheduleByDashboardIdAndScheduleId(ctx interface{}, dashboardId interface{}, scheduleId interface{}) *MockLakeviewInterface_DeleteScheduleByDashboardIdAndScheduleId_Call {
	return &MockLakeviewInterface_DeleteScheduleByDashboardIdAndScheduleId_Call{Call: _e.mock.On("DeleteScheduleByDashboardIdAndScheduleId", ctx, dashboardId, scheduleId)}
}

func (_c *MockLakeviewInterface_DeleteScheduleByDashboardIdAndScheduleId_Call) Run(run func(ctx context.Context, dashboardId string, scheduleId string)) *MockLakeviewInterface_DeleteScheduleByDashboardIdAndScheduleId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockLakeviewInterface_DeleteScheduleByDashboardIdAndScheduleId_Call) Return(_a0 error) *MockLakeviewInterface_DeleteScheduleByDashboardIdAndScheduleId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLakeviewInterface_DeleteScheduleByDashboardIdAndScheduleId_Call) RunAndReturn(run func(context.Context, string, string) error) *MockLakeviewInterface_DeleteScheduleByDashboardIdAndScheduleId_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSubscription provides a mock function with given fields: ctx, request
func (_m *MockLakeviewInterface) DeleteSubscription(ctx context.Context, request dashboards.DeleteSubscriptionRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSubscription")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dashboards.DeleteSubscriptionRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLakeviewInterface_DeleteSubscription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSubscription'
type MockLakeviewInterface_DeleteSubscription_Call struct {
	*mock.Call
}

// DeleteSubscription is a helper method to define mock.On call
//   - ctx context.Context
//   - request dashboards.DeleteSubscriptionRequest
func (_e *MockLakeviewInterface_Expecter) DeleteSubscription(ctx interface{}, request interface{}) *MockLakeviewInterface_DeleteSubscription_Call {
	return &MockLakeviewInterface_DeleteSubscription_Call{Call: _e.mock.On("DeleteSubscription", ctx, request)}
}

func (_c *MockLakeviewInterface_DeleteSubscription_Call) Run(run func(ctx context.Context, request dashboards.DeleteSubscriptionRequest)) *MockLakeviewInterface_DeleteSubscription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dashboards.DeleteSubscriptionRequest))
	})
	return _c
}

func (_c *MockLakeviewInterface_DeleteSubscription_Call) Return(_a0 error) *MockLakeviewInterface_DeleteSubscription_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLakeviewInterface_DeleteSubscription_Call) RunAndReturn(run func(context.Context, dashboards.DeleteSubscriptionRequest) error) *MockLakeviewInterface_DeleteSubscription_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSubscriptionByDashboardIdAndScheduleIdAndSubscriptionId provides a mock function with given fields: ctx, dashboardId, scheduleId, subscriptionId
func (_m *MockLakeviewInterface) DeleteSubscriptionByDashboardIdAndScheduleIdAndSubscriptionId(ctx context.Context, dashboardId string, scheduleId string, subscriptionId string) error {
	ret := _m.Called(ctx, dashboardId, scheduleId, subscriptionId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSubscriptionByDashboardIdAndScheduleIdAndSubscriptionId")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, dashboardId, scheduleId, subscriptionId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLakeviewInterface_DeleteSubscriptionByDashboardIdAndScheduleIdAndSubscriptionId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSubscriptionByDashboardIdAndScheduleIdAndSubscriptionId'
type MockLakeviewInterface_DeleteSubscriptionByDashboardIdAndScheduleIdAndSubscriptionId_Call struct {
	*mock.Call
}

// DeleteSubscriptionByDashboardIdAndScheduleIdAndSubscriptionId is a helper method to define mock.On call
//   - ctx context.Context
//   - dashboardId string
//   - scheduleId string
//   - subscriptionId string
func (_e *MockLakeviewInterface_Expecter) DeleteSubscriptionByDashboardIdAndScheduleIdAndSubscriptionId(ctx interface{}, dashboardId interface{}, scheduleId interface{}, subscriptionId interface{}) *MockLakeviewInterface_DeleteSubscriptionByDashboardIdAndScheduleIdAndSubscriptionId_Call {
	return &MockLakeviewInterface_DeleteSubscriptionByDashboardIdAndScheduleIdAndSubscriptionId_Call{Call: _e.mock.On("DeleteSubscriptionByDashboardIdAndScheduleIdAndSubscriptionId", ctx, dashboardId, scheduleId, subscriptionId)}
}

func (_c *MockLakeviewInterface_DeleteSubscriptionByDashboardIdAndScheduleIdAndSubscriptionId_Call) Run(run func(ctx context.Context, dashboardId string, scheduleId string, subscriptionId string)) *MockLakeviewInterface_DeleteSubscriptionByDashboardIdAndScheduleIdAndSubscriptionId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockLakeviewInterface_DeleteSubscriptionByDashboardIdAndScheduleIdAndSubscriptionId_Call) Return(_a0 error) *MockLakeviewInterface_DeleteSubscriptionByDashboardIdAndScheduleIdAndSubscriptionId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLakeviewInterface_DeleteSubscriptionByDashboardIdAndScheduleIdAndSubscriptionId_Call) RunAndReturn(run func(context.Context, string, string, string) error) *MockLakeviewInterface_DeleteSubscriptionByDashboardIdAndScheduleIdAndSubscriptionId_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, request
func (_m *MockLakeviewInterface) Get(ctx context.Context, request dashboards.GetDashboardRequest) (*dashboards.Dashboard, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *dashboards.Dashboard
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dashboards.GetDashboardRequest) (*dashboards.Dashboard, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dashboards.GetDashboardRequest) *dashboards.Dashboard); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dashboards.Dashboard)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dashboards.GetDashboardRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLakeviewInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockLakeviewInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - request dashboards.GetDashboardRequest
func (_e *MockLakeviewInterface_Expecter) Get(ctx interface{}, request interface{}) *MockLakeviewInterface_Get_Call {
	return &MockLakeviewInterface_Get_Call{Call: _e.mock.On("Get", ctx, request)}
}

func (_c *MockLakeviewInterface_Get_Call) Run(run func(ctx context.Context, request dashboards.GetDashboardRequest)) *MockLakeviewInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dashboards.GetDashboardRequest))
	})
	return _c
}

func (_c *MockLakeviewInterface_Get_Call) Return(_a0 *dashboards.Dashboard, _a1 error) *MockLakeviewInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLakeviewInterface_Get_Call) RunAndReturn(run func(context.Context, dashboards.GetDashboardRequest) (*dashboards.Dashboard, error)) *MockLakeviewInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByDashboardId provides a mock function with given fields: ctx, dashboardId
func (_m *MockLakeviewInterface) GetByDashboardId(ctx context.Context, dashboardId string) (*dashboards.Dashboard, error) {
	ret := _m.Called(ctx, dashboardId)

	if len(ret) == 0 {
		panic("no return value specified for GetByDashboardId")
	}

	var r0 *dashboards.Dashboard
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*dashboards.Dashboard, error)); ok {
		return rf(ctx, dashboardId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *dashboards.Dashboard); ok {
		r0 = rf(ctx, dashboardId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dashboards.Dashboard)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, dashboardId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLakeviewInterface_GetByDashboardId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByDashboardId'
type MockLakeviewInterface_GetByDashboardId_Call struct {
	*mock.Call
}

// GetByDashboardId is a helper method to define mock.On call
//   - ctx context.Context
//   - dashboardId string
func (_e *MockLakeviewInterface_Expecter) GetByDashboardId(ctx interface{}, dashboardId interface{}) *MockLakeviewInterface_GetByDashboardId_Call {
	return &MockLakeviewInterface_GetByDashboardId_Call{Call: _e.mock.On("GetByDashboardId", ctx, dashboardId)}
}

func (_c *MockLakeviewInterface_GetByDashboardId_Call) Run(run func(ctx context.Context, dashboardId string)) *MockLakeviewInterface_GetByDashboardId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockLakeviewInterface_GetByDashboardId_Call) Return(_a0 *dashboards.Dashboard, _a1 error) *MockLakeviewInterface_GetByDashboardId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLakeviewInterface_GetByDashboardId_Call) RunAndReturn(run func(context.Context, string) (*dashboards.Dashboard, error)) *MockLakeviewInterface_GetByDashboardId_Call {
	_c.Call.Return(run)
	return _c
}

// GetPublished provides a mock function with given fields: ctx, request
func (_m *MockLakeviewInterface) GetPublished(ctx context.Context, request dashboards.GetPublishedDashboardRequest) (*dashboards.PublishedDashboard, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetPublished")
	}

	var r0 *dashboards.PublishedDashboard
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dashboards.GetPublishedDashboardRequest) (*dashboards.PublishedDashboard, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dashboards.GetPublishedDashboardRequest) *dashboards.PublishedDashboard); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dashboards.PublishedDashboard)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dashboards.GetPublishedDashboardRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLakeviewInterface_GetPublished_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPublished'
type MockLakeviewInterface_GetPublished_Call struct {
	*mock.Call
}

// GetPublished is a helper method to define mock.On call
//   - ctx context.Context
//   - request dashboards.GetPublishedDashboardRequest
func (_e *MockLakeviewInterface_Expecter) GetPublished(ctx interface{}, request interface{}) *MockLakeviewInterface_GetPublished_Call {
	return &MockLakeviewInterface_GetPublished_Call{Call: _e.mock.On("GetPublished", ctx, request)}
}

func (_c *MockLakeviewInterface_GetPublished_Call) Run(run func(ctx context.Context, request dashboards.GetPublishedDashboardRequest)) *MockLakeviewInterface_GetPublished_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dashboards.GetPublishedDashboardRequest))
	})
	return _c
}

func (_c *MockLakeviewInterface_GetPublished_Call) Return(_a0 *dashboards.PublishedDashboard, _a1 error) *MockLakeviewInterface_GetPublished_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLakeviewInterface_GetPublished_Call) RunAndReturn(run func(context.Context, dashboards.GetPublishedDashboardRequest) (*dashboards.PublishedDashboard, error)) *MockLakeviewInterface_GetPublished_Call {
	_c.Call.Return(run)
	return _c
}

// GetPublishedByDashboardId provides a mock function with given fields: ctx, dashboardId
func (_m *MockLakeviewInterface) GetPublishedByDashboardId(ctx context.Context, dashboardId string) (*dashboards.PublishedDashboard, error) {
	ret := _m.Called(ctx, dashboardId)

	if len(ret) == 0 {
		panic("no return value specified for GetPublishedByDashboardId")
	}

	var r0 *dashboards.PublishedDashboard
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*dashboards.PublishedDashboard, error)); ok {
		return rf(ctx, dashboardId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *dashboards.PublishedDashboard); ok {
		r0 = rf(ctx, dashboardId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dashboards.PublishedDashboard)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, dashboardId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLakeviewInterface_GetPublishedByDashboardId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPublishedByDashboardId'
type MockLakeviewInterface_GetPublishedByDashboardId_Call struct {
	*mock.Call
}

// GetPublishedByDashboardId is a helper method to define mock.On call
//   - ctx context.Context
//   - dashboardId string
func (_e *MockLakeviewInterface_Expecter) GetPublishedByDashboardId(ctx interface{}, dashboardId interface{}) *MockLakeviewInterface_GetPublishedByDashboardId_Call {
	return &MockLakeviewInterface_GetPublishedByDashboardId_Call{Call: _e.mock.On("GetPublishedByDashboardId", ctx, dashboardId)}
}

func (_c *MockLakeviewInterface_GetPublishedByDashboardId_Call) Run(run func(ctx context.Context, dashboardId string)) *MockLakeviewInterface_GetPublishedByDashboardId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockLakeviewInterface_GetPublishedByDashboardId_Call) Return(_a0 *dashboards.PublishedDashboard, _a1 error) *MockLakeviewInterface_GetPublishedByDashboardId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLakeviewInterface_GetPublishedByDashboardId_Call) RunAndReturn(run func(context.Context, string) (*dashboards.PublishedDashboard, error)) *MockLakeviewInterface_GetPublishedByDashboardId_Call {
	_c.Call.Return(run)
	return _c
}

// GetSchedule provides a mock function with given fields: ctx, request
func (_m *MockLakeviewInterface) GetSchedule(ctx context.Context, request dashboards.GetScheduleRequest) (*dashboards.Schedule, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetSchedule")
	}

	var r0 *dashboards.Schedule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dashboards.GetScheduleRequest) (*dashboards.Schedule, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dashboards.GetScheduleRequest) *dashboards.Schedule); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dashboards.Schedule)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dashboards.GetScheduleRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLakeviewInterface_GetSchedule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSchedule'
type MockLakeviewInterface_GetSchedule_Call struct {
	*mock.Call
}

// GetSchedule is a helper method to define mock.On call
//   - ctx context.Context
//   - request dashboards.GetScheduleRequest
func (_e *MockLakeviewInterface_Expecter) GetSchedule(ctx interface{}, request interface{}) *MockLakeviewInterface_GetSchedule_Call {
	return &MockLakeviewInterface_GetSchedule_Call{Call: _e.mock.On("GetSchedule", ctx, request)}
}

func (_c *MockLakeviewInterface_GetSchedule_Call) Run(run func(ctx context.Context, request dashboards.GetScheduleRequest)) *MockLakeviewInterface_GetSchedule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dashboards.GetScheduleRequest))
	})
	return _c
}

func (_c *MockLakeviewInterface_GetSchedule_Call) Return(_a0 *dashboards.Schedule, _a1 error) *MockLakeviewInterface_GetSchedule_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLakeviewInterface_GetSchedule_Call) RunAndReturn(run func(context.Context, dashboards.GetScheduleRequest) (*dashboards.Schedule, error)) *MockLakeviewInterface_GetSchedule_Call {
	_c.Call.Return(run)
	return _c
}

// GetScheduleByDashboardIdAndScheduleId provides a mock function with given fields: ctx, dashboardId, scheduleId
func (_m *MockLakeviewInterface) GetScheduleByDashboardIdAndScheduleId(ctx context.Context, dashboardId string, scheduleId string) (*dashboards.Schedule, error) {
	ret := _m.Called(ctx, dashboardId, scheduleId)

	if len(ret) == 0 {
		panic("no return value specified for GetScheduleByDashboardIdAndScheduleId")
	}

	var r0 *dashboards.Schedule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*dashboards.Schedule, error)); ok {
		return rf(ctx, dashboardId, scheduleId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *dashboards.Schedule); ok {
		r0 = rf(ctx, dashboardId, scheduleId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dashboards.Schedule)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, dashboardId, scheduleId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLakeviewInterface_GetScheduleByDashboardIdAndScheduleId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetScheduleByDashboardIdAndScheduleId'
type MockLakeviewInterface_GetScheduleByDashboardIdAndScheduleId_Call struct {
	*mock.Call
}

// GetScheduleByDashboardIdAndScheduleId is a helper method to define mock.On call
//   - ctx context.Context
//   - dashboardId string
//   - scheduleId string
func (_e *MockLakeviewInterface_Expecter) GetScheduleByDashboardIdAndScheduleId(ctx interface{}, dashboardId interface{}, scheduleId interface{}) *MockLakeviewInterface_GetScheduleByDashboardIdAndScheduleId_Call {
	return &MockLakeviewInterface_GetScheduleByDashboardIdAndScheduleId_Call{Call: _e.mock.On("GetScheduleByDashboardIdAndScheduleId", ctx, dashboardId, scheduleId)}
}

func (_c *MockLakeviewInterface_GetScheduleByDashboardIdAndScheduleId_Call) Run(run func(ctx context.Context, dashboardId string, scheduleId string)) *MockLakeviewInterface_GetScheduleByDashboardIdAndScheduleId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockLakeviewInterface_GetScheduleByDashboardIdAndScheduleId_Call) Return(_a0 *dashboards.Schedule, _a1 error) *MockLakeviewInterface_GetScheduleByDashboardIdAndScheduleId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLakeviewInterface_GetScheduleByDashboardIdAndScheduleId_Call) RunAndReturn(run func(context.Context, string, string) (*dashboards.Schedule, error)) *MockLakeviewInterface_GetScheduleByDashboardIdAndScheduleId_Call {
	_c.Call.Return(run)
	return _c
}

// GetSubscription provides a mock function with given fields: ctx, request
func (_m *MockLakeviewInterface) GetSubscription(ctx context.Context, request dashboards.GetSubscriptionRequest) (*dashboards.Subscription, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetSubscription")
	}

	var r0 *dashboards.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dashboards.GetSubscriptionRequest) (*dashboards.Subscription, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dashboards.GetSubscriptionRequest) *dashboards.Subscription); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dashboards.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dashboards.GetSubscriptionRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLakeviewInterface_GetSubscription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSubscription'
type MockLakeviewInterface_GetSubscription_Call struct {
	*mock.Call
}

// GetSubscription is a helper method to define mock.On call
//   - ctx context.Context
//   - request dashboards.GetSubscriptionRequest
func (_e *MockLakeviewInterface_Expecter) GetSubscription(ctx interface{}, request interface{}) *MockLakeviewInterface_GetSubscription_Call {
	return &MockLakeviewInterface_GetSubscription_Call{Call: _e.mock.On("GetSubscription", ctx, request)}
}

func (_c *MockLakeviewInterface_GetSubscription_Call) Run(run func(ctx context.Context, request dashboards.GetSubscriptionRequest)) *MockLakeviewInterface_GetSubscription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dashboards.GetSubscriptionRequest))
	})
	return _c
}

func (_c *MockLakeviewInterface_GetSubscription_Call) Return(_a0 *dashboards.Subscription, _a1 error) *MockLakeviewInterface_GetSubscription_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLakeviewInterface_GetSubscription_Call) RunAndReturn(run func(context.Context, dashboards.GetSubscriptionRequest) (*dashboards.Subscription, error)) *MockLakeviewInterface_GetSubscription_Call {
	_c.Call.Return(run)
	return _c
}

// GetSubscriptionByDashboardIdAndScheduleIdAndSubscriptionId provides a mock function with given fields: ctx, dashboardId, scheduleId, subscriptionId
func (_m *MockLakeviewInterface) GetSubscriptionByDashboardIdAndScheduleIdAndSubscriptionId(ctx context.Context, dashboardId string, scheduleId string, subscriptionId string) (*dashboards.Subscription, error) {
	ret := _m.Called(ctx, dashboardId, scheduleId, subscriptionId)

	if len(ret) == 0 {
		panic("no return value specified for GetSubscriptionByDashboardIdAndScheduleIdAndSubscriptionId")
	}

	var r0 *dashboards.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*dashboards.Subscription, error)); ok {
		return rf(ctx, dashboardId, scheduleId, subscriptionId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *dashboards.Subscription); ok {
		r0 = rf(ctx, dashboardId, scheduleId, subscriptionId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dashboards.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, dashboardId, scheduleId, subscriptionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLakeviewInterface_GetSubscriptionByDashboardIdAndScheduleIdAndSubscriptionId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSubscriptionByDashboardIdAndScheduleIdAndSubscriptionId'
type MockLakeviewInterface_GetSubscriptionByDashboardIdAndScheduleIdAndSubscriptionId_Call struct {
	*mock.Call
}

// GetSubscriptionByDashboardIdAndScheduleIdAndSubscriptionId is a helper method to define mock.On call
//   - ctx context.Context
//   - dashboardId string
//   - scheduleId string
//   - subscriptionId string
func (_e *MockLakeviewInterface_Expecter) GetSubscriptionByDashboardIdAndScheduleIdAndSubscriptionId(ctx interface{}, dashboardId interface{}, scheduleId interface{}, subscriptionId interface{}) *MockLakeviewInterface_GetSubscriptionByDashboardIdAndScheduleIdAndSubscriptionId_Call {
	return &MockLakeviewInterface_GetSubscriptionByDashboardIdAndScheduleIdAndSubscriptionId_Call{Call: _e.mock.On("GetSubscriptionByDashboardIdAndScheduleIdAndSubscriptionId", ctx, dashboardId, scheduleId, subscriptionId)}
}

func (_c *MockLakeviewInterface_GetSubscriptionByDashboardIdAndScheduleIdAndSubscriptionId_Call) Run(run func(ctx context.Context, dashboardId string, scheduleId string, subscriptionId string)) *MockLakeviewInterface_GetSubscriptionByDashboardIdAndScheduleIdAndSubscriptionId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockLakeviewInterface_GetSubscriptionByDashboardIdAndScheduleIdAndSubscriptionId_Call) Return(_a0 *dashboards.Subscription, _a1 error) *MockLakeviewInterface_GetSubscriptionByDashboardIdAndScheduleIdAndSubscriptionId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLakeviewInterface_GetSubscriptionByDashboardIdAndScheduleIdAndSubscriptionId_Call) RunAndReturn(run func(context.Context, string, string, string) (*dashboards.Subscription, error)) *MockLakeviewInterface_GetSubscriptionByDashboardIdAndScheduleIdAndSubscriptionId_Call {
	_c.Call.Return(run)
	return _c
}

// Impl provides a mock function with given fields:
func (_m *MockLakeviewInterface) Impl() dashboards.LakeviewService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 dashboards.LakeviewService
	if rf, ok := ret.Get(0).(func() dashboards.LakeviewService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(dashboards.LakeviewService)
		}
	}

	return r0
}

// MockLakeviewInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockLakeviewInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockLakeviewInterface_Expecter) Impl() *MockLakeviewInterface_Impl_Call {
	return &MockLakeviewInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockLakeviewInterface_Impl_Call) Run(run func()) *MockLakeviewInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLakeviewInterface_Impl_Call) Return(_a0 dashboards.LakeviewService) *MockLakeviewInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLakeviewInterface_Impl_Call) RunAndReturn(run func() dashboards.LakeviewService) *MockLakeviewInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// ListSchedules provides a mock function with given fields: ctx, request
func (_m *MockLakeviewInterface) ListSchedules(ctx context.Context, request dashboards.ListSchedulesRequest) listing.Iterator[dashboards.Schedule] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListSchedules")
	}

	var r0 listing.Iterator[dashboards.Schedule]
	if rf, ok := ret.Get(0).(func(context.Context, dashboards.ListSchedulesRequest) listing.Iterator[dashboards.Schedule]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listing.Iterator[dashboards.Schedule])
		}
	}

	return r0
}

// MockLakeviewInterface_ListSchedules_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSchedules'
type MockLakeviewInterface_ListSchedules_Call struct {
	*mock.Call
}

// ListSchedules is a helper method to define mock.On call
//   - ctx context.Context
//   - request dashboards.ListSchedulesRequest
func (_e *MockLakeviewInterface_Expecter) ListSchedules(ctx interface{}, request interface{}) *MockLakeviewInterface_ListSchedules_Call {
	return &MockLakeviewInterface_ListSchedules_Call{Call: _e.mock.On("ListSchedules", ctx, request)}
}

func (_c *MockLakeviewInterface_ListSchedules_Call) Run(run func(ctx context.Context, request dashboards.ListSchedulesRequest)) *MockLakeviewInterface_ListSchedules_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dashboards.ListSchedulesRequest))
	})
	return _c
}

func (_c *MockLakeviewInterface_ListSchedules_Call) Return(_a0 listing.Iterator[dashboards.Schedule]) *MockLakeviewInterface_ListSchedules_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLakeviewInterface_ListSchedules_Call) RunAndReturn(run func(context.Context, dashboards.ListSchedulesRequest) listing.Iterator[dashboards.Schedule]) *MockLakeviewInterface_ListSchedules_Call {
	_c.Call.Return(run)
	return _c
}

// ListSchedulesAll provides a mock function with given fields: ctx, request
func (_m *MockLakeviewInterface) ListSchedulesAll(ctx context.Context, request dashboards.ListSchedulesRequest) ([]dashboards.Schedule, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListSchedulesAll")
	}

	var r0 []dashboards.Schedule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dashboards.ListSchedulesRequest) ([]dashboards.Schedule, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dashboards.ListSchedulesRequest) []dashboards.Schedule); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dashboards.Schedule)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dashboards.ListSchedulesRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLakeviewInterface_ListSchedulesAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSchedulesAll'
type MockLakeviewInterface_ListSchedulesAll_Call struct {
	*mock.Call
}

// ListSchedulesAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request dashboards.ListSchedulesRequest
func (_e *MockLakeviewInterface_Expecter) ListSchedulesAll(ctx interface{}, request interface{}) *MockLakeviewInterface_ListSchedulesAll_Call {
	return &MockLakeviewInterface_ListSchedulesAll_Call{Call: _e.mock.On("ListSchedulesAll", ctx, request)}
}

func (_c *MockLakeviewInterface_ListSchedulesAll_Call) Run(run func(ctx context.Context, request dashboards.ListSchedulesRequest)) *MockLakeviewInterface_ListSchedulesAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dashboards.ListSchedulesRequest))
	})
	return _c
}

func (_c *MockLakeviewInterface_ListSchedulesAll_Call) Return(_a0 []dashboards.Schedule, _a1 error) *MockLakeviewInterface_ListSchedulesAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLakeviewInterface_ListSchedulesAll_Call) RunAndReturn(run func(context.Context, dashboards.ListSchedulesRequest) ([]dashboards.Schedule, error)) *MockLakeviewInterface_ListSchedulesAll_Call {
	_c.Call.Return(run)
	return _c
}

// ListSchedulesByDashboardId provides a mock function with given fields: ctx, dashboardId
func (_m *MockLakeviewInterface) ListSchedulesByDashboardId(ctx context.Context, dashboardId string) (*dashboards.ListSchedulesResponse, error) {
	ret := _m.Called(ctx, dashboardId)

	if len(ret) == 0 {
		panic("no return value specified for ListSchedulesByDashboardId")
	}

	var r0 *dashboards.ListSchedulesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*dashboards.ListSchedulesResponse, error)); ok {
		return rf(ctx, dashboardId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *dashboards.ListSchedulesResponse); ok {
		r0 = rf(ctx, dashboardId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dashboards.ListSchedulesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, dashboardId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLakeviewInterface_ListSchedulesByDashboardId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSchedulesByDashboardId'
type MockLakeviewInterface_ListSchedulesByDashboardId_Call struct {
	*mock.Call
}

// ListSchedulesByDashboardId is a helper method to define mock.On call
//   - ctx context.Context
//   - dashboardId string
func (_e *MockLakeviewInterface_Expecter) ListSchedulesByDashboardId(ctx interface{}, dashboardId interface{}) *MockLakeviewInterface_ListSchedulesByDashboardId_Call {
	return &MockLakeviewInterface_ListSchedulesByDashboardId_Call{Call: _e.mock.On("ListSchedulesByDashboardId", ctx, dashboardId)}
}

func (_c *MockLakeviewInterface_ListSchedulesByDashboardId_Call) Run(run func(ctx context.Context, dashboardId string)) *MockLakeviewInterface_ListSchedulesByDashboardId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockLakeviewInterface_ListSchedulesByDashboardId_Call) Return(_a0 *dashboards.ListSchedulesResponse, _a1 error) *MockLakeviewInterface_ListSchedulesByDashboardId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLakeviewInterface_ListSchedulesByDashboardId_Call) RunAndReturn(run func(context.Context, string) (*dashboards.ListSchedulesResponse, error)) *MockLakeviewInterface_ListSchedulesByDashboardId_Call {
	_c.Call.Return(run)
	return _c
}

// ListSubscriptions provides a mock function with given fields: ctx, request
func (_m *MockLakeviewInterface) ListSubscriptions(ctx context.Context, request dashboards.ListSubscriptionsRequest) listing.Iterator[dashboards.Subscription] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListSubscriptions")
	}

	var r0 listing.Iterator[dashboards.Subscription]
	if rf, ok := ret.Get(0).(func(context.Context, dashboards.ListSubscriptionsRequest) listing.Iterator[dashboards.Subscription]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listing.Iterator[dashboards.Subscription])
		}
	}

	return r0
}

// MockLakeviewInterface_ListSubscriptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSubscriptions'
type MockLakeviewInterface_ListSubscriptions_Call struct {
	*mock.Call
}

// ListSubscriptions is a helper method to define mock.On call
//   - ctx context.Context
//   - request dashboards.ListSubscriptionsRequest
func (_e *MockLakeviewInterface_Expecter) ListSubscriptions(ctx interface{}, request interface{}) *MockLakeviewInterface_ListSubscriptions_Call {
	return &MockLakeviewInterface_ListSubscriptions_Call{Call: _e.mock.On("ListSubscriptions", ctx, request)}
}

func (_c *MockLakeviewInterface_ListSubscriptions_Call) Run(run func(ctx context.Context, request dashboards.ListSubscriptionsRequest)) *MockLakeviewInterface_ListSubscriptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dashboards.ListSubscriptionsRequest))
	})
	return _c
}

func (_c *MockLakeviewInterface_ListSubscriptions_Call) Return(_a0 listing.Iterator[dashboards.Subscription]) *MockLakeviewInterface_ListSubscriptions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLakeviewInterface_ListSubscriptions_Call) RunAndReturn(run func(context.Context, dashboards.ListSubscriptionsRequest) listing.Iterator[dashboards.Subscription]) *MockLakeviewInterface_ListSubscriptions_Call {
	_c.Call.Return(run)
	return _c
}

// ListSubscriptionsAll provides a mock function with given fields: ctx, request
func (_m *MockLakeviewInterface) ListSubscriptionsAll(ctx context.Context, request dashboards.ListSubscriptionsRequest) ([]dashboards.Subscription, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListSubscriptionsAll")
	}

	var r0 []dashboards.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dashboards.ListSubscriptionsRequest) ([]dashboards.Subscription, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dashboards.ListSubscriptionsRequest) []dashboards.Subscription); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dashboards.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dashboards.ListSubscriptionsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLakeviewInterface_ListSubscriptionsAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSubscriptionsAll'
type MockLakeviewInterface_ListSubscriptionsAll_Call struct {
	*mock.Call
}

// ListSubscriptionsAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request dashboards.ListSubscriptionsRequest
func (_e *MockLakeviewInterface_Expecter) ListSubscriptionsAll(ctx interface{}, request interface{}) *MockLakeviewInterface_ListSubscriptionsAll_Call {
	return &MockLakeviewInterface_ListSubscriptionsAll_Call{Call: _e.mock.On("ListSubscriptionsAll", ctx, request)}
}

func (_c *MockLakeviewInterface_ListSubscriptionsAll_Call) Run(run func(ctx context.Context, request dashboards.ListSubscriptionsRequest)) *MockLakeviewInterface_ListSubscriptionsAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dashboards.ListSubscriptionsRequest))
	})
	return _c
}

func (_c *MockLakeviewInterface_ListSubscriptionsAll_Call) Return(_a0 []dashboards.Subscription, _a1 error) *MockLakeviewInterface_ListSubscriptionsAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLakeviewInterface_ListSubscriptionsAll_Call) RunAndReturn(run func(context.Context, dashboards.ListSubscriptionsRequest) ([]dashboards.Subscription, error)) *MockLakeviewInterface_ListSubscriptionsAll_Call {
	_c.Call.Return(run)
	return _c
}

// ListSubscriptionsByDashboardIdAndScheduleId provides a mock function with given fields: ctx, dashboardId, scheduleId
func (_m *MockLakeviewInterface) ListSubscriptionsByDashboardIdAndScheduleId(ctx context.Context, dashboardId string, scheduleId string) (*dashboards.ListSubscriptionsResponse, error) {
	ret := _m.Called(ctx, dashboardId, scheduleId)

	if len(ret) == 0 {
		panic("no return value specified for ListSubscriptionsByDashboardIdAndScheduleId")
	}

	var r0 *dashboards.ListSubscriptionsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*dashboards.ListSubscriptionsResponse, error)); ok {
		return rf(ctx, dashboardId, scheduleId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *dashboards.ListSubscriptionsResponse); ok {
		r0 = rf(ctx, dashboardId, scheduleId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dashboards.ListSubscriptionsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, dashboardId, scheduleId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLakeviewInterface_ListSubscriptionsByDashboardIdAndScheduleId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSubscriptionsByDashboardIdAndScheduleId'
type MockLakeviewInterface_ListSubscriptionsByDashboardIdAndScheduleId_Call struct {
	*mock.Call
}

// ListSubscriptionsByDashboardIdAndScheduleId is a helper method to define mock.On call
//   - ctx context.Context
//   - dashboardId string
//   - scheduleId string
func (_e *MockLakeviewInterface_Expecter) ListSubscriptionsByDashboardIdAndScheduleId(ctx interface{}, dashboardId interface{}, scheduleId interface{}) *MockLakeviewInterface_ListSubscriptionsByDashboardIdAndScheduleId_Call {
	return &MockLakeviewInterface_ListSubscriptionsByDashboardIdAndScheduleId_Call{Call: _e.mock.On("ListSubscriptionsByDashboardIdAndScheduleId", ctx, dashboardId, scheduleId)}
}

func (_c *MockLakeviewInterface_ListSubscriptionsByDashboardIdAndScheduleId_Call) Run(run func(ctx context.Context, dashboardId string, scheduleId string)) *MockLakeviewInterface_ListSubscriptionsByDashboardIdAndScheduleId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockLakeviewInterface_ListSubscriptionsByDashboardIdAndScheduleId_Call) Return(_a0 *dashboards.ListSubscriptionsResponse, _a1 error) *MockLakeviewInterface_ListSubscriptionsByDashboardIdAndScheduleId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLakeviewInterface_ListSubscriptionsByDashboardIdAndScheduleId_Call) RunAndReturn(run func(context.Context, string, string) (*dashboards.ListSubscriptionsResponse, error)) *MockLakeviewInterface_ListSubscriptionsByDashboardIdAndScheduleId_Call {
	_c.Call.Return(run)
	return _c
}

// Migrate provides a mock function with given fields: ctx, request
func (_m *MockLakeviewInterface) Migrate(ctx context.Context, request dashboards.MigrateDashboardRequest) (*dashboards.Dashboard, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Migrate")
	}

	var r0 *dashboards.Dashboard
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dashboards.MigrateDashboardRequest) (*dashboards.Dashboard, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dashboards.MigrateDashboardRequest) *dashboards.Dashboard); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dashboards.Dashboard)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dashboards.MigrateDashboardRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLakeviewInterface_Migrate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Migrate'
type MockLakeviewInterface_Migrate_Call struct {
	*mock.Call
}

// Migrate is a helper method to define mock.On call
//   - ctx context.Context
//   - request dashboards.MigrateDashboardRequest
func (_e *MockLakeviewInterface_Expecter) Migrate(ctx interface{}, request interface{}) *MockLakeviewInterface_Migrate_Call {
	return &MockLakeviewInterface_Migrate_Call{Call: _e.mock.On("Migrate", ctx, request)}
}

func (_c *MockLakeviewInterface_Migrate_Call) Run(run func(ctx context.Context, request dashboards.MigrateDashboardRequest)) *MockLakeviewInterface_Migrate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dashboards.MigrateDashboardRequest))
	})
	return _c
}

func (_c *MockLakeviewInterface_Migrate_Call) Return(_a0 *dashboards.Dashboard, _a1 error) *MockLakeviewInterface_Migrate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLakeviewInterface_Migrate_Call) RunAndReturn(run func(context.Context, dashboards.MigrateDashboardRequest) (*dashboards.Dashboard, error)) *MockLakeviewInterface_Migrate_Call {
	_c.Call.Return(run)
	return _c
}

// Publish provides a mock function with given fields: ctx, request
func (_m *MockLakeviewInterface) Publish(ctx context.Context, request dashboards.PublishRequest) (*dashboards.PublishedDashboard, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 *dashboards.PublishedDashboard
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dashboards.PublishRequest) (*dashboards.PublishedDashboard, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dashboards.PublishRequest) *dashboards.PublishedDashboard); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dashboards.PublishedDashboard)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dashboards.PublishRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLakeviewInterface_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type MockLakeviewInterface_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - ctx context.Context
//   - request dashboards.PublishRequest
func (_e *MockLakeviewInterface_Expecter) Publish(ctx interface{}, request interface{}) *MockLakeviewInterface_Publish_Call {
	return &MockLakeviewInterface_Publish_Call{Call: _e.mock.On("Publish", ctx, request)}
}

func (_c *MockLakeviewInterface_Publish_Call) Run(run func(ctx context.Context, request dashboards.PublishRequest)) *MockLakeviewInterface_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dashboards.PublishRequest))
	})
	return _c
}

func (_c *MockLakeviewInterface_Publish_Call) Return(_a0 *dashboards.PublishedDashboard, _a1 error) *MockLakeviewInterface_Publish_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLakeviewInterface_Publish_Call) RunAndReturn(run func(context.Context, dashboards.PublishRequest) (*dashboards.PublishedDashboard, error)) *MockLakeviewInterface_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// Trash provides a mock function with given fields: ctx, request
func (_m *MockLakeviewInterface) Trash(ctx context.Context, request dashboards.TrashDashboardRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Trash")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dashboards.TrashDashboardRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLakeviewInterface_Trash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Trash'
type MockLakeviewInterface_Trash_Call struct {
	*mock.Call
}

// Trash is a helper method to define mock.On call
//   - ctx context.Context
//   - request dashboards.TrashDashboardRequest
func (_e *MockLakeviewInterface_Expecter) Trash(ctx interface{}, request interface{}) *MockLakeviewInterface_Trash_Call {
	return &MockLakeviewInterface_Trash_Call{Call: _e.mock.On("Trash", ctx, request)}
}

func (_c *MockLakeviewInterface_Trash_Call) Run(run func(ctx context.Context, request dashboards.TrashDashboardRequest)) *MockLakeviewInterface_Trash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dashboards.TrashDashboardRequest))
	})
	return _c
}

func (_c *MockLakeviewInterface_Trash_Call) Return(_a0 error) *MockLakeviewInterface_Trash_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLakeviewInterface_Trash_Call) RunAndReturn(run func(context.Context, dashboards.TrashDashboardRequest) error) *MockLakeviewInterface_Trash_Call {
	_c.Call.Return(run)
	return _c
}

// TrashByDashboardId provides a mock function with given fields: ctx, dashboardId
func (_m *MockLakeviewInterface) TrashByDashboardId(ctx context.Context, dashboardId string) error {
	ret := _m.Called(ctx, dashboardId)

	if len(ret) == 0 {
		panic("no return value specified for TrashByDashboardId")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, dashboardId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLakeviewInterface_TrashByDashboardId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TrashByDashboardId'
type MockLakeviewInterface_TrashByDashboardId_Call struct {
	*mock.Call
}

// TrashByDashboardId is a helper method to define mock.On call
//   - ctx context.Context
//   - dashboardId string
func (_e *MockLakeviewInterface_Expecter) TrashByDashboardId(ctx interface{}, dashboardId interface{}) *MockLakeviewInterface_TrashByDashboardId_Call {
	return &MockLakeviewInterface_TrashByDashboardId_Call{Call: _e.mock.On("TrashByDashboardId", ctx, dashboardId)}
}

func (_c *MockLakeviewInterface_TrashByDashboardId_Call) Run(run func(ctx context.Context, dashboardId string)) *MockLakeviewInterface_TrashByDashboardId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockLakeviewInterface_TrashByDashboardId_Call) Return(_a0 error) *MockLakeviewInterface_TrashByDashboardId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLakeviewInterface_TrashByDashboardId_Call) RunAndReturn(run func(context.Context, string) error) *MockLakeviewInterface_TrashByDashboardId_Call {
	_c.Call.Return(run)
	return _c
}

// Unpublish provides a mock function with given fields: ctx, request
func (_m *MockLakeviewInterface) Unpublish(ctx context.Context, request dashboards.UnpublishDashboardRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Unpublish")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dashboards.UnpublishDashboardRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLakeviewInterface_Unpublish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unpublish'
type MockLakeviewInterface_Unpublish_Call struct {
	*mock.Call
}

// Unpublish is a helper method to define mock.On call
//   - ctx context.Context
//   - request dashboards.UnpublishDashboardRequest
func (_e *MockLakeviewInterface_Expecter) Unpublish(ctx interface{}, request interface{}) *MockLakeviewInterface_Unpublish_Call {
	return &MockLakeviewInterface_Unpublish_Call{Call: _e.mock.On("Unpublish", ctx, request)}
}

func (_c *MockLakeviewInterface_Unpublish_Call) Run(run func(ctx context.Context, request dashboards.UnpublishDashboardRequest)) *MockLakeviewInterface_Unpublish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dashboards.UnpublishDashboardRequest))
	})
	return _c
}

func (_c *MockLakeviewInterface_Unpublish_Call) Return(_a0 error) *MockLakeviewInterface_Unpublish_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLakeviewInterface_Unpublish_Call) RunAndReturn(run func(context.Context, dashboards.UnpublishDashboardRequest) error) *MockLakeviewInterface_Unpublish_Call {
	_c.Call.Return(run)
	return _c
}

// UnpublishByDashboardId provides a mock function with given fields: ctx, dashboardId
func (_m *MockLakeviewInterface) UnpublishByDashboardId(ctx context.Context, dashboardId string) error {
	ret := _m.Called(ctx, dashboardId)

	if len(ret) == 0 {
		panic("no return value specified for UnpublishByDashboardId")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, dashboardId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLakeviewInterface_UnpublishByDashboardId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnpublishByDashboardId'
type MockLakeviewInterface_UnpublishByDashboardId_Call struct {
	*mock.Call
}

// UnpublishByDashboardId is a helper method to define mock.On call
//   - ctx context.Context
//   - dashboardId string
func (_e *MockLakeviewInterface_Expecter) UnpublishByDashboardId(ctx interface{}, dashboardId interface{}) *MockLakeviewInterface_UnpublishByDashboardId_Call {
	return &MockLakeviewInterface_UnpublishByDashboardId_Call{Call: _e.mock.On("UnpublishByDashboardId", ctx, dashboardId)}
}

func (_c *MockLakeviewInterface_UnpublishByDashboardId_Call) Run(run func(ctx context.Context, dashboardId string)) *MockLakeviewInterface_UnpublishByDashboardId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockLakeviewInterface_UnpublishByDashboardId_Call) Return(_a0 error) *MockLakeviewInterface_UnpublishByDashboardId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLakeviewInterface_UnpublishByDashboardId_Call) RunAndReturn(run func(context.Context, string) error) *MockLakeviewInterface_UnpublishByDashboardId_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, request
func (_m *MockLakeviewInterface) Update(ctx context.Context, request dashboards.UpdateDashboardRequest) (*dashboards.Dashboard, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *dashboards.Dashboard
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dashboards.UpdateDashboardRequest) (*dashboards.Dashboard, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dashboards.UpdateDashboardRequest) *dashboards.Dashboard); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dashboards.Dashboard)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dashboards.UpdateDashboardRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLakeviewInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockLakeviewInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - request dashboards.UpdateDashboardRequest
func (_e *MockLakeviewInterface_Expecter) Update(ctx interface{}, request interface{}) *MockLakeviewInterface_Update_Call {
	return &MockLakeviewInterface_Update_Call{Call: _e.mock.On("Update", ctx, request)}
}

func (_c *MockLakeviewInterface_Update_Call) Run(run func(ctx context.Context, request dashboards.UpdateDashboardRequest)) *MockLakeviewInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dashboards.UpdateDashboardRequest))
	})
	return _c
}

func (_c *MockLakeviewInterface_Update_Call) Return(_a0 *dashboards.Dashboard, _a1 error) *MockLakeviewInterface_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLakeviewInterface_Update_Call) RunAndReturn(run func(context.Context, dashboards.UpdateDashboardRequest) (*dashboards.Dashboard, error)) *MockLakeviewInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSchedule provides a mock function with given fields: ctx, request
func (_m *MockLakeviewInterface) UpdateSchedule(ctx context.Context, request dashboards.UpdateScheduleRequest) (*dashboards.Schedule, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSchedule")
	}

	var r0 *dashboards.Schedule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dashboards.UpdateScheduleRequest) (*dashboards.Schedule, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dashboards.UpdateScheduleRequest) *dashboards.Schedule); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dashboards.Schedule)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dashboards.UpdateScheduleRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLakeviewInterface_UpdateSchedule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSchedule'
type MockLakeviewInterface_UpdateSchedule_Call struct {
	*mock.Call
}

// UpdateSchedule is a helper method to define mock.On call
//   - ctx context.Context
//   - request dashboards.UpdateScheduleRequest
func (_e *MockLakeviewInterface_Expecter) UpdateSchedule(ctx interface{}, request interface{}) *MockLakeviewInterface_UpdateSchedule_Call {
	return &MockLakeviewInterface_UpdateSchedule_Call{Call: _e.mock.On("UpdateSchedule", ctx, request)}
}

func (_c *MockLakeviewInterface_UpdateSchedule_Call) Run(run func(ctx context.Context, request dashboards.UpdateScheduleRequest)) *MockLakeviewInterface_UpdateSchedule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dashboards.UpdateScheduleRequest))
	})
	return _c
}

func (_c *MockLakeviewInterface_UpdateSchedule_Call) Return(_a0 *dashboards.Schedule, _a1 error) *MockLakeviewInterface_UpdateSchedule_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLakeviewInterface_UpdateSchedule_Call) RunAndReturn(run func(context.Context, dashboards.UpdateScheduleRequest) (*dashboards.Schedule, error)) *MockLakeviewInterface_UpdateSchedule_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockLakeviewInterface) WithImpl(impl dashboards.LakeviewService) dashboards.LakeviewInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 dashboards.LakeviewInterface
	if rf, ok := ret.Get(0).(func(dashboards.LakeviewService) dashboards.LakeviewInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(dashboards.LakeviewInterface)
		}
	}

	return r0
}

// MockLakeviewInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockLakeviewInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl dashboards.LakeviewService
func (_e *MockLakeviewInterface_Expecter) WithImpl(impl interface{}) *MockLakeviewInterface_WithImpl_Call {
	return &MockLakeviewInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockLakeviewInterface_WithImpl_Call) Run(run func(impl dashboards.LakeviewService)) *MockLakeviewInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(dashboards.LakeviewService))
	})
	return _c
}

func (_c *MockLakeviewInterface_WithImpl_Call) Return(_a0 dashboards.LakeviewInterface) *MockLakeviewInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLakeviewInterface_WithImpl_Call) RunAndReturn(run func(dashboards.LakeviewService) dashboards.LakeviewInterface) *MockLakeviewInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLakeviewInterface creates a new instance of MockLakeviewInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLakeviewInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLakeviewInterface {
	mock := &MockLakeviewInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
