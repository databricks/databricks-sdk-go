// Code generated by mockery v2.43.0. DO NOT EDIT.

package provisioning

import (
	context "context"

	provisioning "github.com/databricks/databricks-sdk-go/service/provisioning"
	mock "github.com/stretchr/testify/mock"
)

// MockCredentialsInterface is an autogenerated mock type for the CredentialsInterface type
type MockCredentialsInterface struct {
	mock.Mock
}

type MockCredentialsInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCredentialsInterface) EXPECT() *MockCredentialsInterface_Expecter {
	return &MockCredentialsInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, request
func (_m *MockCredentialsInterface) Create(ctx context.Context, request provisioning.CreateCredentialRequest) (*provisioning.Credential, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *provisioning.Credential
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, provisioning.CreateCredentialRequest) (*provisioning.Credential, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, provisioning.CreateCredentialRequest) *provisioning.Credential); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provisioning.Credential)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, provisioning.CreateCredentialRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCredentialsInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockCredentialsInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - request provisioning.CreateCredentialRequest
func (_e *MockCredentialsInterface_Expecter) Create(ctx interface{}, request interface{}) *MockCredentialsInterface_Create_Call {
	return &MockCredentialsInterface_Create_Call{Call: _e.mock.On("Create", ctx, request)}
}

func (_c *MockCredentialsInterface_Create_Call) Run(run func(ctx context.Context, request provisioning.CreateCredentialRequest)) *MockCredentialsInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(provisioning.CreateCredentialRequest))
	})
	return _c
}

func (_c *MockCredentialsInterface_Create_Call) Return(_a0 *provisioning.Credential, _a1 error) *MockCredentialsInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCredentialsInterface_Create_Call) RunAndReturn(run func(context.Context, provisioning.CreateCredentialRequest) (*provisioning.Credential, error)) *MockCredentialsInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CredentialCredentialsNameToCredentialsIdMap provides a mock function with given fields: ctx
func (_m *MockCredentialsInterface) CredentialCredentialsNameToCredentialsIdMap(ctx context.Context) (map[string]string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CredentialCredentialsNameToCredentialsIdMap")
	}

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (map[string]string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) map[string]string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCredentialsInterface_CredentialCredentialsNameToCredentialsIdMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CredentialCredentialsNameToCredentialsIdMap'
type MockCredentialsInterface_CredentialCredentialsNameToCredentialsIdMap_Call struct {
	*mock.Call
}

// CredentialCredentialsNameToCredentialsIdMap is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockCredentialsInterface_Expecter) CredentialCredentialsNameToCredentialsIdMap(ctx interface{}) *MockCredentialsInterface_CredentialCredentialsNameToCredentialsIdMap_Call {
	return &MockCredentialsInterface_CredentialCredentialsNameToCredentialsIdMap_Call{Call: _e.mock.On("CredentialCredentialsNameToCredentialsIdMap", ctx)}
}

func (_c *MockCredentialsInterface_CredentialCredentialsNameToCredentialsIdMap_Call) Run(run func(ctx context.Context)) *MockCredentialsInterface_CredentialCredentialsNameToCredentialsIdMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockCredentialsInterface_CredentialCredentialsNameToCredentialsIdMap_Call) Return(_a0 map[string]string, _a1 error) *MockCredentialsInterface_CredentialCredentialsNameToCredentialsIdMap_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCredentialsInterface_CredentialCredentialsNameToCredentialsIdMap_Call) RunAndReturn(run func(context.Context) (map[string]string, error)) *MockCredentialsInterface_CredentialCredentialsNameToCredentialsIdMap_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, request
func (_m *MockCredentialsInterface) Delete(ctx context.Context, request provisioning.DeleteCredentialRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, provisioning.DeleteCredentialRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCredentialsInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockCredentialsInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - request provisioning.DeleteCredentialRequest
func (_e *MockCredentialsInterface_Expecter) Delete(ctx interface{}, request interface{}) *MockCredentialsInterface_Delete_Call {
	return &MockCredentialsInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, request)}
}

func (_c *MockCredentialsInterface_Delete_Call) Run(run func(ctx context.Context, request provisioning.DeleteCredentialRequest)) *MockCredentialsInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(provisioning.DeleteCredentialRequest))
	})
	return _c
}

func (_c *MockCredentialsInterface_Delete_Call) Return(_a0 error) *MockCredentialsInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCredentialsInterface_Delete_Call) RunAndReturn(run func(context.Context, provisioning.DeleteCredentialRequest) error) *MockCredentialsInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByCredentialsId provides a mock function with given fields: ctx, credentialsId
func (_m *MockCredentialsInterface) DeleteByCredentialsId(ctx context.Context, credentialsId string) error {
	ret := _m.Called(ctx, credentialsId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByCredentialsId")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, credentialsId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCredentialsInterface_DeleteByCredentialsId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByCredentialsId'
type MockCredentialsInterface_DeleteByCredentialsId_Call struct {
	*mock.Call
}

// DeleteByCredentialsId is a helper method to define mock.On call
//   - ctx context.Context
//   - credentialsId string
func (_e *MockCredentialsInterface_Expecter) DeleteByCredentialsId(ctx interface{}, credentialsId interface{}) *MockCredentialsInterface_DeleteByCredentialsId_Call {
	return &MockCredentialsInterface_DeleteByCredentialsId_Call{Call: _e.mock.On("DeleteByCredentialsId", ctx, credentialsId)}
}

func (_c *MockCredentialsInterface_DeleteByCredentialsId_Call) Run(run func(ctx context.Context, credentialsId string)) *MockCredentialsInterface_DeleteByCredentialsId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockCredentialsInterface_DeleteByCredentialsId_Call) Return(_a0 error) *MockCredentialsInterface_DeleteByCredentialsId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCredentialsInterface_DeleteByCredentialsId_Call) RunAndReturn(run func(context.Context, string) error) *MockCredentialsInterface_DeleteByCredentialsId_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, request
func (_m *MockCredentialsInterface) Get(ctx context.Context, request provisioning.GetCredentialRequest) (*provisioning.Credential, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *provisioning.Credential
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, provisioning.GetCredentialRequest) (*provisioning.Credential, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, provisioning.GetCredentialRequest) *provisioning.Credential); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provisioning.Credential)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, provisioning.GetCredentialRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCredentialsInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockCredentialsInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - request provisioning.GetCredentialRequest
func (_e *MockCredentialsInterface_Expecter) Get(ctx interface{}, request interface{}) *MockCredentialsInterface_Get_Call {
	return &MockCredentialsInterface_Get_Call{Call: _e.mock.On("Get", ctx, request)}
}

func (_c *MockCredentialsInterface_Get_Call) Run(run func(ctx context.Context, request provisioning.GetCredentialRequest)) *MockCredentialsInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(provisioning.GetCredentialRequest))
	})
	return _c
}

func (_c *MockCredentialsInterface_Get_Call) Return(_a0 *provisioning.Credential, _a1 error) *MockCredentialsInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCredentialsInterface_Get_Call) RunAndReturn(run func(context.Context, provisioning.GetCredentialRequest) (*provisioning.Credential, error)) *MockCredentialsInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByCredentialsId provides a mock function with given fields: ctx, credentialsId
func (_m *MockCredentialsInterface) GetByCredentialsId(ctx context.Context, credentialsId string) (*provisioning.Credential, error) {
	ret := _m.Called(ctx, credentialsId)

	if len(ret) == 0 {
		panic("no return value specified for GetByCredentialsId")
	}

	var r0 *provisioning.Credential
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*provisioning.Credential, error)); ok {
		return rf(ctx, credentialsId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *provisioning.Credential); ok {
		r0 = rf(ctx, credentialsId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provisioning.Credential)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, credentialsId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCredentialsInterface_GetByCredentialsId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByCredentialsId'
type MockCredentialsInterface_GetByCredentialsId_Call struct {
	*mock.Call
}

// GetByCredentialsId is a helper method to define mock.On call
//   - ctx context.Context
//   - credentialsId string
func (_e *MockCredentialsInterface_Expecter) GetByCredentialsId(ctx interface{}, credentialsId interface{}) *MockCredentialsInterface_GetByCredentialsId_Call {
	return &MockCredentialsInterface_GetByCredentialsId_Call{Call: _e.mock.On("GetByCredentialsId", ctx, credentialsId)}
}

func (_c *MockCredentialsInterface_GetByCredentialsId_Call) Run(run func(ctx context.Context, credentialsId string)) *MockCredentialsInterface_GetByCredentialsId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockCredentialsInterface_GetByCredentialsId_Call) Return(_a0 *provisioning.Credential, _a1 error) *MockCredentialsInterface_GetByCredentialsId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCredentialsInterface_GetByCredentialsId_Call) RunAndReturn(run func(context.Context, string) (*provisioning.Credential, error)) *MockCredentialsInterface_GetByCredentialsId_Call {
	_c.Call.Return(run)
	return _c
}

// GetByCredentialsName provides a mock function with given fields: ctx, name
func (_m *MockCredentialsInterface) GetByCredentialsName(ctx context.Context, name string) (*provisioning.Credential, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetByCredentialsName")
	}

	var r0 *provisioning.Credential
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*provisioning.Credential, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *provisioning.Credential); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provisioning.Credential)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCredentialsInterface_GetByCredentialsName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByCredentialsName'
type MockCredentialsInterface_GetByCredentialsName_Call struct {
	*mock.Call
}

// GetByCredentialsName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockCredentialsInterface_Expecter) GetByCredentialsName(ctx interface{}, name interface{}) *MockCredentialsInterface_GetByCredentialsName_Call {
	return &MockCredentialsInterface_GetByCredentialsName_Call{Call: _e.mock.On("GetByCredentialsName", ctx, name)}
}

func (_c *MockCredentialsInterface_GetByCredentialsName_Call) Run(run func(ctx context.Context, name string)) *MockCredentialsInterface_GetByCredentialsName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockCredentialsInterface_GetByCredentialsName_Call) Return(_a0 *provisioning.Credential, _a1 error) *MockCredentialsInterface_GetByCredentialsName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCredentialsInterface_GetByCredentialsName_Call) RunAndReturn(run func(context.Context, string) (*provisioning.Credential, error)) *MockCredentialsInterface_GetByCredentialsName_Call {
	_c.Call.Return(run)
	return _c
}

// Impl provides a mock function with given fields:
func (_m *MockCredentialsInterface) Impl() provisioning.CredentialsService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 provisioning.CredentialsService
	if rf, ok := ret.Get(0).(func() provisioning.CredentialsService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(provisioning.CredentialsService)
		}
	}

	return r0
}

// MockCredentialsInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockCredentialsInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockCredentialsInterface_Expecter) Impl() *MockCredentialsInterface_Impl_Call {
	return &MockCredentialsInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockCredentialsInterface_Impl_Call) Run(run func()) *MockCredentialsInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCredentialsInterface_Impl_Call) Return(_a0 provisioning.CredentialsService) *MockCredentialsInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCredentialsInterface_Impl_Call) RunAndReturn(run func() provisioning.CredentialsService) *MockCredentialsInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx
func (_m *MockCredentialsInterface) List(ctx context.Context) ([]provisioning.Credential, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []provisioning.Credential
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]provisioning.Credential, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []provisioning.Credential); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]provisioning.Credential)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCredentialsInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockCredentialsInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockCredentialsInterface_Expecter) List(ctx interface{}) *MockCredentialsInterface_List_Call {
	return &MockCredentialsInterface_List_Call{Call: _e.mock.On("List", ctx)}
}

func (_c *MockCredentialsInterface_List_Call) Run(run func(ctx context.Context)) *MockCredentialsInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockCredentialsInterface_List_Call) Return(_a0 []provisioning.Credential, _a1 error) *MockCredentialsInterface_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCredentialsInterface_List_Call) RunAndReturn(run func(context.Context) ([]provisioning.Credential, error)) *MockCredentialsInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockCredentialsInterface) WithImpl(impl provisioning.CredentialsService) provisioning.CredentialsInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 provisioning.CredentialsInterface
	if rf, ok := ret.Get(0).(func(provisioning.CredentialsService) provisioning.CredentialsInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(provisioning.CredentialsInterface)
		}
	}

	return r0
}

// MockCredentialsInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockCredentialsInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl provisioning.CredentialsService
func (_e *MockCredentialsInterface_Expecter) WithImpl(impl interface{}) *MockCredentialsInterface_WithImpl_Call {
	return &MockCredentialsInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockCredentialsInterface_WithImpl_Call) Run(run func(impl provisioning.CredentialsService)) *MockCredentialsInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(provisioning.CredentialsService))
	})
	return _c
}

func (_c *MockCredentialsInterface_WithImpl_Call) Return(_a0 provisioning.CredentialsInterface) *MockCredentialsInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCredentialsInterface_WithImpl_Call) RunAndReturn(run func(provisioning.CredentialsService) provisioning.CredentialsInterface) *MockCredentialsInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCredentialsInterface creates a new instance of MockCredentialsInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCredentialsInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCredentialsInterface {
	mock := &MockCredentialsInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
