// Code generated by mockery v2.43.0. DO NOT EDIT.

package provisioning

import (
	context "context"

	provisioning "github.com/databricks/databricks-sdk-go/service/provisioning"
	mock "github.com/stretchr/testify/mock"
)

// MockVpcEndpointsInterface is an autogenerated mock type for the VpcEndpointsInterface type
type MockVpcEndpointsInterface struct {
	mock.Mock
}

type MockVpcEndpointsInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVpcEndpointsInterface) EXPECT() *MockVpcEndpointsInterface_Expecter {
	return &MockVpcEndpointsInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, request
func (_m *MockVpcEndpointsInterface) Create(ctx context.Context, request provisioning.CreateVpcEndpointRequest) (*provisioning.VpcEndpoint, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *provisioning.VpcEndpoint
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, provisioning.CreateVpcEndpointRequest) (*provisioning.VpcEndpoint, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, provisioning.CreateVpcEndpointRequest) *provisioning.VpcEndpoint); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provisioning.VpcEndpoint)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, provisioning.CreateVpcEndpointRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVpcEndpointsInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockVpcEndpointsInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - request provisioning.CreateVpcEndpointRequest
func (_e *MockVpcEndpointsInterface_Expecter) Create(ctx interface{}, request interface{}) *MockVpcEndpointsInterface_Create_Call {
	return &MockVpcEndpointsInterface_Create_Call{Call: _e.mock.On("Create", ctx, request)}
}

func (_c *MockVpcEndpointsInterface_Create_Call) Run(run func(ctx context.Context, request provisioning.CreateVpcEndpointRequest)) *MockVpcEndpointsInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(provisioning.CreateVpcEndpointRequest))
	})
	return _c
}

func (_c *MockVpcEndpointsInterface_Create_Call) Return(_a0 *provisioning.VpcEndpoint, _a1 error) *MockVpcEndpointsInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVpcEndpointsInterface_Create_Call) RunAndReturn(run func(context.Context, provisioning.CreateVpcEndpointRequest) (*provisioning.VpcEndpoint, error)) *MockVpcEndpointsInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, request
func (_m *MockVpcEndpointsInterface) Delete(ctx context.Context, request provisioning.DeleteVpcEndpointRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, provisioning.DeleteVpcEndpointRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockVpcEndpointsInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockVpcEndpointsInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - request provisioning.DeleteVpcEndpointRequest
func (_e *MockVpcEndpointsInterface_Expecter) Delete(ctx interface{}, request interface{}) *MockVpcEndpointsInterface_Delete_Call {
	return &MockVpcEndpointsInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, request)}
}

func (_c *MockVpcEndpointsInterface_Delete_Call) Run(run func(ctx context.Context, request provisioning.DeleteVpcEndpointRequest)) *MockVpcEndpointsInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(provisioning.DeleteVpcEndpointRequest))
	})
	return _c
}

func (_c *MockVpcEndpointsInterface_Delete_Call) Return(_a0 error) *MockVpcEndpointsInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVpcEndpointsInterface_Delete_Call) RunAndReturn(run func(context.Context, provisioning.DeleteVpcEndpointRequest) error) *MockVpcEndpointsInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByVpcEndpointId provides a mock function with given fields: ctx, vpcEndpointId
func (_m *MockVpcEndpointsInterface) DeleteByVpcEndpointId(ctx context.Context, vpcEndpointId string) error {
	ret := _m.Called(ctx, vpcEndpointId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByVpcEndpointId")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, vpcEndpointId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockVpcEndpointsInterface_DeleteByVpcEndpointId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByVpcEndpointId'
type MockVpcEndpointsInterface_DeleteByVpcEndpointId_Call struct {
	*mock.Call
}

// DeleteByVpcEndpointId is a helper method to define mock.On call
//   - ctx context.Context
//   - vpcEndpointId string
func (_e *MockVpcEndpointsInterface_Expecter) DeleteByVpcEndpointId(ctx interface{}, vpcEndpointId interface{}) *MockVpcEndpointsInterface_DeleteByVpcEndpointId_Call {
	return &MockVpcEndpointsInterface_DeleteByVpcEndpointId_Call{Call: _e.mock.On("DeleteByVpcEndpointId", ctx, vpcEndpointId)}
}

func (_c *MockVpcEndpointsInterface_DeleteByVpcEndpointId_Call) Run(run func(ctx context.Context, vpcEndpointId string)) *MockVpcEndpointsInterface_DeleteByVpcEndpointId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockVpcEndpointsInterface_DeleteByVpcEndpointId_Call) Return(_a0 error) *MockVpcEndpointsInterface_DeleteByVpcEndpointId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVpcEndpointsInterface_DeleteByVpcEndpointId_Call) RunAndReturn(run func(context.Context, string) error) *MockVpcEndpointsInterface_DeleteByVpcEndpointId_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, request
func (_m *MockVpcEndpointsInterface) Get(ctx context.Context, request provisioning.GetVpcEndpointRequest) (*provisioning.VpcEndpoint, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *provisioning.VpcEndpoint
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, provisioning.GetVpcEndpointRequest) (*provisioning.VpcEndpoint, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, provisioning.GetVpcEndpointRequest) *provisioning.VpcEndpoint); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provisioning.VpcEndpoint)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, provisioning.GetVpcEndpointRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVpcEndpointsInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockVpcEndpointsInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - request provisioning.GetVpcEndpointRequest
func (_e *MockVpcEndpointsInterface_Expecter) Get(ctx interface{}, request interface{}) *MockVpcEndpointsInterface_Get_Call {
	return &MockVpcEndpointsInterface_Get_Call{Call: _e.mock.On("Get", ctx, request)}
}

func (_c *MockVpcEndpointsInterface_Get_Call) Run(run func(ctx context.Context, request provisioning.GetVpcEndpointRequest)) *MockVpcEndpointsInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(provisioning.GetVpcEndpointRequest))
	})
	return _c
}

func (_c *MockVpcEndpointsInterface_Get_Call) Return(_a0 *provisioning.VpcEndpoint, _a1 error) *MockVpcEndpointsInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVpcEndpointsInterface_Get_Call) RunAndReturn(run func(context.Context, provisioning.GetVpcEndpointRequest) (*provisioning.VpcEndpoint, error)) *MockVpcEndpointsInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByVpcEndpointId provides a mock function with given fields: ctx, vpcEndpointId
func (_m *MockVpcEndpointsInterface) GetByVpcEndpointId(ctx context.Context, vpcEndpointId string) (*provisioning.VpcEndpoint, error) {
	ret := _m.Called(ctx, vpcEndpointId)

	if len(ret) == 0 {
		panic("no return value specified for GetByVpcEndpointId")
	}

	var r0 *provisioning.VpcEndpoint
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*provisioning.VpcEndpoint, error)); ok {
		return rf(ctx, vpcEndpointId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *provisioning.VpcEndpoint); ok {
		r0 = rf(ctx, vpcEndpointId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provisioning.VpcEndpoint)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, vpcEndpointId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVpcEndpointsInterface_GetByVpcEndpointId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByVpcEndpointId'
type MockVpcEndpointsInterface_GetByVpcEndpointId_Call struct {
	*mock.Call
}

// GetByVpcEndpointId is a helper method to define mock.On call
//   - ctx context.Context
//   - vpcEndpointId string
func (_e *MockVpcEndpointsInterface_Expecter) GetByVpcEndpointId(ctx interface{}, vpcEndpointId interface{}) *MockVpcEndpointsInterface_GetByVpcEndpointId_Call {
	return &MockVpcEndpointsInterface_GetByVpcEndpointId_Call{Call: _e.mock.On("GetByVpcEndpointId", ctx, vpcEndpointId)}
}

func (_c *MockVpcEndpointsInterface_GetByVpcEndpointId_Call) Run(run func(ctx context.Context, vpcEndpointId string)) *MockVpcEndpointsInterface_GetByVpcEndpointId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockVpcEndpointsInterface_GetByVpcEndpointId_Call) Return(_a0 *provisioning.VpcEndpoint, _a1 error) *MockVpcEndpointsInterface_GetByVpcEndpointId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVpcEndpointsInterface_GetByVpcEndpointId_Call) RunAndReturn(run func(context.Context, string) (*provisioning.VpcEndpoint, error)) *MockVpcEndpointsInterface_GetByVpcEndpointId_Call {
	_c.Call.Return(run)
	return _c
}

// GetByVpcEndpointName provides a mock function with given fields: ctx, name
func (_m *MockVpcEndpointsInterface) GetByVpcEndpointName(ctx context.Context, name string) (*provisioning.VpcEndpoint, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetByVpcEndpointName")
	}

	var r0 *provisioning.VpcEndpoint
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*provisioning.VpcEndpoint, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *provisioning.VpcEndpoint); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provisioning.VpcEndpoint)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVpcEndpointsInterface_GetByVpcEndpointName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByVpcEndpointName'
type MockVpcEndpointsInterface_GetByVpcEndpointName_Call struct {
	*mock.Call
}

// GetByVpcEndpointName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockVpcEndpointsInterface_Expecter) GetByVpcEndpointName(ctx interface{}, name interface{}) *MockVpcEndpointsInterface_GetByVpcEndpointName_Call {
	return &MockVpcEndpointsInterface_GetByVpcEndpointName_Call{Call: _e.mock.On("GetByVpcEndpointName", ctx, name)}
}

func (_c *MockVpcEndpointsInterface_GetByVpcEndpointName_Call) Run(run func(ctx context.Context, name string)) *MockVpcEndpointsInterface_GetByVpcEndpointName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockVpcEndpointsInterface_GetByVpcEndpointName_Call) Return(_a0 *provisioning.VpcEndpoint, _a1 error) *MockVpcEndpointsInterface_GetByVpcEndpointName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVpcEndpointsInterface_GetByVpcEndpointName_Call) RunAndReturn(run func(context.Context, string) (*provisioning.VpcEndpoint, error)) *MockVpcEndpointsInterface_GetByVpcEndpointName_Call {
	_c.Call.Return(run)
	return _c
}

// Impl provides a mock function with given fields:
func (_m *MockVpcEndpointsInterface) Impl() provisioning.VpcEndpointsService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 provisioning.VpcEndpointsService
	if rf, ok := ret.Get(0).(func() provisioning.VpcEndpointsService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(provisioning.VpcEndpointsService)
		}
	}

	return r0
}

// MockVpcEndpointsInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockVpcEndpointsInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockVpcEndpointsInterface_Expecter) Impl() *MockVpcEndpointsInterface_Impl_Call {
	return &MockVpcEndpointsInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockVpcEndpointsInterface_Impl_Call) Run(run func()) *MockVpcEndpointsInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockVpcEndpointsInterface_Impl_Call) Return(_a0 provisioning.VpcEndpointsService) *MockVpcEndpointsInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVpcEndpointsInterface_Impl_Call) RunAndReturn(run func() provisioning.VpcEndpointsService) *MockVpcEndpointsInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx
func (_m *MockVpcEndpointsInterface) List(ctx context.Context) ([]provisioning.VpcEndpoint, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []provisioning.VpcEndpoint
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]provisioning.VpcEndpoint, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []provisioning.VpcEndpoint); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]provisioning.VpcEndpoint)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVpcEndpointsInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockVpcEndpointsInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockVpcEndpointsInterface_Expecter) List(ctx interface{}) *MockVpcEndpointsInterface_List_Call {
	return &MockVpcEndpointsInterface_List_Call{Call: _e.mock.On("List", ctx)}
}

func (_c *MockVpcEndpointsInterface_List_Call) Run(run func(ctx context.Context)) *MockVpcEndpointsInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockVpcEndpointsInterface_List_Call) Return(_a0 []provisioning.VpcEndpoint, _a1 error) *MockVpcEndpointsInterface_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVpcEndpointsInterface_List_Call) RunAndReturn(run func(context.Context) ([]provisioning.VpcEndpoint, error)) *MockVpcEndpointsInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// VpcEndpointVpcEndpointNameToVpcEndpointIdMap provides a mock function with given fields: ctx
func (_m *MockVpcEndpointsInterface) VpcEndpointVpcEndpointNameToVpcEndpointIdMap(ctx context.Context) (map[string]string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for VpcEndpointVpcEndpointNameToVpcEndpointIdMap")
	}

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (map[string]string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) map[string]string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVpcEndpointsInterface_VpcEndpointVpcEndpointNameToVpcEndpointIdMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VpcEndpointVpcEndpointNameToVpcEndpointIdMap'
type MockVpcEndpointsInterface_VpcEndpointVpcEndpointNameToVpcEndpointIdMap_Call struct {
	*mock.Call
}

// VpcEndpointVpcEndpointNameToVpcEndpointIdMap is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockVpcEndpointsInterface_Expecter) VpcEndpointVpcEndpointNameToVpcEndpointIdMap(ctx interface{}) *MockVpcEndpointsInterface_VpcEndpointVpcEndpointNameToVpcEndpointIdMap_Call {
	return &MockVpcEndpointsInterface_VpcEndpointVpcEndpointNameToVpcEndpointIdMap_Call{Call: _e.mock.On("VpcEndpointVpcEndpointNameToVpcEndpointIdMap", ctx)}
}

func (_c *MockVpcEndpointsInterface_VpcEndpointVpcEndpointNameToVpcEndpointIdMap_Call) Run(run func(ctx context.Context)) *MockVpcEndpointsInterface_VpcEndpointVpcEndpointNameToVpcEndpointIdMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockVpcEndpointsInterface_VpcEndpointVpcEndpointNameToVpcEndpointIdMap_Call) Return(_a0 map[string]string, _a1 error) *MockVpcEndpointsInterface_VpcEndpointVpcEndpointNameToVpcEndpointIdMap_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVpcEndpointsInterface_VpcEndpointVpcEndpointNameToVpcEndpointIdMap_Call) RunAndReturn(run func(context.Context) (map[string]string, error)) *MockVpcEndpointsInterface_VpcEndpointVpcEndpointNameToVpcEndpointIdMap_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockVpcEndpointsInterface) WithImpl(impl provisioning.VpcEndpointsService) provisioning.VpcEndpointsInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 provisioning.VpcEndpointsInterface
	if rf, ok := ret.Get(0).(func(provisioning.VpcEndpointsService) provisioning.VpcEndpointsInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(provisioning.VpcEndpointsInterface)
		}
	}

	return r0
}

// MockVpcEndpointsInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockVpcEndpointsInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl provisioning.VpcEndpointsService
func (_e *MockVpcEndpointsInterface_Expecter) WithImpl(impl interface{}) *MockVpcEndpointsInterface_WithImpl_Call {
	return &MockVpcEndpointsInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockVpcEndpointsInterface_WithImpl_Call) Run(run func(impl provisioning.VpcEndpointsService)) *MockVpcEndpointsInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(provisioning.VpcEndpointsService))
	})
	return _c
}

func (_c *MockVpcEndpointsInterface_WithImpl_Call) Return(_a0 provisioning.VpcEndpointsInterface) *MockVpcEndpointsInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVpcEndpointsInterface_WithImpl_Call) RunAndReturn(run func(provisioning.VpcEndpointsService) provisioning.VpcEndpointsInterface) *MockVpcEndpointsInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockVpcEndpointsInterface creates a new instance of MockVpcEndpointsInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVpcEndpointsInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVpcEndpointsInterface {
	mock := &MockVpcEndpointsInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
