// Code generated by mockery v2.43.0. DO NOT EDIT.

package provisioning

import (
	context "context"

	provisioning "github.com/databricks/databricks-sdk-go/service/provisioning"
	mock "github.com/stretchr/testify/mock"
)

// MockPrivateAccessInterface is an autogenerated mock type for the PrivateAccessInterface type
type MockPrivateAccessInterface struct {
	mock.Mock
}

type MockPrivateAccessInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPrivateAccessInterface) EXPECT() *MockPrivateAccessInterface_Expecter {
	return &MockPrivateAccessInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, request
func (_m *MockPrivateAccessInterface) Create(ctx context.Context, request provisioning.UpsertPrivateAccessSettingsRequest) (*provisioning.PrivateAccessSettings, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *provisioning.PrivateAccessSettings
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, provisioning.UpsertPrivateAccessSettingsRequest) (*provisioning.PrivateAccessSettings, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, provisioning.UpsertPrivateAccessSettingsRequest) *provisioning.PrivateAccessSettings); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provisioning.PrivateAccessSettings)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, provisioning.UpsertPrivateAccessSettingsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPrivateAccessInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockPrivateAccessInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - request provisioning.UpsertPrivateAccessSettingsRequest
func (_e *MockPrivateAccessInterface_Expecter) Create(ctx interface{}, request interface{}) *MockPrivateAccessInterface_Create_Call {
	return &MockPrivateAccessInterface_Create_Call{Call: _e.mock.On("Create", ctx, request)}
}

func (_c *MockPrivateAccessInterface_Create_Call) Run(run func(ctx context.Context, request provisioning.UpsertPrivateAccessSettingsRequest)) *MockPrivateAccessInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(provisioning.UpsertPrivateAccessSettingsRequest))
	})
	return _c
}

func (_c *MockPrivateAccessInterface_Create_Call) Return(_a0 *provisioning.PrivateAccessSettings, _a1 error) *MockPrivateAccessInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPrivateAccessInterface_Create_Call) RunAndReturn(run func(context.Context, provisioning.UpsertPrivateAccessSettingsRequest) (*provisioning.PrivateAccessSettings, error)) *MockPrivateAccessInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, request
func (_m *MockPrivateAccessInterface) Delete(ctx context.Context, request provisioning.DeletePrivateAccesRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, provisioning.DeletePrivateAccesRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPrivateAccessInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockPrivateAccessInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - request provisioning.DeletePrivateAccesRequest
func (_e *MockPrivateAccessInterface_Expecter) Delete(ctx interface{}, request interface{}) *MockPrivateAccessInterface_Delete_Call {
	return &MockPrivateAccessInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, request)}
}

func (_c *MockPrivateAccessInterface_Delete_Call) Run(run func(ctx context.Context, request provisioning.DeletePrivateAccesRequest)) *MockPrivateAccessInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(provisioning.DeletePrivateAccesRequest))
	})
	return _c
}

func (_c *MockPrivateAccessInterface_Delete_Call) Return(_a0 error) *MockPrivateAccessInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPrivateAccessInterface_Delete_Call) RunAndReturn(run func(context.Context, provisioning.DeletePrivateAccesRequest) error) *MockPrivateAccessInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByPrivateAccessSettingsId provides a mock function with given fields: ctx, privateAccessSettingsId
func (_m *MockPrivateAccessInterface) DeleteByPrivateAccessSettingsId(ctx context.Context, privateAccessSettingsId string) error {
	ret := _m.Called(ctx, privateAccessSettingsId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByPrivateAccessSettingsId")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, privateAccessSettingsId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPrivateAccessInterface_DeleteByPrivateAccessSettingsId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByPrivateAccessSettingsId'
type MockPrivateAccessInterface_DeleteByPrivateAccessSettingsId_Call struct {
	*mock.Call
}

// DeleteByPrivateAccessSettingsId is a helper method to define mock.On call
//   - ctx context.Context
//   - privateAccessSettingsId string
func (_e *MockPrivateAccessInterface_Expecter) DeleteByPrivateAccessSettingsId(ctx interface{}, privateAccessSettingsId interface{}) *MockPrivateAccessInterface_DeleteByPrivateAccessSettingsId_Call {
	return &MockPrivateAccessInterface_DeleteByPrivateAccessSettingsId_Call{Call: _e.mock.On("DeleteByPrivateAccessSettingsId", ctx, privateAccessSettingsId)}
}

func (_c *MockPrivateAccessInterface_DeleteByPrivateAccessSettingsId_Call) Run(run func(ctx context.Context, privateAccessSettingsId string)) *MockPrivateAccessInterface_DeleteByPrivateAccessSettingsId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockPrivateAccessInterface_DeleteByPrivateAccessSettingsId_Call) Return(_a0 error) *MockPrivateAccessInterface_DeleteByPrivateAccessSettingsId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPrivateAccessInterface_DeleteByPrivateAccessSettingsId_Call) RunAndReturn(run func(context.Context, string) error) *MockPrivateAccessInterface_DeleteByPrivateAccessSettingsId_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, request
func (_m *MockPrivateAccessInterface) Get(ctx context.Context, request provisioning.GetPrivateAccesRequest) (*provisioning.PrivateAccessSettings, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *provisioning.PrivateAccessSettings
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, provisioning.GetPrivateAccesRequest) (*provisioning.PrivateAccessSettings, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, provisioning.GetPrivateAccesRequest) *provisioning.PrivateAccessSettings); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provisioning.PrivateAccessSettings)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, provisioning.GetPrivateAccesRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPrivateAccessInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockPrivateAccessInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - request provisioning.GetPrivateAccesRequest
func (_e *MockPrivateAccessInterface_Expecter) Get(ctx interface{}, request interface{}) *MockPrivateAccessInterface_Get_Call {
	return &MockPrivateAccessInterface_Get_Call{Call: _e.mock.On("Get", ctx, request)}
}

func (_c *MockPrivateAccessInterface_Get_Call) Run(run func(ctx context.Context, request provisioning.GetPrivateAccesRequest)) *MockPrivateAccessInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(provisioning.GetPrivateAccesRequest))
	})
	return _c
}

func (_c *MockPrivateAccessInterface_Get_Call) Return(_a0 *provisioning.PrivateAccessSettings, _a1 error) *MockPrivateAccessInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPrivateAccessInterface_Get_Call) RunAndReturn(run func(context.Context, provisioning.GetPrivateAccesRequest) (*provisioning.PrivateAccessSettings, error)) *MockPrivateAccessInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByPrivateAccessSettingsId provides a mock function with given fields: ctx, privateAccessSettingsId
func (_m *MockPrivateAccessInterface) GetByPrivateAccessSettingsId(ctx context.Context, privateAccessSettingsId string) (*provisioning.PrivateAccessSettings, error) {
	ret := _m.Called(ctx, privateAccessSettingsId)

	if len(ret) == 0 {
		panic("no return value specified for GetByPrivateAccessSettingsId")
	}

	var r0 *provisioning.PrivateAccessSettings
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*provisioning.PrivateAccessSettings, error)); ok {
		return rf(ctx, privateAccessSettingsId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *provisioning.PrivateAccessSettings); ok {
		r0 = rf(ctx, privateAccessSettingsId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provisioning.PrivateAccessSettings)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, privateAccessSettingsId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPrivateAccessInterface_GetByPrivateAccessSettingsId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByPrivateAccessSettingsId'
type MockPrivateAccessInterface_GetByPrivateAccessSettingsId_Call struct {
	*mock.Call
}

// GetByPrivateAccessSettingsId is a helper method to define mock.On call
//   - ctx context.Context
//   - privateAccessSettingsId string
func (_e *MockPrivateAccessInterface_Expecter) GetByPrivateAccessSettingsId(ctx interface{}, privateAccessSettingsId interface{}) *MockPrivateAccessInterface_GetByPrivateAccessSettingsId_Call {
	return &MockPrivateAccessInterface_GetByPrivateAccessSettingsId_Call{Call: _e.mock.On("GetByPrivateAccessSettingsId", ctx, privateAccessSettingsId)}
}

func (_c *MockPrivateAccessInterface_GetByPrivateAccessSettingsId_Call) Run(run func(ctx context.Context, privateAccessSettingsId string)) *MockPrivateAccessInterface_GetByPrivateAccessSettingsId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockPrivateAccessInterface_GetByPrivateAccessSettingsId_Call) Return(_a0 *provisioning.PrivateAccessSettings, _a1 error) *MockPrivateAccessInterface_GetByPrivateAccessSettingsId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPrivateAccessInterface_GetByPrivateAccessSettingsId_Call) RunAndReturn(run func(context.Context, string) (*provisioning.PrivateAccessSettings, error)) *MockPrivateAccessInterface_GetByPrivateAccessSettingsId_Call {
	_c.Call.Return(run)
	return _c
}

// GetByPrivateAccessSettingsName provides a mock function with given fields: ctx, name
func (_m *MockPrivateAccessInterface) GetByPrivateAccessSettingsName(ctx context.Context, name string) (*provisioning.PrivateAccessSettings, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetByPrivateAccessSettingsName")
	}

	var r0 *provisioning.PrivateAccessSettings
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*provisioning.PrivateAccessSettings, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *provisioning.PrivateAccessSettings); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provisioning.PrivateAccessSettings)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPrivateAccessInterface_GetByPrivateAccessSettingsName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByPrivateAccessSettingsName'
type MockPrivateAccessInterface_GetByPrivateAccessSettingsName_Call struct {
	*mock.Call
}

// GetByPrivateAccessSettingsName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockPrivateAccessInterface_Expecter) GetByPrivateAccessSettingsName(ctx interface{}, name interface{}) *MockPrivateAccessInterface_GetByPrivateAccessSettingsName_Call {
	return &MockPrivateAccessInterface_GetByPrivateAccessSettingsName_Call{Call: _e.mock.On("GetByPrivateAccessSettingsName", ctx, name)}
}

func (_c *MockPrivateAccessInterface_GetByPrivateAccessSettingsName_Call) Run(run func(ctx context.Context, name string)) *MockPrivateAccessInterface_GetByPrivateAccessSettingsName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockPrivateAccessInterface_GetByPrivateAccessSettingsName_Call) Return(_a0 *provisioning.PrivateAccessSettings, _a1 error) *MockPrivateAccessInterface_GetByPrivateAccessSettingsName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPrivateAccessInterface_GetByPrivateAccessSettingsName_Call) RunAndReturn(run func(context.Context, string) (*provisioning.PrivateAccessSettings, error)) *MockPrivateAccessInterface_GetByPrivateAccessSettingsName_Call {
	_c.Call.Return(run)
	return _c
}

// Impl provides a mock function with given fields:
func (_m *MockPrivateAccessInterface) Impl() provisioning.PrivateAccessService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 provisioning.PrivateAccessService
	if rf, ok := ret.Get(0).(func() provisioning.PrivateAccessService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(provisioning.PrivateAccessService)
		}
	}

	return r0
}

// MockPrivateAccessInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockPrivateAccessInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockPrivateAccessInterface_Expecter) Impl() *MockPrivateAccessInterface_Impl_Call {
	return &MockPrivateAccessInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockPrivateAccessInterface_Impl_Call) Run(run func()) *MockPrivateAccessInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPrivateAccessInterface_Impl_Call) Return(_a0 provisioning.PrivateAccessService) *MockPrivateAccessInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPrivateAccessInterface_Impl_Call) RunAndReturn(run func() provisioning.PrivateAccessService) *MockPrivateAccessInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx
func (_m *MockPrivateAccessInterface) List(ctx context.Context) ([]provisioning.PrivateAccessSettings, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []provisioning.PrivateAccessSettings
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]provisioning.PrivateAccessSettings, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []provisioning.PrivateAccessSettings); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]provisioning.PrivateAccessSettings)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPrivateAccessInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockPrivateAccessInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockPrivateAccessInterface_Expecter) List(ctx interface{}) *MockPrivateAccessInterface_List_Call {
	return &MockPrivateAccessInterface_List_Call{Call: _e.mock.On("List", ctx)}
}

func (_c *MockPrivateAccessInterface_List_Call) Run(run func(ctx context.Context)) *MockPrivateAccessInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockPrivateAccessInterface_List_Call) Return(_a0 []provisioning.PrivateAccessSettings, _a1 error) *MockPrivateAccessInterface_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPrivateAccessInterface_List_Call) RunAndReturn(run func(context.Context) ([]provisioning.PrivateAccessSettings, error)) *MockPrivateAccessInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// PrivateAccessSettingsPrivateAccessSettingsNameToPrivateAccessSettingsIdMap provides a mock function with given fields: ctx
func (_m *MockPrivateAccessInterface) PrivateAccessSettingsPrivateAccessSettingsNameToPrivateAccessSettingsIdMap(ctx context.Context) (map[string]string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for PrivateAccessSettingsPrivateAccessSettingsNameToPrivateAccessSettingsIdMap")
	}

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (map[string]string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) map[string]string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPrivateAccessInterface_PrivateAccessSettingsPrivateAccessSettingsNameToPrivateAccessSettingsIdMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrivateAccessSettingsPrivateAccessSettingsNameToPrivateAccessSettingsIdMap'
type MockPrivateAccessInterface_PrivateAccessSettingsPrivateAccessSettingsNameToPrivateAccessSettingsIdMap_Call struct {
	*mock.Call
}

// PrivateAccessSettingsPrivateAccessSettingsNameToPrivateAccessSettingsIdMap is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockPrivateAccessInterface_Expecter) PrivateAccessSettingsPrivateAccessSettingsNameToPrivateAccessSettingsIdMap(ctx interface{}) *MockPrivateAccessInterface_PrivateAccessSettingsPrivateAccessSettingsNameToPrivateAccessSettingsIdMap_Call {
	return &MockPrivateAccessInterface_PrivateAccessSettingsPrivateAccessSettingsNameToPrivateAccessSettingsIdMap_Call{Call: _e.mock.On("PrivateAccessSettingsPrivateAccessSettingsNameToPrivateAccessSettingsIdMap", ctx)}
}

func (_c *MockPrivateAccessInterface_PrivateAccessSettingsPrivateAccessSettingsNameToPrivateAccessSettingsIdMap_Call) Run(run func(ctx context.Context)) *MockPrivateAccessInterface_PrivateAccessSettingsPrivateAccessSettingsNameToPrivateAccessSettingsIdMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockPrivateAccessInterface_PrivateAccessSettingsPrivateAccessSettingsNameToPrivateAccessSettingsIdMap_Call) Return(_a0 map[string]string, _a1 error) *MockPrivateAccessInterface_PrivateAccessSettingsPrivateAccessSettingsNameToPrivateAccessSettingsIdMap_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPrivateAccessInterface_PrivateAccessSettingsPrivateAccessSettingsNameToPrivateAccessSettingsIdMap_Call) RunAndReturn(run func(context.Context) (map[string]string, error)) *MockPrivateAccessInterface_PrivateAccessSettingsPrivateAccessSettingsNameToPrivateAccessSettingsIdMap_Call {
	_c.Call.Return(run)
	return _c
}

// Replace provides a mock function with given fields: ctx, request
func (_m *MockPrivateAccessInterface) Replace(ctx context.Context, request provisioning.UpsertPrivateAccessSettingsRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Replace")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, provisioning.UpsertPrivateAccessSettingsRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPrivateAccessInterface_Replace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Replace'
type MockPrivateAccessInterface_Replace_Call struct {
	*mock.Call
}

// Replace is a helper method to define mock.On call
//   - ctx context.Context
//   - request provisioning.UpsertPrivateAccessSettingsRequest
func (_e *MockPrivateAccessInterface_Expecter) Replace(ctx interface{}, request interface{}) *MockPrivateAccessInterface_Replace_Call {
	return &MockPrivateAccessInterface_Replace_Call{Call: _e.mock.On("Replace", ctx, request)}
}

func (_c *MockPrivateAccessInterface_Replace_Call) Run(run func(ctx context.Context, request provisioning.UpsertPrivateAccessSettingsRequest)) *MockPrivateAccessInterface_Replace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(provisioning.UpsertPrivateAccessSettingsRequest))
	})
	return _c
}

func (_c *MockPrivateAccessInterface_Replace_Call) Return(_a0 error) *MockPrivateAccessInterface_Replace_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPrivateAccessInterface_Replace_Call) RunAndReturn(run func(context.Context, provisioning.UpsertPrivateAccessSettingsRequest) error) *MockPrivateAccessInterface_Replace_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockPrivateAccessInterface) WithImpl(impl provisioning.PrivateAccessService) provisioning.PrivateAccessInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 provisioning.PrivateAccessInterface
	if rf, ok := ret.Get(0).(func(provisioning.PrivateAccessService) provisioning.PrivateAccessInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(provisioning.PrivateAccessInterface)
		}
	}

	return r0
}

// MockPrivateAccessInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockPrivateAccessInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl provisioning.PrivateAccessService
func (_e *MockPrivateAccessInterface_Expecter) WithImpl(impl interface{}) *MockPrivateAccessInterface_WithImpl_Call {
	return &MockPrivateAccessInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockPrivateAccessInterface_WithImpl_Call) Run(run func(impl provisioning.PrivateAccessService)) *MockPrivateAccessInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(provisioning.PrivateAccessService))
	})
	return _c
}

func (_c *MockPrivateAccessInterface_WithImpl_Call) Return(_a0 provisioning.PrivateAccessInterface) *MockPrivateAccessInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPrivateAccessInterface_WithImpl_Call) RunAndReturn(run func(provisioning.PrivateAccessService) provisioning.PrivateAccessInterface) *MockPrivateAccessInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPrivateAccessInterface creates a new instance of MockPrivateAccessInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPrivateAccessInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPrivateAccessInterface {
	mock := &MockPrivateAccessInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
