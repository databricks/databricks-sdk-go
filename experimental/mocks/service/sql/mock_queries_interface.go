// Code generated by mockery v2.43.0. DO NOT EDIT.

package sql

import (
	context "context"

	listing "github.com/databricks/databricks-sdk-go/listing"
	mock "github.com/stretchr/testify/mock"

	sql "github.com/databricks/databricks-sdk-go/service/sql"
)

// MockQueriesInterface is an autogenerated mock type for the QueriesInterface type
type MockQueriesInterface struct {
	mock.Mock
}

type MockQueriesInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQueriesInterface) EXPECT() *MockQueriesInterface_Expecter {
	return &MockQueriesInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, request
func (_m *MockQueriesInterface) Create(ctx context.Context, request sql.QueryPostContent) (*sql.Query, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *sql.Query
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.QueryPostContent) (*sql.Query, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.QueryPostContent) *sql.Query); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Query)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.QueryPostContent) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueriesInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockQueriesInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - request sql.QueryPostContent
func (_e *MockQueriesInterface_Expecter) Create(ctx interface{}, request interface{}) *MockQueriesInterface_Create_Call {
	return &MockQueriesInterface_Create_Call{Call: _e.mock.On("Create", ctx, request)}
}

func (_c *MockQueriesInterface_Create_Call) Run(run func(ctx context.Context, request sql.QueryPostContent)) *MockQueriesInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.QueryPostContent))
	})
	return _c
}

func (_c *MockQueriesInterface_Create_Call) Return(_a0 *sql.Query, _a1 error) *MockQueriesInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueriesInterface_Create_Call) RunAndReturn(run func(context.Context, sql.QueryPostContent) (*sql.Query, error)) *MockQueriesInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, request
func (_m *MockQueriesInterface) Delete(ctx context.Context, request sql.DeleteQueryRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.DeleteQueryRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQueriesInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockQueriesInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - request sql.DeleteQueryRequest
func (_e *MockQueriesInterface_Expecter) Delete(ctx interface{}, request interface{}) *MockQueriesInterface_Delete_Call {
	return &MockQueriesInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, request)}
}

func (_c *MockQueriesInterface_Delete_Call) Run(run func(ctx context.Context, request sql.DeleteQueryRequest)) *MockQueriesInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.DeleteQueryRequest))
	})
	return _c
}

func (_c *MockQueriesInterface_Delete_Call) Return(_a0 error) *MockQueriesInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQueriesInterface_Delete_Call) RunAndReturn(run func(context.Context, sql.DeleteQueryRequest) error) *MockQueriesInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByQueryId provides a mock function with given fields: ctx, queryId
func (_m *MockQueriesInterface) DeleteByQueryId(ctx context.Context, queryId string) error {
	ret := _m.Called(ctx, queryId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByQueryId")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, queryId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQueriesInterface_DeleteByQueryId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByQueryId'
type MockQueriesInterface_DeleteByQueryId_Call struct {
	*mock.Call
}

// DeleteByQueryId is a helper method to define mock.On call
//   - ctx context.Context
//   - queryId string
func (_e *MockQueriesInterface_Expecter) DeleteByQueryId(ctx interface{}, queryId interface{}) *MockQueriesInterface_DeleteByQueryId_Call {
	return &MockQueriesInterface_DeleteByQueryId_Call{Call: _e.mock.On("DeleteByQueryId", ctx, queryId)}
}

func (_c *MockQueriesInterface_DeleteByQueryId_Call) Run(run func(ctx context.Context, queryId string)) *MockQueriesInterface_DeleteByQueryId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockQueriesInterface_DeleteByQueryId_Call) Return(_a0 error) *MockQueriesInterface_DeleteByQueryId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQueriesInterface_DeleteByQueryId_Call) RunAndReturn(run func(context.Context, string) error) *MockQueriesInterface_DeleteByQueryId_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, request
func (_m *MockQueriesInterface) Get(ctx context.Context, request sql.GetQueryRequest) (*sql.Query, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *sql.Query
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.GetQueryRequest) (*sql.Query, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.GetQueryRequest) *sql.Query); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Query)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.GetQueryRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueriesInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockQueriesInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - request sql.GetQueryRequest
func (_e *MockQueriesInterface_Expecter) Get(ctx interface{}, request interface{}) *MockQueriesInterface_Get_Call {
	return &MockQueriesInterface_Get_Call{Call: _e.mock.On("Get", ctx, request)}
}

func (_c *MockQueriesInterface_Get_Call) Run(run func(ctx context.Context, request sql.GetQueryRequest)) *MockQueriesInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.GetQueryRequest))
	})
	return _c
}

func (_c *MockQueriesInterface_Get_Call) Return(_a0 *sql.Query, _a1 error) *MockQueriesInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueriesInterface_Get_Call) RunAndReturn(run func(context.Context, sql.GetQueryRequest) (*sql.Query, error)) *MockQueriesInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByName provides a mock function with given fields: ctx, name
func (_m *MockQueriesInterface) GetByName(ctx context.Context, name string) (*sql.Query, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetByName")
	}

	var r0 *sql.Query
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*sql.Query, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *sql.Query); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Query)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueriesInterface_GetByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByName'
type MockQueriesInterface_GetByName_Call struct {
	*mock.Call
}

// GetByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockQueriesInterface_Expecter) GetByName(ctx interface{}, name interface{}) *MockQueriesInterface_GetByName_Call {
	return &MockQueriesInterface_GetByName_Call{Call: _e.mock.On("GetByName", ctx, name)}
}

func (_c *MockQueriesInterface_GetByName_Call) Run(run func(ctx context.Context, name string)) *MockQueriesInterface_GetByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockQueriesInterface_GetByName_Call) Return(_a0 *sql.Query, _a1 error) *MockQueriesInterface_GetByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueriesInterface_GetByName_Call) RunAndReturn(run func(context.Context, string) (*sql.Query, error)) *MockQueriesInterface_GetByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetByQueryId provides a mock function with given fields: ctx, queryId
func (_m *MockQueriesInterface) GetByQueryId(ctx context.Context, queryId string) (*sql.Query, error) {
	ret := _m.Called(ctx, queryId)

	if len(ret) == 0 {
		panic("no return value specified for GetByQueryId")
	}

	var r0 *sql.Query
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*sql.Query, error)); ok {
		return rf(ctx, queryId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *sql.Query); ok {
		r0 = rf(ctx, queryId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Query)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, queryId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueriesInterface_GetByQueryId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByQueryId'
type MockQueriesInterface_GetByQueryId_Call struct {
	*mock.Call
}

// GetByQueryId is a helper method to define mock.On call
//   - ctx context.Context
//   - queryId string
func (_e *MockQueriesInterface_Expecter) GetByQueryId(ctx interface{}, queryId interface{}) *MockQueriesInterface_GetByQueryId_Call {
	return &MockQueriesInterface_GetByQueryId_Call{Call: _e.mock.On("GetByQueryId", ctx, queryId)}
}

func (_c *MockQueriesInterface_GetByQueryId_Call) Run(run func(ctx context.Context, queryId string)) *MockQueriesInterface_GetByQueryId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockQueriesInterface_GetByQueryId_Call) Return(_a0 *sql.Query, _a1 error) *MockQueriesInterface_GetByQueryId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueriesInterface_GetByQueryId_Call) RunAndReturn(run func(context.Context, string) (*sql.Query, error)) *MockQueriesInterface_GetByQueryId_Call {
	_c.Call.Return(run)
	return _c
}

// Impl provides a mock function with given fields:
func (_m *MockQueriesInterface) Impl() sql.QueriesService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 sql.QueriesService
	if rf, ok := ret.Get(0).(func() sql.QueriesService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.QueriesService)
		}
	}

	return r0
}

// MockQueriesInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockQueriesInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockQueriesInterface_Expecter) Impl() *MockQueriesInterface_Impl_Call {
	return &MockQueriesInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockQueriesInterface_Impl_Call) Run(run func()) *MockQueriesInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockQueriesInterface_Impl_Call) Return(_a0 sql.QueriesService) *MockQueriesInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQueriesInterface_Impl_Call) RunAndReturn(run func() sql.QueriesService) *MockQueriesInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, request
func (_m *MockQueriesInterface) List(ctx context.Context, request sql.ListQueriesRequest) listing.Iterator[sql.Query] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 listing.Iterator[sql.Query]
	if rf, ok := ret.Get(0).(func(context.Context, sql.ListQueriesRequest) listing.Iterator[sql.Query]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listing.Iterator[sql.Query])
		}
	}

	return r0
}

// MockQueriesInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockQueriesInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - request sql.ListQueriesRequest
func (_e *MockQueriesInterface_Expecter) List(ctx interface{}, request interface{}) *MockQueriesInterface_List_Call {
	return &MockQueriesInterface_List_Call{Call: _e.mock.On("List", ctx, request)}
}

func (_c *MockQueriesInterface_List_Call) Run(run func(ctx context.Context, request sql.ListQueriesRequest)) *MockQueriesInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.ListQueriesRequest))
	})
	return _c
}

func (_c *MockQueriesInterface_List_Call) Return(_a0 listing.Iterator[sql.Query]) *MockQueriesInterface_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQueriesInterface_List_Call) RunAndReturn(run func(context.Context, sql.ListQueriesRequest) listing.Iterator[sql.Query]) *MockQueriesInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListAll provides a mock function with given fields: ctx, request
func (_m *MockQueriesInterface) ListAll(ctx context.Context, request sql.ListQueriesRequest) ([]sql.Query, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListAll")
	}

	var r0 []sql.Query
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.ListQueriesRequest) ([]sql.Query, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.ListQueriesRequest) []sql.Query); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sql.Query)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.ListQueriesRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueriesInterface_ListAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAll'
type MockQueriesInterface_ListAll_Call struct {
	*mock.Call
}

// ListAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request sql.ListQueriesRequest
func (_e *MockQueriesInterface_Expecter) ListAll(ctx interface{}, request interface{}) *MockQueriesInterface_ListAll_Call {
	return &MockQueriesInterface_ListAll_Call{Call: _e.mock.On("ListAll", ctx, request)}
}

func (_c *MockQueriesInterface_ListAll_Call) Run(run func(ctx context.Context, request sql.ListQueriesRequest)) *MockQueriesInterface_ListAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.ListQueriesRequest))
	})
	return _c
}

func (_c *MockQueriesInterface_ListAll_Call) Return(_a0 []sql.Query, _a1 error) *MockQueriesInterface_ListAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueriesInterface_ListAll_Call) RunAndReturn(run func(context.Context, sql.ListQueriesRequest) ([]sql.Query, error)) *MockQueriesInterface_ListAll_Call {
	_c.Call.Return(run)
	return _c
}

// QueryNameToIdMap provides a mock function with given fields: ctx, request
func (_m *MockQueriesInterface) QueryNameToIdMap(ctx context.Context, request sql.ListQueriesRequest) (map[string]string, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for QueryNameToIdMap")
	}

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.ListQueriesRequest) (map[string]string, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.ListQueriesRequest) map[string]string); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.ListQueriesRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueriesInterface_QueryNameToIdMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryNameToIdMap'
type MockQueriesInterface_QueryNameToIdMap_Call struct {
	*mock.Call
}

// QueryNameToIdMap is a helper method to define mock.On call
//   - ctx context.Context
//   - request sql.ListQueriesRequest
func (_e *MockQueriesInterface_Expecter) QueryNameToIdMap(ctx interface{}, request interface{}) *MockQueriesInterface_QueryNameToIdMap_Call {
	return &MockQueriesInterface_QueryNameToIdMap_Call{Call: _e.mock.On("QueryNameToIdMap", ctx, request)}
}

func (_c *MockQueriesInterface_QueryNameToIdMap_Call) Run(run func(ctx context.Context, request sql.ListQueriesRequest)) *MockQueriesInterface_QueryNameToIdMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.ListQueriesRequest))
	})
	return _c
}

func (_c *MockQueriesInterface_QueryNameToIdMap_Call) Return(_a0 map[string]string, _a1 error) *MockQueriesInterface_QueryNameToIdMap_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueriesInterface_QueryNameToIdMap_Call) RunAndReturn(run func(context.Context, sql.ListQueriesRequest) (map[string]string, error)) *MockQueriesInterface_QueryNameToIdMap_Call {
	_c.Call.Return(run)
	return _c
}

// Restore provides a mock function with given fields: ctx, request
func (_m *MockQueriesInterface) Restore(ctx context.Context, request sql.RestoreQueryRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Restore")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.RestoreQueryRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQueriesInterface_Restore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Restore'
type MockQueriesInterface_Restore_Call struct {
	*mock.Call
}

// Restore is a helper method to define mock.On call
//   - ctx context.Context
//   - request sql.RestoreQueryRequest
func (_e *MockQueriesInterface_Expecter) Restore(ctx interface{}, request interface{}) *MockQueriesInterface_Restore_Call {
	return &MockQueriesInterface_Restore_Call{Call: _e.mock.On("Restore", ctx, request)}
}

func (_c *MockQueriesInterface_Restore_Call) Run(run func(ctx context.Context, request sql.RestoreQueryRequest)) *MockQueriesInterface_Restore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.RestoreQueryRequest))
	})
	return _c
}

func (_c *MockQueriesInterface_Restore_Call) Return(_a0 error) *MockQueriesInterface_Restore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQueriesInterface_Restore_Call) RunAndReturn(run func(context.Context, sql.RestoreQueryRequest) error) *MockQueriesInterface_Restore_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, request
func (_m *MockQueriesInterface) Update(ctx context.Context, request sql.QueryEditContent) (*sql.Query, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *sql.Query
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.QueryEditContent) (*sql.Query, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.QueryEditContent) *sql.Query); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Query)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.QueryEditContent) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueriesInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockQueriesInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - request sql.QueryEditContent
func (_e *MockQueriesInterface_Expecter) Update(ctx interface{}, request interface{}) *MockQueriesInterface_Update_Call {
	return &MockQueriesInterface_Update_Call{Call: _e.mock.On("Update", ctx, request)}
}

func (_c *MockQueriesInterface_Update_Call) Run(run func(ctx context.Context, request sql.QueryEditContent)) *MockQueriesInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.QueryEditContent))
	})
	return _c
}

func (_c *MockQueriesInterface_Update_Call) Return(_a0 *sql.Query, _a1 error) *MockQueriesInterface_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueriesInterface_Update_Call) RunAndReturn(run func(context.Context, sql.QueryEditContent) (*sql.Query, error)) *MockQueriesInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockQueriesInterface) WithImpl(impl sql.QueriesService) sql.QueriesInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 sql.QueriesInterface
	if rf, ok := ret.Get(0).(func(sql.QueriesService) sql.QueriesInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.QueriesInterface)
		}
	}

	return r0
}

// MockQueriesInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockQueriesInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl sql.QueriesService
func (_e *MockQueriesInterface_Expecter) WithImpl(impl interface{}) *MockQueriesInterface_WithImpl_Call {
	return &MockQueriesInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockQueriesInterface_WithImpl_Call) Run(run func(impl sql.QueriesService)) *MockQueriesInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(sql.QueriesService))
	})
	return _c
}

func (_c *MockQueriesInterface_WithImpl_Call) Return(_a0 sql.QueriesInterface) *MockQueriesInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQueriesInterface_WithImpl_Call) RunAndReturn(run func(sql.QueriesService) sql.QueriesInterface) *MockQueriesInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockQueriesInterface creates a new instance of MockQueriesInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQueriesInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQueriesInterface {
	mock := &MockQueriesInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
