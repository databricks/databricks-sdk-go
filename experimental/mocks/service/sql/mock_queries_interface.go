// Code generated by mockery v2.43.0. DO NOT EDIT.

package sql

import (
	context "context"

	listing "github.com/databricks/databricks-sdk-go/listing"
	mock "github.com/stretchr/testify/mock"

	sql "github.com/databricks/databricks-sdk-go/service/sql"
)

// MockQueriesInterface is an autogenerated mock type for the QueriesInterface type
type MockQueriesInterface struct {
	mock.Mock
}

type MockQueriesInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQueriesInterface) EXPECT() *MockQueriesInterface_Expecter {
	return &MockQueriesInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, request
func (_m *MockQueriesInterface) Create(ctx context.Context, request sql.CreateQueryRequest) (*sql.Query, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *sql.Query
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.CreateQueryRequest) (*sql.Query, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.CreateQueryRequest) *sql.Query); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Query)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.CreateQueryRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueriesInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockQueriesInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - request sql.CreateQueryRequest
func (_e *MockQueriesInterface_Expecter) Create(ctx interface{}, request interface{}) *MockQueriesInterface_Create_Call {
	return &MockQueriesInterface_Create_Call{Call: _e.mock.On("Create", ctx, request)}
}

func (_c *MockQueriesInterface_Create_Call) Run(run func(ctx context.Context, request sql.CreateQueryRequest)) *MockQueriesInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.CreateQueryRequest))
	})
	return _c
}

func (_c *MockQueriesInterface_Create_Call) Return(_a0 *sql.Query, _a1 error) *MockQueriesInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueriesInterface_Create_Call) RunAndReturn(run func(context.Context, sql.CreateQueryRequest) (*sql.Query, error)) *MockQueriesInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, request
func (_m *MockQueriesInterface) Delete(ctx context.Context, request sql.TrashQueryRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.TrashQueryRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQueriesInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockQueriesInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - request sql.TrashQueryRequest
func (_e *MockQueriesInterface_Expecter) Delete(ctx interface{}, request interface{}) *MockQueriesInterface_Delete_Call {
	return &MockQueriesInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, request)}
}

func (_c *MockQueriesInterface_Delete_Call) Run(run func(ctx context.Context, request sql.TrashQueryRequest)) *MockQueriesInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.TrashQueryRequest))
	})
	return _c
}

func (_c *MockQueriesInterface_Delete_Call) Return(_a0 error) *MockQueriesInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQueriesInterface_Delete_Call) RunAndReturn(run func(context.Context, sql.TrashQueryRequest) error) *MockQueriesInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteById provides a mock function with given fields: ctx, id
func (_m *MockQueriesInterface) DeleteById(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQueriesInterface_DeleteById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteById'
type MockQueriesInterface_DeleteById_Call struct {
	*mock.Call
}

// DeleteById is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockQueriesInterface_Expecter) DeleteById(ctx interface{}, id interface{}) *MockQueriesInterface_DeleteById_Call {
	return &MockQueriesInterface_DeleteById_Call{Call: _e.mock.On("DeleteById", ctx, id)}
}

func (_c *MockQueriesInterface_DeleteById_Call) Run(run func(ctx context.Context, id string)) *MockQueriesInterface_DeleteById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockQueriesInterface_DeleteById_Call) Return(_a0 error) *MockQueriesInterface_DeleteById_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQueriesInterface_DeleteById_Call) RunAndReturn(run func(context.Context, string) error) *MockQueriesInterface_DeleteById_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, request
func (_m *MockQueriesInterface) Get(ctx context.Context, request sql.GetQueryRequest) (*sql.Query, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *sql.Query
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.GetQueryRequest) (*sql.Query, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.GetQueryRequest) *sql.Query); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Query)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.GetQueryRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueriesInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockQueriesInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - request sql.GetQueryRequest
func (_e *MockQueriesInterface_Expecter) Get(ctx interface{}, request interface{}) *MockQueriesInterface_Get_Call {
	return &MockQueriesInterface_Get_Call{Call: _e.mock.On("Get", ctx, request)}
}

func (_c *MockQueriesInterface_Get_Call) Run(run func(ctx context.Context, request sql.GetQueryRequest)) *MockQueriesInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.GetQueryRequest))
	})
	return _c
}

func (_c *MockQueriesInterface_Get_Call) Return(_a0 *sql.Query, _a1 error) *MockQueriesInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueriesInterface_Get_Call) RunAndReturn(run func(context.Context, sql.GetQueryRequest) (*sql.Query, error)) *MockQueriesInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByDisplayName provides a mock function with given fields: ctx, name
func (_m *MockQueriesInterface) GetByDisplayName(ctx context.Context, name string) (*sql.ListQueryObjectsResponseQuery, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetByDisplayName")
	}

	var r0 *sql.ListQueryObjectsResponseQuery
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*sql.ListQueryObjectsResponseQuery, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *sql.ListQueryObjectsResponseQuery); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.ListQueryObjectsResponseQuery)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueriesInterface_GetByDisplayName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByDisplayName'
type MockQueriesInterface_GetByDisplayName_Call struct {
	*mock.Call
}

// GetByDisplayName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockQueriesInterface_Expecter) GetByDisplayName(ctx interface{}, name interface{}) *MockQueriesInterface_GetByDisplayName_Call {
	return &MockQueriesInterface_GetByDisplayName_Call{Call: _e.mock.On("GetByDisplayName", ctx, name)}
}

func (_c *MockQueriesInterface_GetByDisplayName_Call) Run(run func(ctx context.Context, name string)) *MockQueriesInterface_GetByDisplayName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockQueriesInterface_GetByDisplayName_Call) Return(_a0 *sql.ListQueryObjectsResponseQuery, _a1 error) *MockQueriesInterface_GetByDisplayName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueriesInterface_GetByDisplayName_Call) RunAndReturn(run func(context.Context, string) (*sql.ListQueryObjectsResponseQuery, error)) *MockQueriesInterface_GetByDisplayName_Call {
	_c.Call.Return(run)
	return _c
}

// GetById provides a mock function with given fields: ctx, id
func (_m *MockQueriesInterface) GetById(ctx context.Context, id string) (*sql.Query, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 *sql.Query
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*sql.Query, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *sql.Query); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Query)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueriesInterface_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type MockQueriesInterface_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockQueriesInterface_Expecter) GetById(ctx interface{}, id interface{}) *MockQueriesInterface_GetById_Call {
	return &MockQueriesInterface_GetById_Call{Call: _e.mock.On("GetById", ctx, id)}
}

func (_c *MockQueriesInterface_GetById_Call) Run(run func(ctx context.Context, id string)) *MockQueriesInterface_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockQueriesInterface_GetById_Call) Return(_a0 *sql.Query, _a1 error) *MockQueriesInterface_GetById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueriesInterface_GetById_Call) RunAndReturn(run func(context.Context, string) (*sql.Query, error)) *MockQueriesInterface_GetById_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, request
func (_m *MockQueriesInterface) List(ctx context.Context, request sql.ListQueriesRequest) listing.Iterator[sql.ListQueryObjectsResponseQuery] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 listing.Iterator[sql.ListQueryObjectsResponseQuery]
	if rf, ok := ret.Get(0).(func(context.Context, sql.ListQueriesRequest) listing.Iterator[sql.ListQueryObjectsResponseQuery]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listing.Iterator[sql.ListQueryObjectsResponseQuery])
		}
	}

	return r0
}

// MockQueriesInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockQueriesInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - request sql.ListQueriesRequest
func (_e *MockQueriesInterface_Expecter) List(ctx interface{}, request interface{}) *MockQueriesInterface_List_Call {
	return &MockQueriesInterface_List_Call{Call: _e.mock.On("List", ctx, request)}
}

func (_c *MockQueriesInterface_List_Call) Run(run func(ctx context.Context, request sql.ListQueriesRequest)) *MockQueriesInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.ListQueriesRequest))
	})
	return _c
}

func (_c *MockQueriesInterface_List_Call) Return(_a0 listing.Iterator[sql.ListQueryObjectsResponseQuery]) *MockQueriesInterface_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQueriesInterface_List_Call) RunAndReturn(run func(context.Context, sql.ListQueriesRequest) listing.Iterator[sql.ListQueryObjectsResponseQuery]) *MockQueriesInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListAll provides a mock function with given fields: ctx, request
func (_m *MockQueriesInterface) ListAll(ctx context.Context, request sql.ListQueriesRequest) ([]sql.ListQueryObjectsResponseQuery, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListAll")
	}

	var r0 []sql.ListQueryObjectsResponseQuery
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.ListQueriesRequest) ([]sql.ListQueryObjectsResponseQuery, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.ListQueriesRequest) []sql.ListQueryObjectsResponseQuery); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sql.ListQueryObjectsResponseQuery)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.ListQueriesRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueriesInterface_ListAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAll'
type MockQueriesInterface_ListAll_Call struct {
	*mock.Call
}

// ListAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request sql.ListQueriesRequest
func (_e *MockQueriesInterface_Expecter) ListAll(ctx interface{}, request interface{}) *MockQueriesInterface_ListAll_Call {
	return &MockQueriesInterface_ListAll_Call{Call: _e.mock.On("ListAll", ctx, request)}
}

func (_c *MockQueriesInterface_ListAll_Call) Run(run func(ctx context.Context, request sql.ListQueriesRequest)) *MockQueriesInterface_ListAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.ListQueriesRequest))
	})
	return _c
}

func (_c *MockQueriesInterface_ListAll_Call) Return(_a0 []sql.ListQueryObjectsResponseQuery, _a1 error) *MockQueriesInterface_ListAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueriesInterface_ListAll_Call) RunAndReturn(run func(context.Context, sql.ListQueriesRequest) ([]sql.ListQueryObjectsResponseQuery, error)) *MockQueriesInterface_ListAll_Call {
	_c.Call.Return(run)
	return _c
}

// ListQueryObjectsResponseQueryDisplayNameToIdMap provides a mock function with given fields: ctx, request
func (_m *MockQueriesInterface) ListQueryObjectsResponseQueryDisplayNameToIdMap(ctx context.Context, request sql.ListQueriesRequest) (map[string]string, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListQueryObjectsResponseQueryDisplayNameToIdMap")
	}

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.ListQueriesRequest) (map[string]string, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.ListQueriesRequest) map[string]string); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.ListQueriesRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueriesInterface_ListQueryObjectsResponseQueryDisplayNameToIdMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListQueryObjectsResponseQueryDisplayNameToIdMap'
type MockQueriesInterface_ListQueryObjectsResponseQueryDisplayNameToIdMap_Call struct {
	*mock.Call
}

// ListQueryObjectsResponseQueryDisplayNameToIdMap is a helper method to define mock.On call
//   - ctx context.Context
//   - request sql.ListQueriesRequest
func (_e *MockQueriesInterface_Expecter) ListQueryObjectsResponseQueryDisplayNameToIdMap(ctx interface{}, request interface{}) *MockQueriesInterface_ListQueryObjectsResponseQueryDisplayNameToIdMap_Call {
	return &MockQueriesInterface_ListQueryObjectsResponseQueryDisplayNameToIdMap_Call{Call: _e.mock.On("ListQueryObjectsResponseQueryDisplayNameToIdMap", ctx, request)}
}

func (_c *MockQueriesInterface_ListQueryObjectsResponseQueryDisplayNameToIdMap_Call) Run(run func(ctx context.Context, request sql.ListQueriesRequest)) *MockQueriesInterface_ListQueryObjectsResponseQueryDisplayNameToIdMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.ListQueriesRequest))
	})
	return _c
}

func (_c *MockQueriesInterface_ListQueryObjectsResponseQueryDisplayNameToIdMap_Call) Return(_a0 map[string]string, _a1 error) *MockQueriesInterface_ListQueryObjectsResponseQueryDisplayNameToIdMap_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueriesInterface_ListQueryObjectsResponseQueryDisplayNameToIdMap_Call) RunAndReturn(run func(context.Context, sql.ListQueriesRequest) (map[string]string, error)) *MockQueriesInterface_ListQueryObjectsResponseQueryDisplayNameToIdMap_Call {
	_c.Call.Return(run)
	return _c
}

// ListVisualizations provides a mock function with given fields: ctx, request
func (_m *MockQueriesInterface) ListVisualizations(ctx context.Context, request sql.ListVisualizationsForQueryRequest) listing.Iterator[sql.Visualization] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListVisualizations")
	}

	var r0 listing.Iterator[sql.Visualization]
	if rf, ok := ret.Get(0).(func(context.Context, sql.ListVisualizationsForQueryRequest) listing.Iterator[sql.Visualization]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listing.Iterator[sql.Visualization])
		}
	}

	return r0
}

// MockQueriesInterface_ListVisualizations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListVisualizations'
type MockQueriesInterface_ListVisualizations_Call struct {
	*mock.Call
}

// ListVisualizations is a helper method to define mock.On call
//   - ctx context.Context
//   - request sql.ListVisualizationsForQueryRequest
func (_e *MockQueriesInterface_Expecter) ListVisualizations(ctx interface{}, request interface{}) *MockQueriesInterface_ListVisualizations_Call {
	return &MockQueriesInterface_ListVisualizations_Call{Call: _e.mock.On("ListVisualizations", ctx, request)}
}

func (_c *MockQueriesInterface_ListVisualizations_Call) Run(run func(ctx context.Context, request sql.ListVisualizationsForQueryRequest)) *MockQueriesInterface_ListVisualizations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.ListVisualizationsForQueryRequest))
	})
	return _c
}

func (_c *MockQueriesInterface_ListVisualizations_Call) Return(_a0 listing.Iterator[sql.Visualization]) *MockQueriesInterface_ListVisualizations_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQueriesInterface_ListVisualizations_Call) RunAndReturn(run func(context.Context, sql.ListVisualizationsForQueryRequest) listing.Iterator[sql.Visualization]) *MockQueriesInterface_ListVisualizations_Call {
	_c.Call.Return(run)
	return _c
}

// ListVisualizationsAll provides a mock function with given fields: ctx, request
func (_m *MockQueriesInterface) ListVisualizationsAll(ctx context.Context, request sql.ListVisualizationsForQueryRequest) ([]sql.Visualization, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListVisualizationsAll")
	}

	var r0 []sql.Visualization
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.ListVisualizationsForQueryRequest) ([]sql.Visualization, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.ListVisualizationsForQueryRequest) []sql.Visualization); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sql.Visualization)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.ListVisualizationsForQueryRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueriesInterface_ListVisualizationsAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListVisualizationsAll'
type MockQueriesInterface_ListVisualizationsAll_Call struct {
	*mock.Call
}

// ListVisualizationsAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request sql.ListVisualizationsForQueryRequest
func (_e *MockQueriesInterface_Expecter) ListVisualizationsAll(ctx interface{}, request interface{}) *MockQueriesInterface_ListVisualizationsAll_Call {
	return &MockQueriesInterface_ListVisualizationsAll_Call{Call: _e.mock.On("ListVisualizationsAll", ctx, request)}
}

func (_c *MockQueriesInterface_ListVisualizationsAll_Call) Run(run func(ctx context.Context, request sql.ListVisualizationsForQueryRequest)) *MockQueriesInterface_ListVisualizationsAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.ListVisualizationsForQueryRequest))
	})
	return _c
}

func (_c *MockQueriesInterface_ListVisualizationsAll_Call) Return(_a0 []sql.Visualization, _a1 error) *MockQueriesInterface_ListVisualizationsAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueriesInterface_ListVisualizationsAll_Call) RunAndReturn(run func(context.Context, sql.ListVisualizationsForQueryRequest) ([]sql.Visualization, error)) *MockQueriesInterface_ListVisualizationsAll_Call {
	_c.Call.Return(run)
	return _c
}

// ListVisualizationsById provides a mock function with given fields: ctx, id
func (_m *MockQueriesInterface) ListVisualizationsById(ctx context.Context, id string) (*sql.ListVisualizationsForQueryResponse, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for ListVisualizationsById")
	}

	var r0 *sql.ListVisualizationsForQueryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*sql.ListVisualizationsForQueryResponse, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *sql.ListVisualizationsForQueryResponse); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.ListVisualizationsForQueryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueriesInterface_ListVisualizationsById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListVisualizationsById'
type MockQueriesInterface_ListVisualizationsById_Call struct {
	*mock.Call
}

// ListVisualizationsById is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockQueriesInterface_Expecter) ListVisualizationsById(ctx interface{}, id interface{}) *MockQueriesInterface_ListVisualizationsById_Call {
	return &MockQueriesInterface_ListVisualizationsById_Call{Call: _e.mock.On("ListVisualizationsById", ctx, id)}
}

func (_c *MockQueriesInterface_ListVisualizationsById_Call) Run(run func(ctx context.Context, id string)) *MockQueriesInterface_ListVisualizationsById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockQueriesInterface_ListVisualizationsById_Call) Return(_a0 *sql.ListVisualizationsForQueryResponse, _a1 error) *MockQueriesInterface_ListVisualizationsById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueriesInterface_ListVisualizationsById_Call) RunAndReturn(run func(context.Context, string) (*sql.ListVisualizationsForQueryResponse, error)) *MockQueriesInterface_ListVisualizationsById_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, request
func (_m *MockQueriesInterface) Update(ctx context.Context, request sql.UpdateQueryRequest) (*sql.Query, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *sql.Query
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.UpdateQueryRequest) (*sql.Query, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.UpdateQueryRequest) *sql.Query); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Query)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.UpdateQueryRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueriesInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockQueriesInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - request sql.UpdateQueryRequest
func (_e *MockQueriesInterface_Expecter) Update(ctx interface{}, request interface{}) *MockQueriesInterface_Update_Call {
	return &MockQueriesInterface_Update_Call{Call: _e.mock.On("Update", ctx, request)}
}

func (_c *MockQueriesInterface_Update_Call) Run(run func(ctx context.Context, request sql.UpdateQueryRequest)) *MockQueriesInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.UpdateQueryRequest))
	})
	return _c
}

func (_c *MockQueriesInterface_Update_Call) Return(_a0 *sql.Query, _a1 error) *MockQueriesInterface_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueriesInterface_Update_Call) RunAndReturn(run func(context.Context, sql.UpdateQueryRequest) (*sql.Query, error)) *MockQueriesInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockQueriesInterface creates a new instance of MockQueriesInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQueriesInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQueriesInterface {
	mock := &MockQueriesInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
