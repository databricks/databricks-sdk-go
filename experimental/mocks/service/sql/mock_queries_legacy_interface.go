// Code generated by mockery v2.53.2. DO NOT EDIT.

package sql

import (
	context "context"

	listing "github.com/databricks/databricks-sdk-go/listing"
	mock "github.com/stretchr/testify/mock"

	sql "github.com/databricks/databricks-sdk-go/service/sql"
)

// MockQueriesLegacyInterface is an autogenerated mock type for the QueriesLegacyInterface type
type MockQueriesLegacyInterface struct {
	mock.Mock
}

type MockQueriesLegacyInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQueriesLegacyInterface) EXPECT() *MockQueriesLegacyInterface_Expecter {
	return &MockQueriesLegacyInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, request
func (_m *MockQueriesLegacyInterface) Create(ctx context.Context, request sql.QueryPostContent) (*sql.LegacyQuery, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *sql.LegacyQuery
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.QueryPostContent) (*sql.LegacyQuery, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.QueryPostContent) *sql.LegacyQuery); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.LegacyQuery)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.QueryPostContent) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueriesLegacyInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockQueriesLegacyInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - request sql.QueryPostContent
func (_e *MockQueriesLegacyInterface_Expecter) Create(ctx interface{}, request interface{}) *MockQueriesLegacyInterface_Create_Call {
	return &MockQueriesLegacyInterface_Create_Call{Call: _e.mock.On("Create", ctx, request)}
}

func (_c *MockQueriesLegacyInterface_Create_Call) Run(run func(ctx context.Context, request sql.QueryPostContent)) *MockQueriesLegacyInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.QueryPostContent))
	})
	return _c
}

func (_c *MockQueriesLegacyInterface_Create_Call) Return(_a0 *sql.LegacyQuery, _a1 error) *MockQueriesLegacyInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueriesLegacyInterface_Create_Call) RunAndReturn(run func(context.Context, sql.QueryPostContent) (*sql.LegacyQuery, error)) *MockQueriesLegacyInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, request
func (_m *MockQueriesLegacyInterface) Delete(ctx context.Context, request sql.DeleteQueriesLegacyRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.DeleteQueriesLegacyRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQueriesLegacyInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockQueriesLegacyInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - request sql.DeleteQueriesLegacyRequest
func (_e *MockQueriesLegacyInterface_Expecter) Delete(ctx interface{}, request interface{}) *MockQueriesLegacyInterface_Delete_Call {
	return &MockQueriesLegacyInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, request)}
}

func (_c *MockQueriesLegacyInterface_Delete_Call) Run(run func(ctx context.Context, request sql.DeleteQueriesLegacyRequest)) *MockQueriesLegacyInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.DeleteQueriesLegacyRequest))
	})
	return _c
}

func (_c *MockQueriesLegacyInterface_Delete_Call) Return(_a0 error) *MockQueriesLegacyInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQueriesLegacyInterface_Delete_Call) RunAndReturn(run func(context.Context, sql.DeleteQueriesLegacyRequest) error) *MockQueriesLegacyInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByQueryId provides a mock function with given fields: ctx, queryId
func (_m *MockQueriesLegacyInterface) DeleteByQueryId(ctx context.Context, queryId string) error {
	ret := _m.Called(ctx, queryId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByQueryId")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, queryId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQueriesLegacyInterface_DeleteByQueryId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByQueryId'
type MockQueriesLegacyInterface_DeleteByQueryId_Call struct {
	*mock.Call
}

// DeleteByQueryId is a helper method to define mock.On call
//   - ctx context.Context
//   - queryId string
func (_e *MockQueriesLegacyInterface_Expecter) DeleteByQueryId(ctx interface{}, queryId interface{}) *MockQueriesLegacyInterface_DeleteByQueryId_Call {
	return &MockQueriesLegacyInterface_DeleteByQueryId_Call{Call: _e.mock.On("DeleteByQueryId", ctx, queryId)}
}

func (_c *MockQueriesLegacyInterface_DeleteByQueryId_Call) Run(run func(ctx context.Context, queryId string)) *MockQueriesLegacyInterface_DeleteByQueryId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockQueriesLegacyInterface_DeleteByQueryId_Call) Return(_a0 error) *MockQueriesLegacyInterface_DeleteByQueryId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQueriesLegacyInterface_DeleteByQueryId_Call) RunAndReturn(run func(context.Context, string) error) *MockQueriesLegacyInterface_DeleteByQueryId_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, request
func (_m *MockQueriesLegacyInterface) Get(ctx context.Context, request sql.GetQueriesLegacyRequest) (*sql.LegacyQuery, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *sql.LegacyQuery
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.GetQueriesLegacyRequest) (*sql.LegacyQuery, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.GetQueriesLegacyRequest) *sql.LegacyQuery); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.LegacyQuery)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.GetQueriesLegacyRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueriesLegacyInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockQueriesLegacyInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - request sql.GetQueriesLegacyRequest
func (_e *MockQueriesLegacyInterface_Expecter) Get(ctx interface{}, request interface{}) *MockQueriesLegacyInterface_Get_Call {
	return &MockQueriesLegacyInterface_Get_Call{Call: _e.mock.On("Get", ctx, request)}
}

func (_c *MockQueriesLegacyInterface_Get_Call) Run(run func(ctx context.Context, request sql.GetQueriesLegacyRequest)) *MockQueriesLegacyInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.GetQueriesLegacyRequest))
	})
	return _c
}

func (_c *MockQueriesLegacyInterface_Get_Call) Return(_a0 *sql.LegacyQuery, _a1 error) *MockQueriesLegacyInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueriesLegacyInterface_Get_Call) RunAndReturn(run func(context.Context, sql.GetQueriesLegacyRequest) (*sql.LegacyQuery, error)) *MockQueriesLegacyInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByName provides a mock function with given fields: ctx, name
func (_m *MockQueriesLegacyInterface) GetByName(ctx context.Context, name string) (*sql.LegacyQuery, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetByName")
	}

	var r0 *sql.LegacyQuery
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*sql.LegacyQuery, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *sql.LegacyQuery); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.LegacyQuery)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueriesLegacyInterface_GetByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByName'
type MockQueriesLegacyInterface_GetByName_Call struct {
	*mock.Call
}

// GetByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockQueriesLegacyInterface_Expecter) GetByName(ctx interface{}, name interface{}) *MockQueriesLegacyInterface_GetByName_Call {
	return &MockQueriesLegacyInterface_GetByName_Call{Call: _e.mock.On("GetByName", ctx, name)}
}

func (_c *MockQueriesLegacyInterface_GetByName_Call) Run(run func(ctx context.Context, name string)) *MockQueriesLegacyInterface_GetByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockQueriesLegacyInterface_GetByName_Call) Return(_a0 *sql.LegacyQuery, _a1 error) *MockQueriesLegacyInterface_GetByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueriesLegacyInterface_GetByName_Call) RunAndReturn(run func(context.Context, string) (*sql.LegacyQuery, error)) *MockQueriesLegacyInterface_GetByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetByQueryId provides a mock function with given fields: ctx, queryId
func (_m *MockQueriesLegacyInterface) GetByQueryId(ctx context.Context, queryId string) (*sql.LegacyQuery, error) {
	ret := _m.Called(ctx, queryId)

	if len(ret) == 0 {
		panic("no return value specified for GetByQueryId")
	}

	var r0 *sql.LegacyQuery
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*sql.LegacyQuery, error)); ok {
		return rf(ctx, queryId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *sql.LegacyQuery); ok {
		r0 = rf(ctx, queryId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.LegacyQuery)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, queryId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueriesLegacyInterface_GetByQueryId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByQueryId'
type MockQueriesLegacyInterface_GetByQueryId_Call struct {
	*mock.Call
}

// GetByQueryId is a helper method to define mock.On call
//   - ctx context.Context
//   - queryId string
func (_e *MockQueriesLegacyInterface_Expecter) GetByQueryId(ctx interface{}, queryId interface{}) *MockQueriesLegacyInterface_GetByQueryId_Call {
	return &MockQueriesLegacyInterface_GetByQueryId_Call{Call: _e.mock.On("GetByQueryId", ctx, queryId)}
}

func (_c *MockQueriesLegacyInterface_GetByQueryId_Call) Run(run func(ctx context.Context, queryId string)) *MockQueriesLegacyInterface_GetByQueryId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockQueriesLegacyInterface_GetByQueryId_Call) Return(_a0 *sql.LegacyQuery, _a1 error) *MockQueriesLegacyInterface_GetByQueryId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueriesLegacyInterface_GetByQueryId_Call) RunAndReturn(run func(context.Context, string) (*sql.LegacyQuery, error)) *MockQueriesLegacyInterface_GetByQueryId_Call {
	_c.Call.Return(run)
	return _c
}

// LegacyQueryNameToIdMap provides a mock function with given fields: ctx, request
func (_m *MockQueriesLegacyInterface) LegacyQueryNameToIdMap(ctx context.Context, request sql.ListQueriesLegacyRequest) (map[string]string, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for LegacyQueryNameToIdMap")
	}

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.ListQueriesLegacyRequest) (map[string]string, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.ListQueriesLegacyRequest) map[string]string); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.ListQueriesLegacyRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueriesLegacyInterface_LegacyQueryNameToIdMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LegacyQueryNameToIdMap'
type MockQueriesLegacyInterface_LegacyQueryNameToIdMap_Call struct {
	*mock.Call
}

// LegacyQueryNameToIdMap is a helper method to define mock.On call
//   - ctx context.Context
//   - request sql.ListQueriesLegacyRequest
func (_e *MockQueriesLegacyInterface_Expecter) LegacyQueryNameToIdMap(ctx interface{}, request interface{}) *MockQueriesLegacyInterface_LegacyQueryNameToIdMap_Call {
	return &MockQueriesLegacyInterface_LegacyQueryNameToIdMap_Call{Call: _e.mock.On("LegacyQueryNameToIdMap", ctx, request)}
}

func (_c *MockQueriesLegacyInterface_LegacyQueryNameToIdMap_Call) Run(run func(ctx context.Context, request sql.ListQueriesLegacyRequest)) *MockQueriesLegacyInterface_LegacyQueryNameToIdMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.ListQueriesLegacyRequest))
	})
	return _c
}

func (_c *MockQueriesLegacyInterface_LegacyQueryNameToIdMap_Call) Return(_a0 map[string]string, _a1 error) *MockQueriesLegacyInterface_LegacyQueryNameToIdMap_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueriesLegacyInterface_LegacyQueryNameToIdMap_Call) RunAndReturn(run func(context.Context, sql.ListQueriesLegacyRequest) (map[string]string, error)) *MockQueriesLegacyInterface_LegacyQueryNameToIdMap_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, request
func (_m *MockQueriesLegacyInterface) List(ctx context.Context, request sql.ListQueriesLegacyRequest) listing.Iterator[sql.LegacyQuery] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 listing.Iterator[sql.LegacyQuery]
	if rf, ok := ret.Get(0).(func(context.Context, sql.ListQueriesLegacyRequest) listing.Iterator[sql.LegacyQuery]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listing.Iterator[sql.LegacyQuery])
		}
	}

	return r0
}

// MockQueriesLegacyInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockQueriesLegacyInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - request sql.ListQueriesLegacyRequest
func (_e *MockQueriesLegacyInterface_Expecter) List(ctx interface{}, request interface{}) *MockQueriesLegacyInterface_List_Call {
	return &MockQueriesLegacyInterface_List_Call{Call: _e.mock.On("List", ctx, request)}
}

func (_c *MockQueriesLegacyInterface_List_Call) Run(run func(ctx context.Context, request sql.ListQueriesLegacyRequest)) *MockQueriesLegacyInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.ListQueriesLegacyRequest))
	})
	return _c
}

func (_c *MockQueriesLegacyInterface_List_Call) Return(_a0 listing.Iterator[sql.LegacyQuery]) *MockQueriesLegacyInterface_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQueriesLegacyInterface_List_Call) RunAndReturn(run func(context.Context, sql.ListQueriesLegacyRequest) listing.Iterator[sql.LegacyQuery]) *MockQueriesLegacyInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListAll provides a mock function with given fields: ctx, request
func (_m *MockQueriesLegacyInterface) ListAll(ctx context.Context, request sql.ListQueriesLegacyRequest) ([]sql.LegacyQuery, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListAll")
	}

	var r0 []sql.LegacyQuery
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.ListQueriesLegacyRequest) ([]sql.LegacyQuery, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.ListQueriesLegacyRequest) []sql.LegacyQuery); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sql.LegacyQuery)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.ListQueriesLegacyRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueriesLegacyInterface_ListAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAll'
type MockQueriesLegacyInterface_ListAll_Call struct {
	*mock.Call
}

// ListAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request sql.ListQueriesLegacyRequest
func (_e *MockQueriesLegacyInterface_Expecter) ListAll(ctx interface{}, request interface{}) *MockQueriesLegacyInterface_ListAll_Call {
	return &MockQueriesLegacyInterface_ListAll_Call{Call: _e.mock.On("ListAll", ctx, request)}
}

func (_c *MockQueriesLegacyInterface_ListAll_Call) Run(run func(ctx context.Context, request sql.ListQueriesLegacyRequest)) *MockQueriesLegacyInterface_ListAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.ListQueriesLegacyRequest))
	})
	return _c
}

func (_c *MockQueriesLegacyInterface_ListAll_Call) Return(_a0 []sql.LegacyQuery, _a1 error) *MockQueriesLegacyInterface_ListAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueriesLegacyInterface_ListAll_Call) RunAndReturn(run func(context.Context, sql.ListQueriesLegacyRequest) ([]sql.LegacyQuery, error)) *MockQueriesLegacyInterface_ListAll_Call {
	_c.Call.Return(run)
	return _c
}

// Restore provides a mock function with given fields: ctx, request
func (_m *MockQueriesLegacyInterface) Restore(ctx context.Context, request sql.RestoreQueriesLegacyRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Restore")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.RestoreQueriesLegacyRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQueriesLegacyInterface_Restore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Restore'
type MockQueriesLegacyInterface_Restore_Call struct {
	*mock.Call
}

// Restore is a helper method to define mock.On call
//   - ctx context.Context
//   - request sql.RestoreQueriesLegacyRequest
func (_e *MockQueriesLegacyInterface_Expecter) Restore(ctx interface{}, request interface{}) *MockQueriesLegacyInterface_Restore_Call {
	return &MockQueriesLegacyInterface_Restore_Call{Call: _e.mock.On("Restore", ctx, request)}
}

func (_c *MockQueriesLegacyInterface_Restore_Call) Run(run func(ctx context.Context, request sql.RestoreQueriesLegacyRequest)) *MockQueriesLegacyInterface_Restore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.RestoreQueriesLegacyRequest))
	})
	return _c
}

func (_c *MockQueriesLegacyInterface_Restore_Call) Return(_a0 error) *MockQueriesLegacyInterface_Restore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQueriesLegacyInterface_Restore_Call) RunAndReturn(run func(context.Context, sql.RestoreQueriesLegacyRequest) error) *MockQueriesLegacyInterface_Restore_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, request
func (_m *MockQueriesLegacyInterface) Update(ctx context.Context, request sql.QueryEditContent) (*sql.LegacyQuery, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *sql.LegacyQuery
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.QueryEditContent) (*sql.LegacyQuery, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.QueryEditContent) *sql.LegacyQuery); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.LegacyQuery)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.QueryEditContent) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueriesLegacyInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockQueriesLegacyInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - request sql.QueryEditContent
func (_e *MockQueriesLegacyInterface_Expecter) Update(ctx interface{}, request interface{}) *MockQueriesLegacyInterface_Update_Call {
	return &MockQueriesLegacyInterface_Update_Call{Call: _e.mock.On("Update", ctx, request)}
}

func (_c *MockQueriesLegacyInterface_Update_Call) Run(run func(ctx context.Context, request sql.QueryEditContent)) *MockQueriesLegacyInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.QueryEditContent))
	})
	return _c
}

func (_c *MockQueriesLegacyInterface_Update_Call) Return(_a0 *sql.LegacyQuery, _a1 error) *MockQueriesLegacyInterface_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueriesLegacyInterface_Update_Call) RunAndReturn(run func(context.Context, sql.QueryEditContent) (*sql.LegacyQuery, error)) *MockQueriesLegacyInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockQueriesLegacyInterface creates a new instance of MockQueriesLegacyInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQueriesLegacyInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQueriesLegacyInterface {
	mock := &MockQueriesLegacyInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
