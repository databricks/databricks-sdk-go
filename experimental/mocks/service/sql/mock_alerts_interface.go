// Code generated by mockery v2.43.0. DO NOT EDIT.

package sql

import (
	context "context"

	listing "github.com/databricks/databricks-sdk-go/listing"
	mock "github.com/stretchr/testify/mock"

	sql "github.com/databricks/databricks-sdk-go/service/sql"
)

// MockAlertsInterface is an autogenerated mock type for the AlertsInterface type
type MockAlertsInterface struct {
	mock.Mock
}

type MockAlertsInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAlertsInterface) EXPECT() *MockAlertsInterface_Expecter {
	return &MockAlertsInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, request
func (_m *MockAlertsInterface) Create(ctx context.Context, request sql.CreateAlertRequest) (*sql.Alert, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *sql.Alert
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.CreateAlertRequest) (*sql.Alert, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.CreateAlertRequest) *sql.Alert); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Alert)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.CreateAlertRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAlertsInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockAlertsInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - request sql.CreateAlertRequest
func (_e *MockAlertsInterface_Expecter) Create(ctx interface{}, request interface{}) *MockAlertsInterface_Create_Call {
	return &MockAlertsInterface_Create_Call{Call: _e.mock.On("Create", ctx, request)}
}

func (_c *MockAlertsInterface_Create_Call) Run(run func(ctx context.Context, request sql.CreateAlertRequest)) *MockAlertsInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.CreateAlertRequest))
	})
	return _c
}

func (_c *MockAlertsInterface_Create_Call) Return(_a0 *sql.Alert, _a1 error) *MockAlertsInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAlertsInterface_Create_Call) RunAndReturn(run func(context.Context, sql.CreateAlertRequest) (*sql.Alert, error)) *MockAlertsInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, request
func (_m *MockAlertsInterface) Delete(ctx context.Context, request sql.TrashAlertRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.TrashAlertRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAlertsInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockAlertsInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - request sql.TrashAlertRequest
func (_e *MockAlertsInterface_Expecter) Delete(ctx interface{}, request interface{}) *MockAlertsInterface_Delete_Call {
	return &MockAlertsInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, request)}
}

func (_c *MockAlertsInterface_Delete_Call) Run(run func(ctx context.Context, request sql.TrashAlertRequest)) *MockAlertsInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.TrashAlertRequest))
	})
	return _c
}

func (_c *MockAlertsInterface_Delete_Call) Return(_a0 error) *MockAlertsInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAlertsInterface_Delete_Call) RunAndReturn(run func(context.Context, sql.TrashAlertRequest) error) *MockAlertsInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteById provides a mock function with given fields: ctx, id
func (_m *MockAlertsInterface) DeleteById(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAlertsInterface_DeleteById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteById'
type MockAlertsInterface_DeleteById_Call struct {
	*mock.Call
}

// DeleteById is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockAlertsInterface_Expecter) DeleteById(ctx interface{}, id interface{}) *MockAlertsInterface_DeleteById_Call {
	return &MockAlertsInterface_DeleteById_Call{Call: _e.mock.On("DeleteById", ctx, id)}
}

func (_c *MockAlertsInterface_DeleteById_Call) Run(run func(ctx context.Context, id string)) *MockAlertsInterface_DeleteById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAlertsInterface_DeleteById_Call) Return(_a0 error) *MockAlertsInterface_DeleteById_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAlertsInterface_DeleteById_Call) RunAndReturn(run func(context.Context, string) error) *MockAlertsInterface_DeleteById_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, request
func (_m *MockAlertsInterface) Get(ctx context.Context, request sql.GetAlertRequest) (*sql.Alert, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *sql.Alert
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.GetAlertRequest) (*sql.Alert, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.GetAlertRequest) *sql.Alert); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Alert)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.GetAlertRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAlertsInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockAlertsInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - request sql.GetAlertRequest
func (_e *MockAlertsInterface_Expecter) Get(ctx interface{}, request interface{}) *MockAlertsInterface_Get_Call {
	return &MockAlertsInterface_Get_Call{Call: _e.mock.On("Get", ctx, request)}
}

func (_c *MockAlertsInterface_Get_Call) Run(run func(ctx context.Context, request sql.GetAlertRequest)) *MockAlertsInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.GetAlertRequest))
	})
	return _c
}

func (_c *MockAlertsInterface_Get_Call) Return(_a0 *sql.Alert, _a1 error) *MockAlertsInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAlertsInterface_Get_Call) RunAndReturn(run func(context.Context, sql.GetAlertRequest) (*sql.Alert, error)) *MockAlertsInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByDisplayName provides a mock function with given fields: ctx, name
func (_m *MockAlertsInterface) GetByDisplayName(ctx context.Context, name string) (*sql.ListAlertsResponseAlert, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetByDisplayName")
	}

	var r0 *sql.ListAlertsResponseAlert
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*sql.ListAlertsResponseAlert, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *sql.ListAlertsResponseAlert); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.ListAlertsResponseAlert)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAlertsInterface_GetByDisplayName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByDisplayName'
type MockAlertsInterface_GetByDisplayName_Call struct {
	*mock.Call
}

// GetByDisplayName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockAlertsInterface_Expecter) GetByDisplayName(ctx interface{}, name interface{}) *MockAlertsInterface_GetByDisplayName_Call {
	return &MockAlertsInterface_GetByDisplayName_Call{Call: _e.mock.On("GetByDisplayName", ctx, name)}
}

func (_c *MockAlertsInterface_GetByDisplayName_Call) Run(run func(ctx context.Context, name string)) *MockAlertsInterface_GetByDisplayName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAlertsInterface_GetByDisplayName_Call) Return(_a0 *sql.ListAlertsResponseAlert, _a1 error) *MockAlertsInterface_GetByDisplayName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAlertsInterface_GetByDisplayName_Call) RunAndReturn(run func(context.Context, string) (*sql.ListAlertsResponseAlert, error)) *MockAlertsInterface_GetByDisplayName_Call {
	_c.Call.Return(run)
	return _c
}

// GetById provides a mock function with given fields: ctx, id
func (_m *MockAlertsInterface) GetById(ctx context.Context, id string) (*sql.Alert, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 *sql.Alert
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*sql.Alert, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *sql.Alert); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Alert)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAlertsInterface_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type MockAlertsInterface_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockAlertsInterface_Expecter) GetById(ctx interface{}, id interface{}) *MockAlertsInterface_GetById_Call {
	return &MockAlertsInterface_GetById_Call{Call: _e.mock.On("GetById", ctx, id)}
}

func (_c *MockAlertsInterface_GetById_Call) Run(run func(ctx context.Context, id string)) *MockAlertsInterface_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAlertsInterface_GetById_Call) Return(_a0 *sql.Alert, _a1 error) *MockAlertsInterface_GetById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAlertsInterface_GetById_Call) RunAndReturn(run func(context.Context, string) (*sql.Alert, error)) *MockAlertsInterface_GetById_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, request
func (_m *MockAlertsInterface) List(ctx context.Context, request sql.ListAlertsRequest) listing.Iterator[sql.ListAlertsResponseAlert] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 listing.Iterator[sql.ListAlertsResponseAlert]
	if rf, ok := ret.Get(0).(func(context.Context, sql.ListAlertsRequest) listing.Iterator[sql.ListAlertsResponseAlert]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listing.Iterator[sql.ListAlertsResponseAlert])
		}
	}

	return r0
}

// MockAlertsInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockAlertsInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - request sql.ListAlertsRequest
func (_e *MockAlertsInterface_Expecter) List(ctx interface{}, request interface{}) *MockAlertsInterface_List_Call {
	return &MockAlertsInterface_List_Call{Call: _e.mock.On("List", ctx, request)}
}

func (_c *MockAlertsInterface_List_Call) Run(run func(ctx context.Context, request sql.ListAlertsRequest)) *MockAlertsInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.ListAlertsRequest))
	})
	return _c
}

func (_c *MockAlertsInterface_List_Call) Return(_a0 listing.Iterator[sql.ListAlertsResponseAlert]) *MockAlertsInterface_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAlertsInterface_List_Call) RunAndReturn(run func(context.Context, sql.ListAlertsRequest) listing.Iterator[sql.ListAlertsResponseAlert]) *MockAlertsInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListAlertsResponseAlertDisplayNameToIdMap provides a mock function with given fields: ctx, request
func (_m *MockAlertsInterface) ListAlertsResponseAlertDisplayNameToIdMap(ctx context.Context, request sql.ListAlertsRequest) (map[string]string, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListAlertsResponseAlertDisplayNameToIdMap")
	}

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.ListAlertsRequest) (map[string]string, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.ListAlertsRequest) map[string]string); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.ListAlertsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAlertsInterface_ListAlertsResponseAlertDisplayNameToIdMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAlertsResponseAlertDisplayNameToIdMap'
type MockAlertsInterface_ListAlertsResponseAlertDisplayNameToIdMap_Call struct {
	*mock.Call
}

// ListAlertsResponseAlertDisplayNameToIdMap is a helper method to define mock.On call
//   - ctx context.Context
//   - request sql.ListAlertsRequest
func (_e *MockAlertsInterface_Expecter) ListAlertsResponseAlertDisplayNameToIdMap(ctx interface{}, request interface{}) *MockAlertsInterface_ListAlertsResponseAlertDisplayNameToIdMap_Call {
	return &MockAlertsInterface_ListAlertsResponseAlertDisplayNameToIdMap_Call{Call: _e.mock.On("ListAlertsResponseAlertDisplayNameToIdMap", ctx, request)}
}

func (_c *MockAlertsInterface_ListAlertsResponseAlertDisplayNameToIdMap_Call) Run(run func(ctx context.Context, request sql.ListAlertsRequest)) *MockAlertsInterface_ListAlertsResponseAlertDisplayNameToIdMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.ListAlertsRequest))
	})
	return _c
}

func (_c *MockAlertsInterface_ListAlertsResponseAlertDisplayNameToIdMap_Call) Return(_a0 map[string]string, _a1 error) *MockAlertsInterface_ListAlertsResponseAlertDisplayNameToIdMap_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAlertsInterface_ListAlertsResponseAlertDisplayNameToIdMap_Call) RunAndReturn(run func(context.Context, sql.ListAlertsRequest) (map[string]string, error)) *MockAlertsInterface_ListAlertsResponseAlertDisplayNameToIdMap_Call {
	_c.Call.Return(run)
	return _c
}

// ListAll provides a mock function with given fields: ctx, request
func (_m *MockAlertsInterface) ListAll(ctx context.Context, request sql.ListAlertsRequest) ([]sql.ListAlertsResponseAlert, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListAll")
	}

	var r0 []sql.ListAlertsResponseAlert
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.ListAlertsRequest) ([]sql.ListAlertsResponseAlert, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.ListAlertsRequest) []sql.ListAlertsResponseAlert); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sql.ListAlertsResponseAlert)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.ListAlertsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAlertsInterface_ListAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAll'
type MockAlertsInterface_ListAll_Call struct {
	*mock.Call
}

// ListAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request sql.ListAlertsRequest
func (_e *MockAlertsInterface_Expecter) ListAll(ctx interface{}, request interface{}) *MockAlertsInterface_ListAll_Call {
	return &MockAlertsInterface_ListAll_Call{Call: _e.mock.On("ListAll", ctx, request)}
}

func (_c *MockAlertsInterface_ListAll_Call) Run(run func(ctx context.Context, request sql.ListAlertsRequest)) *MockAlertsInterface_ListAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.ListAlertsRequest))
	})
	return _c
}

func (_c *MockAlertsInterface_ListAll_Call) Return(_a0 []sql.ListAlertsResponseAlert, _a1 error) *MockAlertsInterface_ListAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAlertsInterface_ListAll_Call) RunAndReturn(run func(context.Context, sql.ListAlertsRequest) ([]sql.ListAlertsResponseAlert, error)) *MockAlertsInterface_ListAll_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, request
func (_m *MockAlertsInterface) Update(ctx context.Context, request sql.UpdateAlertRequest) (*sql.Alert, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *sql.Alert
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.UpdateAlertRequest) (*sql.Alert, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.UpdateAlertRequest) *sql.Alert); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Alert)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.UpdateAlertRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAlertsInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockAlertsInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - request sql.UpdateAlertRequest
func (_e *MockAlertsInterface_Expecter) Update(ctx interface{}, request interface{}) *MockAlertsInterface_Update_Call {
	return &MockAlertsInterface_Update_Call{Call: _e.mock.On("Update", ctx, request)}
}

func (_c *MockAlertsInterface_Update_Call) Run(run func(ctx context.Context, request sql.UpdateAlertRequest)) *MockAlertsInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.UpdateAlertRequest))
	})
	return _c
}

func (_c *MockAlertsInterface_Update_Call) Return(_a0 *sql.Alert, _a1 error) *MockAlertsInterface_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAlertsInterface_Update_Call) RunAndReturn(run func(context.Context, sql.UpdateAlertRequest) (*sql.Alert, error)) *MockAlertsInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAlertsInterface creates a new instance of MockAlertsInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAlertsInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAlertsInterface {
	mock := &MockAlertsInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
