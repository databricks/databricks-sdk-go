// Code generated by mockery v2.53.2. DO NOT EDIT.

package sql

import (
	context "context"

	listing "github.com/databricks/databricks-sdk-go/listing"
	mock "github.com/stretchr/testify/mock"

	sql "github.com/databricks/databricks-sdk-go/service/sql"
)

// MockAlertsV2Interface is an autogenerated mock type for the AlertsV2Interface type
type MockAlertsV2Interface struct {
	mock.Mock
}

type MockAlertsV2Interface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAlertsV2Interface) EXPECT() *MockAlertsV2Interface_Expecter {
	return &MockAlertsV2Interface_Expecter{mock: &_m.Mock}
}

// CreateAlert provides a mock function with given fields: ctx, request
func (_m *MockAlertsV2Interface) CreateAlert(ctx context.Context, request sql.CreateAlertV2Request) (*sql.AlertV2, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateAlert")
	}

	var r0 *sql.AlertV2
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.CreateAlertV2Request) (*sql.AlertV2, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.CreateAlertV2Request) *sql.AlertV2); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.AlertV2)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.CreateAlertV2Request) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAlertsV2Interface_CreateAlert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAlert'
type MockAlertsV2Interface_CreateAlert_Call struct {
	*mock.Call
}

// CreateAlert is a helper method to define mock.On call
//   - ctx context.Context
//   - request sql.CreateAlertV2Request
func (_e *MockAlertsV2Interface_Expecter) CreateAlert(ctx interface{}, request interface{}) *MockAlertsV2Interface_CreateAlert_Call {
	return &MockAlertsV2Interface_CreateAlert_Call{Call: _e.mock.On("CreateAlert", ctx, request)}
}

func (_c *MockAlertsV2Interface_CreateAlert_Call) Run(run func(ctx context.Context, request sql.CreateAlertV2Request)) *MockAlertsV2Interface_CreateAlert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.CreateAlertV2Request))
	})
	return _c
}

func (_c *MockAlertsV2Interface_CreateAlert_Call) Return(_a0 *sql.AlertV2, _a1 error) *MockAlertsV2Interface_CreateAlert_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAlertsV2Interface_CreateAlert_Call) RunAndReturn(run func(context.Context, sql.CreateAlertV2Request) (*sql.AlertV2, error)) *MockAlertsV2Interface_CreateAlert_Call {
	_c.Call.Return(run)
	return _c
}

// GetAlert provides a mock function with given fields: ctx, request
func (_m *MockAlertsV2Interface) GetAlert(ctx context.Context, request sql.GetAlertV2Request) (*sql.AlertV2, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetAlert")
	}

	var r0 *sql.AlertV2
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.GetAlertV2Request) (*sql.AlertV2, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.GetAlertV2Request) *sql.AlertV2); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.AlertV2)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.GetAlertV2Request) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAlertsV2Interface_GetAlert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAlert'
type MockAlertsV2Interface_GetAlert_Call struct {
	*mock.Call
}

// GetAlert is a helper method to define mock.On call
//   - ctx context.Context
//   - request sql.GetAlertV2Request
func (_e *MockAlertsV2Interface_Expecter) GetAlert(ctx interface{}, request interface{}) *MockAlertsV2Interface_GetAlert_Call {
	return &MockAlertsV2Interface_GetAlert_Call{Call: _e.mock.On("GetAlert", ctx, request)}
}

func (_c *MockAlertsV2Interface_GetAlert_Call) Run(run func(ctx context.Context, request sql.GetAlertV2Request)) *MockAlertsV2Interface_GetAlert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.GetAlertV2Request))
	})
	return _c
}

func (_c *MockAlertsV2Interface_GetAlert_Call) Return(_a0 *sql.AlertV2, _a1 error) *MockAlertsV2Interface_GetAlert_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAlertsV2Interface_GetAlert_Call) RunAndReturn(run func(context.Context, sql.GetAlertV2Request) (*sql.AlertV2, error)) *MockAlertsV2Interface_GetAlert_Call {
	_c.Call.Return(run)
	return _c
}

// GetAlertById provides a mock function with given fields: ctx, id
func (_m *MockAlertsV2Interface) GetAlertById(ctx context.Context, id string) (*sql.AlertV2, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetAlertById")
	}

	var r0 *sql.AlertV2
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*sql.AlertV2, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *sql.AlertV2); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.AlertV2)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAlertsV2Interface_GetAlertById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAlertById'
type MockAlertsV2Interface_GetAlertById_Call struct {
	*mock.Call
}

// GetAlertById is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockAlertsV2Interface_Expecter) GetAlertById(ctx interface{}, id interface{}) *MockAlertsV2Interface_GetAlertById_Call {
	return &MockAlertsV2Interface_GetAlertById_Call{Call: _e.mock.On("GetAlertById", ctx, id)}
}

func (_c *MockAlertsV2Interface_GetAlertById_Call) Run(run func(ctx context.Context, id string)) *MockAlertsV2Interface_GetAlertById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAlertsV2Interface_GetAlertById_Call) Return(_a0 *sql.AlertV2, _a1 error) *MockAlertsV2Interface_GetAlertById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAlertsV2Interface_GetAlertById_Call) RunAndReturn(run func(context.Context, string) (*sql.AlertV2, error)) *MockAlertsV2Interface_GetAlertById_Call {
	_c.Call.Return(run)
	return _c
}

// GetByDisplayName provides a mock function with given fields: ctx, name
func (_m *MockAlertsV2Interface) GetByDisplayName(ctx context.Context, name string) (*sql.ListAlertsV2ResponseAlert, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetByDisplayName")
	}

	var r0 *sql.ListAlertsV2ResponseAlert
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*sql.ListAlertsV2ResponseAlert, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *sql.ListAlertsV2ResponseAlert); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.ListAlertsV2ResponseAlert)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAlertsV2Interface_GetByDisplayName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByDisplayName'
type MockAlertsV2Interface_GetByDisplayName_Call struct {
	*mock.Call
}

// GetByDisplayName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockAlertsV2Interface_Expecter) GetByDisplayName(ctx interface{}, name interface{}) *MockAlertsV2Interface_GetByDisplayName_Call {
	return &MockAlertsV2Interface_GetByDisplayName_Call{Call: _e.mock.On("GetByDisplayName", ctx, name)}
}

func (_c *MockAlertsV2Interface_GetByDisplayName_Call) Run(run func(ctx context.Context, name string)) *MockAlertsV2Interface_GetByDisplayName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAlertsV2Interface_GetByDisplayName_Call) Return(_a0 *sql.ListAlertsV2ResponseAlert, _a1 error) *MockAlertsV2Interface_GetByDisplayName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAlertsV2Interface_GetByDisplayName_Call) RunAndReturn(run func(context.Context, string) (*sql.ListAlertsV2ResponseAlert, error)) *MockAlertsV2Interface_GetByDisplayName_Call {
	_c.Call.Return(run)
	return _c
}

// ListAlerts provides a mock function with given fields: ctx, request
func (_m *MockAlertsV2Interface) ListAlerts(ctx context.Context, request sql.ListAlertsV2Request) listing.Iterator[sql.ListAlertsV2ResponseAlert] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListAlerts")
	}

	var r0 listing.Iterator[sql.ListAlertsV2ResponseAlert]
	if rf, ok := ret.Get(0).(func(context.Context, sql.ListAlertsV2Request) listing.Iterator[sql.ListAlertsV2ResponseAlert]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listing.Iterator[sql.ListAlertsV2ResponseAlert])
		}
	}

	return r0
}

// MockAlertsV2Interface_ListAlerts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAlerts'
type MockAlertsV2Interface_ListAlerts_Call struct {
	*mock.Call
}

// ListAlerts is a helper method to define mock.On call
//   - ctx context.Context
//   - request sql.ListAlertsV2Request
func (_e *MockAlertsV2Interface_Expecter) ListAlerts(ctx interface{}, request interface{}) *MockAlertsV2Interface_ListAlerts_Call {
	return &MockAlertsV2Interface_ListAlerts_Call{Call: _e.mock.On("ListAlerts", ctx, request)}
}

func (_c *MockAlertsV2Interface_ListAlerts_Call) Run(run func(ctx context.Context, request sql.ListAlertsV2Request)) *MockAlertsV2Interface_ListAlerts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.ListAlertsV2Request))
	})
	return _c
}

func (_c *MockAlertsV2Interface_ListAlerts_Call) Return(_a0 listing.Iterator[sql.ListAlertsV2ResponseAlert]) *MockAlertsV2Interface_ListAlerts_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAlertsV2Interface_ListAlerts_Call) RunAndReturn(run func(context.Context, sql.ListAlertsV2Request) listing.Iterator[sql.ListAlertsV2ResponseAlert]) *MockAlertsV2Interface_ListAlerts_Call {
	_c.Call.Return(run)
	return _c
}

// ListAlertsAll provides a mock function with given fields: ctx, request
func (_m *MockAlertsV2Interface) ListAlertsAll(ctx context.Context, request sql.ListAlertsV2Request) ([]sql.ListAlertsV2ResponseAlert, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListAlertsAll")
	}

	var r0 []sql.ListAlertsV2ResponseAlert
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.ListAlertsV2Request) ([]sql.ListAlertsV2ResponseAlert, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.ListAlertsV2Request) []sql.ListAlertsV2ResponseAlert); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sql.ListAlertsV2ResponseAlert)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.ListAlertsV2Request) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAlertsV2Interface_ListAlertsAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAlertsAll'
type MockAlertsV2Interface_ListAlertsAll_Call struct {
	*mock.Call
}

// ListAlertsAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request sql.ListAlertsV2Request
func (_e *MockAlertsV2Interface_Expecter) ListAlertsAll(ctx interface{}, request interface{}) *MockAlertsV2Interface_ListAlertsAll_Call {
	return &MockAlertsV2Interface_ListAlertsAll_Call{Call: _e.mock.On("ListAlertsAll", ctx, request)}
}

func (_c *MockAlertsV2Interface_ListAlertsAll_Call) Run(run func(ctx context.Context, request sql.ListAlertsV2Request)) *MockAlertsV2Interface_ListAlertsAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.ListAlertsV2Request))
	})
	return _c
}

func (_c *MockAlertsV2Interface_ListAlertsAll_Call) Return(_a0 []sql.ListAlertsV2ResponseAlert, _a1 error) *MockAlertsV2Interface_ListAlertsAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAlertsV2Interface_ListAlertsAll_Call) RunAndReturn(run func(context.Context, sql.ListAlertsV2Request) ([]sql.ListAlertsV2ResponseAlert, error)) *MockAlertsV2Interface_ListAlertsAll_Call {
	_c.Call.Return(run)
	return _c
}

// ListAlertsV2ResponseAlertDisplayNameToIdMap provides a mock function with given fields: ctx, request
func (_m *MockAlertsV2Interface) ListAlertsV2ResponseAlertDisplayNameToIdMap(ctx context.Context, request sql.ListAlertsV2Request) (map[string]string, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListAlertsV2ResponseAlertDisplayNameToIdMap")
	}

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.ListAlertsV2Request) (map[string]string, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.ListAlertsV2Request) map[string]string); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.ListAlertsV2Request) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAlertsV2Interface_ListAlertsV2ResponseAlertDisplayNameToIdMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAlertsV2ResponseAlertDisplayNameToIdMap'
type MockAlertsV2Interface_ListAlertsV2ResponseAlertDisplayNameToIdMap_Call struct {
	*mock.Call
}

// ListAlertsV2ResponseAlertDisplayNameToIdMap is a helper method to define mock.On call
//   - ctx context.Context
//   - request sql.ListAlertsV2Request
func (_e *MockAlertsV2Interface_Expecter) ListAlertsV2ResponseAlertDisplayNameToIdMap(ctx interface{}, request interface{}) *MockAlertsV2Interface_ListAlertsV2ResponseAlertDisplayNameToIdMap_Call {
	return &MockAlertsV2Interface_ListAlertsV2ResponseAlertDisplayNameToIdMap_Call{Call: _e.mock.On("ListAlertsV2ResponseAlertDisplayNameToIdMap", ctx, request)}
}

func (_c *MockAlertsV2Interface_ListAlertsV2ResponseAlertDisplayNameToIdMap_Call) Run(run func(ctx context.Context, request sql.ListAlertsV2Request)) *MockAlertsV2Interface_ListAlertsV2ResponseAlertDisplayNameToIdMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.ListAlertsV2Request))
	})
	return _c
}

func (_c *MockAlertsV2Interface_ListAlertsV2ResponseAlertDisplayNameToIdMap_Call) Return(_a0 map[string]string, _a1 error) *MockAlertsV2Interface_ListAlertsV2ResponseAlertDisplayNameToIdMap_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAlertsV2Interface_ListAlertsV2ResponseAlertDisplayNameToIdMap_Call) RunAndReturn(run func(context.Context, sql.ListAlertsV2Request) (map[string]string, error)) *MockAlertsV2Interface_ListAlertsV2ResponseAlertDisplayNameToIdMap_Call {
	_c.Call.Return(run)
	return _c
}

// TrashAlert provides a mock function with given fields: ctx, request
func (_m *MockAlertsV2Interface) TrashAlert(ctx context.Context, request sql.TrashAlertV2Request) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for TrashAlert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.TrashAlertV2Request) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAlertsV2Interface_TrashAlert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TrashAlert'
type MockAlertsV2Interface_TrashAlert_Call struct {
	*mock.Call
}

// TrashAlert is a helper method to define mock.On call
//   - ctx context.Context
//   - request sql.TrashAlertV2Request
func (_e *MockAlertsV2Interface_Expecter) TrashAlert(ctx interface{}, request interface{}) *MockAlertsV2Interface_TrashAlert_Call {
	return &MockAlertsV2Interface_TrashAlert_Call{Call: _e.mock.On("TrashAlert", ctx, request)}
}

func (_c *MockAlertsV2Interface_TrashAlert_Call) Run(run func(ctx context.Context, request sql.TrashAlertV2Request)) *MockAlertsV2Interface_TrashAlert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.TrashAlertV2Request))
	})
	return _c
}

func (_c *MockAlertsV2Interface_TrashAlert_Call) Return(_a0 error) *MockAlertsV2Interface_TrashAlert_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAlertsV2Interface_TrashAlert_Call) RunAndReturn(run func(context.Context, sql.TrashAlertV2Request) error) *MockAlertsV2Interface_TrashAlert_Call {
	_c.Call.Return(run)
	return _c
}

// TrashAlertById provides a mock function with given fields: ctx, id
func (_m *MockAlertsV2Interface) TrashAlertById(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for TrashAlertById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAlertsV2Interface_TrashAlertById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TrashAlertById'
type MockAlertsV2Interface_TrashAlertById_Call struct {
	*mock.Call
}

// TrashAlertById is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockAlertsV2Interface_Expecter) TrashAlertById(ctx interface{}, id interface{}) *MockAlertsV2Interface_TrashAlertById_Call {
	return &MockAlertsV2Interface_TrashAlertById_Call{Call: _e.mock.On("TrashAlertById", ctx, id)}
}

func (_c *MockAlertsV2Interface_TrashAlertById_Call) Run(run func(ctx context.Context, id string)) *MockAlertsV2Interface_TrashAlertById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAlertsV2Interface_TrashAlertById_Call) Return(_a0 error) *MockAlertsV2Interface_TrashAlertById_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAlertsV2Interface_TrashAlertById_Call) RunAndReturn(run func(context.Context, string) error) *MockAlertsV2Interface_TrashAlertById_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAlert provides a mock function with given fields: ctx, request
func (_m *MockAlertsV2Interface) UpdateAlert(ctx context.Context, request sql.UpdateAlertV2Request) (*sql.AlertV2, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAlert")
	}

	var r0 *sql.AlertV2
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.UpdateAlertV2Request) (*sql.AlertV2, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.UpdateAlertV2Request) *sql.AlertV2); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.AlertV2)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.UpdateAlertV2Request) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAlertsV2Interface_UpdateAlert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAlert'
type MockAlertsV2Interface_UpdateAlert_Call struct {
	*mock.Call
}

// UpdateAlert is a helper method to define mock.On call
//   - ctx context.Context
//   - request sql.UpdateAlertV2Request
func (_e *MockAlertsV2Interface_Expecter) UpdateAlert(ctx interface{}, request interface{}) *MockAlertsV2Interface_UpdateAlert_Call {
	return &MockAlertsV2Interface_UpdateAlert_Call{Call: _e.mock.On("UpdateAlert", ctx, request)}
}

func (_c *MockAlertsV2Interface_UpdateAlert_Call) Run(run func(ctx context.Context, request sql.UpdateAlertV2Request)) *MockAlertsV2Interface_UpdateAlert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.UpdateAlertV2Request))
	})
	return _c
}

func (_c *MockAlertsV2Interface_UpdateAlert_Call) Return(_a0 *sql.AlertV2, _a1 error) *MockAlertsV2Interface_UpdateAlert_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAlertsV2Interface_UpdateAlert_Call) RunAndReturn(run func(context.Context, sql.UpdateAlertV2Request) (*sql.AlertV2, error)) *MockAlertsV2Interface_UpdateAlert_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAlertsV2Interface creates a new instance of MockAlertsV2Interface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAlertsV2Interface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAlertsV2Interface {
	mock := &MockAlertsV2Interface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
