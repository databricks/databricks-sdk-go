// Code generated by mockery v2.43.0. DO NOT EDIT.

package sql

import (
	context "context"

	sql "github.com/databricks/databricks-sdk-go/service/sql"
	mock "github.com/stretchr/testify/mock"
)

// MockQueryVisualizationsLegacyInterface is an autogenerated mock type for the QueryVisualizationsLegacyInterface type
type MockQueryVisualizationsLegacyInterface struct {
	mock.Mock
}

type MockQueryVisualizationsLegacyInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQueryVisualizationsLegacyInterface) EXPECT() *MockQueryVisualizationsLegacyInterface_Expecter {
	return &MockQueryVisualizationsLegacyInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, request
func (_m *MockQueryVisualizationsLegacyInterface) Create(ctx context.Context, request sql.CreateQueryVisualizationsLegacyRequest) (*sql.LegacyVisualization, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *sql.LegacyVisualization
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.CreateQueryVisualizationsLegacyRequest) (*sql.LegacyVisualization, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.CreateQueryVisualizationsLegacyRequest) *sql.LegacyVisualization); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.LegacyVisualization)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.CreateQueryVisualizationsLegacyRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueryVisualizationsLegacyInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockQueryVisualizationsLegacyInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - request sql.CreateQueryVisualizationsLegacyRequest
func (_e *MockQueryVisualizationsLegacyInterface_Expecter) Create(ctx interface{}, request interface{}) *MockQueryVisualizationsLegacyInterface_Create_Call {
	return &MockQueryVisualizationsLegacyInterface_Create_Call{Call: _e.mock.On("Create", ctx, request)}
}

func (_c *MockQueryVisualizationsLegacyInterface_Create_Call) Run(run func(ctx context.Context, request sql.CreateQueryVisualizationsLegacyRequest)) *MockQueryVisualizationsLegacyInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.CreateQueryVisualizationsLegacyRequest))
	})
	return _c
}

func (_c *MockQueryVisualizationsLegacyInterface_Create_Call) Return(_a0 *sql.LegacyVisualization, _a1 error) *MockQueryVisualizationsLegacyInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueryVisualizationsLegacyInterface_Create_Call) RunAndReturn(run func(context.Context, sql.CreateQueryVisualizationsLegacyRequest) (*sql.LegacyVisualization, error)) *MockQueryVisualizationsLegacyInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, request
func (_m *MockQueryVisualizationsLegacyInterface) Delete(ctx context.Context, request sql.DeleteQueryVisualizationsLegacyRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.DeleteQueryVisualizationsLegacyRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQueryVisualizationsLegacyInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockQueryVisualizationsLegacyInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - request sql.DeleteQueryVisualizationsLegacyRequest
func (_e *MockQueryVisualizationsLegacyInterface_Expecter) Delete(ctx interface{}, request interface{}) *MockQueryVisualizationsLegacyInterface_Delete_Call {
	return &MockQueryVisualizationsLegacyInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, request)}
}

func (_c *MockQueryVisualizationsLegacyInterface_Delete_Call) Run(run func(ctx context.Context, request sql.DeleteQueryVisualizationsLegacyRequest)) *MockQueryVisualizationsLegacyInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.DeleteQueryVisualizationsLegacyRequest))
	})
	return _c
}

func (_c *MockQueryVisualizationsLegacyInterface_Delete_Call) Return(_a0 error) *MockQueryVisualizationsLegacyInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQueryVisualizationsLegacyInterface_Delete_Call) RunAndReturn(run func(context.Context, sql.DeleteQueryVisualizationsLegacyRequest) error) *MockQueryVisualizationsLegacyInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteById provides a mock function with given fields: ctx, id
func (_m *MockQueryVisualizationsLegacyInterface) DeleteById(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQueryVisualizationsLegacyInterface_DeleteById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteById'
type MockQueryVisualizationsLegacyInterface_DeleteById_Call struct {
	*mock.Call
}

// DeleteById is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockQueryVisualizationsLegacyInterface_Expecter) DeleteById(ctx interface{}, id interface{}) *MockQueryVisualizationsLegacyInterface_DeleteById_Call {
	return &MockQueryVisualizationsLegacyInterface_DeleteById_Call{Call: _e.mock.On("DeleteById", ctx, id)}
}

func (_c *MockQueryVisualizationsLegacyInterface_DeleteById_Call) Run(run func(ctx context.Context, id string)) *MockQueryVisualizationsLegacyInterface_DeleteById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockQueryVisualizationsLegacyInterface_DeleteById_Call) Return(_a0 error) *MockQueryVisualizationsLegacyInterface_DeleteById_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQueryVisualizationsLegacyInterface_DeleteById_Call) RunAndReturn(run func(context.Context, string) error) *MockQueryVisualizationsLegacyInterface_DeleteById_Call {
	_c.Call.Return(run)
	return _c
}

// Impl provides a mock function with given fields:
func (_m *MockQueryVisualizationsLegacyInterface) Impl() sql.QueryVisualizationsLegacyService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 sql.QueryVisualizationsLegacyService
	if rf, ok := ret.Get(0).(func() sql.QueryVisualizationsLegacyService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.QueryVisualizationsLegacyService)
		}
	}

	return r0
}

// MockQueryVisualizationsLegacyInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockQueryVisualizationsLegacyInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockQueryVisualizationsLegacyInterface_Expecter) Impl() *MockQueryVisualizationsLegacyInterface_Impl_Call {
	return &MockQueryVisualizationsLegacyInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockQueryVisualizationsLegacyInterface_Impl_Call) Run(run func()) *MockQueryVisualizationsLegacyInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockQueryVisualizationsLegacyInterface_Impl_Call) Return(_a0 sql.QueryVisualizationsLegacyService) *MockQueryVisualizationsLegacyInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQueryVisualizationsLegacyInterface_Impl_Call) RunAndReturn(run func() sql.QueryVisualizationsLegacyService) *MockQueryVisualizationsLegacyInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, request
func (_m *MockQueryVisualizationsLegacyInterface) Update(ctx context.Context, request sql.LegacyVisualization) (*sql.LegacyVisualization, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *sql.LegacyVisualization
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.LegacyVisualization) (*sql.LegacyVisualization, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.LegacyVisualization) *sql.LegacyVisualization); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.LegacyVisualization)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.LegacyVisualization) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueryVisualizationsLegacyInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockQueryVisualizationsLegacyInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - request sql.LegacyVisualization
func (_e *MockQueryVisualizationsLegacyInterface_Expecter) Update(ctx interface{}, request interface{}) *MockQueryVisualizationsLegacyInterface_Update_Call {
	return &MockQueryVisualizationsLegacyInterface_Update_Call{Call: _e.mock.On("Update", ctx, request)}
}

func (_c *MockQueryVisualizationsLegacyInterface_Update_Call) Run(run func(ctx context.Context, request sql.LegacyVisualization)) *MockQueryVisualizationsLegacyInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.LegacyVisualization))
	})
	return _c
}

func (_c *MockQueryVisualizationsLegacyInterface_Update_Call) Return(_a0 *sql.LegacyVisualization, _a1 error) *MockQueryVisualizationsLegacyInterface_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueryVisualizationsLegacyInterface_Update_Call) RunAndReturn(run func(context.Context, sql.LegacyVisualization) (*sql.LegacyVisualization, error)) *MockQueryVisualizationsLegacyInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockQueryVisualizationsLegacyInterface) WithImpl(impl sql.QueryVisualizationsLegacyService) sql.QueryVisualizationsLegacyInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 sql.QueryVisualizationsLegacyInterface
	if rf, ok := ret.Get(0).(func(sql.QueryVisualizationsLegacyService) sql.QueryVisualizationsLegacyInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.QueryVisualizationsLegacyInterface)
		}
	}

	return r0
}

// MockQueryVisualizationsLegacyInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockQueryVisualizationsLegacyInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl sql.QueryVisualizationsLegacyService
func (_e *MockQueryVisualizationsLegacyInterface_Expecter) WithImpl(impl interface{}) *MockQueryVisualizationsLegacyInterface_WithImpl_Call {
	return &MockQueryVisualizationsLegacyInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockQueryVisualizationsLegacyInterface_WithImpl_Call) Run(run func(impl sql.QueryVisualizationsLegacyService)) *MockQueryVisualizationsLegacyInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(sql.QueryVisualizationsLegacyService))
	})
	return _c
}

func (_c *MockQueryVisualizationsLegacyInterface_WithImpl_Call) Return(_a0 sql.QueryVisualizationsLegacyInterface) *MockQueryVisualizationsLegacyInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQueryVisualizationsLegacyInterface_WithImpl_Call) RunAndReturn(run func(sql.QueryVisualizationsLegacyService) sql.QueryVisualizationsLegacyInterface) *MockQueryVisualizationsLegacyInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockQueryVisualizationsLegacyInterface creates a new instance of MockQueryVisualizationsLegacyInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQueryVisualizationsLegacyInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQueryVisualizationsLegacyInterface {
	mock := &MockQueryVisualizationsLegacyInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
