// Code generated by mockery v2.43.0. DO NOT EDIT.

package workspace

import (
	context "context"
	io "io"

	listing "github.com/databricks/databricks-sdk-go/listing"
	mock "github.com/stretchr/testify/mock"

	workspace "github.com/databricks/databricks-sdk-go/service/workspace"
)

// MockWorkspaceInterface is an autogenerated mock type for the WorkspaceInterface type
type MockWorkspaceInterface struct {
	mock.Mock
}

type MockWorkspaceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWorkspaceInterface) EXPECT() *MockWorkspaceInterface_Expecter {
	return &MockWorkspaceInterface_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: ctx, request
func (_m *MockWorkspaceInterface) Delete(ctx context.Context, request workspace.Delete) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, workspace.Delete) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWorkspaceInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockWorkspaceInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - request workspace.Delete
func (_e *MockWorkspaceInterface_Expecter) Delete(ctx interface{}, request interface{}) *MockWorkspaceInterface_Delete_Call {
	return &MockWorkspaceInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, request)}
}

func (_c *MockWorkspaceInterface_Delete_Call) Run(run func(ctx context.Context, request workspace.Delete)) *MockWorkspaceInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(workspace.Delete))
	})
	return _c
}

func (_c *MockWorkspaceInterface_Delete_Call) Return(_a0 error) *MockWorkspaceInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWorkspaceInterface_Delete_Call) RunAndReturn(run func(context.Context, workspace.Delete) error) *MockWorkspaceInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Download provides a mock function with given fields: ctx, path, opts
func (_m *MockWorkspaceInterface) Download(ctx context.Context, path string, opts ...func(map[string]interface{})) (io.ReadCloser, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, path)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Download")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...func(map[string]interface{})) (io.ReadCloser, error)); ok {
		return rf(ctx, path, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...func(map[string]interface{})) io.ReadCloser); ok {
		r0 = rf(ctx, path, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...func(map[string]interface{})) error); ok {
		r1 = rf(ctx, path, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWorkspaceInterface_Download_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Download'
type MockWorkspaceInterface_Download_Call struct {
	*mock.Call
}

// Download is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
//   - opts ...func(map[string]interface{})
func (_e *MockWorkspaceInterface_Expecter) Download(ctx interface{}, path interface{}, opts ...interface{}) *MockWorkspaceInterface_Download_Call {
	return &MockWorkspaceInterface_Download_Call{Call: _e.mock.On("Download",
		append([]interface{}{ctx, path}, opts...)...)}
}

func (_c *MockWorkspaceInterface_Download_Call) Run(run func(ctx context.Context, path string, opts ...func(map[string]interface{}))) *MockWorkspaceInterface_Download_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(map[string]interface{}), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(map[string]interface{}))
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockWorkspaceInterface_Download_Call) Return(_a0 io.ReadCloser, _a1 error) *MockWorkspaceInterface_Download_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWorkspaceInterface_Download_Call) RunAndReturn(run func(context.Context, string, ...func(map[string]interface{})) (io.ReadCloser, error)) *MockWorkspaceInterface_Download_Call {
	_c.Call.Return(run)
	return _c
}

// Export provides a mock function with given fields: ctx, request
func (_m *MockWorkspaceInterface) Export(ctx context.Context, request workspace.ExportRequest) (*workspace.ExportResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Export")
	}

	var r0 *workspace.ExportResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, workspace.ExportRequest) (*workspace.ExportResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, workspace.ExportRequest) *workspace.ExportResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspace.ExportResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, workspace.ExportRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWorkspaceInterface_Export_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Export'
type MockWorkspaceInterface_Export_Call struct {
	*mock.Call
}

// Export is a helper method to define mock.On call
//   - ctx context.Context
//   - request workspace.ExportRequest
func (_e *MockWorkspaceInterface_Expecter) Export(ctx interface{}, request interface{}) *MockWorkspaceInterface_Export_Call {
	return &MockWorkspaceInterface_Export_Call{Call: _e.mock.On("Export", ctx, request)}
}

func (_c *MockWorkspaceInterface_Export_Call) Run(run func(ctx context.Context, request workspace.ExportRequest)) *MockWorkspaceInterface_Export_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(workspace.ExportRequest))
	})
	return _c
}

func (_c *MockWorkspaceInterface_Export_Call) Return(_a0 *workspace.ExportResponse, _a1 error) *MockWorkspaceInterface_Export_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWorkspaceInterface_Export_Call) RunAndReturn(run func(context.Context, workspace.ExportRequest) (*workspace.ExportResponse, error)) *MockWorkspaceInterface_Export_Call {
	_c.Call.Return(run)
	return _c
}

// GetByPath provides a mock function with given fields: ctx, name
func (_m *MockWorkspaceInterface) GetByPath(ctx context.Context, name string) (*workspace.ObjectInfo, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetByPath")
	}

	var r0 *workspace.ObjectInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*workspace.ObjectInfo, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *workspace.ObjectInfo); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspace.ObjectInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWorkspaceInterface_GetByPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByPath'
type MockWorkspaceInterface_GetByPath_Call struct {
	*mock.Call
}

// GetByPath is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockWorkspaceInterface_Expecter) GetByPath(ctx interface{}, name interface{}) *MockWorkspaceInterface_GetByPath_Call {
	return &MockWorkspaceInterface_GetByPath_Call{Call: _e.mock.On("GetByPath", ctx, name)}
}

func (_c *MockWorkspaceInterface_GetByPath_Call) Run(run func(ctx context.Context, name string)) *MockWorkspaceInterface_GetByPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockWorkspaceInterface_GetByPath_Call) Return(_a0 *workspace.ObjectInfo, _a1 error) *MockWorkspaceInterface_GetByPath_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWorkspaceInterface_GetByPath_Call) RunAndReturn(run func(context.Context, string) (*workspace.ObjectInfo, error)) *MockWorkspaceInterface_GetByPath_Call {
	_c.Call.Return(run)
	return _c
}

// GetPermissionLevels provides a mock function with given fields: ctx, request
func (_m *MockWorkspaceInterface) GetPermissionLevels(ctx context.Context, request workspace.GetWorkspaceObjectPermissionLevelsRequest) (*workspace.GetWorkspaceObjectPermissionLevelsResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetPermissionLevels")
	}

	var r0 *workspace.GetWorkspaceObjectPermissionLevelsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, workspace.GetWorkspaceObjectPermissionLevelsRequest) (*workspace.GetWorkspaceObjectPermissionLevelsResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, workspace.GetWorkspaceObjectPermissionLevelsRequest) *workspace.GetWorkspaceObjectPermissionLevelsResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspace.GetWorkspaceObjectPermissionLevelsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, workspace.GetWorkspaceObjectPermissionLevelsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWorkspaceInterface_GetPermissionLevels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPermissionLevels'
type MockWorkspaceInterface_GetPermissionLevels_Call struct {
	*mock.Call
}

// GetPermissionLevels is a helper method to define mock.On call
//   - ctx context.Context
//   - request workspace.GetWorkspaceObjectPermissionLevelsRequest
func (_e *MockWorkspaceInterface_Expecter) GetPermissionLevels(ctx interface{}, request interface{}) *MockWorkspaceInterface_GetPermissionLevels_Call {
	return &MockWorkspaceInterface_GetPermissionLevels_Call{Call: _e.mock.On("GetPermissionLevels", ctx, request)}
}

func (_c *MockWorkspaceInterface_GetPermissionLevels_Call) Run(run func(ctx context.Context, request workspace.GetWorkspaceObjectPermissionLevelsRequest)) *MockWorkspaceInterface_GetPermissionLevels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(workspace.GetWorkspaceObjectPermissionLevelsRequest))
	})
	return _c
}

func (_c *MockWorkspaceInterface_GetPermissionLevels_Call) Return(_a0 *workspace.GetWorkspaceObjectPermissionLevelsResponse, _a1 error) *MockWorkspaceInterface_GetPermissionLevels_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWorkspaceInterface_GetPermissionLevels_Call) RunAndReturn(run func(context.Context, workspace.GetWorkspaceObjectPermissionLevelsRequest) (*workspace.GetWorkspaceObjectPermissionLevelsResponse, error)) *MockWorkspaceInterface_GetPermissionLevels_Call {
	_c.Call.Return(run)
	return _c
}

// GetPermissionLevelsByWorkspaceObjectTypeAndWorkspaceObjectId provides a mock function with given fields: ctx, workspaceObjectType, workspaceObjectId
func (_m *MockWorkspaceInterface) GetPermissionLevelsByWorkspaceObjectTypeAndWorkspaceObjectId(ctx context.Context, workspaceObjectType string, workspaceObjectId string) (*workspace.GetWorkspaceObjectPermissionLevelsResponse, error) {
	ret := _m.Called(ctx, workspaceObjectType, workspaceObjectId)

	if len(ret) == 0 {
		panic("no return value specified for GetPermissionLevelsByWorkspaceObjectTypeAndWorkspaceObjectId")
	}

	var r0 *workspace.GetWorkspaceObjectPermissionLevelsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*workspace.GetWorkspaceObjectPermissionLevelsResponse, error)); ok {
		return rf(ctx, workspaceObjectType, workspaceObjectId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *workspace.GetWorkspaceObjectPermissionLevelsResponse); ok {
		r0 = rf(ctx, workspaceObjectType, workspaceObjectId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspace.GetWorkspaceObjectPermissionLevelsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, workspaceObjectType, workspaceObjectId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWorkspaceInterface_GetPermissionLevelsByWorkspaceObjectTypeAndWorkspaceObjectId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPermissionLevelsByWorkspaceObjectTypeAndWorkspaceObjectId'
type MockWorkspaceInterface_GetPermissionLevelsByWorkspaceObjectTypeAndWorkspaceObjectId_Call struct {
	*mock.Call
}

// GetPermissionLevelsByWorkspaceObjectTypeAndWorkspaceObjectId is a helper method to define mock.On call
//   - ctx context.Context
//   - workspaceObjectType string
//   - workspaceObjectId string
func (_e *MockWorkspaceInterface_Expecter) GetPermissionLevelsByWorkspaceObjectTypeAndWorkspaceObjectId(ctx interface{}, workspaceObjectType interface{}, workspaceObjectId interface{}) *MockWorkspaceInterface_GetPermissionLevelsByWorkspaceObjectTypeAndWorkspaceObjectId_Call {
	return &MockWorkspaceInterface_GetPermissionLevelsByWorkspaceObjectTypeAndWorkspaceObjectId_Call{Call: _e.mock.On("GetPermissionLevelsByWorkspaceObjectTypeAndWorkspaceObjectId", ctx, workspaceObjectType, workspaceObjectId)}
}

func (_c *MockWorkspaceInterface_GetPermissionLevelsByWorkspaceObjectTypeAndWorkspaceObjectId_Call) Run(run func(ctx context.Context, workspaceObjectType string, workspaceObjectId string)) *MockWorkspaceInterface_GetPermissionLevelsByWorkspaceObjectTypeAndWorkspaceObjectId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockWorkspaceInterface_GetPermissionLevelsByWorkspaceObjectTypeAndWorkspaceObjectId_Call) Return(_a0 *workspace.GetWorkspaceObjectPermissionLevelsResponse, _a1 error) *MockWorkspaceInterface_GetPermissionLevelsByWorkspaceObjectTypeAndWorkspaceObjectId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWorkspaceInterface_GetPermissionLevelsByWorkspaceObjectTypeAndWorkspaceObjectId_Call) RunAndReturn(run func(context.Context, string, string) (*workspace.GetWorkspaceObjectPermissionLevelsResponse, error)) *MockWorkspaceInterface_GetPermissionLevelsByWorkspaceObjectTypeAndWorkspaceObjectId_Call {
	_c.Call.Return(run)
	return _c
}

// GetPermissions provides a mock function with given fields: ctx, request
func (_m *MockWorkspaceInterface) GetPermissions(ctx context.Context, request workspace.GetWorkspaceObjectPermissionsRequest) (*workspace.WorkspaceObjectPermissions, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetPermissions")
	}

	var r0 *workspace.WorkspaceObjectPermissions
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, workspace.GetWorkspaceObjectPermissionsRequest) (*workspace.WorkspaceObjectPermissions, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, workspace.GetWorkspaceObjectPermissionsRequest) *workspace.WorkspaceObjectPermissions); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspace.WorkspaceObjectPermissions)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, workspace.GetWorkspaceObjectPermissionsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWorkspaceInterface_GetPermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPermissions'
type MockWorkspaceInterface_GetPermissions_Call struct {
	*mock.Call
}

// GetPermissions is a helper method to define mock.On call
//   - ctx context.Context
//   - request workspace.GetWorkspaceObjectPermissionsRequest
func (_e *MockWorkspaceInterface_Expecter) GetPermissions(ctx interface{}, request interface{}) *MockWorkspaceInterface_GetPermissions_Call {
	return &MockWorkspaceInterface_GetPermissions_Call{Call: _e.mock.On("GetPermissions", ctx, request)}
}

func (_c *MockWorkspaceInterface_GetPermissions_Call) Run(run func(ctx context.Context, request workspace.GetWorkspaceObjectPermissionsRequest)) *MockWorkspaceInterface_GetPermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(workspace.GetWorkspaceObjectPermissionsRequest))
	})
	return _c
}

func (_c *MockWorkspaceInterface_GetPermissions_Call) Return(_a0 *workspace.WorkspaceObjectPermissions, _a1 error) *MockWorkspaceInterface_GetPermissions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWorkspaceInterface_GetPermissions_Call) RunAndReturn(run func(context.Context, workspace.GetWorkspaceObjectPermissionsRequest) (*workspace.WorkspaceObjectPermissions, error)) *MockWorkspaceInterface_GetPermissions_Call {
	_c.Call.Return(run)
	return _c
}

// GetPermissionsByWorkspaceObjectTypeAndWorkspaceObjectId provides a mock function with given fields: ctx, workspaceObjectType, workspaceObjectId
func (_m *MockWorkspaceInterface) GetPermissionsByWorkspaceObjectTypeAndWorkspaceObjectId(ctx context.Context, workspaceObjectType string, workspaceObjectId string) (*workspace.WorkspaceObjectPermissions, error) {
	ret := _m.Called(ctx, workspaceObjectType, workspaceObjectId)

	if len(ret) == 0 {
		panic("no return value specified for GetPermissionsByWorkspaceObjectTypeAndWorkspaceObjectId")
	}

	var r0 *workspace.WorkspaceObjectPermissions
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*workspace.WorkspaceObjectPermissions, error)); ok {
		return rf(ctx, workspaceObjectType, workspaceObjectId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *workspace.WorkspaceObjectPermissions); ok {
		r0 = rf(ctx, workspaceObjectType, workspaceObjectId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspace.WorkspaceObjectPermissions)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, workspaceObjectType, workspaceObjectId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWorkspaceInterface_GetPermissionsByWorkspaceObjectTypeAndWorkspaceObjectId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPermissionsByWorkspaceObjectTypeAndWorkspaceObjectId'
type MockWorkspaceInterface_GetPermissionsByWorkspaceObjectTypeAndWorkspaceObjectId_Call struct {
	*mock.Call
}

// GetPermissionsByWorkspaceObjectTypeAndWorkspaceObjectId is a helper method to define mock.On call
//   - ctx context.Context
//   - workspaceObjectType string
//   - workspaceObjectId string
func (_e *MockWorkspaceInterface_Expecter) GetPermissionsByWorkspaceObjectTypeAndWorkspaceObjectId(ctx interface{}, workspaceObjectType interface{}, workspaceObjectId interface{}) *MockWorkspaceInterface_GetPermissionsByWorkspaceObjectTypeAndWorkspaceObjectId_Call {
	return &MockWorkspaceInterface_GetPermissionsByWorkspaceObjectTypeAndWorkspaceObjectId_Call{Call: _e.mock.On("GetPermissionsByWorkspaceObjectTypeAndWorkspaceObjectId", ctx, workspaceObjectType, workspaceObjectId)}
}

func (_c *MockWorkspaceInterface_GetPermissionsByWorkspaceObjectTypeAndWorkspaceObjectId_Call) Run(run func(ctx context.Context, workspaceObjectType string, workspaceObjectId string)) *MockWorkspaceInterface_GetPermissionsByWorkspaceObjectTypeAndWorkspaceObjectId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockWorkspaceInterface_GetPermissionsByWorkspaceObjectTypeAndWorkspaceObjectId_Call) Return(_a0 *workspace.WorkspaceObjectPermissions, _a1 error) *MockWorkspaceInterface_GetPermissionsByWorkspaceObjectTypeAndWorkspaceObjectId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWorkspaceInterface_GetPermissionsByWorkspaceObjectTypeAndWorkspaceObjectId_Call) RunAndReturn(run func(context.Context, string, string) (*workspace.WorkspaceObjectPermissions, error)) *MockWorkspaceInterface_GetPermissionsByWorkspaceObjectTypeAndWorkspaceObjectId_Call {
	_c.Call.Return(run)
	return _c
}

// GetStatus provides a mock function with given fields: ctx, request
func (_m *MockWorkspaceInterface) GetStatus(ctx context.Context, request workspace.GetStatusRequest) (*workspace.ObjectInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetStatus")
	}

	var r0 *workspace.ObjectInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, workspace.GetStatusRequest) (*workspace.ObjectInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, workspace.GetStatusRequest) *workspace.ObjectInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspace.ObjectInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, workspace.GetStatusRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWorkspaceInterface_GetStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStatus'
type MockWorkspaceInterface_GetStatus_Call struct {
	*mock.Call
}

// GetStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - request workspace.GetStatusRequest
func (_e *MockWorkspaceInterface_Expecter) GetStatus(ctx interface{}, request interface{}) *MockWorkspaceInterface_GetStatus_Call {
	return &MockWorkspaceInterface_GetStatus_Call{Call: _e.mock.On("GetStatus", ctx, request)}
}

func (_c *MockWorkspaceInterface_GetStatus_Call) Run(run func(ctx context.Context, request workspace.GetStatusRequest)) *MockWorkspaceInterface_GetStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(workspace.GetStatusRequest))
	})
	return _c
}

func (_c *MockWorkspaceInterface_GetStatus_Call) Return(_a0 *workspace.ObjectInfo, _a1 error) *MockWorkspaceInterface_GetStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWorkspaceInterface_GetStatus_Call) RunAndReturn(run func(context.Context, workspace.GetStatusRequest) (*workspace.ObjectInfo, error)) *MockWorkspaceInterface_GetStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetStatusByPath provides a mock function with given fields: ctx, path
func (_m *MockWorkspaceInterface) GetStatusByPath(ctx context.Context, path string) (*workspace.ObjectInfo, error) {
	ret := _m.Called(ctx, path)

	if len(ret) == 0 {
		panic("no return value specified for GetStatusByPath")
	}

	var r0 *workspace.ObjectInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*workspace.ObjectInfo, error)); ok {
		return rf(ctx, path)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *workspace.ObjectInfo); ok {
		r0 = rf(ctx, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspace.ObjectInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWorkspaceInterface_GetStatusByPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStatusByPath'
type MockWorkspaceInterface_GetStatusByPath_Call struct {
	*mock.Call
}

// GetStatusByPath is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
func (_e *MockWorkspaceInterface_Expecter) GetStatusByPath(ctx interface{}, path interface{}) *MockWorkspaceInterface_GetStatusByPath_Call {
	return &MockWorkspaceInterface_GetStatusByPath_Call{Call: _e.mock.On("GetStatusByPath", ctx, path)}
}

func (_c *MockWorkspaceInterface_GetStatusByPath_Call) Run(run func(ctx context.Context, path string)) *MockWorkspaceInterface_GetStatusByPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockWorkspaceInterface_GetStatusByPath_Call) Return(_a0 *workspace.ObjectInfo, _a1 error) *MockWorkspaceInterface_GetStatusByPath_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWorkspaceInterface_GetStatusByPath_Call) RunAndReturn(run func(context.Context, string) (*workspace.ObjectInfo, error)) *MockWorkspaceInterface_GetStatusByPath_Call {
	_c.Call.Return(run)
	return _c
}

// Impl provides a mock function with given fields:
func (_m *MockWorkspaceInterface) Impl() workspace.WorkspaceService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 workspace.WorkspaceService
	if rf, ok := ret.Get(0).(func() workspace.WorkspaceService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(workspace.WorkspaceService)
		}
	}

	return r0
}

// MockWorkspaceInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockWorkspaceInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockWorkspaceInterface_Expecter) Impl() *MockWorkspaceInterface_Impl_Call {
	return &MockWorkspaceInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockWorkspaceInterface_Impl_Call) Run(run func()) *MockWorkspaceInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockWorkspaceInterface_Impl_Call) Return(_a0 workspace.WorkspaceService) *MockWorkspaceInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWorkspaceInterface_Impl_Call) RunAndReturn(run func() workspace.WorkspaceService) *MockWorkspaceInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// Import provides a mock function with given fields: ctx, request
func (_m *MockWorkspaceInterface) Import(ctx context.Context, request workspace.Import) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Import")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, workspace.Import) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWorkspaceInterface_Import_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Import'
type MockWorkspaceInterface_Import_Call struct {
	*mock.Call
}

// Import is a helper method to define mock.On call
//   - ctx context.Context
//   - request workspace.Import
func (_e *MockWorkspaceInterface_Expecter) Import(ctx interface{}, request interface{}) *MockWorkspaceInterface_Import_Call {
	return &MockWorkspaceInterface_Import_Call{Call: _e.mock.On("Import", ctx, request)}
}

func (_c *MockWorkspaceInterface_Import_Call) Run(run func(ctx context.Context, request workspace.Import)) *MockWorkspaceInterface_Import_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(workspace.Import))
	})
	return _c
}

func (_c *MockWorkspaceInterface_Import_Call) Return(_a0 error) *MockWorkspaceInterface_Import_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWorkspaceInterface_Import_Call) RunAndReturn(run func(context.Context, workspace.Import) error) *MockWorkspaceInterface_Import_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, request
func (_m *MockWorkspaceInterface) List(ctx context.Context, request workspace.ListWorkspaceRequest) listing.Iterator[workspace.ObjectInfo] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 listing.Iterator[workspace.ObjectInfo]
	if rf, ok := ret.Get(0).(func(context.Context, workspace.ListWorkspaceRequest) listing.Iterator[workspace.ObjectInfo]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listing.Iterator[workspace.ObjectInfo])
		}
	}

	return r0
}

// MockWorkspaceInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockWorkspaceInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - request workspace.ListWorkspaceRequest
func (_e *MockWorkspaceInterface_Expecter) List(ctx interface{}, request interface{}) *MockWorkspaceInterface_List_Call {
	return &MockWorkspaceInterface_List_Call{Call: _e.mock.On("List", ctx, request)}
}

func (_c *MockWorkspaceInterface_List_Call) Run(run func(ctx context.Context, request workspace.ListWorkspaceRequest)) *MockWorkspaceInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(workspace.ListWorkspaceRequest))
	})
	return _c
}

func (_c *MockWorkspaceInterface_List_Call) Return(_a0 listing.Iterator[workspace.ObjectInfo]) *MockWorkspaceInterface_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWorkspaceInterface_List_Call) RunAndReturn(run func(context.Context, workspace.ListWorkspaceRequest) listing.Iterator[workspace.ObjectInfo]) *MockWorkspaceInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListAll provides a mock function with given fields: ctx, request
func (_m *MockWorkspaceInterface) ListAll(ctx context.Context, request workspace.ListWorkspaceRequest) ([]workspace.ObjectInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListAll")
	}

	var r0 []workspace.ObjectInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, workspace.ListWorkspaceRequest) ([]workspace.ObjectInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, workspace.ListWorkspaceRequest) []workspace.ObjectInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]workspace.ObjectInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, workspace.ListWorkspaceRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWorkspaceInterface_ListAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAll'
type MockWorkspaceInterface_ListAll_Call struct {
	*mock.Call
}

// ListAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request workspace.ListWorkspaceRequest
func (_e *MockWorkspaceInterface_Expecter) ListAll(ctx interface{}, request interface{}) *MockWorkspaceInterface_ListAll_Call {
	return &MockWorkspaceInterface_ListAll_Call{Call: _e.mock.On("ListAll", ctx, request)}
}

func (_c *MockWorkspaceInterface_ListAll_Call) Run(run func(ctx context.Context, request workspace.ListWorkspaceRequest)) *MockWorkspaceInterface_ListAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(workspace.ListWorkspaceRequest))
	})
	return _c
}

func (_c *MockWorkspaceInterface_ListAll_Call) Return(_a0 []workspace.ObjectInfo, _a1 error) *MockWorkspaceInterface_ListAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWorkspaceInterface_ListAll_Call) RunAndReturn(run func(context.Context, workspace.ListWorkspaceRequest) ([]workspace.ObjectInfo, error)) *MockWorkspaceInterface_ListAll_Call {
	_c.Call.Return(run)
	return _c
}

// Mkdirs provides a mock function with given fields: ctx, request
func (_m *MockWorkspaceInterface) Mkdirs(ctx context.Context, request workspace.Mkdirs) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Mkdirs")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, workspace.Mkdirs) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWorkspaceInterface_Mkdirs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Mkdirs'
type MockWorkspaceInterface_Mkdirs_Call struct {
	*mock.Call
}

// Mkdirs is a helper method to define mock.On call
//   - ctx context.Context
//   - request workspace.Mkdirs
func (_e *MockWorkspaceInterface_Expecter) Mkdirs(ctx interface{}, request interface{}) *MockWorkspaceInterface_Mkdirs_Call {
	return &MockWorkspaceInterface_Mkdirs_Call{Call: _e.mock.On("Mkdirs", ctx, request)}
}

func (_c *MockWorkspaceInterface_Mkdirs_Call) Run(run func(ctx context.Context, request workspace.Mkdirs)) *MockWorkspaceInterface_Mkdirs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(workspace.Mkdirs))
	})
	return _c
}

func (_c *MockWorkspaceInterface_Mkdirs_Call) Return(_a0 error) *MockWorkspaceInterface_Mkdirs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWorkspaceInterface_Mkdirs_Call) RunAndReturn(run func(context.Context, workspace.Mkdirs) error) *MockWorkspaceInterface_Mkdirs_Call {
	_c.Call.Return(run)
	return _c
}

// MkdirsByPath provides a mock function with given fields: ctx, path
func (_m *MockWorkspaceInterface) MkdirsByPath(ctx context.Context, path string) error {
	ret := _m.Called(ctx, path)

	if len(ret) == 0 {
		panic("no return value specified for MkdirsByPath")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, path)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWorkspaceInterface_MkdirsByPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MkdirsByPath'
type MockWorkspaceInterface_MkdirsByPath_Call struct {
	*mock.Call
}

// MkdirsByPath is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
func (_e *MockWorkspaceInterface_Expecter) MkdirsByPath(ctx interface{}, path interface{}) *MockWorkspaceInterface_MkdirsByPath_Call {
	return &MockWorkspaceInterface_MkdirsByPath_Call{Call: _e.mock.On("MkdirsByPath", ctx, path)}
}

func (_c *MockWorkspaceInterface_MkdirsByPath_Call) Run(run func(ctx context.Context, path string)) *MockWorkspaceInterface_MkdirsByPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockWorkspaceInterface_MkdirsByPath_Call) Return(_a0 error) *MockWorkspaceInterface_MkdirsByPath_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWorkspaceInterface_MkdirsByPath_Call) RunAndReturn(run func(context.Context, string) error) *MockWorkspaceInterface_MkdirsByPath_Call {
	_c.Call.Return(run)
	return _c
}

// ObjectInfoPathToObjectIdMap provides a mock function with given fields: ctx, request
func (_m *MockWorkspaceInterface) ObjectInfoPathToObjectIdMap(ctx context.Context, request workspace.ListWorkspaceRequest) (map[string]int64, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ObjectInfoPathToObjectIdMap")
	}

	var r0 map[string]int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, workspace.ListWorkspaceRequest) (map[string]int64, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, workspace.ListWorkspaceRequest) map[string]int64); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]int64)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, workspace.ListWorkspaceRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWorkspaceInterface_ObjectInfoPathToObjectIdMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ObjectInfoPathToObjectIdMap'
type MockWorkspaceInterface_ObjectInfoPathToObjectIdMap_Call struct {
	*mock.Call
}

// ObjectInfoPathToObjectIdMap is a helper method to define mock.On call
//   - ctx context.Context
//   - request workspace.ListWorkspaceRequest
func (_e *MockWorkspaceInterface_Expecter) ObjectInfoPathToObjectIdMap(ctx interface{}, request interface{}) *MockWorkspaceInterface_ObjectInfoPathToObjectIdMap_Call {
	return &MockWorkspaceInterface_ObjectInfoPathToObjectIdMap_Call{Call: _e.mock.On("ObjectInfoPathToObjectIdMap", ctx, request)}
}

func (_c *MockWorkspaceInterface_ObjectInfoPathToObjectIdMap_Call) Run(run func(ctx context.Context, request workspace.ListWorkspaceRequest)) *MockWorkspaceInterface_ObjectInfoPathToObjectIdMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(workspace.ListWorkspaceRequest))
	})
	return _c
}

func (_c *MockWorkspaceInterface_ObjectInfoPathToObjectIdMap_Call) Return(_a0 map[string]int64, _a1 error) *MockWorkspaceInterface_ObjectInfoPathToObjectIdMap_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWorkspaceInterface_ObjectInfoPathToObjectIdMap_Call) RunAndReturn(run func(context.Context, workspace.ListWorkspaceRequest) (map[string]int64, error)) *MockWorkspaceInterface_ObjectInfoPathToObjectIdMap_Call {
	_c.Call.Return(run)
	return _c
}

// ReadFile provides a mock function with given fields: ctx, name
func (_m *MockWorkspaceInterface) ReadFile(ctx context.Context, name string) ([]byte, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for ReadFile")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]byte, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []byte); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWorkspaceInterface_ReadFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadFile'
type MockWorkspaceInterface_ReadFile_Call struct {
	*mock.Call
}

// ReadFile is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockWorkspaceInterface_Expecter) ReadFile(ctx interface{}, name interface{}) *MockWorkspaceInterface_ReadFile_Call {
	return &MockWorkspaceInterface_ReadFile_Call{Call: _e.mock.On("ReadFile", ctx, name)}
}

func (_c *MockWorkspaceInterface_ReadFile_Call) Run(run func(ctx context.Context, name string)) *MockWorkspaceInterface_ReadFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockWorkspaceInterface_ReadFile_Call) Return(_a0 []byte, _a1 error) *MockWorkspaceInterface_ReadFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWorkspaceInterface_ReadFile_Call) RunAndReturn(run func(context.Context, string) ([]byte, error)) *MockWorkspaceInterface_ReadFile_Call {
	_c.Call.Return(run)
	return _c
}

// RecursiveList provides a mock function with given fields: ctx, path
func (_m *MockWorkspaceInterface) RecursiveList(ctx context.Context, path string) ([]workspace.ObjectInfo, error) {
	ret := _m.Called(ctx, path)

	if len(ret) == 0 {
		panic("no return value specified for RecursiveList")
	}

	var r0 []workspace.ObjectInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]workspace.ObjectInfo, error)); ok {
		return rf(ctx, path)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []workspace.ObjectInfo); ok {
		r0 = rf(ctx, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]workspace.ObjectInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWorkspaceInterface_RecursiveList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecursiveList'
type MockWorkspaceInterface_RecursiveList_Call struct {
	*mock.Call
}

// RecursiveList is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
func (_e *MockWorkspaceInterface_Expecter) RecursiveList(ctx interface{}, path interface{}) *MockWorkspaceInterface_RecursiveList_Call {
	return &MockWorkspaceInterface_RecursiveList_Call{Call: _e.mock.On("RecursiveList", ctx, path)}
}

func (_c *MockWorkspaceInterface_RecursiveList_Call) Run(run func(ctx context.Context, path string)) *MockWorkspaceInterface_RecursiveList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockWorkspaceInterface_RecursiveList_Call) Return(_a0 []workspace.ObjectInfo, _a1 error) *MockWorkspaceInterface_RecursiveList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWorkspaceInterface_RecursiveList_Call) RunAndReturn(run func(context.Context, string) ([]workspace.ObjectInfo, error)) *MockWorkspaceInterface_RecursiveList_Call {
	_c.Call.Return(run)
	return _c
}

// SetPermissions provides a mock function with given fields: ctx, request
func (_m *MockWorkspaceInterface) SetPermissions(ctx context.Context, request workspace.WorkspaceObjectPermissionsRequest) (*workspace.WorkspaceObjectPermissions, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for SetPermissions")
	}

	var r0 *workspace.WorkspaceObjectPermissions
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, workspace.WorkspaceObjectPermissionsRequest) (*workspace.WorkspaceObjectPermissions, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, workspace.WorkspaceObjectPermissionsRequest) *workspace.WorkspaceObjectPermissions); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspace.WorkspaceObjectPermissions)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, workspace.WorkspaceObjectPermissionsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWorkspaceInterface_SetPermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetPermissions'
type MockWorkspaceInterface_SetPermissions_Call struct {
	*mock.Call
}

// SetPermissions is a helper method to define mock.On call
//   - ctx context.Context
//   - request workspace.WorkspaceObjectPermissionsRequest
func (_e *MockWorkspaceInterface_Expecter) SetPermissions(ctx interface{}, request interface{}) *MockWorkspaceInterface_SetPermissions_Call {
	return &MockWorkspaceInterface_SetPermissions_Call{Call: _e.mock.On("SetPermissions", ctx, request)}
}

func (_c *MockWorkspaceInterface_SetPermissions_Call) Run(run func(ctx context.Context, request workspace.WorkspaceObjectPermissionsRequest)) *MockWorkspaceInterface_SetPermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(workspace.WorkspaceObjectPermissionsRequest))
	})
	return _c
}

func (_c *MockWorkspaceInterface_SetPermissions_Call) Return(_a0 *workspace.WorkspaceObjectPermissions, _a1 error) *MockWorkspaceInterface_SetPermissions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWorkspaceInterface_SetPermissions_Call) RunAndReturn(run func(context.Context, workspace.WorkspaceObjectPermissionsRequest) (*workspace.WorkspaceObjectPermissions, error)) *MockWorkspaceInterface_SetPermissions_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePermissions provides a mock function with given fields: ctx, request
func (_m *MockWorkspaceInterface) UpdatePermissions(ctx context.Context, request workspace.WorkspaceObjectPermissionsRequest) (*workspace.WorkspaceObjectPermissions, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePermissions")
	}

	var r0 *workspace.WorkspaceObjectPermissions
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, workspace.WorkspaceObjectPermissionsRequest) (*workspace.WorkspaceObjectPermissions, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, workspace.WorkspaceObjectPermissionsRequest) *workspace.WorkspaceObjectPermissions); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspace.WorkspaceObjectPermissions)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, workspace.WorkspaceObjectPermissionsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWorkspaceInterface_UpdatePermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePermissions'
type MockWorkspaceInterface_UpdatePermissions_Call struct {
	*mock.Call
}

// UpdatePermissions is a helper method to define mock.On call
//   - ctx context.Context
//   - request workspace.WorkspaceObjectPermissionsRequest
func (_e *MockWorkspaceInterface_Expecter) UpdatePermissions(ctx interface{}, request interface{}) *MockWorkspaceInterface_UpdatePermissions_Call {
	return &MockWorkspaceInterface_UpdatePermissions_Call{Call: _e.mock.On("UpdatePermissions", ctx, request)}
}

func (_c *MockWorkspaceInterface_UpdatePermissions_Call) Run(run func(ctx context.Context, request workspace.WorkspaceObjectPermissionsRequest)) *MockWorkspaceInterface_UpdatePermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(workspace.WorkspaceObjectPermissionsRequest))
	})
	return _c
}

func (_c *MockWorkspaceInterface_UpdatePermissions_Call) Return(_a0 *workspace.WorkspaceObjectPermissions, _a1 error) *MockWorkspaceInterface_UpdatePermissions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWorkspaceInterface_UpdatePermissions_Call) RunAndReturn(run func(context.Context, workspace.WorkspaceObjectPermissionsRequest) (*workspace.WorkspaceObjectPermissions, error)) *MockWorkspaceInterface_UpdatePermissions_Call {
	_c.Call.Return(run)
	return _c
}

// Upload provides a mock function with given fields: ctx, path, r, opts
func (_m *MockWorkspaceInterface) Upload(ctx context.Context, path string, r io.Reader, opts ...func(*workspace.Import)) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, path, r)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Upload")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...func(*workspace.Import)) error); ok {
		r0 = rf(ctx, path, r, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWorkspaceInterface_Upload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upload'
type MockWorkspaceInterface_Upload_Call struct {
	*mock.Call
}

// Upload is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
//   - r io.Reader
//   - opts ...func(*workspace.Import)
func (_e *MockWorkspaceInterface_Expecter) Upload(ctx interface{}, path interface{}, r interface{}, opts ...interface{}) *MockWorkspaceInterface_Upload_Call {
	return &MockWorkspaceInterface_Upload_Call{Call: _e.mock.On("Upload",
		append([]interface{}{ctx, path, r}, opts...)...)}
}

func (_c *MockWorkspaceInterface_Upload_Call) Run(run func(ctx context.Context, path string, r io.Reader, opts ...func(*workspace.Import))) *MockWorkspaceInterface_Upload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*workspace.Import), len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(func(*workspace.Import))
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockWorkspaceInterface_Upload_Call) Return(_a0 error) *MockWorkspaceInterface_Upload_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWorkspaceInterface_Upload_Call) RunAndReturn(run func(context.Context, string, io.Reader, ...func(*workspace.Import)) error) *MockWorkspaceInterface_Upload_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockWorkspaceInterface) WithImpl(impl workspace.WorkspaceService) workspace.WorkspaceInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 workspace.WorkspaceInterface
	if rf, ok := ret.Get(0).(func(workspace.WorkspaceService) workspace.WorkspaceInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(workspace.WorkspaceInterface)
		}
	}

	return r0
}

// MockWorkspaceInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockWorkspaceInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl workspace.WorkspaceService
func (_e *MockWorkspaceInterface_Expecter) WithImpl(impl interface{}) *MockWorkspaceInterface_WithImpl_Call {
	return &MockWorkspaceInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockWorkspaceInterface_WithImpl_Call) Run(run func(impl workspace.WorkspaceService)) *MockWorkspaceInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(workspace.WorkspaceService))
	})
	return _c
}

func (_c *MockWorkspaceInterface_WithImpl_Call) Return(_a0 workspace.WorkspaceInterface) *MockWorkspaceInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWorkspaceInterface_WithImpl_Call) RunAndReturn(run func(workspace.WorkspaceService) workspace.WorkspaceInterface) *MockWorkspaceInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// WriteFile provides a mock function with given fields: ctx, name, data
func (_m *MockWorkspaceInterface) WriteFile(ctx context.Context, name string, data []byte) error {
	ret := _m.Called(ctx, name, data)

	if len(ret) == 0 {
		panic("no return value specified for WriteFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) error); ok {
		r0 = rf(ctx, name, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWorkspaceInterface_WriteFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteFile'
type MockWorkspaceInterface_WriteFile_Call struct {
	*mock.Call
}

// WriteFile is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - data []byte
func (_e *MockWorkspaceInterface_Expecter) WriteFile(ctx interface{}, name interface{}, data interface{}) *MockWorkspaceInterface_WriteFile_Call {
	return &MockWorkspaceInterface_WriteFile_Call{Call: _e.mock.On("WriteFile", ctx, name, data)}
}

func (_c *MockWorkspaceInterface_WriteFile_Call) Run(run func(ctx context.Context, name string, data []byte)) *MockWorkspaceInterface_WriteFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]byte))
	})
	return _c
}

func (_c *MockWorkspaceInterface_WriteFile_Call) Return(_a0 error) *MockWorkspaceInterface_WriteFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWorkspaceInterface_WriteFile_Call) RunAndReturn(run func(context.Context, string, []byte) error) *MockWorkspaceInterface_WriteFile_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWorkspaceInterface creates a new instance of MockWorkspaceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWorkspaceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWorkspaceInterface {
	mock := &MockWorkspaceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
