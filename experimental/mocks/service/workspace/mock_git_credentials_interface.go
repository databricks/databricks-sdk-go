// Code generated by mockery v2.43.0. DO NOT EDIT.

package workspace

import (
	context "context"

	listing "github.com/databricks/databricks-sdk-go/listing"
	mock "github.com/stretchr/testify/mock"

	workspace "github.com/databricks/databricks-sdk-go/service/workspace"
)

// MockGitCredentialsInterface is an autogenerated mock type for the GitCredentialsInterface type
type MockGitCredentialsInterface struct {
	mock.Mock
}

type MockGitCredentialsInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGitCredentialsInterface) EXPECT() *MockGitCredentialsInterface_Expecter {
	return &MockGitCredentialsInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, request
func (_m *MockGitCredentialsInterface) Create(ctx context.Context, request workspace.CreateCredentials) (*workspace.CreateCredentialsResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *workspace.CreateCredentialsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, workspace.CreateCredentials) (*workspace.CreateCredentialsResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, workspace.CreateCredentials) *workspace.CreateCredentialsResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspace.CreateCredentialsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, workspace.CreateCredentials) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGitCredentialsInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockGitCredentialsInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - request workspace.CreateCredentials
func (_e *MockGitCredentialsInterface_Expecter) Create(ctx interface{}, request interface{}) *MockGitCredentialsInterface_Create_Call {
	return &MockGitCredentialsInterface_Create_Call{Call: _e.mock.On("Create", ctx, request)}
}

func (_c *MockGitCredentialsInterface_Create_Call) Run(run func(ctx context.Context, request workspace.CreateCredentials)) *MockGitCredentialsInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(workspace.CreateCredentials))
	})
	return _c
}

func (_c *MockGitCredentialsInterface_Create_Call) Return(_a0 *workspace.CreateCredentialsResponse, _a1 error) *MockGitCredentialsInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGitCredentialsInterface_Create_Call) RunAndReturn(run func(context.Context, workspace.CreateCredentials) (*workspace.CreateCredentialsResponse, error)) *MockGitCredentialsInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CredentialInfoGitProviderToCredentialIdMap provides a mock function with given fields: ctx
func (_m *MockGitCredentialsInterface) CredentialInfoGitProviderToCredentialIdMap(ctx context.Context) (map[string]int64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CredentialInfoGitProviderToCredentialIdMap")
	}

	var r0 map[string]int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (map[string]int64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) map[string]int64); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]int64)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGitCredentialsInterface_CredentialInfoGitProviderToCredentialIdMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CredentialInfoGitProviderToCredentialIdMap'
type MockGitCredentialsInterface_CredentialInfoGitProviderToCredentialIdMap_Call struct {
	*mock.Call
}

// CredentialInfoGitProviderToCredentialIdMap is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockGitCredentialsInterface_Expecter) CredentialInfoGitProviderToCredentialIdMap(ctx interface{}) *MockGitCredentialsInterface_CredentialInfoGitProviderToCredentialIdMap_Call {
	return &MockGitCredentialsInterface_CredentialInfoGitProviderToCredentialIdMap_Call{Call: _e.mock.On("CredentialInfoGitProviderToCredentialIdMap", ctx)}
}

func (_c *MockGitCredentialsInterface_CredentialInfoGitProviderToCredentialIdMap_Call) Run(run func(ctx context.Context)) *MockGitCredentialsInterface_CredentialInfoGitProviderToCredentialIdMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockGitCredentialsInterface_CredentialInfoGitProviderToCredentialIdMap_Call) Return(_a0 map[string]int64, _a1 error) *MockGitCredentialsInterface_CredentialInfoGitProviderToCredentialIdMap_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGitCredentialsInterface_CredentialInfoGitProviderToCredentialIdMap_Call) RunAndReturn(run func(context.Context) (map[string]int64, error)) *MockGitCredentialsInterface_CredentialInfoGitProviderToCredentialIdMap_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, request
func (_m *MockGitCredentialsInterface) Delete(ctx context.Context, request workspace.DeleteGitCredentialRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, workspace.DeleteGitCredentialRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGitCredentialsInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockGitCredentialsInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - request workspace.DeleteGitCredentialRequest
func (_e *MockGitCredentialsInterface_Expecter) Delete(ctx interface{}, request interface{}) *MockGitCredentialsInterface_Delete_Call {
	return &MockGitCredentialsInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, request)}
}

func (_c *MockGitCredentialsInterface_Delete_Call) Run(run func(ctx context.Context, request workspace.DeleteGitCredentialRequest)) *MockGitCredentialsInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(workspace.DeleteGitCredentialRequest))
	})
	return _c
}

func (_c *MockGitCredentialsInterface_Delete_Call) Return(_a0 error) *MockGitCredentialsInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGitCredentialsInterface_Delete_Call) RunAndReturn(run func(context.Context, workspace.DeleteGitCredentialRequest) error) *MockGitCredentialsInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByCredentialId provides a mock function with given fields: ctx, credentialId
func (_m *MockGitCredentialsInterface) DeleteByCredentialId(ctx context.Context, credentialId int64) error {
	ret := _m.Called(ctx, credentialId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByCredentialId")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, credentialId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGitCredentialsInterface_DeleteByCredentialId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByCredentialId'
type MockGitCredentialsInterface_DeleteByCredentialId_Call struct {
	*mock.Call
}

// DeleteByCredentialId is a helper method to define mock.On call
//   - ctx context.Context
//   - credentialId int64
func (_e *MockGitCredentialsInterface_Expecter) DeleteByCredentialId(ctx interface{}, credentialId interface{}) *MockGitCredentialsInterface_DeleteByCredentialId_Call {
	return &MockGitCredentialsInterface_DeleteByCredentialId_Call{Call: _e.mock.On("DeleteByCredentialId", ctx, credentialId)}
}

func (_c *MockGitCredentialsInterface_DeleteByCredentialId_Call) Run(run func(ctx context.Context, credentialId int64)) *MockGitCredentialsInterface_DeleteByCredentialId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockGitCredentialsInterface_DeleteByCredentialId_Call) Return(_a0 error) *MockGitCredentialsInterface_DeleteByCredentialId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGitCredentialsInterface_DeleteByCredentialId_Call) RunAndReturn(run func(context.Context, int64) error) *MockGitCredentialsInterface_DeleteByCredentialId_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, request
func (_m *MockGitCredentialsInterface) Get(ctx context.Context, request workspace.GetGitCredentialRequest) (*workspace.CredentialInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *workspace.CredentialInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, workspace.GetGitCredentialRequest) (*workspace.CredentialInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, workspace.GetGitCredentialRequest) *workspace.CredentialInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspace.CredentialInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, workspace.GetGitCredentialRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGitCredentialsInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockGitCredentialsInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - request workspace.GetGitCredentialRequest
func (_e *MockGitCredentialsInterface_Expecter) Get(ctx interface{}, request interface{}) *MockGitCredentialsInterface_Get_Call {
	return &MockGitCredentialsInterface_Get_Call{Call: _e.mock.On("Get", ctx, request)}
}

func (_c *MockGitCredentialsInterface_Get_Call) Run(run func(ctx context.Context, request workspace.GetGitCredentialRequest)) *MockGitCredentialsInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(workspace.GetGitCredentialRequest))
	})
	return _c
}

func (_c *MockGitCredentialsInterface_Get_Call) Return(_a0 *workspace.CredentialInfo, _a1 error) *MockGitCredentialsInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGitCredentialsInterface_Get_Call) RunAndReturn(run func(context.Context, workspace.GetGitCredentialRequest) (*workspace.CredentialInfo, error)) *MockGitCredentialsInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByCredentialId provides a mock function with given fields: ctx, credentialId
func (_m *MockGitCredentialsInterface) GetByCredentialId(ctx context.Context, credentialId int64) (*workspace.CredentialInfo, error) {
	ret := _m.Called(ctx, credentialId)

	if len(ret) == 0 {
		panic("no return value specified for GetByCredentialId")
	}

	var r0 *workspace.CredentialInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*workspace.CredentialInfo, error)); ok {
		return rf(ctx, credentialId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *workspace.CredentialInfo); ok {
		r0 = rf(ctx, credentialId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspace.CredentialInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, credentialId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGitCredentialsInterface_GetByCredentialId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByCredentialId'
type MockGitCredentialsInterface_GetByCredentialId_Call struct {
	*mock.Call
}

// GetByCredentialId is a helper method to define mock.On call
//   - ctx context.Context
//   - credentialId int64
func (_e *MockGitCredentialsInterface_Expecter) GetByCredentialId(ctx interface{}, credentialId interface{}) *MockGitCredentialsInterface_GetByCredentialId_Call {
	return &MockGitCredentialsInterface_GetByCredentialId_Call{Call: _e.mock.On("GetByCredentialId", ctx, credentialId)}
}

func (_c *MockGitCredentialsInterface_GetByCredentialId_Call) Run(run func(ctx context.Context, credentialId int64)) *MockGitCredentialsInterface_GetByCredentialId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockGitCredentialsInterface_GetByCredentialId_Call) Return(_a0 *workspace.CredentialInfo, _a1 error) *MockGitCredentialsInterface_GetByCredentialId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGitCredentialsInterface_GetByCredentialId_Call) RunAndReturn(run func(context.Context, int64) (*workspace.CredentialInfo, error)) *MockGitCredentialsInterface_GetByCredentialId_Call {
	_c.Call.Return(run)
	return _c
}

// GetByGitProvider provides a mock function with given fields: ctx, name
func (_m *MockGitCredentialsInterface) GetByGitProvider(ctx context.Context, name string) (*workspace.CredentialInfo, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetByGitProvider")
	}

	var r0 *workspace.CredentialInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*workspace.CredentialInfo, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *workspace.CredentialInfo); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspace.CredentialInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGitCredentialsInterface_GetByGitProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByGitProvider'
type MockGitCredentialsInterface_GetByGitProvider_Call struct {
	*mock.Call
}

// GetByGitProvider is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockGitCredentialsInterface_Expecter) GetByGitProvider(ctx interface{}, name interface{}) *MockGitCredentialsInterface_GetByGitProvider_Call {
	return &MockGitCredentialsInterface_GetByGitProvider_Call{Call: _e.mock.On("GetByGitProvider", ctx, name)}
}

func (_c *MockGitCredentialsInterface_GetByGitProvider_Call) Run(run func(ctx context.Context, name string)) *MockGitCredentialsInterface_GetByGitProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockGitCredentialsInterface_GetByGitProvider_Call) Return(_a0 *workspace.CredentialInfo, _a1 error) *MockGitCredentialsInterface_GetByGitProvider_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGitCredentialsInterface_GetByGitProvider_Call) RunAndReturn(run func(context.Context, string) (*workspace.CredentialInfo, error)) *MockGitCredentialsInterface_GetByGitProvider_Call {
	_c.Call.Return(run)
	return _c
}

// Impl provides a mock function with given fields:
func (_m *MockGitCredentialsInterface) Impl() workspace.GitCredentialsService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 workspace.GitCredentialsService
	if rf, ok := ret.Get(0).(func() workspace.GitCredentialsService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(workspace.GitCredentialsService)
		}
	}

	return r0
}

// MockGitCredentialsInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockGitCredentialsInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockGitCredentialsInterface_Expecter) Impl() *MockGitCredentialsInterface_Impl_Call {
	return &MockGitCredentialsInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockGitCredentialsInterface_Impl_Call) Run(run func()) *MockGitCredentialsInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGitCredentialsInterface_Impl_Call) Return(_a0 workspace.GitCredentialsService) *MockGitCredentialsInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGitCredentialsInterface_Impl_Call) RunAndReturn(run func() workspace.GitCredentialsService) *MockGitCredentialsInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx
func (_m *MockGitCredentialsInterface) List(ctx context.Context) listing.Iterator[workspace.CredentialInfo] {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 listing.Iterator[workspace.CredentialInfo]
	if rf, ok := ret.Get(0).(func(context.Context) listing.Iterator[workspace.CredentialInfo]); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listing.Iterator[workspace.CredentialInfo])
		}
	}

	return r0
}

// MockGitCredentialsInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockGitCredentialsInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockGitCredentialsInterface_Expecter) List(ctx interface{}) *MockGitCredentialsInterface_List_Call {
	return &MockGitCredentialsInterface_List_Call{Call: _e.mock.On("List", ctx)}
}

func (_c *MockGitCredentialsInterface_List_Call) Run(run func(ctx context.Context)) *MockGitCredentialsInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockGitCredentialsInterface_List_Call) Return(_a0 listing.Iterator[workspace.CredentialInfo]) *MockGitCredentialsInterface_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGitCredentialsInterface_List_Call) RunAndReturn(run func(context.Context) listing.Iterator[workspace.CredentialInfo]) *MockGitCredentialsInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListAll provides a mock function with given fields: ctx
func (_m *MockGitCredentialsInterface) ListAll(ctx context.Context) ([]workspace.CredentialInfo, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListAll")
	}

	var r0 []workspace.CredentialInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]workspace.CredentialInfo, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []workspace.CredentialInfo); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]workspace.CredentialInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGitCredentialsInterface_ListAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAll'
type MockGitCredentialsInterface_ListAll_Call struct {
	*mock.Call
}

// ListAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockGitCredentialsInterface_Expecter) ListAll(ctx interface{}) *MockGitCredentialsInterface_ListAll_Call {
	return &MockGitCredentialsInterface_ListAll_Call{Call: _e.mock.On("ListAll", ctx)}
}

func (_c *MockGitCredentialsInterface_ListAll_Call) Run(run func(ctx context.Context)) *MockGitCredentialsInterface_ListAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockGitCredentialsInterface_ListAll_Call) Return(_a0 []workspace.CredentialInfo, _a1 error) *MockGitCredentialsInterface_ListAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGitCredentialsInterface_ListAll_Call) RunAndReturn(run func(context.Context) ([]workspace.CredentialInfo, error)) *MockGitCredentialsInterface_ListAll_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, request
func (_m *MockGitCredentialsInterface) Update(ctx context.Context, request workspace.UpdateCredentials) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, workspace.UpdateCredentials) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGitCredentialsInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockGitCredentialsInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - request workspace.UpdateCredentials
func (_e *MockGitCredentialsInterface_Expecter) Update(ctx interface{}, request interface{}) *MockGitCredentialsInterface_Update_Call {
	return &MockGitCredentialsInterface_Update_Call{Call: _e.mock.On("Update", ctx, request)}
}

func (_c *MockGitCredentialsInterface_Update_Call) Run(run func(ctx context.Context, request workspace.UpdateCredentials)) *MockGitCredentialsInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(workspace.UpdateCredentials))
	})
	return _c
}

func (_c *MockGitCredentialsInterface_Update_Call) Return(_a0 error) *MockGitCredentialsInterface_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGitCredentialsInterface_Update_Call) RunAndReturn(run func(context.Context, workspace.UpdateCredentials) error) *MockGitCredentialsInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockGitCredentialsInterface) WithImpl(impl workspace.GitCredentialsService) workspace.GitCredentialsInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 workspace.GitCredentialsInterface
	if rf, ok := ret.Get(0).(func(workspace.GitCredentialsService) workspace.GitCredentialsInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(workspace.GitCredentialsInterface)
		}
	}

	return r0
}

// MockGitCredentialsInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockGitCredentialsInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl workspace.GitCredentialsService
func (_e *MockGitCredentialsInterface_Expecter) WithImpl(impl interface{}) *MockGitCredentialsInterface_WithImpl_Call {
	return &MockGitCredentialsInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockGitCredentialsInterface_WithImpl_Call) Run(run func(impl workspace.GitCredentialsService)) *MockGitCredentialsInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(workspace.GitCredentialsService))
	})
	return _c
}

func (_c *MockGitCredentialsInterface_WithImpl_Call) Return(_a0 workspace.GitCredentialsInterface) *MockGitCredentialsInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGitCredentialsInterface_WithImpl_Call) RunAndReturn(run func(workspace.GitCredentialsService) workspace.GitCredentialsInterface) *MockGitCredentialsInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGitCredentialsInterface creates a new instance of MockGitCredentialsInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGitCredentialsInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGitCredentialsInterface {
	mock := &MockGitCredentialsInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
