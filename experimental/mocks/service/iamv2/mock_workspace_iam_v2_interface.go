// Code generated by mockery v2.53.2. DO NOT EDIT.

package iamv2

import (
	context "context"

	iamv2 "github.com/databricks/databricks-sdk-go/service/iamv2"
	mock "github.com/stretchr/testify/mock"
)

// MockWorkspaceIamV2Interface is an autogenerated mock type for the WorkspaceIamV2Interface type
type MockWorkspaceIamV2Interface struct {
	mock.Mock
}

type MockWorkspaceIamV2Interface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWorkspaceIamV2Interface) EXPECT() *MockWorkspaceIamV2Interface_Expecter {
	return &MockWorkspaceIamV2Interface_Expecter{mock: &_m.Mock}
}

// CreateGroupProxy provides a mock function with given fields: ctx, request
func (_m *MockWorkspaceIamV2Interface) CreateGroupProxy(ctx context.Context, request iamv2.CreateGroupProxyRequest) (*iamv2.Group, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroupProxy")
	}

	var r0 *iamv2.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.CreateGroupProxyRequest) (*iamv2.Group, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.CreateGroupProxyRequest) *iamv2.Group); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iamv2.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iamv2.CreateGroupProxyRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWorkspaceIamV2Interface_CreateGroupProxy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGroupProxy'
type MockWorkspaceIamV2Interface_CreateGroupProxy_Call struct {
	*mock.Call
}

// CreateGroupProxy is a helper method to define mock.On call
//   - ctx context.Context
//   - request iamv2.CreateGroupProxyRequest
func (_e *MockWorkspaceIamV2Interface_Expecter) CreateGroupProxy(ctx interface{}, request interface{}) *MockWorkspaceIamV2Interface_CreateGroupProxy_Call {
	return &MockWorkspaceIamV2Interface_CreateGroupProxy_Call{Call: _e.mock.On("CreateGroupProxy", ctx, request)}
}

func (_c *MockWorkspaceIamV2Interface_CreateGroupProxy_Call) Run(run func(ctx context.Context, request iamv2.CreateGroupProxyRequest)) *MockWorkspaceIamV2Interface_CreateGroupProxy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iamv2.CreateGroupProxyRequest))
	})
	return _c
}

func (_c *MockWorkspaceIamV2Interface_CreateGroupProxy_Call) Return(_a0 *iamv2.Group, _a1 error) *MockWorkspaceIamV2Interface_CreateGroupProxy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWorkspaceIamV2Interface_CreateGroupProxy_Call) RunAndReturn(run func(context.Context, iamv2.CreateGroupProxyRequest) (*iamv2.Group, error)) *MockWorkspaceIamV2Interface_CreateGroupProxy_Call {
	_c.Call.Return(run)
	return _c
}

// CreateServicePrincipalProxy provides a mock function with given fields: ctx, request
func (_m *MockWorkspaceIamV2Interface) CreateServicePrincipalProxy(ctx context.Context, request iamv2.CreateServicePrincipalProxyRequest) (*iamv2.ServicePrincipal, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateServicePrincipalProxy")
	}

	var r0 *iamv2.ServicePrincipal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.CreateServicePrincipalProxyRequest) (*iamv2.ServicePrincipal, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.CreateServicePrincipalProxyRequest) *iamv2.ServicePrincipal); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iamv2.ServicePrincipal)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iamv2.CreateServicePrincipalProxyRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWorkspaceIamV2Interface_CreateServicePrincipalProxy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateServicePrincipalProxy'
type MockWorkspaceIamV2Interface_CreateServicePrincipalProxy_Call struct {
	*mock.Call
}

// CreateServicePrincipalProxy is a helper method to define mock.On call
//   - ctx context.Context
//   - request iamv2.CreateServicePrincipalProxyRequest
func (_e *MockWorkspaceIamV2Interface_Expecter) CreateServicePrincipalProxy(ctx interface{}, request interface{}) *MockWorkspaceIamV2Interface_CreateServicePrincipalProxy_Call {
	return &MockWorkspaceIamV2Interface_CreateServicePrincipalProxy_Call{Call: _e.mock.On("CreateServicePrincipalProxy", ctx, request)}
}

func (_c *MockWorkspaceIamV2Interface_CreateServicePrincipalProxy_Call) Run(run func(ctx context.Context, request iamv2.CreateServicePrincipalProxyRequest)) *MockWorkspaceIamV2Interface_CreateServicePrincipalProxy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iamv2.CreateServicePrincipalProxyRequest))
	})
	return _c
}

func (_c *MockWorkspaceIamV2Interface_CreateServicePrincipalProxy_Call) Return(_a0 *iamv2.ServicePrincipal, _a1 error) *MockWorkspaceIamV2Interface_CreateServicePrincipalProxy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWorkspaceIamV2Interface_CreateServicePrincipalProxy_Call) RunAndReturn(run func(context.Context, iamv2.CreateServicePrincipalProxyRequest) (*iamv2.ServicePrincipal, error)) *MockWorkspaceIamV2Interface_CreateServicePrincipalProxy_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUserProxy provides a mock function with given fields: ctx, request
func (_m *MockWorkspaceIamV2Interface) CreateUserProxy(ctx context.Context, request iamv2.CreateUserProxyRequest) (*iamv2.User, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateUserProxy")
	}

	var r0 *iamv2.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.CreateUserProxyRequest) (*iamv2.User, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.CreateUserProxyRequest) *iamv2.User); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iamv2.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iamv2.CreateUserProxyRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWorkspaceIamV2Interface_CreateUserProxy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUserProxy'
type MockWorkspaceIamV2Interface_CreateUserProxy_Call struct {
	*mock.Call
}

// CreateUserProxy is a helper method to define mock.On call
//   - ctx context.Context
//   - request iamv2.CreateUserProxyRequest
func (_e *MockWorkspaceIamV2Interface_Expecter) CreateUserProxy(ctx interface{}, request interface{}) *MockWorkspaceIamV2Interface_CreateUserProxy_Call {
	return &MockWorkspaceIamV2Interface_CreateUserProxy_Call{Call: _e.mock.On("CreateUserProxy", ctx, request)}
}

func (_c *MockWorkspaceIamV2Interface_CreateUserProxy_Call) Run(run func(ctx context.Context, request iamv2.CreateUserProxyRequest)) *MockWorkspaceIamV2Interface_CreateUserProxy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iamv2.CreateUserProxyRequest))
	})
	return _c
}

func (_c *MockWorkspaceIamV2Interface_CreateUserProxy_Call) Return(_a0 *iamv2.User, _a1 error) *MockWorkspaceIamV2Interface_CreateUserProxy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWorkspaceIamV2Interface_CreateUserProxy_Call) RunAndReturn(run func(context.Context, iamv2.CreateUserProxyRequest) (*iamv2.User, error)) *MockWorkspaceIamV2Interface_CreateUserProxy_Call {
	_c.Call.Return(run)
	return _c
}

// CreateWorkspaceAccessDetailLocal provides a mock function with given fields: ctx, request
func (_m *MockWorkspaceIamV2Interface) CreateWorkspaceAccessDetailLocal(ctx context.Context, request iamv2.CreateWorkspaceAccessDetailLocalRequest) (*iamv2.WorkspaceAccessDetail, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateWorkspaceAccessDetailLocal")
	}

	var r0 *iamv2.WorkspaceAccessDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.CreateWorkspaceAccessDetailLocalRequest) (*iamv2.WorkspaceAccessDetail, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.CreateWorkspaceAccessDetailLocalRequest) *iamv2.WorkspaceAccessDetail); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iamv2.WorkspaceAccessDetail)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iamv2.CreateWorkspaceAccessDetailLocalRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWorkspaceIamV2Interface_CreateWorkspaceAccessDetailLocal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateWorkspaceAccessDetailLocal'
type MockWorkspaceIamV2Interface_CreateWorkspaceAccessDetailLocal_Call struct {
	*mock.Call
}

// CreateWorkspaceAccessDetailLocal is a helper method to define mock.On call
//   - ctx context.Context
//   - request iamv2.CreateWorkspaceAccessDetailLocalRequest
func (_e *MockWorkspaceIamV2Interface_Expecter) CreateWorkspaceAccessDetailLocal(ctx interface{}, request interface{}) *MockWorkspaceIamV2Interface_CreateWorkspaceAccessDetailLocal_Call {
	return &MockWorkspaceIamV2Interface_CreateWorkspaceAccessDetailLocal_Call{Call: _e.mock.On("CreateWorkspaceAccessDetailLocal", ctx, request)}
}

func (_c *MockWorkspaceIamV2Interface_CreateWorkspaceAccessDetailLocal_Call) Run(run func(ctx context.Context, request iamv2.CreateWorkspaceAccessDetailLocalRequest)) *MockWorkspaceIamV2Interface_CreateWorkspaceAccessDetailLocal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iamv2.CreateWorkspaceAccessDetailLocalRequest))
	})
	return _c
}

func (_c *MockWorkspaceIamV2Interface_CreateWorkspaceAccessDetailLocal_Call) Return(_a0 *iamv2.WorkspaceAccessDetail, _a1 error) *MockWorkspaceIamV2Interface_CreateWorkspaceAccessDetailLocal_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWorkspaceIamV2Interface_CreateWorkspaceAccessDetailLocal_Call) RunAndReturn(run func(context.Context, iamv2.CreateWorkspaceAccessDetailLocalRequest) (*iamv2.WorkspaceAccessDetail, error)) *MockWorkspaceIamV2Interface_CreateWorkspaceAccessDetailLocal_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGroupProxy provides a mock function with given fields: ctx, request
func (_m *MockWorkspaceIamV2Interface) DeleteGroupProxy(ctx context.Context, request iamv2.DeleteGroupProxyRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGroupProxy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.DeleteGroupProxyRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWorkspaceIamV2Interface_DeleteGroupProxy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGroupProxy'
type MockWorkspaceIamV2Interface_DeleteGroupProxy_Call struct {
	*mock.Call
}

// DeleteGroupProxy is a helper method to define mock.On call
//   - ctx context.Context
//   - request iamv2.DeleteGroupProxyRequest
func (_e *MockWorkspaceIamV2Interface_Expecter) DeleteGroupProxy(ctx interface{}, request interface{}) *MockWorkspaceIamV2Interface_DeleteGroupProxy_Call {
	return &MockWorkspaceIamV2Interface_DeleteGroupProxy_Call{Call: _e.mock.On("DeleteGroupProxy", ctx, request)}
}

func (_c *MockWorkspaceIamV2Interface_DeleteGroupProxy_Call) Run(run func(ctx context.Context, request iamv2.DeleteGroupProxyRequest)) *MockWorkspaceIamV2Interface_DeleteGroupProxy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iamv2.DeleteGroupProxyRequest))
	})
	return _c
}

func (_c *MockWorkspaceIamV2Interface_DeleteGroupProxy_Call) Return(_a0 error) *MockWorkspaceIamV2Interface_DeleteGroupProxy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWorkspaceIamV2Interface_DeleteGroupProxy_Call) RunAndReturn(run func(context.Context, iamv2.DeleteGroupProxyRequest) error) *MockWorkspaceIamV2Interface_DeleteGroupProxy_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteServicePrincipalProxy provides a mock function with given fields: ctx, request
func (_m *MockWorkspaceIamV2Interface) DeleteServicePrincipalProxy(ctx context.Context, request iamv2.DeleteServicePrincipalProxyRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for DeleteServicePrincipalProxy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.DeleteServicePrincipalProxyRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWorkspaceIamV2Interface_DeleteServicePrincipalProxy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteServicePrincipalProxy'
type MockWorkspaceIamV2Interface_DeleteServicePrincipalProxy_Call struct {
	*mock.Call
}

// DeleteServicePrincipalProxy is a helper method to define mock.On call
//   - ctx context.Context
//   - request iamv2.DeleteServicePrincipalProxyRequest
func (_e *MockWorkspaceIamV2Interface_Expecter) DeleteServicePrincipalProxy(ctx interface{}, request interface{}) *MockWorkspaceIamV2Interface_DeleteServicePrincipalProxy_Call {
	return &MockWorkspaceIamV2Interface_DeleteServicePrincipalProxy_Call{Call: _e.mock.On("DeleteServicePrincipalProxy", ctx, request)}
}

func (_c *MockWorkspaceIamV2Interface_DeleteServicePrincipalProxy_Call) Run(run func(ctx context.Context, request iamv2.DeleteServicePrincipalProxyRequest)) *MockWorkspaceIamV2Interface_DeleteServicePrincipalProxy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iamv2.DeleteServicePrincipalProxyRequest))
	})
	return _c
}

func (_c *MockWorkspaceIamV2Interface_DeleteServicePrincipalProxy_Call) Return(_a0 error) *MockWorkspaceIamV2Interface_DeleteServicePrincipalProxy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWorkspaceIamV2Interface_DeleteServicePrincipalProxy_Call) RunAndReturn(run func(context.Context, iamv2.DeleteServicePrincipalProxyRequest) error) *MockWorkspaceIamV2Interface_DeleteServicePrincipalProxy_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUserProxy provides a mock function with given fields: ctx, request
func (_m *MockWorkspaceIamV2Interface) DeleteUserProxy(ctx context.Context, request iamv2.DeleteUserProxyRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserProxy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.DeleteUserProxyRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWorkspaceIamV2Interface_DeleteUserProxy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUserProxy'
type MockWorkspaceIamV2Interface_DeleteUserProxy_Call struct {
	*mock.Call
}

// DeleteUserProxy is a helper method to define mock.On call
//   - ctx context.Context
//   - request iamv2.DeleteUserProxyRequest
func (_e *MockWorkspaceIamV2Interface_Expecter) DeleteUserProxy(ctx interface{}, request interface{}) *MockWorkspaceIamV2Interface_DeleteUserProxy_Call {
	return &MockWorkspaceIamV2Interface_DeleteUserProxy_Call{Call: _e.mock.On("DeleteUserProxy", ctx, request)}
}

func (_c *MockWorkspaceIamV2Interface_DeleteUserProxy_Call) Run(run func(ctx context.Context, request iamv2.DeleteUserProxyRequest)) *MockWorkspaceIamV2Interface_DeleteUserProxy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iamv2.DeleteUserProxyRequest))
	})
	return _c
}

func (_c *MockWorkspaceIamV2Interface_DeleteUserProxy_Call) Return(_a0 error) *MockWorkspaceIamV2Interface_DeleteUserProxy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWorkspaceIamV2Interface_DeleteUserProxy_Call) RunAndReturn(run func(context.Context, iamv2.DeleteUserProxyRequest) error) *MockWorkspaceIamV2Interface_DeleteUserProxy_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteWorkspaceAccessDetailLocal provides a mock function with given fields: ctx, request
func (_m *MockWorkspaceIamV2Interface) DeleteWorkspaceAccessDetailLocal(ctx context.Context, request iamv2.DeleteWorkspaceAccessDetailLocalRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWorkspaceAccessDetailLocal")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.DeleteWorkspaceAccessDetailLocalRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWorkspaceIamV2Interface_DeleteWorkspaceAccessDetailLocal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteWorkspaceAccessDetailLocal'
type MockWorkspaceIamV2Interface_DeleteWorkspaceAccessDetailLocal_Call struct {
	*mock.Call
}

// DeleteWorkspaceAccessDetailLocal is a helper method to define mock.On call
//   - ctx context.Context
//   - request iamv2.DeleteWorkspaceAccessDetailLocalRequest
func (_e *MockWorkspaceIamV2Interface_Expecter) DeleteWorkspaceAccessDetailLocal(ctx interface{}, request interface{}) *MockWorkspaceIamV2Interface_DeleteWorkspaceAccessDetailLocal_Call {
	return &MockWorkspaceIamV2Interface_DeleteWorkspaceAccessDetailLocal_Call{Call: _e.mock.On("DeleteWorkspaceAccessDetailLocal", ctx, request)}
}

func (_c *MockWorkspaceIamV2Interface_DeleteWorkspaceAccessDetailLocal_Call) Run(run func(ctx context.Context, request iamv2.DeleteWorkspaceAccessDetailLocalRequest)) *MockWorkspaceIamV2Interface_DeleteWorkspaceAccessDetailLocal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iamv2.DeleteWorkspaceAccessDetailLocalRequest))
	})
	return _c
}

func (_c *MockWorkspaceIamV2Interface_DeleteWorkspaceAccessDetailLocal_Call) Return(_a0 error) *MockWorkspaceIamV2Interface_DeleteWorkspaceAccessDetailLocal_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWorkspaceIamV2Interface_DeleteWorkspaceAccessDetailLocal_Call) RunAndReturn(run func(context.Context, iamv2.DeleteWorkspaceAccessDetailLocalRequest) error) *MockWorkspaceIamV2Interface_DeleteWorkspaceAccessDetailLocal_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupProxy provides a mock function with given fields: ctx, request
func (_m *MockWorkspaceIamV2Interface) GetGroupProxy(ctx context.Context, request iamv2.GetGroupProxyRequest) (*iamv2.Group, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupProxy")
	}

	var r0 *iamv2.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.GetGroupProxyRequest) (*iamv2.Group, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.GetGroupProxyRequest) *iamv2.Group); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iamv2.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iamv2.GetGroupProxyRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWorkspaceIamV2Interface_GetGroupProxy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupProxy'
type MockWorkspaceIamV2Interface_GetGroupProxy_Call struct {
	*mock.Call
}

// GetGroupProxy is a helper method to define mock.On call
//   - ctx context.Context
//   - request iamv2.GetGroupProxyRequest
func (_e *MockWorkspaceIamV2Interface_Expecter) GetGroupProxy(ctx interface{}, request interface{}) *MockWorkspaceIamV2Interface_GetGroupProxy_Call {
	return &MockWorkspaceIamV2Interface_GetGroupProxy_Call{Call: _e.mock.On("GetGroupProxy", ctx, request)}
}

func (_c *MockWorkspaceIamV2Interface_GetGroupProxy_Call) Run(run func(ctx context.Context, request iamv2.GetGroupProxyRequest)) *MockWorkspaceIamV2Interface_GetGroupProxy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iamv2.GetGroupProxyRequest))
	})
	return _c
}

func (_c *MockWorkspaceIamV2Interface_GetGroupProxy_Call) Return(_a0 *iamv2.Group, _a1 error) *MockWorkspaceIamV2Interface_GetGroupProxy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWorkspaceIamV2Interface_GetGroupProxy_Call) RunAndReturn(run func(context.Context, iamv2.GetGroupProxyRequest) (*iamv2.Group, error)) *MockWorkspaceIamV2Interface_GetGroupProxy_Call {
	_c.Call.Return(run)
	return _c
}

// GetServicePrincipalProxy provides a mock function with given fields: ctx, request
func (_m *MockWorkspaceIamV2Interface) GetServicePrincipalProxy(ctx context.Context, request iamv2.GetServicePrincipalProxyRequest) (*iamv2.ServicePrincipal, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetServicePrincipalProxy")
	}

	var r0 *iamv2.ServicePrincipal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.GetServicePrincipalProxyRequest) (*iamv2.ServicePrincipal, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.GetServicePrincipalProxyRequest) *iamv2.ServicePrincipal); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iamv2.ServicePrincipal)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iamv2.GetServicePrincipalProxyRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWorkspaceIamV2Interface_GetServicePrincipalProxy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServicePrincipalProxy'
type MockWorkspaceIamV2Interface_GetServicePrincipalProxy_Call struct {
	*mock.Call
}

// GetServicePrincipalProxy is a helper method to define mock.On call
//   - ctx context.Context
//   - request iamv2.GetServicePrincipalProxyRequest
func (_e *MockWorkspaceIamV2Interface_Expecter) GetServicePrincipalProxy(ctx interface{}, request interface{}) *MockWorkspaceIamV2Interface_GetServicePrincipalProxy_Call {
	return &MockWorkspaceIamV2Interface_GetServicePrincipalProxy_Call{Call: _e.mock.On("GetServicePrincipalProxy", ctx, request)}
}

func (_c *MockWorkspaceIamV2Interface_GetServicePrincipalProxy_Call) Run(run func(ctx context.Context, request iamv2.GetServicePrincipalProxyRequest)) *MockWorkspaceIamV2Interface_GetServicePrincipalProxy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iamv2.GetServicePrincipalProxyRequest))
	})
	return _c
}

func (_c *MockWorkspaceIamV2Interface_GetServicePrincipalProxy_Call) Return(_a0 *iamv2.ServicePrincipal, _a1 error) *MockWorkspaceIamV2Interface_GetServicePrincipalProxy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWorkspaceIamV2Interface_GetServicePrincipalProxy_Call) RunAndReturn(run func(context.Context, iamv2.GetServicePrincipalProxyRequest) (*iamv2.ServicePrincipal, error)) *MockWorkspaceIamV2Interface_GetServicePrincipalProxy_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserProxy provides a mock function with given fields: ctx, request
func (_m *MockWorkspaceIamV2Interface) GetUserProxy(ctx context.Context, request iamv2.GetUserProxyRequest) (*iamv2.User, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetUserProxy")
	}

	var r0 *iamv2.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.GetUserProxyRequest) (*iamv2.User, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.GetUserProxyRequest) *iamv2.User); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iamv2.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iamv2.GetUserProxyRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWorkspaceIamV2Interface_GetUserProxy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserProxy'
type MockWorkspaceIamV2Interface_GetUserProxy_Call struct {
	*mock.Call
}

// GetUserProxy is a helper method to define mock.On call
//   - ctx context.Context
//   - request iamv2.GetUserProxyRequest
func (_e *MockWorkspaceIamV2Interface_Expecter) GetUserProxy(ctx interface{}, request interface{}) *MockWorkspaceIamV2Interface_GetUserProxy_Call {
	return &MockWorkspaceIamV2Interface_GetUserProxy_Call{Call: _e.mock.On("GetUserProxy", ctx, request)}
}

func (_c *MockWorkspaceIamV2Interface_GetUserProxy_Call) Run(run func(ctx context.Context, request iamv2.GetUserProxyRequest)) *MockWorkspaceIamV2Interface_GetUserProxy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iamv2.GetUserProxyRequest))
	})
	return _c
}

func (_c *MockWorkspaceIamV2Interface_GetUserProxy_Call) Return(_a0 *iamv2.User, _a1 error) *MockWorkspaceIamV2Interface_GetUserProxy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWorkspaceIamV2Interface_GetUserProxy_Call) RunAndReturn(run func(context.Context, iamv2.GetUserProxyRequest) (*iamv2.User, error)) *MockWorkspaceIamV2Interface_GetUserProxy_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkspaceAccessDetailLocal provides a mock function with given fields: ctx, request
func (_m *MockWorkspaceIamV2Interface) GetWorkspaceAccessDetailLocal(ctx context.Context, request iamv2.GetWorkspaceAccessDetailLocalRequest) (*iamv2.WorkspaceAccessDetail, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkspaceAccessDetailLocal")
	}

	var r0 *iamv2.WorkspaceAccessDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.GetWorkspaceAccessDetailLocalRequest) (*iamv2.WorkspaceAccessDetail, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.GetWorkspaceAccessDetailLocalRequest) *iamv2.WorkspaceAccessDetail); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iamv2.WorkspaceAccessDetail)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iamv2.GetWorkspaceAccessDetailLocalRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWorkspaceIamV2Interface_GetWorkspaceAccessDetailLocal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkspaceAccessDetailLocal'
type MockWorkspaceIamV2Interface_GetWorkspaceAccessDetailLocal_Call struct {
	*mock.Call
}

// GetWorkspaceAccessDetailLocal is a helper method to define mock.On call
//   - ctx context.Context
//   - request iamv2.GetWorkspaceAccessDetailLocalRequest
func (_e *MockWorkspaceIamV2Interface_Expecter) GetWorkspaceAccessDetailLocal(ctx interface{}, request interface{}) *MockWorkspaceIamV2Interface_GetWorkspaceAccessDetailLocal_Call {
	return &MockWorkspaceIamV2Interface_GetWorkspaceAccessDetailLocal_Call{Call: _e.mock.On("GetWorkspaceAccessDetailLocal", ctx, request)}
}

func (_c *MockWorkspaceIamV2Interface_GetWorkspaceAccessDetailLocal_Call) Run(run func(ctx context.Context, request iamv2.GetWorkspaceAccessDetailLocalRequest)) *MockWorkspaceIamV2Interface_GetWorkspaceAccessDetailLocal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iamv2.GetWorkspaceAccessDetailLocalRequest))
	})
	return _c
}

func (_c *MockWorkspaceIamV2Interface_GetWorkspaceAccessDetailLocal_Call) Return(_a0 *iamv2.WorkspaceAccessDetail, _a1 error) *MockWorkspaceIamV2Interface_GetWorkspaceAccessDetailLocal_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWorkspaceIamV2Interface_GetWorkspaceAccessDetailLocal_Call) RunAndReturn(run func(context.Context, iamv2.GetWorkspaceAccessDetailLocalRequest) (*iamv2.WorkspaceAccessDetail, error)) *MockWorkspaceIamV2Interface_GetWorkspaceAccessDetailLocal_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupsProxy provides a mock function with given fields: ctx, request
func (_m *MockWorkspaceIamV2Interface) ListGroupsProxy(ctx context.Context, request iamv2.ListGroupsProxyRequest) (*iamv2.ListGroupsResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListGroupsProxy")
	}

	var r0 *iamv2.ListGroupsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.ListGroupsProxyRequest) (*iamv2.ListGroupsResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.ListGroupsProxyRequest) *iamv2.ListGroupsResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iamv2.ListGroupsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iamv2.ListGroupsProxyRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWorkspaceIamV2Interface_ListGroupsProxy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupsProxy'
type MockWorkspaceIamV2Interface_ListGroupsProxy_Call struct {
	*mock.Call
}

// ListGroupsProxy is a helper method to define mock.On call
//   - ctx context.Context
//   - request iamv2.ListGroupsProxyRequest
func (_e *MockWorkspaceIamV2Interface_Expecter) ListGroupsProxy(ctx interface{}, request interface{}) *MockWorkspaceIamV2Interface_ListGroupsProxy_Call {
	return &MockWorkspaceIamV2Interface_ListGroupsProxy_Call{Call: _e.mock.On("ListGroupsProxy", ctx, request)}
}

func (_c *MockWorkspaceIamV2Interface_ListGroupsProxy_Call) Run(run func(ctx context.Context, request iamv2.ListGroupsProxyRequest)) *MockWorkspaceIamV2Interface_ListGroupsProxy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iamv2.ListGroupsProxyRequest))
	})
	return _c
}

func (_c *MockWorkspaceIamV2Interface_ListGroupsProxy_Call) Return(_a0 *iamv2.ListGroupsResponse, _a1 error) *MockWorkspaceIamV2Interface_ListGroupsProxy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWorkspaceIamV2Interface_ListGroupsProxy_Call) RunAndReturn(run func(context.Context, iamv2.ListGroupsProxyRequest) (*iamv2.ListGroupsResponse, error)) *MockWorkspaceIamV2Interface_ListGroupsProxy_Call {
	_c.Call.Return(run)
	return _c
}

// ListServicePrincipalsProxy provides a mock function with given fields: ctx, request
func (_m *MockWorkspaceIamV2Interface) ListServicePrincipalsProxy(ctx context.Context, request iamv2.ListServicePrincipalsProxyRequest) (*iamv2.ListServicePrincipalsResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListServicePrincipalsProxy")
	}

	var r0 *iamv2.ListServicePrincipalsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.ListServicePrincipalsProxyRequest) (*iamv2.ListServicePrincipalsResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.ListServicePrincipalsProxyRequest) *iamv2.ListServicePrincipalsResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iamv2.ListServicePrincipalsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iamv2.ListServicePrincipalsProxyRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWorkspaceIamV2Interface_ListServicePrincipalsProxy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListServicePrincipalsProxy'
type MockWorkspaceIamV2Interface_ListServicePrincipalsProxy_Call struct {
	*mock.Call
}

// ListServicePrincipalsProxy is a helper method to define mock.On call
//   - ctx context.Context
//   - request iamv2.ListServicePrincipalsProxyRequest
func (_e *MockWorkspaceIamV2Interface_Expecter) ListServicePrincipalsProxy(ctx interface{}, request interface{}) *MockWorkspaceIamV2Interface_ListServicePrincipalsProxy_Call {
	return &MockWorkspaceIamV2Interface_ListServicePrincipalsProxy_Call{Call: _e.mock.On("ListServicePrincipalsProxy", ctx, request)}
}

func (_c *MockWorkspaceIamV2Interface_ListServicePrincipalsProxy_Call) Run(run func(ctx context.Context, request iamv2.ListServicePrincipalsProxyRequest)) *MockWorkspaceIamV2Interface_ListServicePrincipalsProxy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iamv2.ListServicePrincipalsProxyRequest))
	})
	return _c
}

func (_c *MockWorkspaceIamV2Interface_ListServicePrincipalsProxy_Call) Return(_a0 *iamv2.ListServicePrincipalsResponse, _a1 error) *MockWorkspaceIamV2Interface_ListServicePrincipalsProxy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWorkspaceIamV2Interface_ListServicePrincipalsProxy_Call) RunAndReturn(run func(context.Context, iamv2.ListServicePrincipalsProxyRequest) (*iamv2.ListServicePrincipalsResponse, error)) *MockWorkspaceIamV2Interface_ListServicePrincipalsProxy_Call {
	_c.Call.Return(run)
	return _c
}

// ListUsersProxy provides a mock function with given fields: ctx, request
func (_m *MockWorkspaceIamV2Interface) ListUsersProxy(ctx context.Context, request iamv2.ListUsersProxyRequest) (*iamv2.ListUsersResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListUsersProxy")
	}

	var r0 *iamv2.ListUsersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.ListUsersProxyRequest) (*iamv2.ListUsersResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.ListUsersProxyRequest) *iamv2.ListUsersResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iamv2.ListUsersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iamv2.ListUsersProxyRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWorkspaceIamV2Interface_ListUsersProxy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUsersProxy'
type MockWorkspaceIamV2Interface_ListUsersProxy_Call struct {
	*mock.Call
}

// ListUsersProxy is a helper method to define mock.On call
//   - ctx context.Context
//   - request iamv2.ListUsersProxyRequest
func (_e *MockWorkspaceIamV2Interface_Expecter) ListUsersProxy(ctx interface{}, request interface{}) *MockWorkspaceIamV2Interface_ListUsersProxy_Call {
	return &MockWorkspaceIamV2Interface_ListUsersProxy_Call{Call: _e.mock.On("ListUsersProxy", ctx, request)}
}

func (_c *MockWorkspaceIamV2Interface_ListUsersProxy_Call) Run(run func(ctx context.Context, request iamv2.ListUsersProxyRequest)) *MockWorkspaceIamV2Interface_ListUsersProxy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iamv2.ListUsersProxyRequest))
	})
	return _c
}

func (_c *MockWorkspaceIamV2Interface_ListUsersProxy_Call) Return(_a0 *iamv2.ListUsersResponse, _a1 error) *MockWorkspaceIamV2Interface_ListUsersProxy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWorkspaceIamV2Interface_ListUsersProxy_Call) RunAndReturn(run func(context.Context, iamv2.ListUsersProxyRequest) (*iamv2.ListUsersResponse, error)) *MockWorkspaceIamV2Interface_ListUsersProxy_Call {
	_c.Call.Return(run)
	return _c
}

// ListWorkspaceAccessDetailsLocal provides a mock function with given fields: ctx, request
func (_m *MockWorkspaceIamV2Interface) ListWorkspaceAccessDetailsLocal(ctx context.Context, request iamv2.ListWorkspaceAccessDetailsLocalRequest) (*iamv2.ListWorkspaceAccessDetailsResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListWorkspaceAccessDetailsLocal")
	}

	var r0 *iamv2.ListWorkspaceAccessDetailsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.ListWorkspaceAccessDetailsLocalRequest) (*iamv2.ListWorkspaceAccessDetailsResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.ListWorkspaceAccessDetailsLocalRequest) *iamv2.ListWorkspaceAccessDetailsResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iamv2.ListWorkspaceAccessDetailsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iamv2.ListWorkspaceAccessDetailsLocalRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWorkspaceIamV2Interface_ListWorkspaceAccessDetailsLocal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListWorkspaceAccessDetailsLocal'
type MockWorkspaceIamV2Interface_ListWorkspaceAccessDetailsLocal_Call struct {
	*mock.Call
}

// ListWorkspaceAccessDetailsLocal is a helper method to define mock.On call
//   - ctx context.Context
//   - request iamv2.ListWorkspaceAccessDetailsLocalRequest
func (_e *MockWorkspaceIamV2Interface_Expecter) ListWorkspaceAccessDetailsLocal(ctx interface{}, request interface{}) *MockWorkspaceIamV2Interface_ListWorkspaceAccessDetailsLocal_Call {
	return &MockWorkspaceIamV2Interface_ListWorkspaceAccessDetailsLocal_Call{Call: _e.mock.On("ListWorkspaceAccessDetailsLocal", ctx, request)}
}

func (_c *MockWorkspaceIamV2Interface_ListWorkspaceAccessDetailsLocal_Call) Run(run func(ctx context.Context, request iamv2.ListWorkspaceAccessDetailsLocalRequest)) *MockWorkspaceIamV2Interface_ListWorkspaceAccessDetailsLocal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iamv2.ListWorkspaceAccessDetailsLocalRequest))
	})
	return _c
}

func (_c *MockWorkspaceIamV2Interface_ListWorkspaceAccessDetailsLocal_Call) Return(_a0 *iamv2.ListWorkspaceAccessDetailsResponse, _a1 error) *MockWorkspaceIamV2Interface_ListWorkspaceAccessDetailsLocal_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWorkspaceIamV2Interface_ListWorkspaceAccessDetailsLocal_Call) RunAndReturn(run func(context.Context, iamv2.ListWorkspaceAccessDetailsLocalRequest) (*iamv2.ListWorkspaceAccessDetailsResponse, error)) *MockWorkspaceIamV2Interface_ListWorkspaceAccessDetailsLocal_Call {
	_c.Call.Return(run)
	return _c
}

// ResolveGroupProxy provides a mock function with given fields: ctx, request
func (_m *MockWorkspaceIamV2Interface) ResolveGroupProxy(ctx context.Context, request iamv2.ResolveGroupProxyRequest) (*iamv2.ResolveGroupResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ResolveGroupProxy")
	}

	var r0 *iamv2.ResolveGroupResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.ResolveGroupProxyRequest) (*iamv2.ResolveGroupResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.ResolveGroupProxyRequest) *iamv2.ResolveGroupResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iamv2.ResolveGroupResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iamv2.ResolveGroupProxyRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWorkspaceIamV2Interface_ResolveGroupProxy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResolveGroupProxy'
type MockWorkspaceIamV2Interface_ResolveGroupProxy_Call struct {
	*mock.Call
}

// ResolveGroupProxy is a helper method to define mock.On call
//   - ctx context.Context
//   - request iamv2.ResolveGroupProxyRequest
func (_e *MockWorkspaceIamV2Interface_Expecter) ResolveGroupProxy(ctx interface{}, request interface{}) *MockWorkspaceIamV2Interface_ResolveGroupProxy_Call {
	return &MockWorkspaceIamV2Interface_ResolveGroupProxy_Call{Call: _e.mock.On("ResolveGroupProxy", ctx, request)}
}

func (_c *MockWorkspaceIamV2Interface_ResolveGroupProxy_Call) Run(run func(ctx context.Context, request iamv2.ResolveGroupProxyRequest)) *MockWorkspaceIamV2Interface_ResolveGroupProxy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iamv2.ResolveGroupProxyRequest))
	})
	return _c
}

func (_c *MockWorkspaceIamV2Interface_ResolveGroupProxy_Call) Return(_a0 *iamv2.ResolveGroupResponse, _a1 error) *MockWorkspaceIamV2Interface_ResolveGroupProxy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWorkspaceIamV2Interface_ResolveGroupProxy_Call) RunAndReturn(run func(context.Context, iamv2.ResolveGroupProxyRequest) (*iamv2.ResolveGroupResponse, error)) *MockWorkspaceIamV2Interface_ResolveGroupProxy_Call {
	_c.Call.Return(run)
	return _c
}

// ResolveServicePrincipalProxy provides a mock function with given fields: ctx, request
func (_m *MockWorkspaceIamV2Interface) ResolveServicePrincipalProxy(ctx context.Context, request iamv2.ResolveServicePrincipalProxyRequest) (*iamv2.ResolveServicePrincipalResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ResolveServicePrincipalProxy")
	}

	var r0 *iamv2.ResolveServicePrincipalResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.ResolveServicePrincipalProxyRequest) (*iamv2.ResolveServicePrincipalResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.ResolveServicePrincipalProxyRequest) *iamv2.ResolveServicePrincipalResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iamv2.ResolveServicePrincipalResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iamv2.ResolveServicePrincipalProxyRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWorkspaceIamV2Interface_ResolveServicePrincipalProxy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResolveServicePrincipalProxy'
type MockWorkspaceIamV2Interface_ResolveServicePrincipalProxy_Call struct {
	*mock.Call
}

// ResolveServicePrincipalProxy is a helper method to define mock.On call
//   - ctx context.Context
//   - request iamv2.ResolveServicePrincipalProxyRequest
func (_e *MockWorkspaceIamV2Interface_Expecter) ResolveServicePrincipalProxy(ctx interface{}, request interface{}) *MockWorkspaceIamV2Interface_ResolveServicePrincipalProxy_Call {
	return &MockWorkspaceIamV2Interface_ResolveServicePrincipalProxy_Call{Call: _e.mock.On("ResolveServicePrincipalProxy", ctx, request)}
}

func (_c *MockWorkspaceIamV2Interface_ResolveServicePrincipalProxy_Call) Run(run func(ctx context.Context, request iamv2.ResolveServicePrincipalProxyRequest)) *MockWorkspaceIamV2Interface_ResolveServicePrincipalProxy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iamv2.ResolveServicePrincipalProxyRequest))
	})
	return _c
}

func (_c *MockWorkspaceIamV2Interface_ResolveServicePrincipalProxy_Call) Return(_a0 *iamv2.ResolveServicePrincipalResponse, _a1 error) *MockWorkspaceIamV2Interface_ResolveServicePrincipalProxy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWorkspaceIamV2Interface_ResolveServicePrincipalProxy_Call) RunAndReturn(run func(context.Context, iamv2.ResolveServicePrincipalProxyRequest) (*iamv2.ResolveServicePrincipalResponse, error)) *MockWorkspaceIamV2Interface_ResolveServicePrincipalProxy_Call {
	_c.Call.Return(run)
	return _c
}

// ResolveUserProxy provides a mock function with given fields: ctx, request
func (_m *MockWorkspaceIamV2Interface) ResolveUserProxy(ctx context.Context, request iamv2.ResolveUserProxyRequest) (*iamv2.ResolveUserResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ResolveUserProxy")
	}

	var r0 *iamv2.ResolveUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.ResolveUserProxyRequest) (*iamv2.ResolveUserResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.ResolveUserProxyRequest) *iamv2.ResolveUserResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iamv2.ResolveUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iamv2.ResolveUserProxyRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWorkspaceIamV2Interface_ResolveUserProxy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResolveUserProxy'
type MockWorkspaceIamV2Interface_ResolveUserProxy_Call struct {
	*mock.Call
}

// ResolveUserProxy is a helper method to define mock.On call
//   - ctx context.Context
//   - request iamv2.ResolveUserProxyRequest
func (_e *MockWorkspaceIamV2Interface_Expecter) ResolveUserProxy(ctx interface{}, request interface{}) *MockWorkspaceIamV2Interface_ResolveUserProxy_Call {
	return &MockWorkspaceIamV2Interface_ResolveUserProxy_Call{Call: _e.mock.On("ResolveUserProxy", ctx, request)}
}

func (_c *MockWorkspaceIamV2Interface_ResolveUserProxy_Call) Run(run func(ctx context.Context, request iamv2.ResolveUserProxyRequest)) *MockWorkspaceIamV2Interface_ResolveUserProxy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iamv2.ResolveUserProxyRequest))
	})
	return _c
}

func (_c *MockWorkspaceIamV2Interface_ResolveUserProxy_Call) Return(_a0 *iamv2.ResolveUserResponse, _a1 error) *MockWorkspaceIamV2Interface_ResolveUserProxy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWorkspaceIamV2Interface_ResolveUserProxy_Call) RunAndReturn(run func(context.Context, iamv2.ResolveUserProxyRequest) (*iamv2.ResolveUserResponse, error)) *MockWorkspaceIamV2Interface_ResolveUserProxy_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGroupProxy provides a mock function with given fields: ctx, request
func (_m *MockWorkspaceIamV2Interface) UpdateGroupProxy(ctx context.Context, request iamv2.UpdateGroupProxyRequest) (*iamv2.Group, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGroupProxy")
	}

	var r0 *iamv2.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.UpdateGroupProxyRequest) (*iamv2.Group, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.UpdateGroupProxyRequest) *iamv2.Group); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iamv2.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iamv2.UpdateGroupProxyRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWorkspaceIamV2Interface_UpdateGroupProxy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGroupProxy'
type MockWorkspaceIamV2Interface_UpdateGroupProxy_Call struct {
	*mock.Call
}

// UpdateGroupProxy is a helper method to define mock.On call
//   - ctx context.Context
//   - request iamv2.UpdateGroupProxyRequest
func (_e *MockWorkspaceIamV2Interface_Expecter) UpdateGroupProxy(ctx interface{}, request interface{}) *MockWorkspaceIamV2Interface_UpdateGroupProxy_Call {
	return &MockWorkspaceIamV2Interface_UpdateGroupProxy_Call{Call: _e.mock.On("UpdateGroupProxy", ctx, request)}
}

func (_c *MockWorkspaceIamV2Interface_UpdateGroupProxy_Call) Run(run func(ctx context.Context, request iamv2.UpdateGroupProxyRequest)) *MockWorkspaceIamV2Interface_UpdateGroupProxy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iamv2.UpdateGroupProxyRequest))
	})
	return _c
}

func (_c *MockWorkspaceIamV2Interface_UpdateGroupProxy_Call) Return(_a0 *iamv2.Group, _a1 error) *MockWorkspaceIamV2Interface_UpdateGroupProxy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWorkspaceIamV2Interface_UpdateGroupProxy_Call) RunAndReturn(run func(context.Context, iamv2.UpdateGroupProxyRequest) (*iamv2.Group, error)) *MockWorkspaceIamV2Interface_UpdateGroupProxy_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateServicePrincipalProxy provides a mock function with given fields: ctx, request
func (_m *MockWorkspaceIamV2Interface) UpdateServicePrincipalProxy(ctx context.Context, request iamv2.UpdateServicePrincipalProxyRequest) (*iamv2.ServicePrincipal, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateServicePrincipalProxy")
	}

	var r0 *iamv2.ServicePrincipal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.UpdateServicePrincipalProxyRequest) (*iamv2.ServicePrincipal, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.UpdateServicePrincipalProxyRequest) *iamv2.ServicePrincipal); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iamv2.ServicePrincipal)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iamv2.UpdateServicePrincipalProxyRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWorkspaceIamV2Interface_UpdateServicePrincipalProxy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateServicePrincipalProxy'
type MockWorkspaceIamV2Interface_UpdateServicePrincipalProxy_Call struct {
	*mock.Call
}

// UpdateServicePrincipalProxy is a helper method to define mock.On call
//   - ctx context.Context
//   - request iamv2.UpdateServicePrincipalProxyRequest
func (_e *MockWorkspaceIamV2Interface_Expecter) UpdateServicePrincipalProxy(ctx interface{}, request interface{}) *MockWorkspaceIamV2Interface_UpdateServicePrincipalProxy_Call {
	return &MockWorkspaceIamV2Interface_UpdateServicePrincipalProxy_Call{Call: _e.mock.On("UpdateServicePrincipalProxy", ctx, request)}
}

func (_c *MockWorkspaceIamV2Interface_UpdateServicePrincipalProxy_Call) Run(run func(ctx context.Context, request iamv2.UpdateServicePrincipalProxyRequest)) *MockWorkspaceIamV2Interface_UpdateServicePrincipalProxy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iamv2.UpdateServicePrincipalProxyRequest))
	})
	return _c
}

func (_c *MockWorkspaceIamV2Interface_UpdateServicePrincipalProxy_Call) Return(_a0 *iamv2.ServicePrincipal, _a1 error) *MockWorkspaceIamV2Interface_UpdateServicePrincipalProxy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWorkspaceIamV2Interface_UpdateServicePrincipalProxy_Call) RunAndReturn(run func(context.Context, iamv2.UpdateServicePrincipalProxyRequest) (*iamv2.ServicePrincipal, error)) *MockWorkspaceIamV2Interface_UpdateServicePrincipalProxy_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserProxy provides a mock function with given fields: ctx, request
func (_m *MockWorkspaceIamV2Interface) UpdateUserProxy(ctx context.Context, request iamv2.UpdateUserProxyRequest) (*iamv2.User, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserProxy")
	}

	var r0 *iamv2.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.UpdateUserProxyRequest) (*iamv2.User, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.UpdateUserProxyRequest) *iamv2.User); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iamv2.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iamv2.UpdateUserProxyRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWorkspaceIamV2Interface_UpdateUserProxy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserProxy'
type MockWorkspaceIamV2Interface_UpdateUserProxy_Call struct {
	*mock.Call
}

// UpdateUserProxy is a helper method to define mock.On call
//   - ctx context.Context
//   - request iamv2.UpdateUserProxyRequest
func (_e *MockWorkspaceIamV2Interface_Expecter) UpdateUserProxy(ctx interface{}, request interface{}) *MockWorkspaceIamV2Interface_UpdateUserProxy_Call {
	return &MockWorkspaceIamV2Interface_UpdateUserProxy_Call{Call: _e.mock.On("UpdateUserProxy", ctx, request)}
}

func (_c *MockWorkspaceIamV2Interface_UpdateUserProxy_Call) Run(run func(ctx context.Context, request iamv2.UpdateUserProxyRequest)) *MockWorkspaceIamV2Interface_UpdateUserProxy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iamv2.UpdateUserProxyRequest))
	})
	return _c
}

func (_c *MockWorkspaceIamV2Interface_UpdateUserProxy_Call) Return(_a0 *iamv2.User, _a1 error) *MockWorkspaceIamV2Interface_UpdateUserProxy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWorkspaceIamV2Interface_UpdateUserProxy_Call) RunAndReturn(run func(context.Context, iamv2.UpdateUserProxyRequest) (*iamv2.User, error)) *MockWorkspaceIamV2Interface_UpdateUserProxy_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateWorkspaceAccessDetailLocal provides a mock function with given fields: ctx, request
func (_m *MockWorkspaceIamV2Interface) UpdateWorkspaceAccessDetailLocal(ctx context.Context, request iamv2.UpdateWorkspaceAccessDetailLocalRequest) (*iamv2.WorkspaceAccessDetail, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWorkspaceAccessDetailLocal")
	}

	var r0 *iamv2.WorkspaceAccessDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.UpdateWorkspaceAccessDetailLocalRequest) (*iamv2.WorkspaceAccessDetail, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.UpdateWorkspaceAccessDetailLocalRequest) *iamv2.WorkspaceAccessDetail); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iamv2.WorkspaceAccessDetail)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iamv2.UpdateWorkspaceAccessDetailLocalRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWorkspaceIamV2Interface_UpdateWorkspaceAccessDetailLocal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateWorkspaceAccessDetailLocal'
type MockWorkspaceIamV2Interface_UpdateWorkspaceAccessDetailLocal_Call struct {
	*mock.Call
}

// UpdateWorkspaceAccessDetailLocal is a helper method to define mock.On call
//   - ctx context.Context
//   - request iamv2.UpdateWorkspaceAccessDetailLocalRequest
func (_e *MockWorkspaceIamV2Interface_Expecter) UpdateWorkspaceAccessDetailLocal(ctx interface{}, request interface{}) *MockWorkspaceIamV2Interface_UpdateWorkspaceAccessDetailLocal_Call {
	return &MockWorkspaceIamV2Interface_UpdateWorkspaceAccessDetailLocal_Call{Call: _e.mock.On("UpdateWorkspaceAccessDetailLocal", ctx, request)}
}

func (_c *MockWorkspaceIamV2Interface_UpdateWorkspaceAccessDetailLocal_Call) Run(run func(ctx context.Context, request iamv2.UpdateWorkspaceAccessDetailLocalRequest)) *MockWorkspaceIamV2Interface_UpdateWorkspaceAccessDetailLocal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iamv2.UpdateWorkspaceAccessDetailLocalRequest))
	})
	return _c
}

func (_c *MockWorkspaceIamV2Interface_UpdateWorkspaceAccessDetailLocal_Call) Return(_a0 *iamv2.WorkspaceAccessDetail, _a1 error) *MockWorkspaceIamV2Interface_UpdateWorkspaceAccessDetailLocal_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWorkspaceIamV2Interface_UpdateWorkspaceAccessDetailLocal_Call) RunAndReturn(run func(context.Context, iamv2.UpdateWorkspaceAccessDetailLocalRequest) (*iamv2.WorkspaceAccessDetail, error)) *MockWorkspaceIamV2Interface_UpdateWorkspaceAccessDetailLocal_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWorkspaceIamV2Interface creates a new instance of MockWorkspaceIamV2Interface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWorkspaceIamV2Interface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWorkspaceIamV2Interface {
	mock := &MockWorkspaceIamV2Interface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
