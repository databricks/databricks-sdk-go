// Code generated by mockery v2.53.2. DO NOT EDIT.

package iamv2

import (
	context "context"

	iamv2 "github.com/databricks/databricks-sdk-go/service/iamv2"
	mock "github.com/stretchr/testify/mock"
)

// MockWorkspaceIamV2Interface is an autogenerated mock type for the WorkspaceIamV2Interface type
type MockWorkspaceIamV2Interface struct {
	mock.Mock
}

type MockWorkspaceIamV2Interface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWorkspaceIamV2Interface) EXPECT() *MockWorkspaceIamV2Interface_Expecter {
	return &MockWorkspaceIamV2Interface_Expecter{mock: &_m.Mock}
}

// GetWorkspaceAccessDetailLocal provides a mock function with given fields: ctx, request
func (_m *MockWorkspaceIamV2Interface) GetWorkspaceAccessDetailLocal(ctx context.Context, request iamv2.GetWorkspaceAccessDetailLocalRequest) (*iamv2.WorkspaceAccessDetail, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkspaceAccessDetailLocal")
	}

	var r0 *iamv2.WorkspaceAccessDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.GetWorkspaceAccessDetailLocalRequest) (*iamv2.WorkspaceAccessDetail, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.GetWorkspaceAccessDetailLocalRequest) *iamv2.WorkspaceAccessDetail); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iamv2.WorkspaceAccessDetail)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iamv2.GetWorkspaceAccessDetailLocalRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWorkspaceIamV2Interface_GetWorkspaceAccessDetailLocal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkspaceAccessDetailLocal'
type MockWorkspaceIamV2Interface_GetWorkspaceAccessDetailLocal_Call struct {
	*mock.Call
}

// GetWorkspaceAccessDetailLocal is a helper method to define mock.On call
//   - ctx context.Context
//   - request iamv2.GetWorkspaceAccessDetailLocalRequest
func (_e *MockWorkspaceIamV2Interface_Expecter) GetWorkspaceAccessDetailLocal(ctx interface{}, request interface{}) *MockWorkspaceIamV2Interface_GetWorkspaceAccessDetailLocal_Call {
	return &MockWorkspaceIamV2Interface_GetWorkspaceAccessDetailLocal_Call{Call: _e.mock.On("GetWorkspaceAccessDetailLocal", ctx, request)}
}

func (_c *MockWorkspaceIamV2Interface_GetWorkspaceAccessDetailLocal_Call) Run(run func(ctx context.Context, request iamv2.GetWorkspaceAccessDetailLocalRequest)) *MockWorkspaceIamV2Interface_GetWorkspaceAccessDetailLocal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iamv2.GetWorkspaceAccessDetailLocalRequest))
	})
	return _c
}

func (_c *MockWorkspaceIamV2Interface_GetWorkspaceAccessDetailLocal_Call) Return(_a0 *iamv2.WorkspaceAccessDetail, _a1 error) *MockWorkspaceIamV2Interface_GetWorkspaceAccessDetailLocal_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWorkspaceIamV2Interface_GetWorkspaceAccessDetailLocal_Call) RunAndReturn(run func(context.Context, iamv2.GetWorkspaceAccessDetailLocalRequest) (*iamv2.WorkspaceAccessDetail, error)) *MockWorkspaceIamV2Interface_GetWorkspaceAccessDetailLocal_Call {
	_c.Call.Return(run)
	return _c
}

// ResolveGroupProxy provides a mock function with given fields: ctx, request
func (_m *MockWorkspaceIamV2Interface) ResolveGroupProxy(ctx context.Context, request iamv2.ResolveGroupProxyRequest) (*iamv2.ResolveGroupResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ResolveGroupProxy")
	}

	var r0 *iamv2.ResolveGroupResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.ResolveGroupProxyRequest) (*iamv2.ResolveGroupResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.ResolveGroupProxyRequest) *iamv2.ResolveGroupResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iamv2.ResolveGroupResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iamv2.ResolveGroupProxyRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWorkspaceIamV2Interface_ResolveGroupProxy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResolveGroupProxy'
type MockWorkspaceIamV2Interface_ResolveGroupProxy_Call struct {
	*mock.Call
}

// ResolveGroupProxy is a helper method to define mock.On call
//   - ctx context.Context
//   - request iamv2.ResolveGroupProxyRequest
func (_e *MockWorkspaceIamV2Interface_Expecter) ResolveGroupProxy(ctx interface{}, request interface{}) *MockWorkspaceIamV2Interface_ResolveGroupProxy_Call {
	return &MockWorkspaceIamV2Interface_ResolveGroupProxy_Call{Call: _e.mock.On("ResolveGroupProxy", ctx, request)}
}

func (_c *MockWorkspaceIamV2Interface_ResolveGroupProxy_Call) Run(run func(ctx context.Context, request iamv2.ResolveGroupProxyRequest)) *MockWorkspaceIamV2Interface_ResolveGroupProxy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iamv2.ResolveGroupProxyRequest))
	})
	return _c
}

func (_c *MockWorkspaceIamV2Interface_ResolveGroupProxy_Call) Return(_a0 *iamv2.ResolveGroupResponse, _a1 error) *MockWorkspaceIamV2Interface_ResolveGroupProxy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWorkspaceIamV2Interface_ResolveGroupProxy_Call) RunAndReturn(run func(context.Context, iamv2.ResolveGroupProxyRequest) (*iamv2.ResolveGroupResponse, error)) *MockWorkspaceIamV2Interface_ResolveGroupProxy_Call {
	_c.Call.Return(run)
	return _c
}

// ResolveServicePrincipalProxy provides a mock function with given fields: ctx, request
func (_m *MockWorkspaceIamV2Interface) ResolveServicePrincipalProxy(ctx context.Context, request iamv2.ResolveServicePrincipalProxyRequest) (*iamv2.ResolveServicePrincipalResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ResolveServicePrincipalProxy")
	}

	var r0 *iamv2.ResolveServicePrincipalResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.ResolveServicePrincipalProxyRequest) (*iamv2.ResolveServicePrincipalResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.ResolveServicePrincipalProxyRequest) *iamv2.ResolveServicePrincipalResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iamv2.ResolveServicePrincipalResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iamv2.ResolveServicePrincipalProxyRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWorkspaceIamV2Interface_ResolveServicePrincipalProxy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResolveServicePrincipalProxy'
type MockWorkspaceIamV2Interface_ResolveServicePrincipalProxy_Call struct {
	*mock.Call
}

// ResolveServicePrincipalProxy is a helper method to define mock.On call
//   - ctx context.Context
//   - request iamv2.ResolveServicePrincipalProxyRequest
func (_e *MockWorkspaceIamV2Interface_Expecter) ResolveServicePrincipalProxy(ctx interface{}, request interface{}) *MockWorkspaceIamV2Interface_ResolveServicePrincipalProxy_Call {
	return &MockWorkspaceIamV2Interface_ResolveServicePrincipalProxy_Call{Call: _e.mock.On("ResolveServicePrincipalProxy", ctx, request)}
}

func (_c *MockWorkspaceIamV2Interface_ResolveServicePrincipalProxy_Call) Run(run func(ctx context.Context, request iamv2.ResolveServicePrincipalProxyRequest)) *MockWorkspaceIamV2Interface_ResolveServicePrincipalProxy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iamv2.ResolveServicePrincipalProxyRequest))
	})
	return _c
}

func (_c *MockWorkspaceIamV2Interface_ResolveServicePrincipalProxy_Call) Return(_a0 *iamv2.ResolveServicePrincipalResponse, _a1 error) *MockWorkspaceIamV2Interface_ResolveServicePrincipalProxy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWorkspaceIamV2Interface_ResolveServicePrincipalProxy_Call) RunAndReturn(run func(context.Context, iamv2.ResolveServicePrincipalProxyRequest) (*iamv2.ResolveServicePrincipalResponse, error)) *MockWorkspaceIamV2Interface_ResolveServicePrincipalProxy_Call {
	_c.Call.Return(run)
	return _c
}

// ResolveUserProxy provides a mock function with given fields: ctx, request
func (_m *MockWorkspaceIamV2Interface) ResolveUserProxy(ctx context.Context, request iamv2.ResolveUserProxyRequest) (*iamv2.ResolveUserResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ResolveUserProxy")
	}

	var r0 *iamv2.ResolveUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.ResolveUserProxyRequest) (*iamv2.ResolveUserResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.ResolveUserProxyRequest) *iamv2.ResolveUserResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iamv2.ResolveUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iamv2.ResolveUserProxyRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWorkspaceIamV2Interface_ResolveUserProxy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResolveUserProxy'
type MockWorkspaceIamV2Interface_ResolveUserProxy_Call struct {
	*mock.Call
}

// ResolveUserProxy is a helper method to define mock.On call
//   - ctx context.Context
//   - request iamv2.ResolveUserProxyRequest
func (_e *MockWorkspaceIamV2Interface_Expecter) ResolveUserProxy(ctx interface{}, request interface{}) *MockWorkspaceIamV2Interface_ResolveUserProxy_Call {
	return &MockWorkspaceIamV2Interface_ResolveUserProxy_Call{Call: _e.mock.On("ResolveUserProxy", ctx, request)}
}

func (_c *MockWorkspaceIamV2Interface_ResolveUserProxy_Call) Run(run func(ctx context.Context, request iamv2.ResolveUserProxyRequest)) *MockWorkspaceIamV2Interface_ResolveUserProxy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iamv2.ResolveUserProxyRequest))
	})
	return _c
}

func (_c *MockWorkspaceIamV2Interface_ResolveUserProxy_Call) Return(_a0 *iamv2.ResolveUserResponse, _a1 error) *MockWorkspaceIamV2Interface_ResolveUserProxy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWorkspaceIamV2Interface_ResolveUserProxy_Call) RunAndReturn(run func(context.Context, iamv2.ResolveUserProxyRequest) (*iamv2.ResolveUserResponse, error)) *MockWorkspaceIamV2Interface_ResolveUserProxy_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWorkspaceIamV2Interface creates a new instance of MockWorkspaceIamV2Interface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWorkspaceIamV2Interface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWorkspaceIamV2Interface {
	mock := &MockWorkspaceIamV2Interface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
