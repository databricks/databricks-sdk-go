// Code generated by mockery v2.53.2. DO NOT EDIT.

package iamv2

import (
	context "context"

	iamv2 "github.com/databricks/databricks-sdk-go/service/iamv2"
	mock "github.com/stretchr/testify/mock"
)

// MockAccountIamV2Interface is an autogenerated mock type for the AccountIamV2Interface type
type MockAccountIamV2Interface struct {
	mock.Mock
}

type MockAccountIamV2Interface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccountIamV2Interface) EXPECT() *MockAccountIamV2Interface_Expecter {
	return &MockAccountIamV2Interface_Expecter{mock: &_m.Mock}
}

// GetWorkspaceAccessDetail provides a mock function with given fields: ctx, request
func (_m *MockAccountIamV2Interface) GetWorkspaceAccessDetail(ctx context.Context, request iamv2.GetWorkspaceAccessDetailRequest) (*iamv2.WorkspaceAccessDetail, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkspaceAccessDetail")
	}

	var r0 *iamv2.WorkspaceAccessDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.GetWorkspaceAccessDetailRequest) (*iamv2.WorkspaceAccessDetail, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.GetWorkspaceAccessDetailRequest) *iamv2.WorkspaceAccessDetail); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iamv2.WorkspaceAccessDetail)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iamv2.GetWorkspaceAccessDetailRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountIamV2Interface_GetWorkspaceAccessDetail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkspaceAccessDetail'
type MockAccountIamV2Interface_GetWorkspaceAccessDetail_Call struct {
	*mock.Call
}

// GetWorkspaceAccessDetail is a helper method to define mock.On call
//   - ctx context.Context
//   - request iamv2.GetWorkspaceAccessDetailRequest
func (_e *MockAccountIamV2Interface_Expecter) GetWorkspaceAccessDetail(ctx interface{}, request interface{}) *MockAccountIamV2Interface_GetWorkspaceAccessDetail_Call {
	return &MockAccountIamV2Interface_GetWorkspaceAccessDetail_Call{Call: _e.mock.On("GetWorkspaceAccessDetail", ctx, request)}
}

func (_c *MockAccountIamV2Interface_GetWorkspaceAccessDetail_Call) Run(run func(ctx context.Context, request iamv2.GetWorkspaceAccessDetailRequest)) *MockAccountIamV2Interface_GetWorkspaceAccessDetail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iamv2.GetWorkspaceAccessDetailRequest))
	})
	return _c
}

func (_c *MockAccountIamV2Interface_GetWorkspaceAccessDetail_Call) Return(_a0 *iamv2.WorkspaceAccessDetail, _a1 error) *MockAccountIamV2Interface_GetWorkspaceAccessDetail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountIamV2Interface_GetWorkspaceAccessDetail_Call) RunAndReturn(run func(context.Context, iamv2.GetWorkspaceAccessDetailRequest) (*iamv2.WorkspaceAccessDetail, error)) *MockAccountIamV2Interface_GetWorkspaceAccessDetail_Call {
	_c.Call.Return(run)
	return _c
}

// ResolveGroup provides a mock function with given fields: ctx, request
func (_m *MockAccountIamV2Interface) ResolveGroup(ctx context.Context, request iamv2.ResolveGroupRequest) (*iamv2.ResolveGroupResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ResolveGroup")
	}

	var r0 *iamv2.ResolveGroupResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.ResolveGroupRequest) (*iamv2.ResolveGroupResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.ResolveGroupRequest) *iamv2.ResolveGroupResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iamv2.ResolveGroupResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iamv2.ResolveGroupRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountIamV2Interface_ResolveGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResolveGroup'
type MockAccountIamV2Interface_ResolveGroup_Call struct {
	*mock.Call
}

// ResolveGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - request iamv2.ResolveGroupRequest
func (_e *MockAccountIamV2Interface_Expecter) ResolveGroup(ctx interface{}, request interface{}) *MockAccountIamV2Interface_ResolveGroup_Call {
	return &MockAccountIamV2Interface_ResolveGroup_Call{Call: _e.mock.On("ResolveGroup", ctx, request)}
}

func (_c *MockAccountIamV2Interface_ResolveGroup_Call) Run(run func(ctx context.Context, request iamv2.ResolveGroupRequest)) *MockAccountIamV2Interface_ResolveGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iamv2.ResolveGroupRequest))
	})
	return _c
}

func (_c *MockAccountIamV2Interface_ResolveGroup_Call) Return(_a0 *iamv2.ResolveGroupResponse, _a1 error) *MockAccountIamV2Interface_ResolveGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountIamV2Interface_ResolveGroup_Call) RunAndReturn(run func(context.Context, iamv2.ResolveGroupRequest) (*iamv2.ResolveGroupResponse, error)) *MockAccountIamV2Interface_ResolveGroup_Call {
	_c.Call.Return(run)
	return _c
}

// ResolveServicePrincipal provides a mock function with given fields: ctx, request
func (_m *MockAccountIamV2Interface) ResolveServicePrincipal(ctx context.Context, request iamv2.ResolveServicePrincipalRequest) (*iamv2.ResolveServicePrincipalResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ResolveServicePrincipal")
	}

	var r0 *iamv2.ResolveServicePrincipalResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.ResolveServicePrincipalRequest) (*iamv2.ResolveServicePrincipalResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.ResolveServicePrincipalRequest) *iamv2.ResolveServicePrincipalResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iamv2.ResolveServicePrincipalResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iamv2.ResolveServicePrincipalRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountIamV2Interface_ResolveServicePrincipal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResolveServicePrincipal'
type MockAccountIamV2Interface_ResolveServicePrincipal_Call struct {
	*mock.Call
}

// ResolveServicePrincipal is a helper method to define mock.On call
//   - ctx context.Context
//   - request iamv2.ResolveServicePrincipalRequest
func (_e *MockAccountIamV2Interface_Expecter) ResolveServicePrincipal(ctx interface{}, request interface{}) *MockAccountIamV2Interface_ResolveServicePrincipal_Call {
	return &MockAccountIamV2Interface_ResolveServicePrincipal_Call{Call: _e.mock.On("ResolveServicePrincipal", ctx, request)}
}

func (_c *MockAccountIamV2Interface_ResolveServicePrincipal_Call) Run(run func(ctx context.Context, request iamv2.ResolveServicePrincipalRequest)) *MockAccountIamV2Interface_ResolveServicePrincipal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iamv2.ResolveServicePrincipalRequest))
	})
	return _c
}

func (_c *MockAccountIamV2Interface_ResolveServicePrincipal_Call) Return(_a0 *iamv2.ResolveServicePrincipalResponse, _a1 error) *MockAccountIamV2Interface_ResolveServicePrincipal_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountIamV2Interface_ResolveServicePrincipal_Call) RunAndReturn(run func(context.Context, iamv2.ResolveServicePrincipalRequest) (*iamv2.ResolveServicePrincipalResponse, error)) *MockAccountIamV2Interface_ResolveServicePrincipal_Call {
	_c.Call.Return(run)
	return _c
}

// ResolveUser provides a mock function with given fields: ctx, request
func (_m *MockAccountIamV2Interface) ResolveUser(ctx context.Context, request iamv2.ResolveUserRequest) (*iamv2.ResolveUserResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ResolveUser")
	}

	var r0 *iamv2.ResolveUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.ResolveUserRequest) (*iamv2.ResolveUserResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.ResolveUserRequest) *iamv2.ResolveUserResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iamv2.ResolveUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iamv2.ResolveUserRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountIamV2Interface_ResolveUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResolveUser'
type MockAccountIamV2Interface_ResolveUser_Call struct {
	*mock.Call
}

// ResolveUser is a helper method to define mock.On call
//   - ctx context.Context
//   - request iamv2.ResolveUserRequest
func (_e *MockAccountIamV2Interface_Expecter) ResolveUser(ctx interface{}, request interface{}) *MockAccountIamV2Interface_ResolveUser_Call {
	return &MockAccountIamV2Interface_ResolveUser_Call{Call: _e.mock.On("ResolveUser", ctx, request)}
}

func (_c *MockAccountIamV2Interface_ResolveUser_Call) Run(run func(ctx context.Context, request iamv2.ResolveUserRequest)) *MockAccountIamV2Interface_ResolveUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iamv2.ResolveUserRequest))
	})
	return _c
}

func (_c *MockAccountIamV2Interface_ResolveUser_Call) Return(_a0 *iamv2.ResolveUserResponse, _a1 error) *MockAccountIamV2Interface_ResolveUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountIamV2Interface_ResolveUser_Call) RunAndReturn(run func(context.Context, iamv2.ResolveUserRequest) (*iamv2.ResolveUserResponse, error)) *MockAccountIamV2Interface_ResolveUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAccountIamV2Interface creates a new instance of MockAccountIamV2Interface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccountIamV2Interface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccountIamV2Interface {
	mock := &MockAccountIamV2Interface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
