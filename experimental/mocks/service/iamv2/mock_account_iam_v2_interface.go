// Code generated by mockery v2.53.2. DO NOT EDIT.

package iamv2

import (
	context "context"

	iamv2 "github.com/databricks/databricks-sdk-go/service/iamv2"
	mock "github.com/stretchr/testify/mock"
)

// MockAccountIamV2Interface is an autogenerated mock type for the AccountIamV2Interface type
type MockAccountIamV2Interface struct {
	mock.Mock
}

type MockAccountIamV2Interface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccountIamV2Interface) EXPECT() *MockAccountIamV2Interface_Expecter {
	return &MockAccountIamV2Interface_Expecter{mock: &_m.Mock}
}

// CreateGroup provides a mock function with given fields: ctx, request
func (_m *MockAccountIamV2Interface) CreateGroup(ctx context.Context, request iamv2.CreateGroupRequest) (*iamv2.Group, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroup")
	}

	var r0 *iamv2.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.CreateGroupRequest) (*iamv2.Group, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.CreateGroupRequest) *iamv2.Group); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iamv2.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iamv2.CreateGroupRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountIamV2Interface_CreateGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGroup'
type MockAccountIamV2Interface_CreateGroup_Call struct {
	*mock.Call
}

// CreateGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - request iamv2.CreateGroupRequest
func (_e *MockAccountIamV2Interface_Expecter) CreateGroup(ctx interface{}, request interface{}) *MockAccountIamV2Interface_CreateGroup_Call {
	return &MockAccountIamV2Interface_CreateGroup_Call{Call: _e.mock.On("CreateGroup", ctx, request)}
}

func (_c *MockAccountIamV2Interface_CreateGroup_Call) Run(run func(ctx context.Context, request iamv2.CreateGroupRequest)) *MockAccountIamV2Interface_CreateGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iamv2.CreateGroupRequest))
	})
	return _c
}

func (_c *MockAccountIamV2Interface_CreateGroup_Call) Return(_a0 *iamv2.Group, _a1 error) *MockAccountIamV2Interface_CreateGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountIamV2Interface_CreateGroup_Call) RunAndReturn(run func(context.Context, iamv2.CreateGroupRequest) (*iamv2.Group, error)) *MockAccountIamV2Interface_CreateGroup_Call {
	_c.Call.Return(run)
	return _c
}

// CreateServicePrincipal provides a mock function with given fields: ctx, request
func (_m *MockAccountIamV2Interface) CreateServicePrincipal(ctx context.Context, request iamv2.CreateServicePrincipalRequest) (*iamv2.ServicePrincipal, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateServicePrincipal")
	}

	var r0 *iamv2.ServicePrincipal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.CreateServicePrincipalRequest) (*iamv2.ServicePrincipal, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.CreateServicePrincipalRequest) *iamv2.ServicePrincipal); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iamv2.ServicePrincipal)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iamv2.CreateServicePrincipalRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountIamV2Interface_CreateServicePrincipal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateServicePrincipal'
type MockAccountIamV2Interface_CreateServicePrincipal_Call struct {
	*mock.Call
}

// CreateServicePrincipal is a helper method to define mock.On call
//   - ctx context.Context
//   - request iamv2.CreateServicePrincipalRequest
func (_e *MockAccountIamV2Interface_Expecter) CreateServicePrincipal(ctx interface{}, request interface{}) *MockAccountIamV2Interface_CreateServicePrincipal_Call {
	return &MockAccountIamV2Interface_CreateServicePrincipal_Call{Call: _e.mock.On("CreateServicePrincipal", ctx, request)}
}

func (_c *MockAccountIamV2Interface_CreateServicePrincipal_Call) Run(run func(ctx context.Context, request iamv2.CreateServicePrincipalRequest)) *MockAccountIamV2Interface_CreateServicePrincipal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iamv2.CreateServicePrincipalRequest))
	})
	return _c
}

func (_c *MockAccountIamV2Interface_CreateServicePrincipal_Call) Return(_a0 *iamv2.ServicePrincipal, _a1 error) *MockAccountIamV2Interface_CreateServicePrincipal_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountIamV2Interface_CreateServicePrincipal_Call) RunAndReturn(run func(context.Context, iamv2.CreateServicePrincipalRequest) (*iamv2.ServicePrincipal, error)) *MockAccountIamV2Interface_CreateServicePrincipal_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function with given fields: ctx, request
func (_m *MockAccountIamV2Interface) CreateUser(ctx context.Context, request iamv2.CreateUserRequest) (*iamv2.User, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *iamv2.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.CreateUserRequest) (*iamv2.User, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.CreateUserRequest) *iamv2.User); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iamv2.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iamv2.CreateUserRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountIamV2Interface_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockAccountIamV2Interface_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - request iamv2.CreateUserRequest
func (_e *MockAccountIamV2Interface_Expecter) CreateUser(ctx interface{}, request interface{}) *MockAccountIamV2Interface_CreateUser_Call {
	return &MockAccountIamV2Interface_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, request)}
}

func (_c *MockAccountIamV2Interface_CreateUser_Call) Run(run func(ctx context.Context, request iamv2.CreateUserRequest)) *MockAccountIamV2Interface_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iamv2.CreateUserRequest))
	})
	return _c
}

func (_c *MockAccountIamV2Interface_CreateUser_Call) Return(_a0 *iamv2.User, _a1 error) *MockAccountIamV2Interface_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountIamV2Interface_CreateUser_Call) RunAndReturn(run func(context.Context, iamv2.CreateUserRequest) (*iamv2.User, error)) *MockAccountIamV2Interface_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// CreateWorkspaceAccessDetail provides a mock function with given fields: ctx, request
func (_m *MockAccountIamV2Interface) CreateWorkspaceAccessDetail(ctx context.Context, request iamv2.CreateWorkspaceAccessDetailRequest) (*iamv2.WorkspaceAccessDetail, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateWorkspaceAccessDetail")
	}

	var r0 *iamv2.WorkspaceAccessDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.CreateWorkspaceAccessDetailRequest) (*iamv2.WorkspaceAccessDetail, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.CreateWorkspaceAccessDetailRequest) *iamv2.WorkspaceAccessDetail); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iamv2.WorkspaceAccessDetail)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iamv2.CreateWorkspaceAccessDetailRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountIamV2Interface_CreateWorkspaceAccessDetail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateWorkspaceAccessDetail'
type MockAccountIamV2Interface_CreateWorkspaceAccessDetail_Call struct {
	*mock.Call
}

// CreateWorkspaceAccessDetail is a helper method to define mock.On call
//   - ctx context.Context
//   - request iamv2.CreateWorkspaceAccessDetailRequest
func (_e *MockAccountIamV2Interface_Expecter) CreateWorkspaceAccessDetail(ctx interface{}, request interface{}) *MockAccountIamV2Interface_CreateWorkspaceAccessDetail_Call {
	return &MockAccountIamV2Interface_CreateWorkspaceAccessDetail_Call{Call: _e.mock.On("CreateWorkspaceAccessDetail", ctx, request)}
}

func (_c *MockAccountIamV2Interface_CreateWorkspaceAccessDetail_Call) Run(run func(ctx context.Context, request iamv2.CreateWorkspaceAccessDetailRequest)) *MockAccountIamV2Interface_CreateWorkspaceAccessDetail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iamv2.CreateWorkspaceAccessDetailRequest))
	})
	return _c
}

func (_c *MockAccountIamV2Interface_CreateWorkspaceAccessDetail_Call) Return(_a0 *iamv2.WorkspaceAccessDetail, _a1 error) *MockAccountIamV2Interface_CreateWorkspaceAccessDetail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountIamV2Interface_CreateWorkspaceAccessDetail_Call) RunAndReturn(run func(context.Context, iamv2.CreateWorkspaceAccessDetailRequest) (*iamv2.WorkspaceAccessDetail, error)) *MockAccountIamV2Interface_CreateWorkspaceAccessDetail_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGroup provides a mock function with given fields: ctx, request
func (_m *MockAccountIamV2Interface) DeleteGroup(ctx context.Context, request iamv2.DeleteGroupRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.DeleteGroupRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccountIamV2Interface_DeleteGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGroup'
type MockAccountIamV2Interface_DeleteGroup_Call struct {
	*mock.Call
}

// DeleteGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - request iamv2.DeleteGroupRequest
func (_e *MockAccountIamV2Interface_Expecter) DeleteGroup(ctx interface{}, request interface{}) *MockAccountIamV2Interface_DeleteGroup_Call {
	return &MockAccountIamV2Interface_DeleteGroup_Call{Call: _e.mock.On("DeleteGroup", ctx, request)}
}

func (_c *MockAccountIamV2Interface_DeleteGroup_Call) Run(run func(ctx context.Context, request iamv2.DeleteGroupRequest)) *MockAccountIamV2Interface_DeleteGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iamv2.DeleteGroupRequest))
	})
	return _c
}

func (_c *MockAccountIamV2Interface_DeleteGroup_Call) Return(_a0 error) *MockAccountIamV2Interface_DeleteGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountIamV2Interface_DeleteGroup_Call) RunAndReturn(run func(context.Context, iamv2.DeleteGroupRequest) error) *MockAccountIamV2Interface_DeleteGroup_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteServicePrincipal provides a mock function with given fields: ctx, request
func (_m *MockAccountIamV2Interface) DeleteServicePrincipal(ctx context.Context, request iamv2.DeleteServicePrincipalRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for DeleteServicePrincipal")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.DeleteServicePrincipalRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccountIamV2Interface_DeleteServicePrincipal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteServicePrincipal'
type MockAccountIamV2Interface_DeleteServicePrincipal_Call struct {
	*mock.Call
}

// DeleteServicePrincipal is a helper method to define mock.On call
//   - ctx context.Context
//   - request iamv2.DeleteServicePrincipalRequest
func (_e *MockAccountIamV2Interface_Expecter) DeleteServicePrincipal(ctx interface{}, request interface{}) *MockAccountIamV2Interface_DeleteServicePrincipal_Call {
	return &MockAccountIamV2Interface_DeleteServicePrincipal_Call{Call: _e.mock.On("DeleteServicePrincipal", ctx, request)}
}

func (_c *MockAccountIamV2Interface_DeleteServicePrincipal_Call) Run(run func(ctx context.Context, request iamv2.DeleteServicePrincipalRequest)) *MockAccountIamV2Interface_DeleteServicePrincipal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iamv2.DeleteServicePrincipalRequest))
	})
	return _c
}

func (_c *MockAccountIamV2Interface_DeleteServicePrincipal_Call) Return(_a0 error) *MockAccountIamV2Interface_DeleteServicePrincipal_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountIamV2Interface_DeleteServicePrincipal_Call) RunAndReturn(run func(context.Context, iamv2.DeleteServicePrincipalRequest) error) *MockAccountIamV2Interface_DeleteServicePrincipal_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function with given fields: ctx, request
func (_m *MockAccountIamV2Interface) DeleteUser(ctx context.Context, request iamv2.DeleteUserRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.DeleteUserRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccountIamV2Interface_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type MockAccountIamV2Interface_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - ctx context.Context
//   - request iamv2.DeleteUserRequest
func (_e *MockAccountIamV2Interface_Expecter) DeleteUser(ctx interface{}, request interface{}) *MockAccountIamV2Interface_DeleteUser_Call {
	return &MockAccountIamV2Interface_DeleteUser_Call{Call: _e.mock.On("DeleteUser", ctx, request)}
}

func (_c *MockAccountIamV2Interface_DeleteUser_Call) Run(run func(ctx context.Context, request iamv2.DeleteUserRequest)) *MockAccountIamV2Interface_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iamv2.DeleteUserRequest))
	})
	return _c
}

func (_c *MockAccountIamV2Interface_DeleteUser_Call) Return(_a0 error) *MockAccountIamV2Interface_DeleteUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountIamV2Interface_DeleteUser_Call) RunAndReturn(run func(context.Context, iamv2.DeleteUserRequest) error) *MockAccountIamV2Interface_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteWorkspaceAccessDetail provides a mock function with given fields: ctx, request
func (_m *MockAccountIamV2Interface) DeleteWorkspaceAccessDetail(ctx context.Context, request iamv2.DeleteWorkspaceAccessDetailRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWorkspaceAccessDetail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.DeleteWorkspaceAccessDetailRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccountIamV2Interface_DeleteWorkspaceAccessDetail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteWorkspaceAccessDetail'
type MockAccountIamV2Interface_DeleteWorkspaceAccessDetail_Call struct {
	*mock.Call
}

// DeleteWorkspaceAccessDetail is a helper method to define mock.On call
//   - ctx context.Context
//   - request iamv2.DeleteWorkspaceAccessDetailRequest
func (_e *MockAccountIamV2Interface_Expecter) DeleteWorkspaceAccessDetail(ctx interface{}, request interface{}) *MockAccountIamV2Interface_DeleteWorkspaceAccessDetail_Call {
	return &MockAccountIamV2Interface_DeleteWorkspaceAccessDetail_Call{Call: _e.mock.On("DeleteWorkspaceAccessDetail", ctx, request)}
}

func (_c *MockAccountIamV2Interface_DeleteWorkspaceAccessDetail_Call) Run(run func(ctx context.Context, request iamv2.DeleteWorkspaceAccessDetailRequest)) *MockAccountIamV2Interface_DeleteWorkspaceAccessDetail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iamv2.DeleteWorkspaceAccessDetailRequest))
	})
	return _c
}

func (_c *MockAccountIamV2Interface_DeleteWorkspaceAccessDetail_Call) Return(_a0 error) *MockAccountIamV2Interface_DeleteWorkspaceAccessDetail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountIamV2Interface_DeleteWorkspaceAccessDetail_Call) RunAndReturn(run func(context.Context, iamv2.DeleteWorkspaceAccessDetailRequest) error) *MockAccountIamV2Interface_DeleteWorkspaceAccessDetail_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroup provides a mock function with given fields: ctx, request
func (_m *MockAccountIamV2Interface) GetGroup(ctx context.Context, request iamv2.GetGroupRequest) (*iamv2.Group, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetGroup")
	}

	var r0 *iamv2.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.GetGroupRequest) (*iamv2.Group, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.GetGroupRequest) *iamv2.Group); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iamv2.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iamv2.GetGroupRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountIamV2Interface_GetGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroup'
type MockAccountIamV2Interface_GetGroup_Call struct {
	*mock.Call
}

// GetGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - request iamv2.GetGroupRequest
func (_e *MockAccountIamV2Interface_Expecter) GetGroup(ctx interface{}, request interface{}) *MockAccountIamV2Interface_GetGroup_Call {
	return &MockAccountIamV2Interface_GetGroup_Call{Call: _e.mock.On("GetGroup", ctx, request)}
}

func (_c *MockAccountIamV2Interface_GetGroup_Call) Run(run func(ctx context.Context, request iamv2.GetGroupRequest)) *MockAccountIamV2Interface_GetGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iamv2.GetGroupRequest))
	})
	return _c
}

func (_c *MockAccountIamV2Interface_GetGroup_Call) Return(_a0 *iamv2.Group, _a1 error) *MockAccountIamV2Interface_GetGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountIamV2Interface_GetGroup_Call) RunAndReturn(run func(context.Context, iamv2.GetGroupRequest) (*iamv2.Group, error)) *MockAccountIamV2Interface_GetGroup_Call {
	_c.Call.Return(run)
	return _c
}

// GetServicePrincipal provides a mock function with given fields: ctx, request
func (_m *MockAccountIamV2Interface) GetServicePrincipal(ctx context.Context, request iamv2.GetServicePrincipalRequest) (*iamv2.ServicePrincipal, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetServicePrincipal")
	}

	var r0 *iamv2.ServicePrincipal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.GetServicePrincipalRequest) (*iamv2.ServicePrincipal, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.GetServicePrincipalRequest) *iamv2.ServicePrincipal); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iamv2.ServicePrincipal)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iamv2.GetServicePrincipalRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountIamV2Interface_GetServicePrincipal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServicePrincipal'
type MockAccountIamV2Interface_GetServicePrincipal_Call struct {
	*mock.Call
}

// GetServicePrincipal is a helper method to define mock.On call
//   - ctx context.Context
//   - request iamv2.GetServicePrincipalRequest
func (_e *MockAccountIamV2Interface_Expecter) GetServicePrincipal(ctx interface{}, request interface{}) *MockAccountIamV2Interface_GetServicePrincipal_Call {
	return &MockAccountIamV2Interface_GetServicePrincipal_Call{Call: _e.mock.On("GetServicePrincipal", ctx, request)}
}

func (_c *MockAccountIamV2Interface_GetServicePrincipal_Call) Run(run func(ctx context.Context, request iamv2.GetServicePrincipalRequest)) *MockAccountIamV2Interface_GetServicePrincipal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iamv2.GetServicePrincipalRequest))
	})
	return _c
}

func (_c *MockAccountIamV2Interface_GetServicePrincipal_Call) Return(_a0 *iamv2.ServicePrincipal, _a1 error) *MockAccountIamV2Interface_GetServicePrincipal_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountIamV2Interface_GetServicePrincipal_Call) RunAndReturn(run func(context.Context, iamv2.GetServicePrincipalRequest) (*iamv2.ServicePrincipal, error)) *MockAccountIamV2Interface_GetServicePrincipal_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function with given fields: ctx, request
func (_m *MockAccountIamV2Interface) GetUser(ctx context.Context, request iamv2.GetUserRequest) (*iamv2.User, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *iamv2.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.GetUserRequest) (*iamv2.User, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.GetUserRequest) *iamv2.User); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iamv2.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iamv2.GetUserRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountIamV2Interface_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type MockAccountIamV2Interface_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - ctx context.Context
//   - request iamv2.GetUserRequest
func (_e *MockAccountIamV2Interface_Expecter) GetUser(ctx interface{}, request interface{}) *MockAccountIamV2Interface_GetUser_Call {
	return &MockAccountIamV2Interface_GetUser_Call{Call: _e.mock.On("GetUser", ctx, request)}
}

func (_c *MockAccountIamV2Interface_GetUser_Call) Run(run func(ctx context.Context, request iamv2.GetUserRequest)) *MockAccountIamV2Interface_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iamv2.GetUserRequest))
	})
	return _c
}

func (_c *MockAccountIamV2Interface_GetUser_Call) Return(_a0 *iamv2.User, _a1 error) *MockAccountIamV2Interface_GetUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountIamV2Interface_GetUser_Call) RunAndReturn(run func(context.Context, iamv2.GetUserRequest) (*iamv2.User, error)) *MockAccountIamV2Interface_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkspaceAccessDetail provides a mock function with given fields: ctx, request
func (_m *MockAccountIamV2Interface) GetWorkspaceAccessDetail(ctx context.Context, request iamv2.GetWorkspaceAccessDetailRequest) (*iamv2.WorkspaceAccessDetail, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkspaceAccessDetail")
	}

	var r0 *iamv2.WorkspaceAccessDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.GetWorkspaceAccessDetailRequest) (*iamv2.WorkspaceAccessDetail, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.GetWorkspaceAccessDetailRequest) *iamv2.WorkspaceAccessDetail); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iamv2.WorkspaceAccessDetail)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iamv2.GetWorkspaceAccessDetailRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountIamV2Interface_GetWorkspaceAccessDetail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkspaceAccessDetail'
type MockAccountIamV2Interface_GetWorkspaceAccessDetail_Call struct {
	*mock.Call
}

// GetWorkspaceAccessDetail is a helper method to define mock.On call
//   - ctx context.Context
//   - request iamv2.GetWorkspaceAccessDetailRequest
func (_e *MockAccountIamV2Interface_Expecter) GetWorkspaceAccessDetail(ctx interface{}, request interface{}) *MockAccountIamV2Interface_GetWorkspaceAccessDetail_Call {
	return &MockAccountIamV2Interface_GetWorkspaceAccessDetail_Call{Call: _e.mock.On("GetWorkspaceAccessDetail", ctx, request)}
}

func (_c *MockAccountIamV2Interface_GetWorkspaceAccessDetail_Call) Run(run func(ctx context.Context, request iamv2.GetWorkspaceAccessDetailRequest)) *MockAccountIamV2Interface_GetWorkspaceAccessDetail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iamv2.GetWorkspaceAccessDetailRequest))
	})
	return _c
}

func (_c *MockAccountIamV2Interface_GetWorkspaceAccessDetail_Call) Return(_a0 *iamv2.WorkspaceAccessDetail, _a1 error) *MockAccountIamV2Interface_GetWorkspaceAccessDetail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountIamV2Interface_GetWorkspaceAccessDetail_Call) RunAndReturn(run func(context.Context, iamv2.GetWorkspaceAccessDetailRequest) (*iamv2.WorkspaceAccessDetail, error)) *MockAccountIamV2Interface_GetWorkspaceAccessDetail_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroups provides a mock function with given fields: ctx, request
func (_m *MockAccountIamV2Interface) ListGroups(ctx context.Context, request iamv2.ListGroupsRequest) (*iamv2.ListGroupsResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListGroups")
	}

	var r0 *iamv2.ListGroupsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.ListGroupsRequest) (*iamv2.ListGroupsResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.ListGroupsRequest) *iamv2.ListGroupsResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iamv2.ListGroupsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iamv2.ListGroupsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountIamV2Interface_ListGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroups'
type MockAccountIamV2Interface_ListGroups_Call struct {
	*mock.Call
}

// ListGroups is a helper method to define mock.On call
//   - ctx context.Context
//   - request iamv2.ListGroupsRequest
func (_e *MockAccountIamV2Interface_Expecter) ListGroups(ctx interface{}, request interface{}) *MockAccountIamV2Interface_ListGroups_Call {
	return &MockAccountIamV2Interface_ListGroups_Call{Call: _e.mock.On("ListGroups", ctx, request)}
}

func (_c *MockAccountIamV2Interface_ListGroups_Call) Run(run func(ctx context.Context, request iamv2.ListGroupsRequest)) *MockAccountIamV2Interface_ListGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iamv2.ListGroupsRequest))
	})
	return _c
}

func (_c *MockAccountIamV2Interface_ListGroups_Call) Return(_a0 *iamv2.ListGroupsResponse, _a1 error) *MockAccountIamV2Interface_ListGroups_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountIamV2Interface_ListGroups_Call) RunAndReturn(run func(context.Context, iamv2.ListGroupsRequest) (*iamv2.ListGroupsResponse, error)) *MockAccountIamV2Interface_ListGroups_Call {
	_c.Call.Return(run)
	return _c
}

// ListServicePrincipals provides a mock function with given fields: ctx, request
func (_m *MockAccountIamV2Interface) ListServicePrincipals(ctx context.Context, request iamv2.ListServicePrincipalsRequest) (*iamv2.ListServicePrincipalsResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListServicePrincipals")
	}

	var r0 *iamv2.ListServicePrincipalsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.ListServicePrincipalsRequest) (*iamv2.ListServicePrincipalsResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.ListServicePrincipalsRequest) *iamv2.ListServicePrincipalsResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iamv2.ListServicePrincipalsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iamv2.ListServicePrincipalsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountIamV2Interface_ListServicePrincipals_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListServicePrincipals'
type MockAccountIamV2Interface_ListServicePrincipals_Call struct {
	*mock.Call
}

// ListServicePrincipals is a helper method to define mock.On call
//   - ctx context.Context
//   - request iamv2.ListServicePrincipalsRequest
func (_e *MockAccountIamV2Interface_Expecter) ListServicePrincipals(ctx interface{}, request interface{}) *MockAccountIamV2Interface_ListServicePrincipals_Call {
	return &MockAccountIamV2Interface_ListServicePrincipals_Call{Call: _e.mock.On("ListServicePrincipals", ctx, request)}
}

func (_c *MockAccountIamV2Interface_ListServicePrincipals_Call) Run(run func(ctx context.Context, request iamv2.ListServicePrincipalsRequest)) *MockAccountIamV2Interface_ListServicePrincipals_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iamv2.ListServicePrincipalsRequest))
	})
	return _c
}

func (_c *MockAccountIamV2Interface_ListServicePrincipals_Call) Return(_a0 *iamv2.ListServicePrincipalsResponse, _a1 error) *MockAccountIamV2Interface_ListServicePrincipals_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountIamV2Interface_ListServicePrincipals_Call) RunAndReturn(run func(context.Context, iamv2.ListServicePrincipalsRequest) (*iamv2.ListServicePrincipalsResponse, error)) *MockAccountIamV2Interface_ListServicePrincipals_Call {
	_c.Call.Return(run)
	return _c
}

// ListUsers provides a mock function with given fields: ctx, request
func (_m *MockAccountIamV2Interface) ListUsers(ctx context.Context, request iamv2.ListUsersRequest) (*iamv2.ListUsersResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListUsers")
	}

	var r0 *iamv2.ListUsersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.ListUsersRequest) (*iamv2.ListUsersResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.ListUsersRequest) *iamv2.ListUsersResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iamv2.ListUsersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iamv2.ListUsersRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountIamV2Interface_ListUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUsers'
type MockAccountIamV2Interface_ListUsers_Call struct {
	*mock.Call
}

// ListUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - request iamv2.ListUsersRequest
func (_e *MockAccountIamV2Interface_Expecter) ListUsers(ctx interface{}, request interface{}) *MockAccountIamV2Interface_ListUsers_Call {
	return &MockAccountIamV2Interface_ListUsers_Call{Call: _e.mock.On("ListUsers", ctx, request)}
}

func (_c *MockAccountIamV2Interface_ListUsers_Call) Run(run func(ctx context.Context, request iamv2.ListUsersRequest)) *MockAccountIamV2Interface_ListUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iamv2.ListUsersRequest))
	})
	return _c
}

func (_c *MockAccountIamV2Interface_ListUsers_Call) Return(_a0 *iamv2.ListUsersResponse, _a1 error) *MockAccountIamV2Interface_ListUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountIamV2Interface_ListUsers_Call) RunAndReturn(run func(context.Context, iamv2.ListUsersRequest) (*iamv2.ListUsersResponse, error)) *MockAccountIamV2Interface_ListUsers_Call {
	_c.Call.Return(run)
	return _c
}

// ListWorkspaceAccessDetails provides a mock function with given fields: ctx, request
func (_m *MockAccountIamV2Interface) ListWorkspaceAccessDetails(ctx context.Context, request iamv2.ListWorkspaceAccessDetailsRequest) (*iamv2.ListWorkspaceAccessDetailsResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListWorkspaceAccessDetails")
	}

	var r0 *iamv2.ListWorkspaceAccessDetailsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.ListWorkspaceAccessDetailsRequest) (*iamv2.ListWorkspaceAccessDetailsResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.ListWorkspaceAccessDetailsRequest) *iamv2.ListWorkspaceAccessDetailsResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iamv2.ListWorkspaceAccessDetailsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iamv2.ListWorkspaceAccessDetailsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountIamV2Interface_ListWorkspaceAccessDetails_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListWorkspaceAccessDetails'
type MockAccountIamV2Interface_ListWorkspaceAccessDetails_Call struct {
	*mock.Call
}

// ListWorkspaceAccessDetails is a helper method to define mock.On call
//   - ctx context.Context
//   - request iamv2.ListWorkspaceAccessDetailsRequest
func (_e *MockAccountIamV2Interface_Expecter) ListWorkspaceAccessDetails(ctx interface{}, request interface{}) *MockAccountIamV2Interface_ListWorkspaceAccessDetails_Call {
	return &MockAccountIamV2Interface_ListWorkspaceAccessDetails_Call{Call: _e.mock.On("ListWorkspaceAccessDetails", ctx, request)}
}

func (_c *MockAccountIamV2Interface_ListWorkspaceAccessDetails_Call) Run(run func(ctx context.Context, request iamv2.ListWorkspaceAccessDetailsRequest)) *MockAccountIamV2Interface_ListWorkspaceAccessDetails_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iamv2.ListWorkspaceAccessDetailsRequest))
	})
	return _c
}

func (_c *MockAccountIamV2Interface_ListWorkspaceAccessDetails_Call) Return(_a0 *iamv2.ListWorkspaceAccessDetailsResponse, _a1 error) *MockAccountIamV2Interface_ListWorkspaceAccessDetails_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountIamV2Interface_ListWorkspaceAccessDetails_Call) RunAndReturn(run func(context.Context, iamv2.ListWorkspaceAccessDetailsRequest) (*iamv2.ListWorkspaceAccessDetailsResponse, error)) *MockAccountIamV2Interface_ListWorkspaceAccessDetails_Call {
	_c.Call.Return(run)
	return _c
}

// SyncGroup provides a mock function with given fields: ctx, request
func (_m *MockAccountIamV2Interface) SyncGroup(ctx context.Context, request iamv2.SyncGroupRequest) (*iamv2.SyncGroupResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for SyncGroup")
	}

	var r0 *iamv2.SyncGroupResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.SyncGroupRequest) (*iamv2.SyncGroupResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.SyncGroupRequest) *iamv2.SyncGroupResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iamv2.SyncGroupResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iamv2.SyncGroupRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountIamV2Interface_SyncGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SyncGroup'
type MockAccountIamV2Interface_SyncGroup_Call struct {
	*mock.Call
}

// SyncGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - request iamv2.SyncGroupRequest
func (_e *MockAccountIamV2Interface_Expecter) SyncGroup(ctx interface{}, request interface{}) *MockAccountIamV2Interface_SyncGroup_Call {
	return &MockAccountIamV2Interface_SyncGroup_Call{Call: _e.mock.On("SyncGroup", ctx, request)}
}

func (_c *MockAccountIamV2Interface_SyncGroup_Call) Run(run func(ctx context.Context, request iamv2.SyncGroupRequest)) *MockAccountIamV2Interface_SyncGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iamv2.SyncGroupRequest))
	})
	return _c
}

func (_c *MockAccountIamV2Interface_SyncGroup_Call) Return(_a0 *iamv2.SyncGroupResponse, _a1 error) *MockAccountIamV2Interface_SyncGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountIamV2Interface_SyncGroup_Call) RunAndReturn(run func(context.Context, iamv2.SyncGroupRequest) (*iamv2.SyncGroupResponse, error)) *MockAccountIamV2Interface_SyncGroup_Call {
	_c.Call.Return(run)
	return _c
}

// SyncServicePrincipal provides a mock function with given fields: ctx, request
func (_m *MockAccountIamV2Interface) SyncServicePrincipal(ctx context.Context, request iamv2.SyncServicePrincipalRequest) (*iamv2.SyncServicePrincipalResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for SyncServicePrincipal")
	}

	var r0 *iamv2.SyncServicePrincipalResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.SyncServicePrincipalRequest) (*iamv2.SyncServicePrincipalResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.SyncServicePrincipalRequest) *iamv2.SyncServicePrincipalResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iamv2.SyncServicePrincipalResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iamv2.SyncServicePrincipalRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountIamV2Interface_SyncServicePrincipal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SyncServicePrincipal'
type MockAccountIamV2Interface_SyncServicePrincipal_Call struct {
	*mock.Call
}

// SyncServicePrincipal is a helper method to define mock.On call
//   - ctx context.Context
//   - request iamv2.SyncServicePrincipalRequest
func (_e *MockAccountIamV2Interface_Expecter) SyncServicePrincipal(ctx interface{}, request interface{}) *MockAccountIamV2Interface_SyncServicePrincipal_Call {
	return &MockAccountIamV2Interface_SyncServicePrincipal_Call{Call: _e.mock.On("SyncServicePrincipal", ctx, request)}
}

func (_c *MockAccountIamV2Interface_SyncServicePrincipal_Call) Run(run func(ctx context.Context, request iamv2.SyncServicePrincipalRequest)) *MockAccountIamV2Interface_SyncServicePrincipal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iamv2.SyncServicePrincipalRequest))
	})
	return _c
}

func (_c *MockAccountIamV2Interface_SyncServicePrincipal_Call) Return(_a0 *iamv2.SyncServicePrincipalResponse, _a1 error) *MockAccountIamV2Interface_SyncServicePrincipal_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountIamV2Interface_SyncServicePrincipal_Call) RunAndReturn(run func(context.Context, iamv2.SyncServicePrincipalRequest) (*iamv2.SyncServicePrincipalResponse, error)) *MockAccountIamV2Interface_SyncServicePrincipal_Call {
	_c.Call.Return(run)
	return _c
}

// SyncUser provides a mock function with given fields: ctx, request
func (_m *MockAccountIamV2Interface) SyncUser(ctx context.Context, request iamv2.SyncUserRequest) (*iamv2.SyncUserResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for SyncUser")
	}

	var r0 *iamv2.SyncUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.SyncUserRequest) (*iamv2.SyncUserResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.SyncUserRequest) *iamv2.SyncUserResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iamv2.SyncUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iamv2.SyncUserRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountIamV2Interface_SyncUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SyncUser'
type MockAccountIamV2Interface_SyncUser_Call struct {
	*mock.Call
}

// SyncUser is a helper method to define mock.On call
//   - ctx context.Context
//   - request iamv2.SyncUserRequest
func (_e *MockAccountIamV2Interface_Expecter) SyncUser(ctx interface{}, request interface{}) *MockAccountIamV2Interface_SyncUser_Call {
	return &MockAccountIamV2Interface_SyncUser_Call{Call: _e.mock.On("SyncUser", ctx, request)}
}

func (_c *MockAccountIamV2Interface_SyncUser_Call) Run(run func(ctx context.Context, request iamv2.SyncUserRequest)) *MockAccountIamV2Interface_SyncUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iamv2.SyncUserRequest))
	})
	return _c
}

func (_c *MockAccountIamV2Interface_SyncUser_Call) Return(_a0 *iamv2.SyncUserResponse, _a1 error) *MockAccountIamV2Interface_SyncUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountIamV2Interface_SyncUser_Call) RunAndReturn(run func(context.Context, iamv2.SyncUserRequest) (*iamv2.SyncUserResponse, error)) *MockAccountIamV2Interface_SyncUser_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGroup provides a mock function with given fields: ctx, request
func (_m *MockAccountIamV2Interface) UpdateGroup(ctx context.Context, request iamv2.UpdateGroupRequest) (*iamv2.Group, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGroup")
	}

	var r0 *iamv2.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.UpdateGroupRequest) (*iamv2.Group, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.UpdateGroupRequest) *iamv2.Group); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iamv2.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iamv2.UpdateGroupRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountIamV2Interface_UpdateGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGroup'
type MockAccountIamV2Interface_UpdateGroup_Call struct {
	*mock.Call
}

// UpdateGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - request iamv2.UpdateGroupRequest
func (_e *MockAccountIamV2Interface_Expecter) UpdateGroup(ctx interface{}, request interface{}) *MockAccountIamV2Interface_UpdateGroup_Call {
	return &MockAccountIamV2Interface_UpdateGroup_Call{Call: _e.mock.On("UpdateGroup", ctx, request)}
}

func (_c *MockAccountIamV2Interface_UpdateGroup_Call) Run(run func(ctx context.Context, request iamv2.UpdateGroupRequest)) *MockAccountIamV2Interface_UpdateGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iamv2.UpdateGroupRequest))
	})
	return _c
}

func (_c *MockAccountIamV2Interface_UpdateGroup_Call) Return(_a0 *iamv2.Group, _a1 error) *MockAccountIamV2Interface_UpdateGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountIamV2Interface_UpdateGroup_Call) RunAndReturn(run func(context.Context, iamv2.UpdateGroupRequest) (*iamv2.Group, error)) *MockAccountIamV2Interface_UpdateGroup_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateServicePrincipal provides a mock function with given fields: ctx, request
func (_m *MockAccountIamV2Interface) UpdateServicePrincipal(ctx context.Context, request iamv2.UpdateServicePrincipalRequest) (*iamv2.ServicePrincipal, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateServicePrincipal")
	}

	var r0 *iamv2.ServicePrincipal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.UpdateServicePrincipalRequest) (*iamv2.ServicePrincipal, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.UpdateServicePrincipalRequest) *iamv2.ServicePrincipal); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iamv2.ServicePrincipal)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iamv2.UpdateServicePrincipalRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountIamV2Interface_UpdateServicePrincipal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateServicePrincipal'
type MockAccountIamV2Interface_UpdateServicePrincipal_Call struct {
	*mock.Call
}

// UpdateServicePrincipal is a helper method to define mock.On call
//   - ctx context.Context
//   - request iamv2.UpdateServicePrincipalRequest
func (_e *MockAccountIamV2Interface_Expecter) UpdateServicePrincipal(ctx interface{}, request interface{}) *MockAccountIamV2Interface_UpdateServicePrincipal_Call {
	return &MockAccountIamV2Interface_UpdateServicePrincipal_Call{Call: _e.mock.On("UpdateServicePrincipal", ctx, request)}
}

func (_c *MockAccountIamV2Interface_UpdateServicePrincipal_Call) Run(run func(ctx context.Context, request iamv2.UpdateServicePrincipalRequest)) *MockAccountIamV2Interface_UpdateServicePrincipal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iamv2.UpdateServicePrincipalRequest))
	})
	return _c
}

func (_c *MockAccountIamV2Interface_UpdateServicePrincipal_Call) Return(_a0 *iamv2.ServicePrincipal, _a1 error) *MockAccountIamV2Interface_UpdateServicePrincipal_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountIamV2Interface_UpdateServicePrincipal_Call) RunAndReturn(run func(context.Context, iamv2.UpdateServicePrincipalRequest) (*iamv2.ServicePrincipal, error)) *MockAccountIamV2Interface_UpdateServicePrincipal_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: ctx, request
func (_m *MockAccountIamV2Interface) UpdateUser(ctx context.Context, request iamv2.UpdateUserRequest) (*iamv2.User, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 *iamv2.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.UpdateUserRequest) (*iamv2.User, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.UpdateUserRequest) *iamv2.User); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iamv2.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iamv2.UpdateUserRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountIamV2Interface_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type MockAccountIamV2Interface_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - request iamv2.UpdateUserRequest
func (_e *MockAccountIamV2Interface_Expecter) UpdateUser(ctx interface{}, request interface{}) *MockAccountIamV2Interface_UpdateUser_Call {
	return &MockAccountIamV2Interface_UpdateUser_Call{Call: _e.mock.On("UpdateUser", ctx, request)}
}

func (_c *MockAccountIamV2Interface_UpdateUser_Call) Run(run func(ctx context.Context, request iamv2.UpdateUserRequest)) *MockAccountIamV2Interface_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iamv2.UpdateUserRequest))
	})
	return _c
}

func (_c *MockAccountIamV2Interface_UpdateUser_Call) Return(_a0 *iamv2.User, _a1 error) *MockAccountIamV2Interface_UpdateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountIamV2Interface_UpdateUser_Call) RunAndReturn(run func(context.Context, iamv2.UpdateUserRequest) (*iamv2.User, error)) *MockAccountIamV2Interface_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateWorkspaceAccessDetail provides a mock function with given fields: ctx, request
func (_m *MockAccountIamV2Interface) UpdateWorkspaceAccessDetail(ctx context.Context, request iamv2.UpdateWorkspaceAccessDetailRequest) (*iamv2.WorkspaceAccessDetail, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWorkspaceAccessDetail")
	}

	var r0 *iamv2.WorkspaceAccessDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.UpdateWorkspaceAccessDetailRequest) (*iamv2.WorkspaceAccessDetail, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iamv2.UpdateWorkspaceAccessDetailRequest) *iamv2.WorkspaceAccessDetail); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iamv2.WorkspaceAccessDetail)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, iamv2.UpdateWorkspaceAccessDetailRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountIamV2Interface_UpdateWorkspaceAccessDetail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateWorkspaceAccessDetail'
type MockAccountIamV2Interface_UpdateWorkspaceAccessDetail_Call struct {
	*mock.Call
}

// UpdateWorkspaceAccessDetail is a helper method to define mock.On call
//   - ctx context.Context
//   - request iamv2.UpdateWorkspaceAccessDetailRequest
func (_e *MockAccountIamV2Interface_Expecter) UpdateWorkspaceAccessDetail(ctx interface{}, request interface{}) *MockAccountIamV2Interface_UpdateWorkspaceAccessDetail_Call {
	return &MockAccountIamV2Interface_UpdateWorkspaceAccessDetail_Call{Call: _e.mock.On("UpdateWorkspaceAccessDetail", ctx, request)}
}

func (_c *MockAccountIamV2Interface_UpdateWorkspaceAccessDetail_Call) Run(run func(ctx context.Context, request iamv2.UpdateWorkspaceAccessDetailRequest)) *MockAccountIamV2Interface_UpdateWorkspaceAccessDetail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(iamv2.UpdateWorkspaceAccessDetailRequest))
	})
	return _c
}

func (_c *MockAccountIamV2Interface_UpdateWorkspaceAccessDetail_Call) Return(_a0 *iamv2.WorkspaceAccessDetail, _a1 error) *MockAccountIamV2Interface_UpdateWorkspaceAccessDetail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountIamV2Interface_UpdateWorkspaceAccessDetail_Call) RunAndReturn(run func(context.Context, iamv2.UpdateWorkspaceAccessDetailRequest) (*iamv2.WorkspaceAccessDetail, error)) *MockAccountIamV2Interface_UpdateWorkspaceAccessDetail_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAccountIamV2Interface creates a new instance of MockAccountIamV2Interface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccountIamV2Interface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccountIamV2Interface {
	mock := &MockAccountIamV2Interface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
