// Code generated by mockery v2.53.2. DO NOT EDIT.

package ml

import (
	context "context"

	listing "github.com/databricks/databricks-sdk-go/listing"
	ml "github.com/databricks/databricks-sdk-go/service/ml"

	mock "github.com/stretchr/testify/mock"
)

// MockMaterializedFeaturesInterface is an autogenerated mock type for the MaterializedFeaturesInterface type
type MockMaterializedFeaturesInterface struct {
	mock.Mock
}

type MockMaterializedFeaturesInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMaterializedFeaturesInterface) EXPECT() *MockMaterializedFeaturesInterface_Expecter {
	return &MockMaterializedFeaturesInterface_Expecter{mock: &_m.Mock}
}

// CreateFeatureTag provides a mock function with given fields: ctx, request
func (_m *MockMaterializedFeaturesInterface) CreateFeatureTag(ctx context.Context, request ml.CreateFeatureTagRequest) (*ml.FeatureTag, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateFeatureTag")
	}

	var r0 *ml.FeatureTag
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ml.CreateFeatureTagRequest) (*ml.FeatureTag, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ml.CreateFeatureTagRequest) *ml.FeatureTag); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ml.FeatureTag)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ml.CreateFeatureTagRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMaterializedFeaturesInterface_CreateFeatureTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateFeatureTag'
type MockMaterializedFeaturesInterface_CreateFeatureTag_Call struct {
	*mock.Call
}

// CreateFeatureTag is a helper method to define mock.On call
//   - ctx context.Context
//   - request ml.CreateFeatureTagRequest
func (_e *MockMaterializedFeaturesInterface_Expecter) CreateFeatureTag(ctx interface{}, request interface{}) *MockMaterializedFeaturesInterface_CreateFeatureTag_Call {
	return &MockMaterializedFeaturesInterface_CreateFeatureTag_Call{Call: _e.mock.On("CreateFeatureTag", ctx, request)}
}

func (_c *MockMaterializedFeaturesInterface_CreateFeatureTag_Call) Run(run func(ctx context.Context, request ml.CreateFeatureTagRequest)) *MockMaterializedFeaturesInterface_CreateFeatureTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ml.CreateFeatureTagRequest))
	})
	return _c
}

func (_c *MockMaterializedFeaturesInterface_CreateFeatureTag_Call) Return(_a0 *ml.FeatureTag, _a1 error) *MockMaterializedFeaturesInterface_CreateFeatureTag_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMaterializedFeaturesInterface_CreateFeatureTag_Call) RunAndReturn(run func(context.Context, ml.CreateFeatureTagRequest) (*ml.FeatureTag, error)) *MockMaterializedFeaturesInterface_CreateFeatureTag_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFeatureTag provides a mock function with given fields: ctx, request
func (_m *MockMaterializedFeaturesInterface) DeleteFeatureTag(ctx context.Context, request ml.DeleteFeatureTagRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFeatureTag")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ml.DeleteFeatureTagRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMaterializedFeaturesInterface_DeleteFeatureTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFeatureTag'
type MockMaterializedFeaturesInterface_DeleteFeatureTag_Call struct {
	*mock.Call
}

// DeleteFeatureTag is a helper method to define mock.On call
//   - ctx context.Context
//   - request ml.DeleteFeatureTagRequest
func (_e *MockMaterializedFeaturesInterface_Expecter) DeleteFeatureTag(ctx interface{}, request interface{}) *MockMaterializedFeaturesInterface_DeleteFeatureTag_Call {
	return &MockMaterializedFeaturesInterface_DeleteFeatureTag_Call{Call: _e.mock.On("DeleteFeatureTag", ctx, request)}
}

func (_c *MockMaterializedFeaturesInterface_DeleteFeatureTag_Call) Run(run func(ctx context.Context, request ml.DeleteFeatureTagRequest)) *MockMaterializedFeaturesInterface_DeleteFeatureTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ml.DeleteFeatureTagRequest))
	})
	return _c
}

func (_c *MockMaterializedFeaturesInterface_DeleteFeatureTag_Call) Return(_a0 error) *MockMaterializedFeaturesInterface_DeleteFeatureTag_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMaterializedFeaturesInterface_DeleteFeatureTag_Call) RunAndReturn(run func(context.Context, ml.DeleteFeatureTagRequest) error) *MockMaterializedFeaturesInterface_DeleteFeatureTag_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFeatureTagByTableNameAndFeatureNameAndKey provides a mock function with given fields: ctx, tableName, featureName, key
func (_m *MockMaterializedFeaturesInterface) DeleteFeatureTagByTableNameAndFeatureNameAndKey(ctx context.Context, tableName string, featureName string, key string) error {
	ret := _m.Called(ctx, tableName, featureName, key)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFeatureTagByTableNameAndFeatureNameAndKey")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, tableName, featureName, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMaterializedFeaturesInterface_DeleteFeatureTagByTableNameAndFeatureNameAndKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFeatureTagByTableNameAndFeatureNameAndKey'
type MockMaterializedFeaturesInterface_DeleteFeatureTagByTableNameAndFeatureNameAndKey_Call struct {
	*mock.Call
}

// DeleteFeatureTagByTableNameAndFeatureNameAndKey is a helper method to define mock.On call
//   - ctx context.Context
//   - tableName string
//   - featureName string
//   - key string
func (_e *MockMaterializedFeaturesInterface_Expecter) DeleteFeatureTagByTableNameAndFeatureNameAndKey(ctx interface{}, tableName interface{}, featureName interface{}, key interface{}) *MockMaterializedFeaturesInterface_DeleteFeatureTagByTableNameAndFeatureNameAndKey_Call {
	return &MockMaterializedFeaturesInterface_DeleteFeatureTagByTableNameAndFeatureNameAndKey_Call{Call: _e.mock.On("DeleteFeatureTagByTableNameAndFeatureNameAndKey", ctx, tableName, featureName, key)}
}

func (_c *MockMaterializedFeaturesInterface_DeleteFeatureTagByTableNameAndFeatureNameAndKey_Call) Run(run func(ctx context.Context, tableName string, featureName string, key string)) *MockMaterializedFeaturesInterface_DeleteFeatureTagByTableNameAndFeatureNameAndKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockMaterializedFeaturesInterface_DeleteFeatureTagByTableNameAndFeatureNameAndKey_Call) Return(_a0 error) *MockMaterializedFeaturesInterface_DeleteFeatureTagByTableNameAndFeatureNameAndKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMaterializedFeaturesInterface_DeleteFeatureTagByTableNameAndFeatureNameAndKey_Call) RunAndReturn(run func(context.Context, string, string, string) error) *MockMaterializedFeaturesInterface_DeleteFeatureTagByTableNameAndFeatureNameAndKey_Call {
	_c.Call.Return(run)
	return _c
}

// GetFeatureLineage provides a mock function with given fields: ctx, request
func (_m *MockMaterializedFeaturesInterface) GetFeatureLineage(ctx context.Context, request ml.GetFeatureLineageRequest) (*ml.FeatureLineage, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetFeatureLineage")
	}

	var r0 *ml.FeatureLineage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ml.GetFeatureLineageRequest) (*ml.FeatureLineage, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ml.GetFeatureLineageRequest) *ml.FeatureLineage); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ml.FeatureLineage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ml.GetFeatureLineageRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMaterializedFeaturesInterface_GetFeatureLineage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFeatureLineage'
type MockMaterializedFeaturesInterface_GetFeatureLineage_Call struct {
	*mock.Call
}

// GetFeatureLineage is a helper method to define mock.On call
//   - ctx context.Context
//   - request ml.GetFeatureLineageRequest
func (_e *MockMaterializedFeaturesInterface_Expecter) GetFeatureLineage(ctx interface{}, request interface{}) *MockMaterializedFeaturesInterface_GetFeatureLineage_Call {
	return &MockMaterializedFeaturesInterface_GetFeatureLineage_Call{Call: _e.mock.On("GetFeatureLineage", ctx, request)}
}

func (_c *MockMaterializedFeaturesInterface_GetFeatureLineage_Call) Run(run func(ctx context.Context, request ml.GetFeatureLineageRequest)) *MockMaterializedFeaturesInterface_GetFeatureLineage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ml.GetFeatureLineageRequest))
	})
	return _c
}

func (_c *MockMaterializedFeaturesInterface_GetFeatureLineage_Call) Return(_a0 *ml.FeatureLineage, _a1 error) *MockMaterializedFeaturesInterface_GetFeatureLineage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMaterializedFeaturesInterface_GetFeatureLineage_Call) RunAndReturn(run func(context.Context, ml.GetFeatureLineageRequest) (*ml.FeatureLineage, error)) *MockMaterializedFeaturesInterface_GetFeatureLineage_Call {
	_c.Call.Return(run)
	return _c
}

// GetFeatureLineageByTableNameAndFeatureName provides a mock function with given fields: ctx, tableName, featureName
func (_m *MockMaterializedFeaturesInterface) GetFeatureLineageByTableNameAndFeatureName(ctx context.Context, tableName string, featureName string) (*ml.FeatureLineage, error) {
	ret := _m.Called(ctx, tableName, featureName)

	if len(ret) == 0 {
		panic("no return value specified for GetFeatureLineageByTableNameAndFeatureName")
	}

	var r0 *ml.FeatureLineage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*ml.FeatureLineage, error)); ok {
		return rf(ctx, tableName, featureName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *ml.FeatureLineage); ok {
		r0 = rf(ctx, tableName, featureName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ml.FeatureLineage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, tableName, featureName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMaterializedFeaturesInterface_GetFeatureLineageByTableNameAndFeatureName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFeatureLineageByTableNameAndFeatureName'
type MockMaterializedFeaturesInterface_GetFeatureLineageByTableNameAndFeatureName_Call struct {
	*mock.Call
}

// GetFeatureLineageByTableNameAndFeatureName is a helper method to define mock.On call
//   - ctx context.Context
//   - tableName string
//   - featureName string
func (_e *MockMaterializedFeaturesInterface_Expecter) GetFeatureLineageByTableNameAndFeatureName(ctx interface{}, tableName interface{}, featureName interface{}) *MockMaterializedFeaturesInterface_GetFeatureLineageByTableNameAndFeatureName_Call {
	return &MockMaterializedFeaturesInterface_GetFeatureLineageByTableNameAndFeatureName_Call{Call: _e.mock.On("GetFeatureLineageByTableNameAndFeatureName", ctx, tableName, featureName)}
}

func (_c *MockMaterializedFeaturesInterface_GetFeatureLineageByTableNameAndFeatureName_Call) Run(run func(ctx context.Context, tableName string, featureName string)) *MockMaterializedFeaturesInterface_GetFeatureLineageByTableNameAndFeatureName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockMaterializedFeaturesInterface_GetFeatureLineageByTableNameAndFeatureName_Call) Return(_a0 *ml.FeatureLineage, _a1 error) *MockMaterializedFeaturesInterface_GetFeatureLineageByTableNameAndFeatureName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMaterializedFeaturesInterface_GetFeatureLineageByTableNameAndFeatureName_Call) RunAndReturn(run func(context.Context, string, string) (*ml.FeatureLineage, error)) *MockMaterializedFeaturesInterface_GetFeatureLineageByTableNameAndFeatureName_Call {
	_c.Call.Return(run)
	return _c
}

// GetFeatureTag provides a mock function with given fields: ctx, request
func (_m *MockMaterializedFeaturesInterface) GetFeatureTag(ctx context.Context, request ml.GetFeatureTagRequest) (*ml.FeatureTag, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetFeatureTag")
	}

	var r0 *ml.FeatureTag
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ml.GetFeatureTagRequest) (*ml.FeatureTag, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ml.GetFeatureTagRequest) *ml.FeatureTag); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ml.FeatureTag)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ml.GetFeatureTagRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMaterializedFeaturesInterface_GetFeatureTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFeatureTag'
type MockMaterializedFeaturesInterface_GetFeatureTag_Call struct {
	*mock.Call
}

// GetFeatureTag is a helper method to define mock.On call
//   - ctx context.Context
//   - request ml.GetFeatureTagRequest
func (_e *MockMaterializedFeaturesInterface_Expecter) GetFeatureTag(ctx interface{}, request interface{}) *MockMaterializedFeaturesInterface_GetFeatureTag_Call {
	return &MockMaterializedFeaturesInterface_GetFeatureTag_Call{Call: _e.mock.On("GetFeatureTag", ctx, request)}
}

func (_c *MockMaterializedFeaturesInterface_GetFeatureTag_Call) Run(run func(ctx context.Context, request ml.GetFeatureTagRequest)) *MockMaterializedFeaturesInterface_GetFeatureTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ml.GetFeatureTagRequest))
	})
	return _c
}

func (_c *MockMaterializedFeaturesInterface_GetFeatureTag_Call) Return(_a0 *ml.FeatureTag, _a1 error) *MockMaterializedFeaturesInterface_GetFeatureTag_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMaterializedFeaturesInterface_GetFeatureTag_Call) RunAndReturn(run func(context.Context, ml.GetFeatureTagRequest) (*ml.FeatureTag, error)) *MockMaterializedFeaturesInterface_GetFeatureTag_Call {
	_c.Call.Return(run)
	return _c
}

// GetFeatureTagByTableNameAndFeatureNameAndKey provides a mock function with given fields: ctx, tableName, featureName, key
func (_m *MockMaterializedFeaturesInterface) GetFeatureTagByTableNameAndFeatureNameAndKey(ctx context.Context, tableName string, featureName string, key string) (*ml.FeatureTag, error) {
	ret := _m.Called(ctx, tableName, featureName, key)

	if len(ret) == 0 {
		panic("no return value specified for GetFeatureTagByTableNameAndFeatureNameAndKey")
	}

	var r0 *ml.FeatureTag
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*ml.FeatureTag, error)); ok {
		return rf(ctx, tableName, featureName, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *ml.FeatureTag); ok {
		r0 = rf(ctx, tableName, featureName, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ml.FeatureTag)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, tableName, featureName, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMaterializedFeaturesInterface_GetFeatureTagByTableNameAndFeatureNameAndKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFeatureTagByTableNameAndFeatureNameAndKey'
type MockMaterializedFeaturesInterface_GetFeatureTagByTableNameAndFeatureNameAndKey_Call struct {
	*mock.Call
}

// GetFeatureTagByTableNameAndFeatureNameAndKey is a helper method to define mock.On call
//   - ctx context.Context
//   - tableName string
//   - featureName string
//   - key string
func (_e *MockMaterializedFeaturesInterface_Expecter) GetFeatureTagByTableNameAndFeatureNameAndKey(ctx interface{}, tableName interface{}, featureName interface{}, key interface{}) *MockMaterializedFeaturesInterface_GetFeatureTagByTableNameAndFeatureNameAndKey_Call {
	return &MockMaterializedFeaturesInterface_GetFeatureTagByTableNameAndFeatureNameAndKey_Call{Call: _e.mock.On("GetFeatureTagByTableNameAndFeatureNameAndKey", ctx, tableName, featureName, key)}
}

func (_c *MockMaterializedFeaturesInterface_GetFeatureTagByTableNameAndFeatureNameAndKey_Call) Run(run func(ctx context.Context, tableName string, featureName string, key string)) *MockMaterializedFeaturesInterface_GetFeatureTagByTableNameAndFeatureNameAndKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockMaterializedFeaturesInterface_GetFeatureTagByTableNameAndFeatureNameAndKey_Call) Return(_a0 *ml.FeatureTag, _a1 error) *MockMaterializedFeaturesInterface_GetFeatureTagByTableNameAndFeatureNameAndKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMaterializedFeaturesInterface_GetFeatureTagByTableNameAndFeatureNameAndKey_Call) RunAndReturn(run func(context.Context, string, string, string) (*ml.FeatureTag, error)) *MockMaterializedFeaturesInterface_GetFeatureTagByTableNameAndFeatureNameAndKey_Call {
	_c.Call.Return(run)
	return _c
}

// ListFeatureTags provides a mock function with given fields: ctx, request
func (_m *MockMaterializedFeaturesInterface) ListFeatureTags(ctx context.Context, request ml.ListFeatureTagsRequest) listing.Iterator[ml.FeatureTag] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListFeatureTags")
	}

	var r0 listing.Iterator[ml.FeatureTag]
	if rf, ok := ret.Get(0).(func(context.Context, ml.ListFeatureTagsRequest) listing.Iterator[ml.FeatureTag]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listing.Iterator[ml.FeatureTag])
		}
	}

	return r0
}

// MockMaterializedFeaturesInterface_ListFeatureTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFeatureTags'
type MockMaterializedFeaturesInterface_ListFeatureTags_Call struct {
	*mock.Call
}

// ListFeatureTags is a helper method to define mock.On call
//   - ctx context.Context
//   - request ml.ListFeatureTagsRequest
func (_e *MockMaterializedFeaturesInterface_Expecter) ListFeatureTags(ctx interface{}, request interface{}) *MockMaterializedFeaturesInterface_ListFeatureTags_Call {
	return &MockMaterializedFeaturesInterface_ListFeatureTags_Call{Call: _e.mock.On("ListFeatureTags", ctx, request)}
}

func (_c *MockMaterializedFeaturesInterface_ListFeatureTags_Call) Run(run func(ctx context.Context, request ml.ListFeatureTagsRequest)) *MockMaterializedFeaturesInterface_ListFeatureTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ml.ListFeatureTagsRequest))
	})
	return _c
}

func (_c *MockMaterializedFeaturesInterface_ListFeatureTags_Call) Return(_a0 listing.Iterator[ml.FeatureTag]) *MockMaterializedFeaturesInterface_ListFeatureTags_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMaterializedFeaturesInterface_ListFeatureTags_Call) RunAndReturn(run func(context.Context, ml.ListFeatureTagsRequest) listing.Iterator[ml.FeatureTag]) *MockMaterializedFeaturesInterface_ListFeatureTags_Call {
	_c.Call.Return(run)
	return _c
}

// ListFeatureTagsAll provides a mock function with given fields: ctx, request
func (_m *MockMaterializedFeaturesInterface) ListFeatureTagsAll(ctx context.Context, request ml.ListFeatureTagsRequest) ([]ml.FeatureTag, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListFeatureTagsAll")
	}

	var r0 []ml.FeatureTag
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ml.ListFeatureTagsRequest) ([]ml.FeatureTag, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ml.ListFeatureTagsRequest) []ml.FeatureTag); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ml.FeatureTag)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ml.ListFeatureTagsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMaterializedFeaturesInterface_ListFeatureTagsAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFeatureTagsAll'
type MockMaterializedFeaturesInterface_ListFeatureTagsAll_Call struct {
	*mock.Call
}

// ListFeatureTagsAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request ml.ListFeatureTagsRequest
func (_e *MockMaterializedFeaturesInterface_Expecter) ListFeatureTagsAll(ctx interface{}, request interface{}) *MockMaterializedFeaturesInterface_ListFeatureTagsAll_Call {
	return &MockMaterializedFeaturesInterface_ListFeatureTagsAll_Call{Call: _e.mock.On("ListFeatureTagsAll", ctx, request)}
}

func (_c *MockMaterializedFeaturesInterface_ListFeatureTagsAll_Call) Run(run func(ctx context.Context, request ml.ListFeatureTagsRequest)) *MockMaterializedFeaturesInterface_ListFeatureTagsAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ml.ListFeatureTagsRequest))
	})
	return _c
}

func (_c *MockMaterializedFeaturesInterface_ListFeatureTagsAll_Call) Return(_a0 []ml.FeatureTag, _a1 error) *MockMaterializedFeaturesInterface_ListFeatureTagsAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMaterializedFeaturesInterface_ListFeatureTagsAll_Call) RunAndReturn(run func(context.Context, ml.ListFeatureTagsRequest) ([]ml.FeatureTag, error)) *MockMaterializedFeaturesInterface_ListFeatureTagsAll_Call {
	_c.Call.Return(run)
	return _c
}

// ListFeatureTagsByTableNameAndFeatureName provides a mock function with given fields: ctx, tableName, featureName
func (_m *MockMaterializedFeaturesInterface) ListFeatureTagsByTableNameAndFeatureName(ctx context.Context, tableName string, featureName string) (*ml.ListFeatureTagsResponse, error) {
	ret := _m.Called(ctx, tableName, featureName)

	if len(ret) == 0 {
		panic("no return value specified for ListFeatureTagsByTableNameAndFeatureName")
	}

	var r0 *ml.ListFeatureTagsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*ml.ListFeatureTagsResponse, error)); ok {
		return rf(ctx, tableName, featureName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *ml.ListFeatureTagsResponse); ok {
		r0 = rf(ctx, tableName, featureName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ml.ListFeatureTagsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, tableName, featureName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMaterializedFeaturesInterface_ListFeatureTagsByTableNameAndFeatureName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFeatureTagsByTableNameAndFeatureName'
type MockMaterializedFeaturesInterface_ListFeatureTagsByTableNameAndFeatureName_Call struct {
	*mock.Call
}

// ListFeatureTagsByTableNameAndFeatureName is a helper method to define mock.On call
//   - ctx context.Context
//   - tableName string
//   - featureName string
func (_e *MockMaterializedFeaturesInterface_Expecter) ListFeatureTagsByTableNameAndFeatureName(ctx interface{}, tableName interface{}, featureName interface{}) *MockMaterializedFeaturesInterface_ListFeatureTagsByTableNameAndFeatureName_Call {
	return &MockMaterializedFeaturesInterface_ListFeatureTagsByTableNameAndFeatureName_Call{Call: _e.mock.On("ListFeatureTagsByTableNameAndFeatureName", ctx, tableName, featureName)}
}

func (_c *MockMaterializedFeaturesInterface_ListFeatureTagsByTableNameAndFeatureName_Call) Run(run func(ctx context.Context, tableName string, featureName string)) *MockMaterializedFeaturesInterface_ListFeatureTagsByTableNameAndFeatureName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockMaterializedFeaturesInterface_ListFeatureTagsByTableNameAndFeatureName_Call) Return(_a0 *ml.ListFeatureTagsResponse, _a1 error) *MockMaterializedFeaturesInterface_ListFeatureTagsByTableNameAndFeatureName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMaterializedFeaturesInterface_ListFeatureTagsByTableNameAndFeatureName_Call) RunAndReturn(run func(context.Context, string, string) (*ml.ListFeatureTagsResponse, error)) *MockMaterializedFeaturesInterface_ListFeatureTagsByTableNameAndFeatureName_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateFeatureTag provides a mock function with given fields: ctx, request
func (_m *MockMaterializedFeaturesInterface) UpdateFeatureTag(ctx context.Context, request ml.UpdateFeatureTagRequest) (*ml.FeatureTag, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFeatureTag")
	}

	var r0 *ml.FeatureTag
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ml.UpdateFeatureTagRequest) (*ml.FeatureTag, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ml.UpdateFeatureTagRequest) *ml.FeatureTag); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ml.FeatureTag)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ml.UpdateFeatureTagRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMaterializedFeaturesInterface_UpdateFeatureTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateFeatureTag'
type MockMaterializedFeaturesInterface_UpdateFeatureTag_Call struct {
	*mock.Call
}

// UpdateFeatureTag is a helper method to define mock.On call
//   - ctx context.Context
//   - request ml.UpdateFeatureTagRequest
func (_e *MockMaterializedFeaturesInterface_Expecter) UpdateFeatureTag(ctx interface{}, request interface{}) *MockMaterializedFeaturesInterface_UpdateFeatureTag_Call {
	return &MockMaterializedFeaturesInterface_UpdateFeatureTag_Call{Call: _e.mock.On("UpdateFeatureTag", ctx, request)}
}

func (_c *MockMaterializedFeaturesInterface_UpdateFeatureTag_Call) Run(run func(ctx context.Context, request ml.UpdateFeatureTagRequest)) *MockMaterializedFeaturesInterface_UpdateFeatureTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ml.UpdateFeatureTagRequest))
	})
	return _c
}

func (_c *MockMaterializedFeaturesInterface_UpdateFeatureTag_Call) Return(_a0 *ml.FeatureTag, _a1 error) *MockMaterializedFeaturesInterface_UpdateFeatureTag_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMaterializedFeaturesInterface_UpdateFeatureTag_Call) RunAndReturn(run func(context.Context, ml.UpdateFeatureTagRequest) (*ml.FeatureTag, error)) *MockMaterializedFeaturesInterface_UpdateFeatureTag_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMaterializedFeaturesInterface creates a new instance of MockMaterializedFeaturesInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMaterializedFeaturesInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMaterializedFeaturesInterface {
	mock := &MockMaterializedFeaturesInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
