// Code generated by mockery v2.53.2. DO NOT EDIT.

package ml

import (
	context "context"

	ml "github.com/databricks/databricks-sdk-go/service/ml"
	mock "github.com/stretchr/testify/mock"

	retries "github.com/databricks/databricks-sdk-go/retries"

	time "time"
)

// MockForecastingInterface is an autogenerated mock type for the ForecastingInterface type
type MockForecastingInterface struct {
	mock.Mock
}

type MockForecastingInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockForecastingInterface) EXPECT() *MockForecastingInterface_Expecter {
	return &MockForecastingInterface_Expecter{mock: &_m.Mock}
}

// CreateExperiment provides a mock function with given fields: ctx, createForecastingExperimentRequest
func (_m *MockForecastingInterface) CreateExperiment(ctx context.Context, createForecastingExperimentRequest ml.CreateForecastingExperimentRequest) (*ml.WaitGetExperimentForecastingSucceeded[ml.CreateForecastingExperimentResponse], error) {
	ret := _m.Called(ctx, createForecastingExperimentRequest)

	if len(ret) == 0 {
		panic("no return value specified for CreateExperiment")
	}

	var r0 *ml.WaitGetExperimentForecastingSucceeded[ml.CreateForecastingExperimentResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ml.CreateForecastingExperimentRequest) (*ml.WaitGetExperimentForecastingSucceeded[ml.CreateForecastingExperimentResponse], error)); ok {
		return rf(ctx, createForecastingExperimentRequest)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ml.CreateForecastingExperimentRequest) *ml.WaitGetExperimentForecastingSucceeded[ml.CreateForecastingExperimentResponse]); ok {
		r0 = rf(ctx, createForecastingExperimentRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ml.WaitGetExperimentForecastingSucceeded[ml.CreateForecastingExperimentResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ml.CreateForecastingExperimentRequest) error); ok {
		r1 = rf(ctx, createForecastingExperimentRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockForecastingInterface_CreateExperiment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateExperiment'
type MockForecastingInterface_CreateExperiment_Call struct {
	*mock.Call
}

// CreateExperiment is a helper method to define mock.On call
//   - ctx context.Context
//   - createForecastingExperimentRequest ml.CreateForecastingExperimentRequest
func (_e *MockForecastingInterface_Expecter) CreateExperiment(ctx interface{}, createForecastingExperimentRequest interface{}) *MockForecastingInterface_CreateExperiment_Call {
	return &MockForecastingInterface_CreateExperiment_Call{Call: _e.mock.On("CreateExperiment", ctx, createForecastingExperimentRequest)}
}

func (_c *MockForecastingInterface_CreateExperiment_Call) Run(run func(ctx context.Context, createForecastingExperimentRequest ml.CreateForecastingExperimentRequest)) *MockForecastingInterface_CreateExperiment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ml.CreateForecastingExperimentRequest))
	})
	return _c
}

func (_c *MockForecastingInterface_CreateExperiment_Call) Return(_a0 *ml.WaitGetExperimentForecastingSucceeded[ml.CreateForecastingExperimentResponse], _a1 error) *MockForecastingInterface_CreateExperiment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockForecastingInterface_CreateExperiment_Call) RunAndReturn(run func(context.Context, ml.CreateForecastingExperimentRequest) (*ml.WaitGetExperimentForecastingSucceeded[ml.CreateForecastingExperimentResponse], error)) *MockForecastingInterface_CreateExperiment_Call {
	_c.Call.Return(run)
	return _c
}

// CreateExperimentAndWait provides a mock function with given fields: ctx, createForecastingExperimentRequest, options
func (_m *MockForecastingInterface) CreateExperimentAndWait(ctx context.Context, createForecastingExperimentRequest ml.CreateForecastingExperimentRequest, options ...retries.Option[ml.ForecastingExperiment]) (*ml.ForecastingExperiment, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, createForecastingExperimentRequest)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateExperimentAndWait")
	}

	var r0 *ml.ForecastingExperiment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ml.CreateForecastingExperimentRequest, ...retries.Option[ml.ForecastingExperiment]) (*ml.ForecastingExperiment, error)); ok {
		return rf(ctx, createForecastingExperimentRequest, options...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ml.CreateForecastingExperimentRequest, ...retries.Option[ml.ForecastingExperiment]) *ml.ForecastingExperiment); ok {
		r0 = rf(ctx, createForecastingExperimentRequest, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ml.ForecastingExperiment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ml.CreateForecastingExperimentRequest, ...retries.Option[ml.ForecastingExperiment]) error); ok {
		r1 = rf(ctx, createForecastingExperimentRequest, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockForecastingInterface_CreateExperimentAndWait_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateExperimentAndWait'
type MockForecastingInterface_CreateExperimentAndWait_Call struct {
	*mock.Call
}

// CreateExperimentAndWait is a helper method to define mock.On call
//   - ctx context.Context
//   - createForecastingExperimentRequest ml.CreateForecastingExperimentRequest
//   - options ...retries.Option[ml.ForecastingExperiment]
func (_e *MockForecastingInterface_Expecter) CreateExperimentAndWait(ctx interface{}, createForecastingExperimentRequest interface{}, options ...interface{}) *MockForecastingInterface_CreateExperimentAndWait_Call {
	return &MockForecastingInterface_CreateExperimentAndWait_Call{Call: _e.mock.On("CreateExperimentAndWait",
		append([]interface{}{ctx, createForecastingExperimentRequest}, options...)...)}
}

func (_c *MockForecastingInterface_CreateExperimentAndWait_Call) Run(run func(ctx context.Context, createForecastingExperimentRequest ml.CreateForecastingExperimentRequest, options ...retries.Option[ml.ForecastingExperiment])) *MockForecastingInterface_CreateExperimentAndWait_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]retries.Option[ml.ForecastingExperiment], len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(retries.Option[ml.ForecastingExperiment])
			}
		}
		run(args[0].(context.Context), args[1].(ml.CreateForecastingExperimentRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockForecastingInterface_CreateExperimentAndWait_Call) Return(_a0 *ml.ForecastingExperiment, _a1 error) *MockForecastingInterface_CreateExperimentAndWait_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockForecastingInterface_CreateExperimentAndWait_Call) RunAndReturn(run func(context.Context, ml.CreateForecastingExperimentRequest, ...retries.Option[ml.ForecastingExperiment]) (*ml.ForecastingExperiment, error)) *MockForecastingInterface_CreateExperimentAndWait_Call {
	_c.Call.Return(run)
	return _c
}

// GetExperiment provides a mock function with given fields: ctx, request
func (_m *MockForecastingInterface) GetExperiment(ctx context.Context, request ml.GetForecastingExperimentRequest) (*ml.ForecastingExperiment, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetExperiment")
	}

	var r0 *ml.ForecastingExperiment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ml.GetForecastingExperimentRequest) (*ml.ForecastingExperiment, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ml.GetForecastingExperimentRequest) *ml.ForecastingExperiment); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ml.ForecastingExperiment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ml.GetForecastingExperimentRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockForecastingInterface_GetExperiment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExperiment'
type MockForecastingInterface_GetExperiment_Call struct {
	*mock.Call
}

// GetExperiment is a helper method to define mock.On call
//   - ctx context.Context
//   - request ml.GetForecastingExperimentRequest
func (_e *MockForecastingInterface_Expecter) GetExperiment(ctx interface{}, request interface{}) *MockForecastingInterface_GetExperiment_Call {
	return &MockForecastingInterface_GetExperiment_Call{Call: _e.mock.On("GetExperiment", ctx, request)}
}

func (_c *MockForecastingInterface_GetExperiment_Call) Run(run func(ctx context.Context, request ml.GetForecastingExperimentRequest)) *MockForecastingInterface_GetExperiment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ml.GetForecastingExperimentRequest))
	})
	return _c
}

func (_c *MockForecastingInterface_GetExperiment_Call) Return(_a0 *ml.ForecastingExperiment, _a1 error) *MockForecastingInterface_GetExperiment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockForecastingInterface_GetExperiment_Call) RunAndReturn(run func(context.Context, ml.GetForecastingExperimentRequest) (*ml.ForecastingExperiment, error)) *MockForecastingInterface_GetExperiment_Call {
	_c.Call.Return(run)
	return _c
}

// GetExperimentByExperimentId provides a mock function with given fields: ctx, experimentId
func (_m *MockForecastingInterface) GetExperimentByExperimentId(ctx context.Context, experimentId string) (*ml.ForecastingExperiment, error) {
	ret := _m.Called(ctx, experimentId)

	if len(ret) == 0 {
		panic("no return value specified for GetExperimentByExperimentId")
	}

	var r0 *ml.ForecastingExperiment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*ml.ForecastingExperiment, error)); ok {
		return rf(ctx, experimentId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *ml.ForecastingExperiment); ok {
		r0 = rf(ctx, experimentId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ml.ForecastingExperiment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, experimentId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockForecastingInterface_GetExperimentByExperimentId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExperimentByExperimentId'
type MockForecastingInterface_GetExperimentByExperimentId_Call struct {
	*mock.Call
}

// GetExperimentByExperimentId is a helper method to define mock.On call
//   - ctx context.Context
//   - experimentId string
func (_e *MockForecastingInterface_Expecter) GetExperimentByExperimentId(ctx interface{}, experimentId interface{}) *MockForecastingInterface_GetExperimentByExperimentId_Call {
	return &MockForecastingInterface_GetExperimentByExperimentId_Call{Call: _e.mock.On("GetExperimentByExperimentId", ctx, experimentId)}
}

func (_c *MockForecastingInterface_GetExperimentByExperimentId_Call) Run(run func(ctx context.Context, experimentId string)) *MockForecastingInterface_GetExperimentByExperimentId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockForecastingInterface_GetExperimentByExperimentId_Call) Return(_a0 *ml.ForecastingExperiment, _a1 error) *MockForecastingInterface_GetExperimentByExperimentId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockForecastingInterface_GetExperimentByExperimentId_Call) RunAndReturn(run func(context.Context, string) (*ml.ForecastingExperiment, error)) *MockForecastingInterface_GetExperimentByExperimentId_Call {
	_c.Call.Return(run)
	return _c
}

// WaitGetExperimentForecastingSucceeded provides a mock function with given fields: ctx, experimentId, timeout, callback
func (_m *MockForecastingInterface) WaitGetExperimentForecastingSucceeded(ctx context.Context, experimentId string, timeout time.Duration, callback func(*ml.ForecastingExperiment)) (*ml.ForecastingExperiment, error) {
	ret := _m.Called(ctx, experimentId, timeout, callback)

	if len(ret) == 0 {
		panic("no return value specified for WaitGetExperimentForecastingSucceeded")
	}

	var r0 *ml.ForecastingExperiment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration, func(*ml.ForecastingExperiment)) (*ml.ForecastingExperiment, error)); ok {
		return rf(ctx, experimentId, timeout, callback)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration, func(*ml.ForecastingExperiment)) *ml.ForecastingExperiment); ok {
		r0 = rf(ctx, experimentId, timeout, callback)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ml.ForecastingExperiment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, time.Duration, func(*ml.ForecastingExperiment)) error); ok {
		r1 = rf(ctx, experimentId, timeout, callback)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockForecastingInterface_WaitGetExperimentForecastingSucceeded_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitGetExperimentForecastingSucceeded'
type MockForecastingInterface_WaitGetExperimentForecastingSucceeded_Call struct {
	*mock.Call
}

// WaitGetExperimentForecastingSucceeded is a helper method to define mock.On call
//   - ctx context.Context
//   - experimentId string
//   - timeout time.Duration
//   - callback func(*ml.ForecastingExperiment)
func (_e *MockForecastingInterface_Expecter) WaitGetExperimentForecastingSucceeded(ctx interface{}, experimentId interface{}, timeout interface{}, callback interface{}) *MockForecastingInterface_WaitGetExperimentForecastingSucceeded_Call {
	return &MockForecastingInterface_WaitGetExperimentForecastingSucceeded_Call{Call: _e.mock.On("WaitGetExperimentForecastingSucceeded", ctx, experimentId, timeout, callback)}
}

func (_c *MockForecastingInterface_WaitGetExperimentForecastingSucceeded_Call) Run(run func(ctx context.Context, experimentId string, timeout time.Duration, callback func(*ml.ForecastingExperiment))) *MockForecastingInterface_WaitGetExperimentForecastingSucceeded_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Duration), args[3].(func(*ml.ForecastingExperiment)))
	})
	return _c
}

func (_c *MockForecastingInterface_WaitGetExperimentForecastingSucceeded_Call) Return(_a0 *ml.ForecastingExperiment, _a1 error) *MockForecastingInterface_WaitGetExperimentForecastingSucceeded_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockForecastingInterface_WaitGetExperimentForecastingSucceeded_Call) RunAndReturn(run func(context.Context, string, time.Duration, func(*ml.ForecastingExperiment)) (*ml.ForecastingExperiment, error)) *MockForecastingInterface_WaitGetExperimentForecastingSucceeded_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockForecastingInterface creates a new instance of MockForecastingInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockForecastingInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockForecastingInterface {
	mock := &MockForecastingInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
