// Code generated by mockery v2.53.2. DO NOT EDIT.

package ml

import (
	context "context"

	listing "github.com/databricks/databricks-sdk-go/listing"
	ml "github.com/databricks/databricks-sdk-go/service/ml"

	mock "github.com/stretchr/testify/mock"
)

// MockFeatureEngineeringInterface is an autogenerated mock type for the FeatureEngineeringInterface type
type MockFeatureEngineeringInterface struct {
	mock.Mock
}

type MockFeatureEngineeringInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFeatureEngineeringInterface) EXPECT() *MockFeatureEngineeringInterface_Expecter {
	return &MockFeatureEngineeringInterface_Expecter{mock: &_m.Mock}
}

// CreateFeature provides a mock function with given fields: ctx, request
func (_m *MockFeatureEngineeringInterface) CreateFeature(ctx context.Context, request ml.CreateFeatureRequest) (*ml.Feature, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateFeature")
	}

	var r0 *ml.Feature
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ml.CreateFeatureRequest) (*ml.Feature, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ml.CreateFeatureRequest) *ml.Feature); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ml.Feature)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ml.CreateFeatureRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFeatureEngineeringInterface_CreateFeature_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateFeature'
type MockFeatureEngineeringInterface_CreateFeature_Call struct {
	*mock.Call
}

// CreateFeature is a helper method to define mock.On call
//   - ctx context.Context
//   - request ml.CreateFeatureRequest
func (_e *MockFeatureEngineeringInterface_Expecter) CreateFeature(ctx interface{}, request interface{}) *MockFeatureEngineeringInterface_CreateFeature_Call {
	return &MockFeatureEngineeringInterface_CreateFeature_Call{Call: _e.mock.On("CreateFeature", ctx, request)}
}

func (_c *MockFeatureEngineeringInterface_CreateFeature_Call) Run(run func(ctx context.Context, request ml.CreateFeatureRequest)) *MockFeatureEngineeringInterface_CreateFeature_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ml.CreateFeatureRequest))
	})
	return _c
}

func (_c *MockFeatureEngineeringInterface_CreateFeature_Call) Return(_a0 *ml.Feature, _a1 error) *MockFeatureEngineeringInterface_CreateFeature_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFeatureEngineeringInterface_CreateFeature_Call) RunAndReturn(run func(context.Context, ml.CreateFeatureRequest) (*ml.Feature, error)) *MockFeatureEngineeringInterface_CreateFeature_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFeature provides a mock function with given fields: ctx, request
func (_m *MockFeatureEngineeringInterface) DeleteFeature(ctx context.Context, request ml.DeleteFeatureRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFeature")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ml.DeleteFeatureRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFeatureEngineeringInterface_DeleteFeature_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFeature'
type MockFeatureEngineeringInterface_DeleteFeature_Call struct {
	*mock.Call
}

// DeleteFeature is a helper method to define mock.On call
//   - ctx context.Context
//   - request ml.DeleteFeatureRequest
func (_e *MockFeatureEngineeringInterface_Expecter) DeleteFeature(ctx interface{}, request interface{}) *MockFeatureEngineeringInterface_DeleteFeature_Call {
	return &MockFeatureEngineeringInterface_DeleteFeature_Call{Call: _e.mock.On("DeleteFeature", ctx, request)}
}

func (_c *MockFeatureEngineeringInterface_DeleteFeature_Call) Run(run func(ctx context.Context, request ml.DeleteFeatureRequest)) *MockFeatureEngineeringInterface_DeleteFeature_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ml.DeleteFeatureRequest))
	})
	return _c
}

func (_c *MockFeatureEngineeringInterface_DeleteFeature_Call) Return(_a0 error) *MockFeatureEngineeringInterface_DeleteFeature_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFeatureEngineeringInterface_DeleteFeature_Call) RunAndReturn(run func(context.Context, ml.DeleteFeatureRequest) error) *MockFeatureEngineeringInterface_DeleteFeature_Call {
	_c.Call.Return(run)
	return _c
}

// GetFeature provides a mock function with given fields: ctx, request
func (_m *MockFeatureEngineeringInterface) GetFeature(ctx context.Context, request ml.GetFeatureRequest) (*ml.Feature, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetFeature")
	}

	var r0 *ml.Feature
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ml.GetFeatureRequest) (*ml.Feature, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ml.GetFeatureRequest) *ml.Feature); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ml.Feature)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ml.GetFeatureRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFeatureEngineeringInterface_GetFeature_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFeature'
type MockFeatureEngineeringInterface_GetFeature_Call struct {
	*mock.Call
}

// GetFeature is a helper method to define mock.On call
//   - ctx context.Context
//   - request ml.GetFeatureRequest
func (_e *MockFeatureEngineeringInterface_Expecter) GetFeature(ctx interface{}, request interface{}) *MockFeatureEngineeringInterface_GetFeature_Call {
	return &MockFeatureEngineeringInterface_GetFeature_Call{Call: _e.mock.On("GetFeature", ctx, request)}
}

func (_c *MockFeatureEngineeringInterface_GetFeature_Call) Run(run func(ctx context.Context, request ml.GetFeatureRequest)) *MockFeatureEngineeringInterface_GetFeature_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ml.GetFeatureRequest))
	})
	return _c
}

func (_c *MockFeatureEngineeringInterface_GetFeature_Call) Return(_a0 *ml.Feature, _a1 error) *MockFeatureEngineeringInterface_GetFeature_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFeatureEngineeringInterface_GetFeature_Call) RunAndReturn(run func(context.Context, ml.GetFeatureRequest) (*ml.Feature, error)) *MockFeatureEngineeringInterface_GetFeature_Call {
	_c.Call.Return(run)
	return _c
}

// ListFeatures provides a mock function with given fields: ctx, request
func (_m *MockFeatureEngineeringInterface) ListFeatures(ctx context.Context, request ml.ListFeaturesRequest) listing.Iterator[ml.Feature] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListFeatures")
	}

	var r0 listing.Iterator[ml.Feature]
	if rf, ok := ret.Get(0).(func(context.Context, ml.ListFeaturesRequest) listing.Iterator[ml.Feature]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listing.Iterator[ml.Feature])
		}
	}

	return r0
}

// MockFeatureEngineeringInterface_ListFeatures_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFeatures'
type MockFeatureEngineeringInterface_ListFeatures_Call struct {
	*mock.Call
}

// ListFeatures is a helper method to define mock.On call
//   - ctx context.Context
//   - request ml.ListFeaturesRequest
func (_e *MockFeatureEngineeringInterface_Expecter) ListFeatures(ctx interface{}, request interface{}) *MockFeatureEngineeringInterface_ListFeatures_Call {
	return &MockFeatureEngineeringInterface_ListFeatures_Call{Call: _e.mock.On("ListFeatures", ctx, request)}
}

func (_c *MockFeatureEngineeringInterface_ListFeatures_Call) Run(run func(ctx context.Context, request ml.ListFeaturesRequest)) *MockFeatureEngineeringInterface_ListFeatures_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ml.ListFeaturesRequest))
	})
	return _c
}

func (_c *MockFeatureEngineeringInterface_ListFeatures_Call) Return(_a0 listing.Iterator[ml.Feature]) *MockFeatureEngineeringInterface_ListFeatures_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFeatureEngineeringInterface_ListFeatures_Call) RunAndReturn(run func(context.Context, ml.ListFeaturesRequest) listing.Iterator[ml.Feature]) *MockFeatureEngineeringInterface_ListFeatures_Call {
	_c.Call.Return(run)
	return _c
}

// ListFeaturesAll provides a mock function with given fields: ctx, request
func (_m *MockFeatureEngineeringInterface) ListFeaturesAll(ctx context.Context, request ml.ListFeaturesRequest) ([]ml.Feature, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListFeaturesAll")
	}

	var r0 []ml.Feature
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ml.ListFeaturesRequest) ([]ml.Feature, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ml.ListFeaturesRequest) []ml.Feature); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ml.Feature)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ml.ListFeaturesRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFeatureEngineeringInterface_ListFeaturesAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFeaturesAll'
type MockFeatureEngineeringInterface_ListFeaturesAll_Call struct {
	*mock.Call
}

// ListFeaturesAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request ml.ListFeaturesRequest
func (_e *MockFeatureEngineeringInterface_Expecter) ListFeaturesAll(ctx interface{}, request interface{}) *MockFeatureEngineeringInterface_ListFeaturesAll_Call {
	return &MockFeatureEngineeringInterface_ListFeaturesAll_Call{Call: _e.mock.On("ListFeaturesAll", ctx, request)}
}

func (_c *MockFeatureEngineeringInterface_ListFeaturesAll_Call) Run(run func(ctx context.Context, request ml.ListFeaturesRequest)) *MockFeatureEngineeringInterface_ListFeaturesAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ml.ListFeaturesRequest))
	})
	return _c
}

func (_c *MockFeatureEngineeringInterface_ListFeaturesAll_Call) Return(_a0 []ml.Feature, _a1 error) *MockFeatureEngineeringInterface_ListFeaturesAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFeatureEngineeringInterface_ListFeaturesAll_Call) RunAndReturn(run func(context.Context, ml.ListFeaturesRequest) ([]ml.Feature, error)) *MockFeatureEngineeringInterface_ListFeaturesAll_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateFeature provides a mock function with given fields: ctx, request
func (_m *MockFeatureEngineeringInterface) UpdateFeature(ctx context.Context, request ml.UpdateFeatureRequest) (*ml.Feature, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFeature")
	}

	var r0 *ml.Feature
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ml.UpdateFeatureRequest) (*ml.Feature, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ml.UpdateFeatureRequest) *ml.Feature); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ml.Feature)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ml.UpdateFeatureRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFeatureEngineeringInterface_UpdateFeature_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateFeature'
type MockFeatureEngineeringInterface_UpdateFeature_Call struct {
	*mock.Call
}

// UpdateFeature is a helper method to define mock.On call
//   - ctx context.Context
//   - request ml.UpdateFeatureRequest
func (_e *MockFeatureEngineeringInterface_Expecter) UpdateFeature(ctx interface{}, request interface{}) *MockFeatureEngineeringInterface_UpdateFeature_Call {
	return &MockFeatureEngineeringInterface_UpdateFeature_Call{Call: _e.mock.On("UpdateFeature", ctx, request)}
}

func (_c *MockFeatureEngineeringInterface_UpdateFeature_Call) Run(run func(ctx context.Context, request ml.UpdateFeatureRequest)) *MockFeatureEngineeringInterface_UpdateFeature_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ml.UpdateFeatureRequest))
	})
	return _c
}

func (_c *MockFeatureEngineeringInterface_UpdateFeature_Call) Return(_a0 *ml.Feature, _a1 error) *MockFeatureEngineeringInterface_UpdateFeature_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFeatureEngineeringInterface_UpdateFeature_Call) RunAndReturn(run func(context.Context, ml.UpdateFeatureRequest) (*ml.Feature, error)) *MockFeatureEngineeringInterface_UpdateFeature_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFeatureEngineeringInterface creates a new instance of MockFeatureEngineeringInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFeatureEngineeringInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFeatureEngineeringInterface {
	mock := &MockFeatureEngineeringInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
