// Code generated by mockery v2.53.2. DO NOT EDIT.

package ml

import (
	context "context"

	listing "github.com/databricks/databricks-sdk-go/listing"
	ml "github.com/databricks/databricks-sdk-go/service/ml"

	mock "github.com/stretchr/testify/mock"
)

// MockFeatureStoreInterface is an autogenerated mock type for the FeatureStoreInterface type
type MockFeatureStoreInterface struct {
	mock.Mock
}

type MockFeatureStoreInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFeatureStoreInterface) EXPECT() *MockFeatureStoreInterface_Expecter {
	return &MockFeatureStoreInterface_Expecter{mock: &_m.Mock}
}

// CreateOnlineStore provides a mock function with given fields: ctx, request
func (_m *MockFeatureStoreInterface) CreateOnlineStore(ctx context.Context, request ml.CreateOnlineStoreRequest) (*ml.OnlineStore, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateOnlineStore")
	}

	var r0 *ml.OnlineStore
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ml.CreateOnlineStoreRequest) (*ml.OnlineStore, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ml.CreateOnlineStoreRequest) *ml.OnlineStore); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ml.OnlineStore)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ml.CreateOnlineStoreRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFeatureStoreInterface_CreateOnlineStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOnlineStore'
type MockFeatureStoreInterface_CreateOnlineStore_Call struct {
	*mock.Call
}

// CreateOnlineStore is a helper method to define mock.On call
//   - ctx context.Context
//   - request ml.CreateOnlineStoreRequest
func (_e *MockFeatureStoreInterface_Expecter) CreateOnlineStore(ctx interface{}, request interface{}) *MockFeatureStoreInterface_CreateOnlineStore_Call {
	return &MockFeatureStoreInterface_CreateOnlineStore_Call{Call: _e.mock.On("CreateOnlineStore", ctx, request)}
}

func (_c *MockFeatureStoreInterface_CreateOnlineStore_Call) Run(run func(ctx context.Context, request ml.CreateOnlineStoreRequest)) *MockFeatureStoreInterface_CreateOnlineStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ml.CreateOnlineStoreRequest))
	})
	return _c
}

func (_c *MockFeatureStoreInterface_CreateOnlineStore_Call) Return(_a0 *ml.OnlineStore, _a1 error) *MockFeatureStoreInterface_CreateOnlineStore_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFeatureStoreInterface_CreateOnlineStore_Call) RunAndReturn(run func(context.Context, ml.CreateOnlineStoreRequest) (*ml.OnlineStore, error)) *MockFeatureStoreInterface_CreateOnlineStore_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOnlineStore provides a mock function with given fields: ctx, request
func (_m *MockFeatureStoreInterface) DeleteOnlineStore(ctx context.Context, request ml.DeleteOnlineStoreRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOnlineStore")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ml.DeleteOnlineStoreRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFeatureStoreInterface_DeleteOnlineStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOnlineStore'
type MockFeatureStoreInterface_DeleteOnlineStore_Call struct {
	*mock.Call
}

// DeleteOnlineStore is a helper method to define mock.On call
//   - ctx context.Context
//   - request ml.DeleteOnlineStoreRequest
func (_e *MockFeatureStoreInterface_Expecter) DeleteOnlineStore(ctx interface{}, request interface{}) *MockFeatureStoreInterface_DeleteOnlineStore_Call {
	return &MockFeatureStoreInterface_DeleteOnlineStore_Call{Call: _e.mock.On("DeleteOnlineStore", ctx, request)}
}

func (_c *MockFeatureStoreInterface_DeleteOnlineStore_Call) Run(run func(ctx context.Context, request ml.DeleteOnlineStoreRequest)) *MockFeatureStoreInterface_DeleteOnlineStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ml.DeleteOnlineStoreRequest))
	})
	return _c
}

func (_c *MockFeatureStoreInterface_DeleteOnlineStore_Call) Return(_a0 error) *MockFeatureStoreInterface_DeleteOnlineStore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFeatureStoreInterface_DeleteOnlineStore_Call) RunAndReturn(run func(context.Context, ml.DeleteOnlineStoreRequest) error) *MockFeatureStoreInterface_DeleteOnlineStore_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOnlineStoreByName provides a mock function with given fields: ctx, name
func (_m *MockFeatureStoreInterface) DeleteOnlineStoreByName(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOnlineStoreByName")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFeatureStoreInterface_DeleteOnlineStoreByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOnlineStoreByName'
type MockFeatureStoreInterface_DeleteOnlineStoreByName_Call struct {
	*mock.Call
}

// DeleteOnlineStoreByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockFeatureStoreInterface_Expecter) DeleteOnlineStoreByName(ctx interface{}, name interface{}) *MockFeatureStoreInterface_DeleteOnlineStoreByName_Call {
	return &MockFeatureStoreInterface_DeleteOnlineStoreByName_Call{Call: _e.mock.On("DeleteOnlineStoreByName", ctx, name)}
}

func (_c *MockFeatureStoreInterface_DeleteOnlineStoreByName_Call) Run(run func(ctx context.Context, name string)) *MockFeatureStoreInterface_DeleteOnlineStoreByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockFeatureStoreInterface_DeleteOnlineStoreByName_Call) Return(_a0 error) *MockFeatureStoreInterface_DeleteOnlineStoreByName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFeatureStoreInterface_DeleteOnlineStoreByName_Call) RunAndReturn(run func(context.Context, string) error) *MockFeatureStoreInterface_DeleteOnlineStoreByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetOnlineStore provides a mock function with given fields: ctx, request
func (_m *MockFeatureStoreInterface) GetOnlineStore(ctx context.Context, request ml.GetOnlineStoreRequest) (*ml.OnlineStore, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetOnlineStore")
	}

	var r0 *ml.OnlineStore
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ml.GetOnlineStoreRequest) (*ml.OnlineStore, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ml.GetOnlineStoreRequest) *ml.OnlineStore); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ml.OnlineStore)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ml.GetOnlineStoreRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFeatureStoreInterface_GetOnlineStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOnlineStore'
type MockFeatureStoreInterface_GetOnlineStore_Call struct {
	*mock.Call
}

// GetOnlineStore is a helper method to define mock.On call
//   - ctx context.Context
//   - request ml.GetOnlineStoreRequest
func (_e *MockFeatureStoreInterface_Expecter) GetOnlineStore(ctx interface{}, request interface{}) *MockFeatureStoreInterface_GetOnlineStore_Call {
	return &MockFeatureStoreInterface_GetOnlineStore_Call{Call: _e.mock.On("GetOnlineStore", ctx, request)}
}

func (_c *MockFeatureStoreInterface_GetOnlineStore_Call) Run(run func(ctx context.Context, request ml.GetOnlineStoreRequest)) *MockFeatureStoreInterface_GetOnlineStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ml.GetOnlineStoreRequest))
	})
	return _c
}

func (_c *MockFeatureStoreInterface_GetOnlineStore_Call) Return(_a0 *ml.OnlineStore, _a1 error) *MockFeatureStoreInterface_GetOnlineStore_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFeatureStoreInterface_GetOnlineStore_Call) RunAndReturn(run func(context.Context, ml.GetOnlineStoreRequest) (*ml.OnlineStore, error)) *MockFeatureStoreInterface_GetOnlineStore_Call {
	_c.Call.Return(run)
	return _c
}

// GetOnlineStoreByName provides a mock function with given fields: ctx, name
func (_m *MockFeatureStoreInterface) GetOnlineStoreByName(ctx context.Context, name string) (*ml.OnlineStore, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetOnlineStoreByName")
	}

	var r0 *ml.OnlineStore
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*ml.OnlineStore, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *ml.OnlineStore); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ml.OnlineStore)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFeatureStoreInterface_GetOnlineStoreByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOnlineStoreByName'
type MockFeatureStoreInterface_GetOnlineStoreByName_Call struct {
	*mock.Call
}

// GetOnlineStoreByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockFeatureStoreInterface_Expecter) GetOnlineStoreByName(ctx interface{}, name interface{}) *MockFeatureStoreInterface_GetOnlineStoreByName_Call {
	return &MockFeatureStoreInterface_GetOnlineStoreByName_Call{Call: _e.mock.On("GetOnlineStoreByName", ctx, name)}
}

func (_c *MockFeatureStoreInterface_GetOnlineStoreByName_Call) Run(run func(ctx context.Context, name string)) *MockFeatureStoreInterface_GetOnlineStoreByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockFeatureStoreInterface_GetOnlineStoreByName_Call) Return(_a0 *ml.OnlineStore, _a1 error) *MockFeatureStoreInterface_GetOnlineStoreByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFeatureStoreInterface_GetOnlineStoreByName_Call) RunAndReturn(run func(context.Context, string) (*ml.OnlineStore, error)) *MockFeatureStoreInterface_GetOnlineStoreByName_Call {
	_c.Call.Return(run)
	return _c
}

// ListOnlineStores provides a mock function with given fields: ctx, request
func (_m *MockFeatureStoreInterface) ListOnlineStores(ctx context.Context, request ml.ListOnlineStoresRequest) listing.Iterator[ml.OnlineStore] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListOnlineStores")
	}

	var r0 listing.Iterator[ml.OnlineStore]
	if rf, ok := ret.Get(0).(func(context.Context, ml.ListOnlineStoresRequest) listing.Iterator[ml.OnlineStore]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listing.Iterator[ml.OnlineStore])
		}
	}

	return r0
}

// MockFeatureStoreInterface_ListOnlineStores_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOnlineStores'
type MockFeatureStoreInterface_ListOnlineStores_Call struct {
	*mock.Call
}

// ListOnlineStores is a helper method to define mock.On call
//   - ctx context.Context
//   - request ml.ListOnlineStoresRequest
func (_e *MockFeatureStoreInterface_Expecter) ListOnlineStores(ctx interface{}, request interface{}) *MockFeatureStoreInterface_ListOnlineStores_Call {
	return &MockFeatureStoreInterface_ListOnlineStores_Call{Call: _e.mock.On("ListOnlineStores", ctx, request)}
}

func (_c *MockFeatureStoreInterface_ListOnlineStores_Call) Run(run func(ctx context.Context, request ml.ListOnlineStoresRequest)) *MockFeatureStoreInterface_ListOnlineStores_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ml.ListOnlineStoresRequest))
	})
	return _c
}

func (_c *MockFeatureStoreInterface_ListOnlineStores_Call) Return(_a0 listing.Iterator[ml.OnlineStore]) *MockFeatureStoreInterface_ListOnlineStores_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFeatureStoreInterface_ListOnlineStores_Call) RunAndReturn(run func(context.Context, ml.ListOnlineStoresRequest) listing.Iterator[ml.OnlineStore]) *MockFeatureStoreInterface_ListOnlineStores_Call {
	_c.Call.Return(run)
	return _c
}

// ListOnlineStoresAll provides a mock function with given fields: ctx, request
func (_m *MockFeatureStoreInterface) ListOnlineStoresAll(ctx context.Context, request ml.ListOnlineStoresRequest) ([]ml.OnlineStore, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListOnlineStoresAll")
	}

	var r0 []ml.OnlineStore
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ml.ListOnlineStoresRequest) ([]ml.OnlineStore, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ml.ListOnlineStoresRequest) []ml.OnlineStore); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ml.OnlineStore)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ml.ListOnlineStoresRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFeatureStoreInterface_ListOnlineStoresAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOnlineStoresAll'
type MockFeatureStoreInterface_ListOnlineStoresAll_Call struct {
	*mock.Call
}

// ListOnlineStoresAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request ml.ListOnlineStoresRequest
func (_e *MockFeatureStoreInterface_Expecter) ListOnlineStoresAll(ctx interface{}, request interface{}) *MockFeatureStoreInterface_ListOnlineStoresAll_Call {
	return &MockFeatureStoreInterface_ListOnlineStoresAll_Call{Call: _e.mock.On("ListOnlineStoresAll", ctx, request)}
}

func (_c *MockFeatureStoreInterface_ListOnlineStoresAll_Call) Run(run func(ctx context.Context, request ml.ListOnlineStoresRequest)) *MockFeatureStoreInterface_ListOnlineStoresAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ml.ListOnlineStoresRequest))
	})
	return _c
}

func (_c *MockFeatureStoreInterface_ListOnlineStoresAll_Call) Return(_a0 []ml.OnlineStore, _a1 error) *MockFeatureStoreInterface_ListOnlineStoresAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFeatureStoreInterface_ListOnlineStoresAll_Call) RunAndReturn(run func(context.Context, ml.ListOnlineStoresRequest) ([]ml.OnlineStore, error)) *MockFeatureStoreInterface_ListOnlineStoresAll_Call {
	_c.Call.Return(run)
	return _c
}

// PublishTable provides a mock function with given fields: ctx, request
func (_m *MockFeatureStoreInterface) PublishTable(ctx context.Context, request ml.PublishTableRequest) (*ml.PublishTableResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for PublishTable")
	}

	var r0 *ml.PublishTableResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ml.PublishTableRequest) (*ml.PublishTableResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ml.PublishTableRequest) *ml.PublishTableResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ml.PublishTableResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ml.PublishTableRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFeatureStoreInterface_PublishTable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishTable'
type MockFeatureStoreInterface_PublishTable_Call struct {
	*mock.Call
}

// PublishTable is a helper method to define mock.On call
//   - ctx context.Context
//   - request ml.PublishTableRequest
func (_e *MockFeatureStoreInterface_Expecter) PublishTable(ctx interface{}, request interface{}) *MockFeatureStoreInterface_PublishTable_Call {
	return &MockFeatureStoreInterface_PublishTable_Call{Call: _e.mock.On("PublishTable", ctx, request)}
}

func (_c *MockFeatureStoreInterface_PublishTable_Call) Run(run func(ctx context.Context, request ml.PublishTableRequest)) *MockFeatureStoreInterface_PublishTable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ml.PublishTableRequest))
	})
	return _c
}

func (_c *MockFeatureStoreInterface_PublishTable_Call) Return(_a0 *ml.PublishTableResponse, _a1 error) *MockFeatureStoreInterface_PublishTable_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFeatureStoreInterface_PublishTable_Call) RunAndReturn(run func(context.Context, ml.PublishTableRequest) (*ml.PublishTableResponse, error)) *MockFeatureStoreInterface_PublishTable_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOnlineStore provides a mock function with given fields: ctx, request
func (_m *MockFeatureStoreInterface) UpdateOnlineStore(ctx context.Context, request ml.UpdateOnlineStoreRequest) (*ml.OnlineStore, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOnlineStore")
	}

	var r0 *ml.OnlineStore
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ml.UpdateOnlineStoreRequest) (*ml.OnlineStore, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ml.UpdateOnlineStoreRequest) *ml.OnlineStore); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ml.OnlineStore)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ml.UpdateOnlineStoreRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFeatureStoreInterface_UpdateOnlineStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOnlineStore'
type MockFeatureStoreInterface_UpdateOnlineStore_Call struct {
	*mock.Call
}

// UpdateOnlineStore is a helper method to define mock.On call
//   - ctx context.Context
//   - request ml.UpdateOnlineStoreRequest
func (_e *MockFeatureStoreInterface_Expecter) UpdateOnlineStore(ctx interface{}, request interface{}) *MockFeatureStoreInterface_UpdateOnlineStore_Call {
	return &MockFeatureStoreInterface_UpdateOnlineStore_Call{Call: _e.mock.On("UpdateOnlineStore", ctx, request)}
}

func (_c *MockFeatureStoreInterface_UpdateOnlineStore_Call) Run(run func(ctx context.Context, request ml.UpdateOnlineStoreRequest)) *MockFeatureStoreInterface_UpdateOnlineStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ml.UpdateOnlineStoreRequest))
	})
	return _c
}

func (_c *MockFeatureStoreInterface_UpdateOnlineStore_Call) Return(_a0 *ml.OnlineStore, _a1 error) *MockFeatureStoreInterface_UpdateOnlineStore_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFeatureStoreInterface_UpdateOnlineStore_Call) RunAndReturn(run func(context.Context, ml.UpdateOnlineStoreRequest) (*ml.OnlineStore, error)) *MockFeatureStoreInterface_UpdateOnlineStore_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFeatureStoreInterface creates a new instance of MockFeatureStoreInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFeatureStoreInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFeatureStoreInterface {
	mock := &MockFeatureStoreInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
