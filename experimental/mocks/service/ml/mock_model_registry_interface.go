// Code generated by mockery v2.43.0. DO NOT EDIT.

package ml

import (
	context "context"

	listing "github.com/databricks/databricks-sdk-go/listing"
	ml "github.com/databricks/databricks-sdk-go/service/ml"

	mock "github.com/stretchr/testify/mock"
)

// MockModelRegistryInterface is an autogenerated mock type for the ModelRegistryInterface type
type MockModelRegistryInterface struct {
	mock.Mock
}

type MockModelRegistryInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockModelRegistryInterface) EXPECT() *MockModelRegistryInterface_Expecter {
	return &MockModelRegistryInterface_Expecter{mock: &_m.Mock}
}

// ApproveTransitionRequest provides a mock function with given fields: ctx, request
func (_m *MockModelRegistryInterface) ApproveTransitionRequest(ctx context.Context, request ml.ApproveTransitionRequest) (*ml.ApproveTransitionRequestResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ApproveTransitionRequest")
	}

	var r0 *ml.ApproveTransitionRequestResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ml.ApproveTransitionRequest) (*ml.ApproveTransitionRequestResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ml.ApproveTransitionRequest) *ml.ApproveTransitionRequestResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ml.ApproveTransitionRequestResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ml.ApproveTransitionRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModelRegistryInterface_ApproveTransitionRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApproveTransitionRequest'
type MockModelRegistryInterface_ApproveTransitionRequest_Call struct {
	*mock.Call
}

// ApproveTransitionRequest is a helper method to define mock.On call
//   - ctx context.Context
//   - request ml.ApproveTransitionRequest
func (_e *MockModelRegistryInterface_Expecter) ApproveTransitionRequest(ctx interface{}, request interface{}) *MockModelRegistryInterface_ApproveTransitionRequest_Call {
	return &MockModelRegistryInterface_ApproveTransitionRequest_Call{Call: _e.mock.On("ApproveTransitionRequest", ctx, request)}
}

func (_c *MockModelRegistryInterface_ApproveTransitionRequest_Call) Run(run func(ctx context.Context, request ml.ApproveTransitionRequest)) *MockModelRegistryInterface_ApproveTransitionRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ml.ApproveTransitionRequest))
	})
	return _c
}

func (_c *MockModelRegistryInterface_ApproveTransitionRequest_Call) Return(_a0 *ml.ApproveTransitionRequestResponse, _a1 error) *MockModelRegistryInterface_ApproveTransitionRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModelRegistryInterface_ApproveTransitionRequest_Call) RunAndReturn(run func(context.Context, ml.ApproveTransitionRequest) (*ml.ApproveTransitionRequestResponse, error)) *MockModelRegistryInterface_ApproveTransitionRequest_Call {
	_c.Call.Return(run)
	return _c
}

// CreateComment provides a mock function with given fields: ctx, request
func (_m *MockModelRegistryInterface) CreateComment(ctx context.Context, request ml.CreateComment) (*ml.CreateCommentResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateComment")
	}

	var r0 *ml.CreateCommentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ml.CreateComment) (*ml.CreateCommentResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ml.CreateComment) *ml.CreateCommentResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ml.CreateCommentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ml.CreateComment) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModelRegistryInterface_CreateComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateComment'
type MockModelRegistryInterface_CreateComment_Call struct {
	*mock.Call
}

// CreateComment is a helper method to define mock.On call
//   - ctx context.Context
//   - request ml.CreateComment
func (_e *MockModelRegistryInterface_Expecter) CreateComment(ctx interface{}, request interface{}) *MockModelRegistryInterface_CreateComment_Call {
	return &MockModelRegistryInterface_CreateComment_Call{Call: _e.mock.On("CreateComment", ctx, request)}
}

func (_c *MockModelRegistryInterface_CreateComment_Call) Run(run func(ctx context.Context, request ml.CreateComment)) *MockModelRegistryInterface_CreateComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ml.CreateComment))
	})
	return _c
}

func (_c *MockModelRegistryInterface_CreateComment_Call) Return(_a0 *ml.CreateCommentResponse, _a1 error) *MockModelRegistryInterface_CreateComment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModelRegistryInterface_CreateComment_Call) RunAndReturn(run func(context.Context, ml.CreateComment) (*ml.CreateCommentResponse, error)) *MockModelRegistryInterface_CreateComment_Call {
	_c.Call.Return(run)
	return _c
}

// CreateModel provides a mock function with given fields: ctx, request
func (_m *MockModelRegistryInterface) CreateModel(ctx context.Context, request ml.CreateModelRequest) (*ml.CreateModelResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateModel")
	}

	var r0 *ml.CreateModelResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ml.CreateModelRequest) (*ml.CreateModelResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ml.CreateModelRequest) *ml.CreateModelResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ml.CreateModelResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ml.CreateModelRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModelRegistryInterface_CreateModel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateModel'
type MockModelRegistryInterface_CreateModel_Call struct {
	*mock.Call
}

// CreateModel is a helper method to define mock.On call
//   - ctx context.Context
//   - request ml.CreateModelRequest
func (_e *MockModelRegistryInterface_Expecter) CreateModel(ctx interface{}, request interface{}) *MockModelRegistryInterface_CreateModel_Call {
	return &MockModelRegistryInterface_CreateModel_Call{Call: _e.mock.On("CreateModel", ctx, request)}
}

func (_c *MockModelRegistryInterface_CreateModel_Call) Run(run func(ctx context.Context, request ml.CreateModelRequest)) *MockModelRegistryInterface_CreateModel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ml.CreateModelRequest))
	})
	return _c
}

func (_c *MockModelRegistryInterface_CreateModel_Call) Return(_a0 *ml.CreateModelResponse, _a1 error) *MockModelRegistryInterface_CreateModel_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModelRegistryInterface_CreateModel_Call) RunAndReturn(run func(context.Context, ml.CreateModelRequest) (*ml.CreateModelResponse, error)) *MockModelRegistryInterface_CreateModel_Call {
	_c.Call.Return(run)
	return _c
}

// CreateModelVersion provides a mock function with given fields: ctx, request
func (_m *MockModelRegistryInterface) CreateModelVersion(ctx context.Context, request ml.CreateModelVersionRequest) (*ml.CreateModelVersionResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateModelVersion")
	}

	var r0 *ml.CreateModelVersionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ml.CreateModelVersionRequest) (*ml.CreateModelVersionResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ml.CreateModelVersionRequest) *ml.CreateModelVersionResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ml.CreateModelVersionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ml.CreateModelVersionRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModelRegistryInterface_CreateModelVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateModelVersion'
type MockModelRegistryInterface_CreateModelVersion_Call struct {
	*mock.Call
}

// CreateModelVersion is a helper method to define mock.On call
//   - ctx context.Context
//   - request ml.CreateModelVersionRequest
func (_e *MockModelRegistryInterface_Expecter) CreateModelVersion(ctx interface{}, request interface{}) *MockModelRegistryInterface_CreateModelVersion_Call {
	return &MockModelRegistryInterface_CreateModelVersion_Call{Call: _e.mock.On("CreateModelVersion", ctx, request)}
}

func (_c *MockModelRegistryInterface_CreateModelVersion_Call) Run(run func(ctx context.Context, request ml.CreateModelVersionRequest)) *MockModelRegistryInterface_CreateModelVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ml.CreateModelVersionRequest))
	})
	return _c
}

func (_c *MockModelRegistryInterface_CreateModelVersion_Call) Return(_a0 *ml.CreateModelVersionResponse, _a1 error) *MockModelRegistryInterface_CreateModelVersion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModelRegistryInterface_CreateModelVersion_Call) RunAndReturn(run func(context.Context, ml.CreateModelVersionRequest) (*ml.CreateModelVersionResponse, error)) *MockModelRegistryInterface_CreateModelVersion_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTransitionRequest provides a mock function with given fields: ctx, request
func (_m *MockModelRegistryInterface) CreateTransitionRequest(ctx context.Context, request ml.CreateTransitionRequest) (*ml.CreateTransitionRequestResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateTransitionRequest")
	}

	var r0 *ml.CreateTransitionRequestResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ml.CreateTransitionRequest) (*ml.CreateTransitionRequestResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ml.CreateTransitionRequest) *ml.CreateTransitionRequestResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ml.CreateTransitionRequestResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ml.CreateTransitionRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModelRegistryInterface_CreateTransitionRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTransitionRequest'
type MockModelRegistryInterface_CreateTransitionRequest_Call struct {
	*mock.Call
}

// CreateTransitionRequest is a helper method to define mock.On call
//   - ctx context.Context
//   - request ml.CreateTransitionRequest
func (_e *MockModelRegistryInterface_Expecter) CreateTransitionRequest(ctx interface{}, request interface{}) *MockModelRegistryInterface_CreateTransitionRequest_Call {
	return &MockModelRegistryInterface_CreateTransitionRequest_Call{Call: _e.mock.On("CreateTransitionRequest", ctx, request)}
}

func (_c *MockModelRegistryInterface_CreateTransitionRequest_Call) Run(run func(ctx context.Context, request ml.CreateTransitionRequest)) *MockModelRegistryInterface_CreateTransitionRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ml.CreateTransitionRequest))
	})
	return _c
}

func (_c *MockModelRegistryInterface_CreateTransitionRequest_Call) Return(_a0 *ml.CreateTransitionRequestResponse, _a1 error) *MockModelRegistryInterface_CreateTransitionRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModelRegistryInterface_CreateTransitionRequest_Call) RunAndReturn(run func(context.Context, ml.CreateTransitionRequest) (*ml.CreateTransitionRequestResponse, error)) *MockModelRegistryInterface_CreateTransitionRequest_Call {
	_c.Call.Return(run)
	return _c
}

// CreateWebhook provides a mock function with given fields: ctx, request
func (_m *MockModelRegistryInterface) CreateWebhook(ctx context.Context, request ml.CreateRegistryWebhook) (*ml.CreateWebhookResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateWebhook")
	}

	var r0 *ml.CreateWebhookResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ml.CreateRegistryWebhook) (*ml.CreateWebhookResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ml.CreateRegistryWebhook) *ml.CreateWebhookResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ml.CreateWebhookResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ml.CreateRegistryWebhook) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModelRegistryInterface_CreateWebhook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateWebhook'
type MockModelRegistryInterface_CreateWebhook_Call struct {
	*mock.Call
}

// CreateWebhook is a helper method to define mock.On call
//   - ctx context.Context
//   - request ml.CreateRegistryWebhook
func (_e *MockModelRegistryInterface_Expecter) CreateWebhook(ctx interface{}, request interface{}) *MockModelRegistryInterface_CreateWebhook_Call {
	return &MockModelRegistryInterface_CreateWebhook_Call{Call: _e.mock.On("CreateWebhook", ctx, request)}
}

func (_c *MockModelRegistryInterface_CreateWebhook_Call) Run(run func(ctx context.Context, request ml.CreateRegistryWebhook)) *MockModelRegistryInterface_CreateWebhook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ml.CreateRegistryWebhook))
	})
	return _c
}

func (_c *MockModelRegistryInterface_CreateWebhook_Call) Return(_a0 *ml.CreateWebhookResponse, _a1 error) *MockModelRegistryInterface_CreateWebhook_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModelRegistryInterface_CreateWebhook_Call) RunAndReturn(run func(context.Context, ml.CreateRegistryWebhook) (*ml.CreateWebhookResponse, error)) *MockModelRegistryInterface_CreateWebhook_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteComment provides a mock function with given fields: ctx, request
func (_m *MockModelRegistryInterface) DeleteComment(ctx context.Context, request ml.DeleteCommentRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for DeleteComment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ml.DeleteCommentRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockModelRegistryInterface_DeleteComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteComment'
type MockModelRegistryInterface_DeleteComment_Call struct {
	*mock.Call
}

// DeleteComment is a helper method to define mock.On call
//   - ctx context.Context
//   - request ml.DeleteCommentRequest
func (_e *MockModelRegistryInterface_Expecter) DeleteComment(ctx interface{}, request interface{}) *MockModelRegistryInterface_DeleteComment_Call {
	return &MockModelRegistryInterface_DeleteComment_Call{Call: _e.mock.On("DeleteComment", ctx, request)}
}

func (_c *MockModelRegistryInterface_DeleteComment_Call) Run(run func(ctx context.Context, request ml.DeleteCommentRequest)) *MockModelRegistryInterface_DeleteComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ml.DeleteCommentRequest))
	})
	return _c
}

func (_c *MockModelRegistryInterface_DeleteComment_Call) Return(_a0 error) *MockModelRegistryInterface_DeleteComment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockModelRegistryInterface_DeleteComment_Call) RunAndReturn(run func(context.Context, ml.DeleteCommentRequest) error) *MockModelRegistryInterface_DeleteComment_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteModel provides a mock function with given fields: ctx, request
func (_m *MockModelRegistryInterface) DeleteModel(ctx context.Context, request ml.DeleteModelRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for DeleteModel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ml.DeleteModelRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockModelRegistryInterface_DeleteModel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteModel'
type MockModelRegistryInterface_DeleteModel_Call struct {
	*mock.Call
}

// DeleteModel is a helper method to define mock.On call
//   - ctx context.Context
//   - request ml.DeleteModelRequest
func (_e *MockModelRegistryInterface_Expecter) DeleteModel(ctx interface{}, request interface{}) *MockModelRegistryInterface_DeleteModel_Call {
	return &MockModelRegistryInterface_DeleteModel_Call{Call: _e.mock.On("DeleteModel", ctx, request)}
}

func (_c *MockModelRegistryInterface_DeleteModel_Call) Run(run func(ctx context.Context, request ml.DeleteModelRequest)) *MockModelRegistryInterface_DeleteModel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ml.DeleteModelRequest))
	})
	return _c
}

func (_c *MockModelRegistryInterface_DeleteModel_Call) Return(_a0 error) *MockModelRegistryInterface_DeleteModel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockModelRegistryInterface_DeleteModel_Call) RunAndReturn(run func(context.Context, ml.DeleteModelRequest) error) *MockModelRegistryInterface_DeleteModel_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteModelTag provides a mock function with given fields: ctx, request
func (_m *MockModelRegistryInterface) DeleteModelTag(ctx context.Context, request ml.DeleteModelTagRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for DeleteModelTag")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ml.DeleteModelTagRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockModelRegistryInterface_DeleteModelTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteModelTag'
type MockModelRegistryInterface_DeleteModelTag_Call struct {
	*mock.Call
}

// DeleteModelTag is a helper method to define mock.On call
//   - ctx context.Context
//   - request ml.DeleteModelTagRequest
func (_e *MockModelRegistryInterface_Expecter) DeleteModelTag(ctx interface{}, request interface{}) *MockModelRegistryInterface_DeleteModelTag_Call {
	return &MockModelRegistryInterface_DeleteModelTag_Call{Call: _e.mock.On("DeleteModelTag", ctx, request)}
}

func (_c *MockModelRegistryInterface_DeleteModelTag_Call) Run(run func(ctx context.Context, request ml.DeleteModelTagRequest)) *MockModelRegistryInterface_DeleteModelTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ml.DeleteModelTagRequest))
	})
	return _c
}

func (_c *MockModelRegistryInterface_DeleteModelTag_Call) Return(_a0 error) *MockModelRegistryInterface_DeleteModelTag_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockModelRegistryInterface_DeleteModelTag_Call) RunAndReturn(run func(context.Context, ml.DeleteModelTagRequest) error) *MockModelRegistryInterface_DeleteModelTag_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteModelVersion provides a mock function with given fields: ctx, request
func (_m *MockModelRegistryInterface) DeleteModelVersion(ctx context.Context, request ml.DeleteModelVersionRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for DeleteModelVersion")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ml.DeleteModelVersionRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockModelRegistryInterface_DeleteModelVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteModelVersion'
type MockModelRegistryInterface_DeleteModelVersion_Call struct {
	*mock.Call
}

// DeleteModelVersion is a helper method to define mock.On call
//   - ctx context.Context
//   - request ml.DeleteModelVersionRequest
func (_e *MockModelRegistryInterface_Expecter) DeleteModelVersion(ctx interface{}, request interface{}) *MockModelRegistryInterface_DeleteModelVersion_Call {
	return &MockModelRegistryInterface_DeleteModelVersion_Call{Call: _e.mock.On("DeleteModelVersion", ctx, request)}
}

func (_c *MockModelRegistryInterface_DeleteModelVersion_Call) Run(run func(ctx context.Context, request ml.DeleteModelVersionRequest)) *MockModelRegistryInterface_DeleteModelVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ml.DeleteModelVersionRequest))
	})
	return _c
}

func (_c *MockModelRegistryInterface_DeleteModelVersion_Call) Return(_a0 error) *MockModelRegistryInterface_DeleteModelVersion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockModelRegistryInterface_DeleteModelVersion_Call) RunAndReturn(run func(context.Context, ml.DeleteModelVersionRequest) error) *MockModelRegistryInterface_DeleteModelVersion_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteModelVersionTag provides a mock function with given fields: ctx, request
func (_m *MockModelRegistryInterface) DeleteModelVersionTag(ctx context.Context, request ml.DeleteModelVersionTagRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for DeleteModelVersionTag")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ml.DeleteModelVersionTagRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockModelRegistryInterface_DeleteModelVersionTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteModelVersionTag'
type MockModelRegistryInterface_DeleteModelVersionTag_Call struct {
	*mock.Call
}

// DeleteModelVersionTag is a helper method to define mock.On call
//   - ctx context.Context
//   - request ml.DeleteModelVersionTagRequest
func (_e *MockModelRegistryInterface_Expecter) DeleteModelVersionTag(ctx interface{}, request interface{}) *MockModelRegistryInterface_DeleteModelVersionTag_Call {
	return &MockModelRegistryInterface_DeleteModelVersionTag_Call{Call: _e.mock.On("DeleteModelVersionTag", ctx, request)}
}

func (_c *MockModelRegistryInterface_DeleteModelVersionTag_Call) Run(run func(ctx context.Context, request ml.DeleteModelVersionTagRequest)) *MockModelRegistryInterface_DeleteModelVersionTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ml.DeleteModelVersionTagRequest))
	})
	return _c
}

func (_c *MockModelRegistryInterface_DeleteModelVersionTag_Call) Return(_a0 error) *MockModelRegistryInterface_DeleteModelVersionTag_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockModelRegistryInterface_DeleteModelVersionTag_Call) RunAndReturn(run func(context.Context, ml.DeleteModelVersionTagRequest) error) *MockModelRegistryInterface_DeleteModelVersionTag_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTransitionRequest provides a mock function with given fields: ctx, request
func (_m *MockModelRegistryInterface) DeleteTransitionRequest(ctx context.Context, request ml.DeleteTransitionRequestRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTransitionRequest")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ml.DeleteTransitionRequestRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockModelRegistryInterface_DeleteTransitionRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTransitionRequest'
type MockModelRegistryInterface_DeleteTransitionRequest_Call struct {
	*mock.Call
}

// DeleteTransitionRequest is a helper method to define mock.On call
//   - ctx context.Context
//   - request ml.DeleteTransitionRequestRequest
func (_e *MockModelRegistryInterface_Expecter) DeleteTransitionRequest(ctx interface{}, request interface{}) *MockModelRegistryInterface_DeleteTransitionRequest_Call {
	return &MockModelRegistryInterface_DeleteTransitionRequest_Call{Call: _e.mock.On("DeleteTransitionRequest", ctx, request)}
}

func (_c *MockModelRegistryInterface_DeleteTransitionRequest_Call) Run(run func(ctx context.Context, request ml.DeleteTransitionRequestRequest)) *MockModelRegistryInterface_DeleteTransitionRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ml.DeleteTransitionRequestRequest))
	})
	return _c
}

func (_c *MockModelRegistryInterface_DeleteTransitionRequest_Call) Return(_a0 error) *MockModelRegistryInterface_DeleteTransitionRequest_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockModelRegistryInterface_DeleteTransitionRequest_Call) RunAndReturn(run func(context.Context, ml.DeleteTransitionRequestRequest) error) *MockModelRegistryInterface_DeleteTransitionRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteWebhook provides a mock function with given fields: ctx, request
func (_m *MockModelRegistryInterface) DeleteWebhook(ctx context.Context, request ml.DeleteWebhookRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWebhook")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ml.DeleteWebhookRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockModelRegistryInterface_DeleteWebhook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteWebhook'
type MockModelRegistryInterface_DeleteWebhook_Call struct {
	*mock.Call
}

// DeleteWebhook is a helper method to define mock.On call
//   - ctx context.Context
//   - request ml.DeleteWebhookRequest
func (_e *MockModelRegistryInterface_Expecter) DeleteWebhook(ctx interface{}, request interface{}) *MockModelRegistryInterface_DeleteWebhook_Call {
	return &MockModelRegistryInterface_DeleteWebhook_Call{Call: _e.mock.On("DeleteWebhook", ctx, request)}
}

func (_c *MockModelRegistryInterface_DeleteWebhook_Call) Run(run func(ctx context.Context, request ml.DeleteWebhookRequest)) *MockModelRegistryInterface_DeleteWebhook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ml.DeleteWebhookRequest))
	})
	return _c
}

func (_c *MockModelRegistryInterface_DeleteWebhook_Call) Return(_a0 error) *MockModelRegistryInterface_DeleteWebhook_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockModelRegistryInterface_DeleteWebhook_Call) RunAndReturn(run func(context.Context, ml.DeleteWebhookRequest) error) *MockModelRegistryInterface_DeleteWebhook_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestVersions provides a mock function with given fields: ctx, request
func (_m *MockModelRegistryInterface) GetLatestVersions(ctx context.Context, request ml.GetLatestVersionsRequest) listing.Iterator[ml.ModelVersion] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestVersions")
	}

	var r0 listing.Iterator[ml.ModelVersion]
	if rf, ok := ret.Get(0).(func(context.Context, ml.GetLatestVersionsRequest) listing.Iterator[ml.ModelVersion]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listing.Iterator[ml.ModelVersion])
		}
	}

	return r0
}

// MockModelRegistryInterface_GetLatestVersions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestVersions'
type MockModelRegistryInterface_GetLatestVersions_Call struct {
	*mock.Call
}

// GetLatestVersions is a helper method to define mock.On call
//   - ctx context.Context
//   - request ml.GetLatestVersionsRequest
func (_e *MockModelRegistryInterface_Expecter) GetLatestVersions(ctx interface{}, request interface{}) *MockModelRegistryInterface_GetLatestVersions_Call {
	return &MockModelRegistryInterface_GetLatestVersions_Call{Call: _e.mock.On("GetLatestVersions", ctx, request)}
}

func (_c *MockModelRegistryInterface_GetLatestVersions_Call) Run(run func(ctx context.Context, request ml.GetLatestVersionsRequest)) *MockModelRegistryInterface_GetLatestVersions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ml.GetLatestVersionsRequest))
	})
	return _c
}

func (_c *MockModelRegistryInterface_GetLatestVersions_Call) Return(_a0 listing.Iterator[ml.ModelVersion]) *MockModelRegistryInterface_GetLatestVersions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockModelRegistryInterface_GetLatestVersions_Call) RunAndReturn(run func(context.Context, ml.GetLatestVersionsRequest) listing.Iterator[ml.ModelVersion]) *MockModelRegistryInterface_GetLatestVersions_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestVersionsAll provides a mock function with given fields: ctx, request
func (_m *MockModelRegistryInterface) GetLatestVersionsAll(ctx context.Context, request ml.GetLatestVersionsRequest) ([]ml.ModelVersion, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestVersionsAll")
	}

	var r0 []ml.ModelVersion
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ml.GetLatestVersionsRequest) ([]ml.ModelVersion, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ml.GetLatestVersionsRequest) []ml.ModelVersion); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ml.ModelVersion)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ml.GetLatestVersionsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModelRegistryInterface_GetLatestVersionsAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestVersionsAll'
type MockModelRegistryInterface_GetLatestVersionsAll_Call struct {
	*mock.Call
}

// GetLatestVersionsAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request ml.GetLatestVersionsRequest
func (_e *MockModelRegistryInterface_Expecter) GetLatestVersionsAll(ctx interface{}, request interface{}) *MockModelRegistryInterface_GetLatestVersionsAll_Call {
	return &MockModelRegistryInterface_GetLatestVersionsAll_Call{Call: _e.mock.On("GetLatestVersionsAll", ctx, request)}
}

func (_c *MockModelRegistryInterface_GetLatestVersionsAll_Call) Run(run func(ctx context.Context, request ml.GetLatestVersionsRequest)) *MockModelRegistryInterface_GetLatestVersionsAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ml.GetLatestVersionsRequest))
	})
	return _c
}

func (_c *MockModelRegistryInterface_GetLatestVersionsAll_Call) Return(_a0 []ml.ModelVersion, _a1 error) *MockModelRegistryInterface_GetLatestVersionsAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModelRegistryInterface_GetLatestVersionsAll_Call) RunAndReturn(run func(context.Context, ml.GetLatestVersionsRequest) ([]ml.ModelVersion, error)) *MockModelRegistryInterface_GetLatestVersionsAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetModel provides a mock function with given fields: ctx, request
func (_m *MockModelRegistryInterface) GetModel(ctx context.Context, request ml.GetModelRequest) (*ml.GetModelResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetModel")
	}

	var r0 *ml.GetModelResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ml.GetModelRequest) (*ml.GetModelResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ml.GetModelRequest) *ml.GetModelResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ml.GetModelResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ml.GetModelRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModelRegistryInterface_GetModel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetModel'
type MockModelRegistryInterface_GetModel_Call struct {
	*mock.Call
}

// GetModel is a helper method to define mock.On call
//   - ctx context.Context
//   - request ml.GetModelRequest
func (_e *MockModelRegistryInterface_Expecter) GetModel(ctx interface{}, request interface{}) *MockModelRegistryInterface_GetModel_Call {
	return &MockModelRegistryInterface_GetModel_Call{Call: _e.mock.On("GetModel", ctx, request)}
}

func (_c *MockModelRegistryInterface_GetModel_Call) Run(run func(ctx context.Context, request ml.GetModelRequest)) *MockModelRegistryInterface_GetModel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ml.GetModelRequest))
	})
	return _c
}

func (_c *MockModelRegistryInterface_GetModel_Call) Return(_a0 *ml.GetModelResponse, _a1 error) *MockModelRegistryInterface_GetModel_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModelRegistryInterface_GetModel_Call) RunAndReturn(run func(context.Context, ml.GetModelRequest) (*ml.GetModelResponse, error)) *MockModelRegistryInterface_GetModel_Call {
	_c.Call.Return(run)
	return _c
}

// GetModelVersion provides a mock function with given fields: ctx, request
func (_m *MockModelRegistryInterface) GetModelVersion(ctx context.Context, request ml.GetModelVersionRequest) (*ml.GetModelVersionResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetModelVersion")
	}

	var r0 *ml.GetModelVersionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ml.GetModelVersionRequest) (*ml.GetModelVersionResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ml.GetModelVersionRequest) *ml.GetModelVersionResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ml.GetModelVersionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ml.GetModelVersionRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModelRegistryInterface_GetModelVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetModelVersion'
type MockModelRegistryInterface_GetModelVersion_Call struct {
	*mock.Call
}

// GetModelVersion is a helper method to define mock.On call
//   - ctx context.Context
//   - request ml.GetModelVersionRequest
func (_e *MockModelRegistryInterface_Expecter) GetModelVersion(ctx interface{}, request interface{}) *MockModelRegistryInterface_GetModelVersion_Call {
	return &MockModelRegistryInterface_GetModelVersion_Call{Call: _e.mock.On("GetModelVersion", ctx, request)}
}

func (_c *MockModelRegistryInterface_GetModelVersion_Call) Run(run func(ctx context.Context, request ml.GetModelVersionRequest)) *MockModelRegistryInterface_GetModelVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ml.GetModelVersionRequest))
	})
	return _c
}

func (_c *MockModelRegistryInterface_GetModelVersion_Call) Return(_a0 *ml.GetModelVersionResponse, _a1 error) *MockModelRegistryInterface_GetModelVersion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModelRegistryInterface_GetModelVersion_Call) RunAndReturn(run func(context.Context, ml.GetModelVersionRequest) (*ml.GetModelVersionResponse, error)) *MockModelRegistryInterface_GetModelVersion_Call {
	_c.Call.Return(run)
	return _c
}

// GetModelVersionDownloadUri provides a mock function with given fields: ctx, request
func (_m *MockModelRegistryInterface) GetModelVersionDownloadUri(ctx context.Context, request ml.GetModelVersionDownloadUriRequest) (*ml.GetModelVersionDownloadUriResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetModelVersionDownloadUri")
	}

	var r0 *ml.GetModelVersionDownloadUriResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ml.GetModelVersionDownloadUriRequest) (*ml.GetModelVersionDownloadUriResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ml.GetModelVersionDownloadUriRequest) *ml.GetModelVersionDownloadUriResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ml.GetModelVersionDownloadUriResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ml.GetModelVersionDownloadUriRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModelRegistryInterface_GetModelVersionDownloadUri_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetModelVersionDownloadUri'
type MockModelRegistryInterface_GetModelVersionDownloadUri_Call struct {
	*mock.Call
}

// GetModelVersionDownloadUri is a helper method to define mock.On call
//   - ctx context.Context
//   - request ml.GetModelVersionDownloadUriRequest
func (_e *MockModelRegistryInterface_Expecter) GetModelVersionDownloadUri(ctx interface{}, request interface{}) *MockModelRegistryInterface_GetModelVersionDownloadUri_Call {
	return &MockModelRegistryInterface_GetModelVersionDownloadUri_Call{Call: _e.mock.On("GetModelVersionDownloadUri", ctx, request)}
}

func (_c *MockModelRegistryInterface_GetModelVersionDownloadUri_Call) Run(run func(ctx context.Context, request ml.GetModelVersionDownloadUriRequest)) *MockModelRegistryInterface_GetModelVersionDownloadUri_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ml.GetModelVersionDownloadUriRequest))
	})
	return _c
}

func (_c *MockModelRegistryInterface_GetModelVersionDownloadUri_Call) Return(_a0 *ml.GetModelVersionDownloadUriResponse, _a1 error) *MockModelRegistryInterface_GetModelVersionDownloadUri_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModelRegistryInterface_GetModelVersionDownloadUri_Call) RunAndReturn(run func(context.Context, ml.GetModelVersionDownloadUriRequest) (*ml.GetModelVersionDownloadUriResponse, error)) *MockModelRegistryInterface_GetModelVersionDownloadUri_Call {
	_c.Call.Return(run)
	return _c
}

// GetPermissionLevels provides a mock function with given fields: ctx, request
func (_m *MockModelRegistryInterface) GetPermissionLevels(ctx context.Context, request ml.GetRegisteredModelPermissionLevelsRequest) (*ml.GetRegisteredModelPermissionLevelsResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetPermissionLevels")
	}

	var r0 *ml.GetRegisteredModelPermissionLevelsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ml.GetRegisteredModelPermissionLevelsRequest) (*ml.GetRegisteredModelPermissionLevelsResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ml.GetRegisteredModelPermissionLevelsRequest) *ml.GetRegisteredModelPermissionLevelsResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ml.GetRegisteredModelPermissionLevelsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ml.GetRegisteredModelPermissionLevelsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModelRegistryInterface_GetPermissionLevels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPermissionLevels'
type MockModelRegistryInterface_GetPermissionLevels_Call struct {
	*mock.Call
}

// GetPermissionLevels is a helper method to define mock.On call
//   - ctx context.Context
//   - request ml.GetRegisteredModelPermissionLevelsRequest
func (_e *MockModelRegistryInterface_Expecter) GetPermissionLevels(ctx interface{}, request interface{}) *MockModelRegistryInterface_GetPermissionLevels_Call {
	return &MockModelRegistryInterface_GetPermissionLevels_Call{Call: _e.mock.On("GetPermissionLevels", ctx, request)}
}

func (_c *MockModelRegistryInterface_GetPermissionLevels_Call) Run(run func(ctx context.Context, request ml.GetRegisteredModelPermissionLevelsRequest)) *MockModelRegistryInterface_GetPermissionLevels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ml.GetRegisteredModelPermissionLevelsRequest))
	})
	return _c
}

func (_c *MockModelRegistryInterface_GetPermissionLevels_Call) Return(_a0 *ml.GetRegisteredModelPermissionLevelsResponse, _a1 error) *MockModelRegistryInterface_GetPermissionLevels_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModelRegistryInterface_GetPermissionLevels_Call) RunAndReturn(run func(context.Context, ml.GetRegisteredModelPermissionLevelsRequest) (*ml.GetRegisteredModelPermissionLevelsResponse, error)) *MockModelRegistryInterface_GetPermissionLevels_Call {
	_c.Call.Return(run)
	return _c
}

// GetPermissionLevelsByRegisteredModelId provides a mock function with given fields: ctx, registeredModelId
func (_m *MockModelRegistryInterface) GetPermissionLevelsByRegisteredModelId(ctx context.Context, registeredModelId string) (*ml.GetRegisteredModelPermissionLevelsResponse, error) {
	ret := _m.Called(ctx, registeredModelId)

	if len(ret) == 0 {
		panic("no return value specified for GetPermissionLevelsByRegisteredModelId")
	}

	var r0 *ml.GetRegisteredModelPermissionLevelsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*ml.GetRegisteredModelPermissionLevelsResponse, error)); ok {
		return rf(ctx, registeredModelId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *ml.GetRegisteredModelPermissionLevelsResponse); ok {
		r0 = rf(ctx, registeredModelId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ml.GetRegisteredModelPermissionLevelsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, registeredModelId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModelRegistryInterface_GetPermissionLevelsByRegisteredModelId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPermissionLevelsByRegisteredModelId'
type MockModelRegistryInterface_GetPermissionLevelsByRegisteredModelId_Call struct {
	*mock.Call
}

// GetPermissionLevelsByRegisteredModelId is a helper method to define mock.On call
//   - ctx context.Context
//   - registeredModelId string
func (_e *MockModelRegistryInterface_Expecter) GetPermissionLevelsByRegisteredModelId(ctx interface{}, registeredModelId interface{}) *MockModelRegistryInterface_GetPermissionLevelsByRegisteredModelId_Call {
	return &MockModelRegistryInterface_GetPermissionLevelsByRegisteredModelId_Call{Call: _e.mock.On("GetPermissionLevelsByRegisteredModelId", ctx, registeredModelId)}
}

func (_c *MockModelRegistryInterface_GetPermissionLevelsByRegisteredModelId_Call) Run(run func(ctx context.Context, registeredModelId string)) *MockModelRegistryInterface_GetPermissionLevelsByRegisteredModelId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockModelRegistryInterface_GetPermissionLevelsByRegisteredModelId_Call) Return(_a0 *ml.GetRegisteredModelPermissionLevelsResponse, _a1 error) *MockModelRegistryInterface_GetPermissionLevelsByRegisteredModelId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModelRegistryInterface_GetPermissionLevelsByRegisteredModelId_Call) RunAndReturn(run func(context.Context, string) (*ml.GetRegisteredModelPermissionLevelsResponse, error)) *MockModelRegistryInterface_GetPermissionLevelsByRegisteredModelId_Call {
	_c.Call.Return(run)
	return _c
}

// GetPermissions provides a mock function with given fields: ctx, request
func (_m *MockModelRegistryInterface) GetPermissions(ctx context.Context, request ml.GetRegisteredModelPermissionsRequest) (*ml.RegisteredModelPermissions, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetPermissions")
	}

	var r0 *ml.RegisteredModelPermissions
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ml.GetRegisteredModelPermissionsRequest) (*ml.RegisteredModelPermissions, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ml.GetRegisteredModelPermissionsRequest) *ml.RegisteredModelPermissions); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ml.RegisteredModelPermissions)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ml.GetRegisteredModelPermissionsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModelRegistryInterface_GetPermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPermissions'
type MockModelRegistryInterface_GetPermissions_Call struct {
	*mock.Call
}

// GetPermissions is a helper method to define mock.On call
//   - ctx context.Context
//   - request ml.GetRegisteredModelPermissionsRequest
func (_e *MockModelRegistryInterface_Expecter) GetPermissions(ctx interface{}, request interface{}) *MockModelRegistryInterface_GetPermissions_Call {
	return &MockModelRegistryInterface_GetPermissions_Call{Call: _e.mock.On("GetPermissions", ctx, request)}
}

func (_c *MockModelRegistryInterface_GetPermissions_Call) Run(run func(ctx context.Context, request ml.GetRegisteredModelPermissionsRequest)) *MockModelRegistryInterface_GetPermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ml.GetRegisteredModelPermissionsRequest))
	})
	return _c
}

func (_c *MockModelRegistryInterface_GetPermissions_Call) Return(_a0 *ml.RegisteredModelPermissions, _a1 error) *MockModelRegistryInterface_GetPermissions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModelRegistryInterface_GetPermissions_Call) RunAndReturn(run func(context.Context, ml.GetRegisteredModelPermissionsRequest) (*ml.RegisteredModelPermissions, error)) *MockModelRegistryInterface_GetPermissions_Call {
	_c.Call.Return(run)
	return _c
}

// GetPermissionsByRegisteredModelId provides a mock function with given fields: ctx, registeredModelId
func (_m *MockModelRegistryInterface) GetPermissionsByRegisteredModelId(ctx context.Context, registeredModelId string) (*ml.RegisteredModelPermissions, error) {
	ret := _m.Called(ctx, registeredModelId)

	if len(ret) == 0 {
		panic("no return value specified for GetPermissionsByRegisteredModelId")
	}

	var r0 *ml.RegisteredModelPermissions
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*ml.RegisteredModelPermissions, error)); ok {
		return rf(ctx, registeredModelId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *ml.RegisteredModelPermissions); ok {
		r0 = rf(ctx, registeredModelId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ml.RegisteredModelPermissions)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, registeredModelId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModelRegistryInterface_GetPermissionsByRegisteredModelId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPermissionsByRegisteredModelId'
type MockModelRegistryInterface_GetPermissionsByRegisteredModelId_Call struct {
	*mock.Call
}

// GetPermissionsByRegisteredModelId is a helper method to define mock.On call
//   - ctx context.Context
//   - registeredModelId string
func (_e *MockModelRegistryInterface_Expecter) GetPermissionsByRegisteredModelId(ctx interface{}, registeredModelId interface{}) *MockModelRegistryInterface_GetPermissionsByRegisteredModelId_Call {
	return &MockModelRegistryInterface_GetPermissionsByRegisteredModelId_Call{Call: _e.mock.On("GetPermissionsByRegisteredModelId", ctx, registeredModelId)}
}

func (_c *MockModelRegistryInterface_GetPermissionsByRegisteredModelId_Call) Run(run func(ctx context.Context, registeredModelId string)) *MockModelRegistryInterface_GetPermissionsByRegisteredModelId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockModelRegistryInterface_GetPermissionsByRegisteredModelId_Call) Return(_a0 *ml.RegisteredModelPermissions, _a1 error) *MockModelRegistryInterface_GetPermissionsByRegisteredModelId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModelRegistryInterface_GetPermissionsByRegisteredModelId_Call) RunAndReturn(run func(context.Context, string) (*ml.RegisteredModelPermissions, error)) *MockModelRegistryInterface_GetPermissionsByRegisteredModelId_Call {
	_c.Call.Return(run)
	return _c
}

// Impl provides a mock function with given fields:
func (_m *MockModelRegistryInterface) Impl() ml.ModelRegistryService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 ml.ModelRegistryService
	if rf, ok := ret.Get(0).(func() ml.ModelRegistryService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ml.ModelRegistryService)
		}
	}

	return r0
}

// MockModelRegistryInterface_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type MockModelRegistryInterface_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *MockModelRegistryInterface_Expecter) Impl() *MockModelRegistryInterface_Impl_Call {
	return &MockModelRegistryInterface_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *MockModelRegistryInterface_Impl_Call) Run(run func()) *MockModelRegistryInterface_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockModelRegistryInterface_Impl_Call) Return(_a0 ml.ModelRegistryService) *MockModelRegistryInterface_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockModelRegistryInterface_Impl_Call) RunAndReturn(run func() ml.ModelRegistryService) *MockModelRegistryInterface_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// ListModels provides a mock function with given fields: ctx, request
func (_m *MockModelRegistryInterface) ListModels(ctx context.Context, request ml.ListModelsRequest) listing.Iterator[ml.Model] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListModels")
	}

	var r0 listing.Iterator[ml.Model]
	if rf, ok := ret.Get(0).(func(context.Context, ml.ListModelsRequest) listing.Iterator[ml.Model]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listing.Iterator[ml.Model])
		}
	}

	return r0
}

// MockModelRegistryInterface_ListModels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListModels'
type MockModelRegistryInterface_ListModels_Call struct {
	*mock.Call
}

// ListModels is a helper method to define mock.On call
//   - ctx context.Context
//   - request ml.ListModelsRequest
func (_e *MockModelRegistryInterface_Expecter) ListModels(ctx interface{}, request interface{}) *MockModelRegistryInterface_ListModels_Call {
	return &MockModelRegistryInterface_ListModels_Call{Call: _e.mock.On("ListModels", ctx, request)}
}

func (_c *MockModelRegistryInterface_ListModels_Call) Run(run func(ctx context.Context, request ml.ListModelsRequest)) *MockModelRegistryInterface_ListModels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ml.ListModelsRequest))
	})
	return _c
}

func (_c *MockModelRegistryInterface_ListModels_Call) Return(_a0 listing.Iterator[ml.Model]) *MockModelRegistryInterface_ListModels_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockModelRegistryInterface_ListModels_Call) RunAndReturn(run func(context.Context, ml.ListModelsRequest) listing.Iterator[ml.Model]) *MockModelRegistryInterface_ListModels_Call {
	_c.Call.Return(run)
	return _c
}

// ListModelsAll provides a mock function with given fields: ctx, request
func (_m *MockModelRegistryInterface) ListModelsAll(ctx context.Context, request ml.ListModelsRequest) ([]ml.Model, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListModelsAll")
	}

	var r0 []ml.Model
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ml.ListModelsRequest) ([]ml.Model, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ml.ListModelsRequest) []ml.Model); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ml.Model)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ml.ListModelsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModelRegistryInterface_ListModelsAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListModelsAll'
type MockModelRegistryInterface_ListModelsAll_Call struct {
	*mock.Call
}

// ListModelsAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request ml.ListModelsRequest
func (_e *MockModelRegistryInterface_Expecter) ListModelsAll(ctx interface{}, request interface{}) *MockModelRegistryInterface_ListModelsAll_Call {
	return &MockModelRegistryInterface_ListModelsAll_Call{Call: _e.mock.On("ListModelsAll", ctx, request)}
}

func (_c *MockModelRegistryInterface_ListModelsAll_Call) Run(run func(ctx context.Context, request ml.ListModelsRequest)) *MockModelRegistryInterface_ListModelsAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ml.ListModelsRequest))
	})
	return _c
}

func (_c *MockModelRegistryInterface_ListModelsAll_Call) Return(_a0 []ml.Model, _a1 error) *MockModelRegistryInterface_ListModelsAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModelRegistryInterface_ListModelsAll_Call) RunAndReturn(run func(context.Context, ml.ListModelsRequest) ([]ml.Model, error)) *MockModelRegistryInterface_ListModelsAll_Call {
	_c.Call.Return(run)
	return _c
}

// ListTransitionRequests provides a mock function with given fields: ctx, request
func (_m *MockModelRegistryInterface) ListTransitionRequests(ctx context.Context, request ml.ListTransitionRequestsRequest) listing.Iterator[ml.Activity] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListTransitionRequests")
	}

	var r0 listing.Iterator[ml.Activity]
	if rf, ok := ret.Get(0).(func(context.Context, ml.ListTransitionRequestsRequest) listing.Iterator[ml.Activity]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listing.Iterator[ml.Activity])
		}
	}

	return r0
}

// MockModelRegistryInterface_ListTransitionRequests_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTransitionRequests'
type MockModelRegistryInterface_ListTransitionRequests_Call struct {
	*mock.Call
}

// ListTransitionRequests is a helper method to define mock.On call
//   - ctx context.Context
//   - request ml.ListTransitionRequestsRequest
func (_e *MockModelRegistryInterface_Expecter) ListTransitionRequests(ctx interface{}, request interface{}) *MockModelRegistryInterface_ListTransitionRequests_Call {
	return &MockModelRegistryInterface_ListTransitionRequests_Call{Call: _e.mock.On("ListTransitionRequests", ctx, request)}
}

func (_c *MockModelRegistryInterface_ListTransitionRequests_Call) Run(run func(ctx context.Context, request ml.ListTransitionRequestsRequest)) *MockModelRegistryInterface_ListTransitionRequests_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ml.ListTransitionRequestsRequest))
	})
	return _c
}

func (_c *MockModelRegistryInterface_ListTransitionRequests_Call) Return(_a0 listing.Iterator[ml.Activity]) *MockModelRegistryInterface_ListTransitionRequests_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockModelRegistryInterface_ListTransitionRequests_Call) RunAndReturn(run func(context.Context, ml.ListTransitionRequestsRequest) listing.Iterator[ml.Activity]) *MockModelRegistryInterface_ListTransitionRequests_Call {
	_c.Call.Return(run)
	return _c
}

// ListTransitionRequestsAll provides a mock function with given fields: ctx, request
func (_m *MockModelRegistryInterface) ListTransitionRequestsAll(ctx context.Context, request ml.ListTransitionRequestsRequest) ([]ml.Activity, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListTransitionRequestsAll")
	}

	var r0 []ml.Activity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ml.ListTransitionRequestsRequest) ([]ml.Activity, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ml.ListTransitionRequestsRequest) []ml.Activity); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ml.Activity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ml.ListTransitionRequestsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModelRegistryInterface_ListTransitionRequestsAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTransitionRequestsAll'
type MockModelRegistryInterface_ListTransitionRequestsAll_Call struct {
	*mock.Call
}

// ListTransitionRequestsAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request ml.ListTransitionRequestsRequest
func (_e *MockModelRegistryInterface_Expecter) ListTransitionRequestsAll(ctx interface{}, request interface{}) *MockModelRegistryInterface_ListTransitionRequestsAll_Call {
	return &MockModelRegistryInterface_ListTransitionRequestsAll_Call{Call: _e.mock.On("ListTransitionRequestsAll", ctx, request)}
}

func (_c *MockModelRegistryInterface_ListTransitionRequestsAll_Call) Run(run func(ctx context.Context, request ml.ListTransitionRequestsRequest)) *MockModelRegistryInterface_ListTransitionRequestsAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ml.ListTransitionRequestsRequest))
	})
	return _c
}

func (_c *MockModelRegistryInterface_ListTransitionRequestsAll_Call) Return(_a0 []ml.Activity, _a1 error) *MockModelRegistryInterface_ListTransitionRequestsAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModelRegistryInterface_ListTransitionRequestsAll_Call) RunAndReturn(run func(context.Context, ml.ListTransitionRequestsRequest) ([]ml.Activity, error)) *MockModelRegistryInterface_ListTransitionRequestsAll_Call {
	_c.Call.Return(run)
	return _c
}

// ListWebhooks provides a mock function with given fields: ctx, request
func (_m *MockModelRegistryInterface) ListWebhooks(ctx context.Context, request ml.ListWebhooksRequest) listing.Iterator[ml.RegistryWebhook] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListWebhooks")
	}

	var r0 listing.Iterator[ml.RegistryWebhook]
	if rf, ok := ret.Get(0).(func(context.Context, ml.ListWebhooksRequest) listing.Iterator[ml.RegistryWebhook]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listing.Iterator[ml.RegistryWebhook])
		}
	}

	return r0
}

// MockModelRegistryInterface_ListWebhooks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListWebhooks'
type MockModelRegistryInterface_ListWebhooks_Call struct {
	*mock.Call
}

// ListWebhooks is a helper method to define mock.On call
//   - ctx context.Context
//   - request ml.ListWebhooksRequest
func (_e *MockModelRegistryInterface_Expecter) ListWebhooks(ctx interface{}, request interface{}) *MockModelRegistryInterface_ListWebhooks_Call {
	return &MockModelRegistryInterface_ListWebhooks_Call{Call: _e.mock.On("ListWebhooks", ctx, request)}
}

func (_c *MockModelRegistryInterface_ListWebhooks_Call) Run(run func(ctx context.Context, request ml.ListWebhooksRequest)) *MockModelRegistryInterface_ListWebhooks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ml.ListWebhooksRequest))
	})
	return _c
}

func (_c *MockModelRegistryInterface_ListWebhooks_Call) Return(_a0 listing.Iterator[ml.RegistryWebhook]) *MockModelRegistryInterface_ListWebhooks_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockModelRegistryInterface_ListWebhooks_Call) RunAndReturn(run func(context.Context, ml.ListWebhooksRequest) listing.Iterator[ml.RegistryWebhook]) *MockModelRegistryInterface_ListWebhooks_Call {
	_c.Call.Return(run)
	return _c
}

// ListWebhooksAll provides a mock function with given fields: ctx, request
func (_m *MockModelRegistryInterface) ListWebhooksAll(ctx context.Context, request ml.ListWebhooksRequest) ([]ml.RegistryWebhook, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListWebhooksAll")
	}

	var r0 []ml.RegistryWebhook
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ml.ListWebhooksRequest) ([]ml.RegistryWebhook, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ml.ListWebhooksRequest) []ml.RegistryWebhook); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ml.RegistryWebhook)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ml.ListWebhooksRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModelRegistryInterface_ListWebhooksAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListWebhooksAll'
type MockModelRegistryInterface_ListWebhooksAll_Call struct {
	*mock.Call
}

// ListWebhooksAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request ml.ListWebhooksRequest
func (_e *MockModelRegistryInterface_Expecter) ListWebhooksAll(ctx interface{}, request interface{}) *MockModelRegistryInterface_ListWebhooksAll_Call {
	return &MockModelRegistryInterface_ListWebhooksAll_Call{Call: _e.mock.On("ListWebhooksAll", ctx, request)}
}

func (_c *MockModelRegistryInterface_ListWebhooksAll_Call) Run(run func(ctx context.Context, request ml.ListWebhooksRequest)) *MockModelRegistryInterface_ListWebhooksAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ml.ListWebhooksRequest))
	})
	return _c
}

func (_c *MockModelRegistryInterface_ListWebhooksAll_Call) Return(_a0 []ml.RegistryWebhook, _a1 error) *MockModelRegistryInterface_ListWebhooksAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModelRegistryInterface_ListWebhooksAll_Call) RunAndReturn(run func(context.Context, ml.ListWebhooksRequest) ([]ml.RegistryWebhook, error)) *MockModelRegistryInterface_ListWebhooksAll_Call {
	_c.Call.Return(run)
	return _c
}

// RejectTransitionRequest provides a mock function with given fields: ctx, request
func (_m *MockModelRegistryInterface) RejectTransitionRequest(ctx context.Context, request ml.RejectTransitionRequest) (*ml.RejectTransitionRequestResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for RejectTransitionRequest")
	}

	var r0 *ml.RejectTransitionRequestResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ml.RejectTransitionRequest) (*ml.RejectTransitionRequestResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ml.RejectTransitionRequest) *ml.RejectTransitionRequestResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ml.RejectTransitionRequestResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ml.RejectTransitionRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModelRegistryInterface_RejectTransitionRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RejectTransitionRequest'
type MockModelRegistryInterface_RejectTransitionRequest_Call struct {
	*mock.Call
}

// RejectTransitionRequest is a helper method to define mock.On call
//   - ctx context.Context
//   - request ml.RejectTransitionRequest
func (_e *MockModelRegistryInterface_Expecter) RejectTransitionRequest(ctx interface{}, request interface{}) *MockModelRegistryInterface_RejectTransitionRequest_Call {
	return &MockModelRegistryInterface_RejectTransitionRequest_Call{Call: _e.mock.On("RejectTransitionRequest", ctx, request)}
}

func (_c *MockModelRegistryInterface_RejectTransitionRequest_Call) Run(run func(ctx context.Context, request ml.RejectTransitionRequest)) *MockModelRegistryInterface_RejectTransitionRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ml.RejectTransitionRequest))
	})
	return _c
}

func (_c *MockModelRegistryInterface_RejectTransitionRequest_Call) Return(_a0 *ml.RejectTransitionRequestResponse, _a1 error) *MockModelRegistryInterface_RejectTransitionRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModelRegistryInterface_RejectTransitionRequest_Call) RunAndReturn(run func(context.Context, ml.RejectTransitionRequest) (*ml.RejectTransitionRequestResponse, error)) *MockModelRegistryInterface_RejectTransitionRequest_Call {
	_c.Call.Return(run)
	return _c
}

// RenameModel provides a mock function with given fields: ctx, request
func (_m *MockModelRegistryInterface) RenameModel(ctx context.Context, request ml.RenameModelRequest) (*ml.RenameModelResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for RenameModel")
	}

	var r0 *ml.RenameModelResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ml.RenameModelRequest) (*ml.RenameModelResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ml.RenameModelRequest) *ml.RenameModelResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ml.RenameModelResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ml.RenameModelRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModelRegistryInterface_RenameModel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RenameModel'
type MockModelRegistryInterface_RenameModel_Call struct {
	*mock.Call
}

// RenameModel is a helper method to define mock.On call
//   - ctx context.Context
//   - request ml.RenameModelRequest
func (_e *MockModelRegistryInterface_Expecter) RenameModel(ctx interface{}, request interface{}) *MockModelRegistryInterface_RenameModel_Call {
	return &MockModelRegistryInterface_RenameModel_Call{Call: _e.mock.On("RenameModel", ctx, request)}
}

func (_c *MockModelRegistryInterface_RenameModel_Call) Run(run func(ctx context.Context, request ml.RenameModelRequest)) *MockModelRegistryInterface_RenameModel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ml.RenameModelRequest))
	})
	return _c
}

func (_c *MockModelRegistryInterface_RenameModel_Call) Return(_a0 *ml.RenameModelResponse, _a1 error) *MockModelRegistryInterface_RenameModel_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModelRegistryInterface_RenameModel_Call) RunAndReturn(run func(context.Context, ml.RenameModelRequest) (*ml.RenameModelResponse, error)) *MockModelRegistryInterface_RenameModel_Call {
	_c.Call.Return(run)
	return _c
}

// SearchModelVersions provides a mock function with given fields: ctx, request
func (_m *MockModelRegistryInterface) SearchModelVersions(ctx context.Context, request ml.SearchModelVersionsRequest) listing.Iterator[ml.ModelVersion] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for SearchModelVersions")
	}

	var r0 listing.Iterator[ml.ModelVersion]
	if rf, ok := ret.Get(0).(func(context.Context, ml.SearchModelVersionsRequest) listing.Iterator[ml.ModelVersion]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listing.Iterator[ml.ModelVersion])
		}
	}

	return r0
}

// MockModelRegistryInterface_SearchModelVersions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchModelVersions'
type MockModelRegistryInterface_SearchModelVersions_Call struct {
	*mock.Call
}

// SearchModelVersions is a helper method to define mock.On call
//   - ctx context.Context
//   - request ml.SearchModelVersionsRequest
func (_e *MockModelRegistryInterface_Expecter) SearchModelVersions(ctx interface{}, request interface{}) *MockModelRegistryInterface_SearchModelVersions_Call {
	return &MockModelRegistryInterface_SearchModelVersions_Call{Call: _e.mock.On("SearchModelVersions", ctx, request)}
}

func (_c *MockModelRegistryInterface_SearchModelVersions_Call) Run(run func(ctx context.Context, request ml.SearchModelVersionsRequest)) *MockModelRegistryInterface_SearchModelVersions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ml.SearchModelVersionsRequest))
	})
	return _c
}

func (_c *MockModelRegistryInterface_SearchModelVersions_Call) Return(_a0 listing.Iterator[ml.ModelVersion]) *MockModelRegistryInterface_SearchModelVersions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockModelRegistryInterface_SearchModelVersions_Call) RunAndReturn(run func(context.Context, ml.SearchModelVersionsRequest) listing.Iterator[ml.ModelVersion]) *MockModelRegistryInterface_SearchModelVersions_Call {
	_c.Call.Return(run)
	return _c
}

// SearchModelVersionsAll provides a mock function with given fields: ctx, request
func (_m *MockModelRegistryInterface) SearchModelVersionsAll(ctx context.Context, request ml.SearchModelVersionsRequest) ([]ml.ModelVersion, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for SearchModelVersionsAll")
	}

	var r0 []ml.ModelVersion
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ml.SearchModelVersionsRequest) ([]ml.ModelVersion, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ml.SearchModelVersionsRequest) []ml.ModelVersion); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ml.ModelVersion)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ml.SearchModelVersionsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModelRegistryInterface_SearchModelVersionsAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchModelVersionsAll'
type MockModelRegistryInterface_SearchModelVersionsAll_Call struct {
	*mock.Call
}

// SearchModelVersionsAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request ml.SearchModelVersionsRequest
func (_e *MockModelRegistryInterface_Expecter) SearchModelVersionsAll(ctx interface{}, request interface{}) *MockModelRegistryInterface_SearchModelVersionsAll_Call {
	return &MockModelRegistryInterface_SearchModelVersionsAll_Call{Call: _e.mock.On("SearchModelVersionsAll", ctx, request)}
}

func (_c *MockModelRegistryInterface_SearchModelVersionsAll_Call) Run(run func(ctx context.Context, request ml.SearchModelVersionsRequest)) *MockModelRegistryInterface_SearchModelVersionsAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ml.SearchModelVersionsRequest))
	})
	return _c
}

func (_c *MockModelRegistryInterface_SearchModelVersionsAll_Call) Return(_a0 []ml.ModelVersion, _a1 error) *MockModelRegistryInterface_SearchModelVersionsAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModelRegistryInterface_SearchModelVersionsAll_Call) RunAndReturn(run func(context.Context, ml.SearchModelVersionsRequest) ([]ml.ModelVersion, error)) *MockModelRegistryInterface_SearchModelVersionsAll_Call {
	_c.Call.Return(run)
	return _c
}

// SearchModels provides a mock function with given fields: ctx, request
func (_m *MockModelRegistryInterface) SearchModels(ctx context.Context, request ml.SearchModelsRequest) listing.Iterator[ml.Model] {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for SearchModels")
	}

	var r0 listing.Iterator[ml.Model]
	if rf, ok := ret.Get(0).(func(context.Context, ml.SearchModelsRequest) listing.Iterator[ml.Model]); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(listing.Iterator[ml.Model])
		}
	}

	return r0
}

// MockModelRegistryInterface_SearchModels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchModels'
type MockModelRegistryInterface_SearchModels_Call struct {
	*mock.Call
}

// SearchModels is a helper method to define mock.On call
//   - ctx context.Context
//   - request ml.SearchModelsRequest
func (_e *MockModelRegistryInterface_Expecter) SearchModels(ctx interface{}, request interface{}) *MockModelRegistryInterface_SearchModels_Call {
	return &MockModelRegistryInterface_SearchModels_Call{Call: _e.mock.On("SearchModels", ctx, request)}
}

func (_c *MockModelRegistryInterface_SearchModels_Call) Run(run func(ctx context.Context, request ml.SearchModelsRequest)) *MockModelRegistryInterface_SearchModels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ml.SearchModelsRequest))
	})
	return _c
}

func (_c *MockModelRegistryInterface_SearchModels_Call) Return(_a0 listing.Iterator[ml.Model]) *MockModelRegistryInterface_SearchModels_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockModelRegistryInterface_SearchModels_Call) RunAndReturn(run func(context.Context, ml.SearchModelsRequest) listing.Iterator[ml.Model]) *MockModelRegistryInterface_SearchModels_Call {
	_c.Call.Return(run)
	return _c
}

// SearchModelsAll provides a mock function with given fields: ctx, request
func (_m *MockModelRegistryInterface) SearchModelsAll(ctx context.Context, request ml.SearchModelsRequest) ([]ml.Model, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for SearchModelsAll")
	}

	var r0 []ml.Model
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ml.SearchModelsRequest) ([]ml.Model, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ml.SearchModelsRequest) []ml.Model); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ml.Model)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ml.SearchModelsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModelRegistryInterface_SearchModelsAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchModelsAll'
type MockModelRegistryInterface_SearchModelsAll_Call struct {
	*mock.Call
}

// SearchModelsAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request ml.SearchModelsRequest
func (_e *MockModelRegistryInterface_Expecter) SearchModelsAll(ctx interface{}, request interface{}) *MockModelRegistryInterface_SearchModelsAll_Call {
	return &MockModelRegistryInterface_SearchModelsAll_Call{Call: _e.mock.On("SearchModelsAll", ctx, request)}
}

func (_c *MockModelRegistryInterface_SearchModelsAll_Call) Run(run func(ctx context.Context, request ml.SearchModelsRequest)) *MockModelRegistryInterface_SearchModelsAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ml.SearchModelsRequest))
	})
	return _c
}

func (_c *MockModelRegistryInterface_SearchModelsAll_Call) Return(_a0 []ml.Model, _a1 error) *MockModelRegistryInterface_SearchModelsAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModelRegistryInterface_SearchModelsAll_Call) RunAndReturn(run func(context.Context, ml.SearchModelsRequest) ([]ml.Model, error)) *MockModelRegistryInterface_SearchModelsAll_Call {
	_c.Call.Return(run)
	return _c
}

// SetModelTag provides a mock function with given fields: ctx, request
func (_m *MockModelRegistryInterface) SetModelTag(ctx context.Context, request ml.SetModelTagRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for SetModelTag")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ml.SetModelTagRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockModelRegistryInterface_SetModelTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetModelTag'
type MockModelRegistryInterface_SetModelTag_Call struct {
	*mock.Call
}

// SetModelTag is a helper method to define mock.On call
//   - ctx context.Context
//   - request ml.SetModelTagRequest
func (_e *MockModelRegistryInterface_Expecter) SetModelTag(ctx interface{}, request interface{}) *MockModelRegistryInterface_SetModelTag_Call {
	return &MockModelRegistryInterface_SetModelTag_Call{Call: _e.mock.On("SetModelTag", ctx, request)}
}

func (_c *MockModelRegistryInterface_SetModelTag_Call) Run(run func(ctx context.Context, request ml.SetModelTagRequest)) *MockModelRegistryInterface_SetModelTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ml.SetModelTagRequest))
	})
	return _c
}

func (_c *MockModelRegistryInterface_SetModelTag_Call) Return(_a0 error) *MockModelRegistryInterface_SetModelTag_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockModelRegistryInterface_SetModelTag_Call) RunAndReturn(run func(context.Context, ml.SetModelTagRequest) error) *MockModelRegistryInterface_SetModelTag_Call {
	_c.Call.Return(run)
	return _c
}

// SetModelVersionTag provides a mock function with given fields: ctx, request
func (_m *MockModelRegistryInterface) SetModelVersionTag(ctx context.Context, request ml.SetModelVersionTagRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for SetModelVersionTag")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ml.SetModelVersionTagRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockModelRegistryInterface_SetModelVersionTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetModelVersionTag'
type MockModelRegistryInterface_SetModelVersionTag_Call struct {
	*mock.Call
}

// SetModelVersionTag is a helper method to define mock.On call
//   - ctx context.Context
//   - request ml.SetModelVersionTagRequest
func (_e *MockModelRegistryInterface_Expecter) SetModelVersionTag(ctx interface{}, request interface{}) *MockModelRegistryInterface_SetModelVersionTag_Call {
	return &MockModelRegistryInterface_SetModelVersionTag_Call{Call: _e.mock.On("SetModelVersionTag", ctx, request)}
}

func (_c *MockModelRegistryInterface_SetModelVersionTag_Call) Run(run func(ctx context.Context, request ml.SetModelVersionTagRequest)) *MockModelRegistryInterface_SetModelVersionTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ml.SetModelVersionTagRequest))
	})
	return _c
}

func (_c *MockModelRegistryInterface_SetModelVersionTag_Call) Return(_a0 error) *MockModelRegistryInterface_SetModelVersionTag_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockModelRegistryInterface_SetModelVersionTag_Call) RunAndReturn(run func(context.Context, ml.SetModelVersionTagRequest) error) *MockModelRegistryInterface_SetModelVersionTag_Call {
	_c.Call.Return(run)
	return _c
}

// SetPermissions provides a mock function with given fields: ctx, request
func (_m *MockModelRegistryInterface) SetPermissions(ctx context.Context, request ml.RegisteredModelPermissionsRequest) (*ml.RegisteredModelPermissions, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for SetPermissions")
	}

	var r0 *ml.RegisteredModelPermissions
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ml.RegisteredModelPermissionsRequest) (*ml.RegisteredModelPermissions, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ml.RegisteredModelPermissionsRequest) *ml.RegisteredModelPermissions); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ml.RegisteredModelPermissions)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ml.RegisteredModelPermissionsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModelRegistryInterface_SetPermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetPermissions'
type MockModelRegistryInterface_SetPermissions_Call struct {
	*mock.Call
}

// SetPermissions is a helper method to define mock.On call
//   - ctx context.Context
//   - request ml.RegisteredModelPermissionsRequest
func (_e *MockModelRegistryInterface_Expecter) SetPermissions(ctx interface{}, request interface{}) *MockModelRegistryInterface_SetPermissions_Call {
	return &MockModelRegistryInterface_SetPermissions_Call{Call: _e.mock.On("SetPermissions", ctx, request)}
}

func (_c *MockModelRegistryInterface_SetPermissions_Call) Run(run func(ctx context.Context, request ml.RegisteredModelPermissionsRequest)) *MockModelRegistryInterface_SetPermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ml.RegisteredModelPermissionsRequest))
	})
	return _c
}

func (_c *MockModelRegistryInterface_SetPermissions_Call) Return(_a0 *ml.RegisteredModelPermissions, _a1 error) *MockModelRegistryInterface_SetPermissions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModelRegistryInterface_SetPermissions_Call) RunAndReturn(run func(context.Context, ml.RegisteredModelPermissionsRequest) (*ml.RegisteredModelPermissions, error)) *MockModelRegistryInterface_SetPermissions_Call {
	_c.Call.Return(run)
	return _c
}

// TestRegistryWebhook provides a mock function with given fields: ctx, request
func (_m *MockModelRegistryInterface) TestRegistryWebhook(ctx context.Context, request ml.TestRegistryWebhookRequest) (*ml.TestRegistryWebhookResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for TestRegistryWebhook")
	}

	var r0 *ml.TestRegistryWebhookResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ml.TestRegistryWebhookRequest) (*ml.TestRegistryWebhookResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ml.TestRegistryWebhookRequest) *ml.TestRegistryWebhookResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ml.TestRegistryWebhookResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ml.TestRegistryWebhookRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModelRegistryInterface_TestRegistryWebhook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TestRegistryWebhook'
type MockModelRegistryInterface_TestRegistryWebhook_Call struct {
	*mock.Call
}

// TestRegistryWebhook is a helper method to define mock.On call
//   - ctx context.Context
//   - request ml.TestRegistryWebhookRequest
func (_e *MockModelRegistryInterface_Expecter) TestRegistryWebhook(ctx interface{}, request interface{}) *MockModelRegistryInterface_TestRegistryWebhook_Call {
	return &MockModelRegistryInterface_TestRegistryWebhook_Call{Call: _e.mock.On("TestRegistryWebhook", ctx, request)}
}

func (_c *MockModelRegistryInterface_TestRegistryWebhook_Call) Run(run func(ctx context.Context, request ml.TestRegistryWebhookRequest)) *MockModelRegistryInterface_TestRegistryWebhook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ml.TestRegistryWebhookRequest))
	})
	return _c
}

func (_c *MockModelRegistryInterface_TestRegistryWebhook_Call) Return(_a0 *ml.TestRegistryWebhookResponse, _a1 error) *MockModelRegistryInterface_TestRegistryWebhook_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModelRegistryInterface_TestRegistryWebhook_Call) RunAndReturn(run func(context.Context, ml.TestRegistryWebhookRequest) (*ml.TestRegistryWebhookResponse, error)) *MockModelRegistryInterface_TestRegistryWebhook_Call {
	_c.Call.Return(run)
	return _c
}

// TransitionStage provides a mock function with given fields: ctx, request
func (_m *MockModelRegistryInterface) TransitionStage(ctx context.Context, request ml.TransitionModelVersionStageDatabricks) (*ml.TransitionStageResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for TransitionStage")
	}

	var r0 *ml.TransitionStageResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ml.TransitionModelVersionStageDatabricks) (*ml.TransitionStageResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ml.TransitionModelVersionStageDatabricks) *ml.TransitionStageResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ml.TransitionStageResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ml.TransitionModelVersionStageDatabricks) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModelRegistryInterface_TransitionStage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransitionStage'
type MockModelRegistryInterface_TransitionStage_Call struct {
	*mock.Call
}

// TransitionStage is a helper method to define mock.On call
//   - ctx context.Context
//   - request ml.TransitionModelVersionStageDatabricks
func (_e *MockModelRegistryInterface_Expecter) TransitionStage(ctx interface{}, request interface{}) *MockModelRegistryInterface_TransitionStage_Call {
	return &MockModelRegistryInterface_TransitionStage_Call{Call: _e.mock.On("TransitionStage", ctx, request)}
}

func (_c *MockModelRegistryInterface_TransitionStage_Call) Run(run func(ctx context.Context, request ml.TransitionModelVersionStageDatabricks)) *MockModelRegistryInterface_TransitionStage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ml.TransitionModelVersionStageDatabricks))
	})
	return _c
}

func (_c *MockModelRegistryInterface_TransitionStage_Call) Return(_a0 *ml.TransitionStageResponse, _a1 error) *MockModelRegistryInterface_TransitionStage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModelRegistryInterface_TransitionStage_Call) RunAndReturn(run func(context.Context, ml.TransitionModelVersionStageDatabricks) (*ml.TransitionStageResponse, error)) *MockModelRegistryInterface_TransitionStage_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateComment provides a mock function with given fields: ctx, request
func (_m *MockModelRegistryInterface) UpdateComment(ctx context.Context, request ml.UpdateComment) (*ml.UpdateCommentResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateComment")
	}

	var r0 *ml.UpdateCommentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ml.UpdateComment) (*ml.UpdateCommentResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ml.UpdateComment) *ml.UpdateCommentResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ml.UpdateCommentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ml.UpdateComment) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModelRegistryInterface_UpdateComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateComment'
type MockModelRegistryInterface_UpdateComment_Call struct {
	*mock.Call
}

// UpdateComment is a helper method to define mock.On call
//   - ctx context.Context
//   - request ml.UpdateComment
func (_e *MockModelRegistryInterface_Expecter) UpdateComment(ctx interface{}, request interface{}) *MockModelRegistryInterface_UpdateComment_Call {
	return &MockModelRegistryInterface_UpdateComment_Call{Call: _e.mock.On("UpdateComment", ctx, request)}
}

func (_c *MockModelRegistryInterface_UpdateComment_Call) Run(run func(ctx context.Context, request ml.UpdateComment)) *MockModelRegistryInterface_UpdateComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ml.UpdateComment))
	})
	return _c
}

func (_c *MockModelRegistryInterface_UpdateComment_Call) Return(_a0 *ml.UpdateCommentResponse, _a1 error) *MockModelRegistryInterface_UpdateComment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModelRegistryInterface_UpdateComment_Call) RunAndReturn(run func(context.Context, ml.UpdateComment) (*ml.UpdateCommentResponse, error)) *MockModelRegistryInterface_UpdateComment_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateModel provides a mock function with given fields: ctx, request
func (_m *MockModelRegistryInterface) UpdateModel(ctx context.Context, request ml.UpdateModelRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateModel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ml.UpdateModelRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockModelRegistryInterface_UpdateModel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateModel'
type MockModelRegistryInterface_UpdateModel_Call struct {
	*mock.Call
}

// UpdateModel is a helper method to define mock.On call
//   - ctx context.Context
//   - request ml.UpdateModelRequest
func (_e *MockModelRegistryInterface_Expecter) UpdateModel(ctx interface{}, request interface{}) *MockModelRegistryInterface_UpdateModel_Call {
	return &MockModelRegistryInterface_UpdateModel_Call{Call: _e.mock.On("UpdateModel", ctx, request)}
}

func (_c *MockModelRegistryInterface_UpdateModel_Call) Run(run func(ctx context.Context, request ml.UpdateModelRequest)) *MockModelRegistryInterface_UpdateModel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ml.UpdateModelRequest))
	})
	return _c
}

func (_c *MockModelRegistryInterface_UpdateModel_Call) Return(_a0 error) *MockModelRegistryInterface_UpdateModel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockModelRegistryInterface_UpdateModel_Call) RunAndReturn(run func(context.Context, ml.UpdateModelRequest) error) *MockModelRegistryInterface_UpdateModel_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateModelVersion provides a mock function with given fields: ctx, request
func (_m *MockModelRegistryInterface) UpdateModelVersion(ctx context.Context, request ml.UpdateModelVersionRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateModelVersion")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ml.UpdateModelVersionRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockModelRegistryInterface_UpdateModelVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateModelVersion'
type MockModelRegistryInterface_UpdateModelVersion_Call struct {
	*mock.Call
}

// UpdateModelVersion is a helper method to define mock.On call
//   - ctx context.Context
//   - request ml.UpdateModelVersionRequest
func (_e *MockModelRegistryInterface_Expecter) UpdateModelVersion(ctx interface{}, request interface{}) *MockModelRegistryInterface_UpdateModelVersion_Call {
	return &MockModelRegistryInterface_UpdateModelVersion_Call{Call: _e.mock.On("UpdateModelVersion", ctx, request)}
}

func (_c *MockModelRegistryInterface_UpdateModelVersion_Call) Run(run func(ctx context.Context, request ml.UpdateModelVersionRequest)) *MockModelRegistryInterface_UpdateModelVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ml.UpdateModelVersionRequest))
	})
	return _c
}

func (_c *MockModelRegistryInterface_UpdateModelVersion_Call) Return(_a0 error) *MockModelRegistryInterface_UpdateModelVersion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockModelRegistryInterface_UpdateModelVersion_Call) RunAndReturn(run func(context.Context, ml.UpdateModelVersionRequest) error) *MockModelRegistryInterface_UpdateModelVersion_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePermissions provides a mock function with given fields: ctx, request
func (_m *MockModelRegistryInterface) UpdatePermissions(ctx context.Context, request ml.RegisteredModelPermissionsRequest) (*ml.RegisteredModelPermissions, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePermissions")
	}

	var r0 *ml.RegisteredModelPermissions
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ml.RegisteredModelPermissionsRequest) (*ml.RegisteredModelPermissions, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ml.RegisteredModelPermissionsRequest) *ml.RegisteredModelPermissions); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ml.RegisteredModelPermissions)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ml.RegisteredModelPermissionsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModelRegistryInterface_UpdatePermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePermissions'
type MockModelRegistryInterface_UpdatePermissions_Call struct {
	*mock.Call
}

// UpdatePermissions is a helper method to define mock.On call
//   - ctx context.Context
//   - request ml.RegisteredModelPermissionsRequest
func (_e *MockModelRegistryInterface_Expecter) UpdatePermissions(ctx interface{}, request interface{}) *MockModelRegistryInterface_UpdatePermissions_Call {
	return &MockModelRegistryInterface_UpdatePermissions_Call{Call: _e.mock.On("UpdatePermissions", ctx, request)}
}

func (_c *MockModelRegistryInterface_UpdatePermissions_Call) Run(run func(ctx context.Context, request ml.RegisteredModelPermissionsRequest)) *MockModelRegistryInterface_UpdatePermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ml.RegisteredModelPermissionsRequest))
	})
	return _c
}

func (_c *MockModelRegistryInterface_UpdatePermissions_Call) Return(_a0 *ml.RegisteredModelPermissions, _a1 error) *MockModelRegistryInterface_UpdatePermissions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModelRegistryInterface_UpdatePermissions_Call) RunAndReturn(run func(context.Context, ml.RegisteredModelPermissionsRequest) (*ml.RegisteredModelPermissions, error)) *MockModelRegistryInterface_UpdatePermissions_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateWebhook provides a mock function with given fields: ctx, request
func (_m *MockModelRegistryInterface) UpdateWebhook(ctx context.Context, request ml.UpdateRegistryWebhook) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWebhook")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ml.UpdateRegistryWebhook) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockModelRegistryInterface_UpdateWebhook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateWebhook'
type MockModelRegistryInterface_UpdateWebhook_Call struct {
	*mock.Call
}

// UpdateWebhook is a helper method to define mock.On call
//   - ctx context.Context
//   - request ml.UpdateRegistryWebhook
func (_e *MockModelRegistryInterface_Expecter) UpdateWebhook(ctx interface{}, request interface{}) *MockModelRegistryInterface_UpdateWebhook_Call {
	return &MockModelRegistryInterface_UpdateWebhook_Call{Call: _e.mock.On("UpdateWebhook", ctx, request)}
}

func (_c *MockModelRegistryInterface_UpdateWebhook_Call) Run(run func(ctx context.Context, request ml.UpdateRegistryWebhook)) *MockModelRegistryInterface_UpdateWebhook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ml.UpdateRegistryWebhook))
	})
	return _c
}

func (_c *MockModelRegistryInterface_UpdateWebhook_Call) Return(_a0 error) *MockModelRegistryInterface_UpdateWebhook_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockModelRegistryInterface_UpdateWebhook_Call) RunAndReturn(run func(context.Context, ml.UpdateRegistryWebhook) error) *MockModelRegistryInterface_UpdateWebhook_Call {
	_c.Call.Return(run)
	return _c
}

// WithImpl provides a mock function with given fields: impl
func (_m *MockModelRegistryInterface) WithImpl(impl ml.ModelRegistryService) ml.ModelRegistryInterface {
	ret := _m.Called(impl)

	if len(ret) == 0 {
		panic("no return value specified for WithImpl")
	}

	var r0 ml.ModelRegistryInterface
	if rf, ok := ret.Get(0).(func(ml.ModelRegistryService) ml.ModelRegistryInterface); ok {
		r0 = rf(impl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ml.ModelRegistryInterface)
		}
	}

	return r0
}

// MockModelRegistryInterface_WithImpl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithImpl'
type MockModelRegistryInterface_WithImpl_Call struct {
	*mock.Call
}

// WithImpl is a helper method to define mock.On call
//   - impl ml.ModelRegistryService
func (_e *MockModelRegistryInterface_Expecter) WithImpl(impl interface{}) *MockModelRegistryInterface_WithImpl_Call {
	return &MockModelRegistryInterface_WithImpl_Call{Call: _e.mock.On("WithImpl", impl)}
}

func (_c *MockModelRegistryInterface_WithImpl_Call) Run(run func(impl ml.ModelRegistryService)) *MockModelRegistryInterface_WithImpl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ml.ModelRegistryService))
	})
	return _c
}

func (_c *MockModelRegistryInterface_WithImpl_Call) Return(_a0 ml.ModelRegistryInterface) *MockModelRegistryInterface_WithImpl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockModelRegistryInterface_WithImpl_Call) RunAndReturn(run func(ml.ModelRegistryService) ml.ModelRegistryInterface) *MockModelRegistryInterface_WithImpl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockModelRegistryInterface creates a new instance of MockModelRegistryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockModelRegistryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockModelRegistryInterface {
	mock := &MockModelRegistryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
