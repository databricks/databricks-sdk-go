// Code generated from OpenAPI specs by Databricks SDK Generator. DO NOT EDIT.

// These APIs allow you to manage Consumer Fulfillments Preview, Consumer Installations Preview, Consumer Listings Preview, Consumer Personalization Requests Preview, Consumer Providers Preview, Provider Exchange Filters Preview, Provider Exchanges Preview, Provider Files Preview, Provider Listings Preview, Provider Personalization Requests Preview, Provider Provider Analytics Dashboards Preview, Provider Providers Preview, etc.
package marketplacepreview

import (
	"context"
	"fmt"

	"github.com/databricks/databricks-sdk-go/databricks/client"
	"github.com/databricks/databricks-sdk-go/databricks/listing"
	"github.com/databricks/databricks-sdk-go/databricks/useragent"
)

type ConsumerFulfillmentsPreviewInterface interface {

	// Get listing content metadata.
	//
	// Get a high level preview of the metadata of listing installable content.
	//
	// This method is generated by Databricks SDK Code Generator.
	Get(ctx context.Context, request GetListingContentMetadataRequest) listing.Iterator[SharedDataObject]

	// Get listing content metadata.
	//
	// Get a high level preview of the metadata of listing installable content.
	//
	// This method is generated by Databricks SDK Code Generator.
	GetAll(ctx context.Context, request GetListingContentMetadataRequest) ([]SharedDataObject, error)

	// Get listing content metadata.
	//
	// Get a high level preview of the metadata of listing installable content.
	GetByListingId(ctx context.Context, listingId string) (*GetListingContentMetadataResponse, error)

	// List all listing fulfillments.
	//
	// Get all listings fulfillments associated with a listing. A _fulfillment_ is a
	// potential installation. Standard installations contain metadata about the
	// attached share or git repo. Only one of these fields will be present.
	// Personalized installations contain metadata about the attached share or git
	// repo, as well as the Delta Sharing recipient type.
	//
	// This method is generated by Databricks SDK Code Generator.
	List(ctx context.Context, request ListFulfillmentsRequest) listing.Iterator[ListingFulfillment]

	// List all listing fulfillments.
	//
	// Get all listings fulfillments associated with a listing. A _fulfillment_ is a
	// potential installation. Standard installations contain metadata about the
	// attached share or git repo. Only one of these fields will be present.
	// Personalized installations contain metadata about the attached share or git
	// repo, as well as the Delta Sharing recipient type.
	//
	// This method is generated by Databricks SDK Code Generator.
	ListAll(ctx context.Context, request ListFulfillmentsRequest) ([]ListingFulfillment, error)

	// List all listing fulfillments.
	//
	// Get all listings fulfillments associated with a listing. A _fulfillment_ is a
	// potential installation. Standard installations contain metadata about the
	// attached share or git repo. Only one of these fields will be present.
	// Personalized installations contain metadata about the attached share or git
	// repo, as well as the Delta Sharing recipient type.
	ListByListingId(ctx context.Context, listingId string) (*ListFulfillmentsResponse, error)
}

func NewConsumerFulfillmentsPreview(client *client.DatabricksClient) *ConsumerFulfillmentsPreviewAPI {
	return &ConsumerFulfillmentsPreviewAPI{
		consumerFulfillmentsPreviewImpl: consumerFulfillmentsPreviewImpl{
			client: client,
		},
	}
}

// Fulfillments are entities that allow consumers to preview installations.
type ConsumerFulfillmentsPreviewAPI struct {
	consumerFulfillmentsPreviewImpl
}

// Get listing content metadata.
//
// Get a high level preview of the metadata of listing installable content.
func (a *ConsumerFulfillmentsPreviewAPI) GetByListingId(ctx context.Context, listingId string) (*GetListingContentMetadataResponse, error) {
	return a.consumerFulfillmentsPreviewImpl.internalGet(ctx, GetListingContentMetadataRequest{
		ListingId: listingId,
	})
}

// List all listing fulfillments.
//
// Get all listings fulfillments associated with a listing. A _fulfillment_ is a
// potential installation. Standard installations contain metadata about the
// attached share or git repo. Only one of these fields will be present.
// Personalized installations contain metadata about the attached share or git
// repo, as well as the Delta Sharing recipient type.
func (a *ConsumerFulfillmentsPreviewAPI) ListByListingId(ctx context.Context, listingId string) (*ListFulfillmentsResponse, error) {
	return a.consumerFulfillmentsPreviewImpl.internalList(ctx, ListFulfillmentsRequest{
		ListingId: listingId,
	})
}

type ConsumerInstallationsPreviewInterface interface {

	// Install from a listing.
	//
	// Install payload associated with a Databricks Marketplace listing.
	Create(ctx context.Context, request CreateInstallationRequest) (*Installation, error)

	// Uninstall from a listing.
	//
	// Uninstall an installation associated with a Databricks Marketplace listing.
	Delete(ctx context.Context, request DeleteInstallationRequest) error

	// Uninstall from a listing.
	//
	// Uninstall an installation associated with a Databricks Marketplace listing.
	DeleteByListingIdAndInstallationId(ctx context.Context, listingId string, installationId string) error

	// List all installations.
	//
	// List all installations across all listings.
	//
	// This method is generated by Databricks SDK Code Generator.
	List(ctx context.Context, request ListAllInstallationsRequest) listing.Iterator[InstallationDetail]

	// List all installations.
	//
	// List all installations across all listings.
	//
	// This method is generated by Databricks SDK Code Generator.
	ListAll(ctx context.Context, request ListAllInstallationsRequest) ([]InstallationDetail, error)

	// List installations for a listing.
	//
	// List all installations for a particular listing.
	//
	// This method is generated by Databricks SDK Code Generator.
	ListListingInstallations(ctx context.Context, request ListInstallationsRequest) listing.Iterator[InstallationDetail]

	// List installations for a listing.
	//
	// List all installations for a particular listing.
	//
	// This method is generated by Databricks SDK Code Generator.
	ListListingInstallationsAll(ctx context.Context, request ListInstallationsRequest) ([]InstallationDetail, error)

	// List installations for a listing.
	//
	// List all installations for a particular listing.
	ListListingInstallationsByListingId(ctx context.Context, listingId string) (*ListInstallationsResponse, error)

	// Update an installation.
	//
	// This is a update API that will update the part of the fields defined in the
	// installation table as well as interact with external services according to
	// the fields not included in the installation table 1. the token will be rotate
	// if the rotateToken flag is true 2. the token will be forcibly rotate if the
	// rotateToken flag is true and the tokenInfo field is empty
	Update(ctx context.Context, request UpdateInstallationRequest) (*UpdateInstallationResponse, error)
}

func NewConsumerInstallationsPreview(client *client.DatabricksClient) *ConsumerInstallationsPreviewAPI {
	return &ConsumerInstallationsPreviewAPI{
		consumerInstallationsPreviewImpl: consumerInstallationsPreviewImpl{
			client: client,
		},
	}
}

// Installations are entities that allow consumers to interact with Databricks
// Marketplace listings.
type ConsumerInstallationsPreviewAPI struct {
	consumerInstallationsPreviewImpl
}

// Uninstall from a listing.
//
// Uninstall an installation associated with a Databricks Marketplace listing.
func (a *ConsumerInstallationsPreviewAPI) DeleteByListingIdAndInstallationId(ctx context.Context, listingId string, installationId string) error {
	return a.consumerInstallationsPreviewImpl.Delete(ctx, DeleteInstallationRequest{
		ListingId:      listingId,
		InstallationId: installationId,
	})
}

// List installations for a listing.
//
// List all installations for a particular listing.
func (a *ConsumerInstallationsPreviewAPI) ListListingInstallationsByListingId(ctx context.Context, listingId string) (*ListInstallationsResponse, error) {
	return a.consumerInstallationsPreviewImpl.internalListListingInstallations(ctx, ListInstallationsRequest{
		ListingId: listingId,
	})
}

type ConsumerListingsPreviewInterface interface {

	// Get one batch of listings. One may specify up to 50 IDs per request.
	//
	// Batch get a published listing in the Databricks Marketplace that the consumer
	// has access to.
	BatchGet(ctx context.Context, request BatchGetListingsRequest) (*BatchGetListingsResponse, error)

	// Get listing.
	//
	// Get a published listing in the Databricks Marketplace that the consumer has
	// access to.
	Get(ctx context.Context, request GetListingRequest) (*GetListingResponse, error)

	// Get listing.
	//
	// Get a published listing in the Databricks Marketplace that the consumer has
	// access to.
	GetById(ctx context.Context, id string) (*GetListingResponse, error)

	// List listings.
	//
	// List all published listings in the Databricks Marketplace that the consumer
	// has access to.
	//
	// This method is generated by Databricks SDK Code Generator.
	List(ctx context.Context, request ListListingsRequest) listing.Iterator[Listing]

	// List listings.
	//
	// List all published listings in the Databricks Marketplace that the consumer
	// has access to.
	//
	// This method is generated by Databricks SDK Code Generator.
	ListAll(ctx context.Context, request ListListingsRequest) ([]Listing, error)

	// ListingSummaryNameToIdMap calls [ConsumerListingsPreviewAPI.ListAll] and creates a map of results with [Listing].Summary.Name as key and [Listing].Id as value.
	//
	// Returns an error if there's more than one [Listing] with the same .Summary.Name.
	//
	// Note: All [Listing] instances are loaded into memory before creating a map.
	//
	// This method is generated by Databricks SDK Code Generator.
	ListingSummaryNameToIdMap(ctx context.Context, request ListListingsRequest) (map[string]string, error)

	// GetBySummaryName calls [ConsumerListingsPreviewAPI.ListingSummaryNameToIdMap] and returns a single [Listing].
	//
	// Returns an error if there's more than one [Listing] with the same .Summary.Name.
	//
	// Note: All [Listing] instances are loaded into memory before returning matching by name.
	//
	// This method is generated by Databricks SDK Code Generator.
	GetBySummaryName(ctx context.Context, name string) (*Listing, error)

	// Search listings.
	//
	// Search published listings in the Databricks Marketplace that the consumer has
	// access to. This query supports a variety of different search parameters and
	// performs fuzzy matching.
	//
	// This method is generated by Databricks SDK Code Generator.
	Search(ctx context.Context, request SearchListingsRequest) listing.Iterator[Listing]

	// Search listings.
	//
	// Search published listings in the Databricks Marketplace that the consumer has
	// access to. This query supports a variety of different search parameters and
	// performs fuzzy matching.
	//
	// This method is generated by Databricks SDK Code Generator.
	SearchAll(ctx context.Context, request SearchListingsRequest) ([]Listing, error)
}

func NewConsumerListingsPreview(client *client.DatabricksClient) *ConsumerListingsPreviewAPI {
	return &ConsumerListingsPreviewAPI{
		consumerListingsPreviewImpl: consumerListingsPreviewImpl{
			client: client,
		},
	}
}

// Listings are the core entities in the Marketplace. They represent the
// products that are available for consumption.
type ConsumerListingsPreviewAPI struct {
	consumerListingsPreviewImpl
}

// Get listing.
//
// Get a published listing in the Databricks Marketplace that the consumer has
// access to.
func (a *ConsumerListingsPreviewAPI) GetById(ctx context.Context, id string) (*GetListingResponse, error) {
	return a.consumerListingsPreviewImpl.Get(ctx, GetListingRequest{
		Id: id,
	})
}

// ListingSummaryNameToIdMap calls [ConsumerListingsPreviewAPI.ListAll] and creates a map of results with [Listing].Summary.Name as key and [Listing].Id as value.
//
// Returns an error if there's more than one [Listing] with the same .Summary.Name.
//
// Note: All [Listing] instances are loaded into memory before creating a map.
//
// This method is generated by Databricks SDK Code Generator.
func (a *ConsumerListingsPreviewAPI) ListingSummaryNameToIdMap(ctx context.Context, request ListListingsRequest) (map[string]string, error) {
	ctx = useragent.InContext(ctx, "sdk-feature", "name-to-id")
	mapping := map[string]string{}
	result, err := a.ListAll(ctx, request)
	if err != nil {
		return nil, err
	}
	for _, v := range result {
		key := v.Summary.Name
		_, duplicate := mapping[key]
		if duplicate {
			return nil, fmt.Errorf("duplicate .Summary.Name: %s", key)
		}
		mapping[key] = v.Id
	}
	return mapping, nil
}

// GetBySummaryName calls [ConsumerListingsPreviewAPI.ListingSummaryNameToIdMap] and returns a single [Listing].
//
// Returns an error if there's more than one [Listing] with the same .Summary.Name.
//
// Note: All [Listing] instances are loaded into memory before returning matching by name.
//
// This method is generated by Databricks SDK Code Generator.
func (a *ConsumerListingsPreviewAPI) GetBySummaryName(ctx context.Context, name string) (*Listing, error) {
	ctx = useragent.InContext(ctx, "sdk-feature", "get-by-name")
	result, err := a.ListAll(ctx, ListListingsRequest{})
	if err != nil {
		return nil, err
	}
	tmp := map[string][]Listing{}
	for _, v := range result {
		key := v.Summary.Name
		tmp[key] = append(tmp[key], v)
	}
	alternatives, ok := tmp[name]
	if !ok || len(alternatives) == 0 {
		return nil, fmt.Errorf("Listing named '%s' does not exist", name)
	}
	if len(alternatives) > 1 {
		return nil, fmt.Errorf("there are %d instances of Listing named '%s'", len(alternatives), name)
	}
	return &alternatives[0], nil
}

type ConsumerPersonalizationRequestsPreviewInterface interface {

	// Create a personalization request.
	//
	// Create a personalization request for a listing.
	Create(ctx context.Context, request CreatePersonalizationRequest) (*CreatePersonalizationRequestResponse, error)

	// Get the personalization request for a listing.
	//
	// Get the personalization request for a listing. Each consumer can make at
	// *most* one personalization request for a listing.
	Get(ctx context.Context, request GetPersonalizationRequestRequest) (*GetPersonalizationRequestResponse, error)

	// Get the personalization request for a listing.
	//
	// Get the personalization request for a listing. Each consumer can make at
	// *most* one personalization request for a listing.
	GetByListingId(ctx context.Context, listingId string) (*GetPersonalizationRequestResponse, error)

	// List all personalization requests.
	//
	// List personalization requests for a consumer across all listings.
	//
	// This method is generated by Databricks SDK Code Generator.
	List(ctx context.Context, request ListAllPersonalizationRequestsRequest) listing.Iterator[PersonalizationRequest]

	// List all personalization requests.
	//
	// List personalization requests for a consumer across all listings.
	//
	// This method is generated by Databricks SDK Code Generator.
	ListAll(ctx context.Context, request ListAllPersonalizationRequestsRequest) ([]PersonalizationRequest, error)
}

func NewConsumerPersonalizationRequestsPreview(client *client.DatabricksClient) *ConsumerPersonalizationRequestsPreviewAPI {
	return &ConsumerPersonalizationRequestsPreviewAPI{
		consumerPersonalizationRequestsPreviewImpl: consumerPersonalizationRequestsPreviewImpl{
			client: client,
		},
	}
}

// Personalization Requests allow customers to interact with the individualized
// Marketplace listing flow.
type ConsumerPersonalizationRequestsPreviewAPI struct {
	consumerPersonalizationRequestsPreviewImpl
}

// Get the personalization request for a listing.
//
// Get the personalization request for a listing. Each consumer can make at
// *most* one personalization request for a listing.
func (a *ConsumerPersonalizationRequestsPreviewAPI) GetByListingId(ctx context.Context, listingId string) (*GetPersonalizationRequestResponse, error) {
	return a.consumerPersonalizationRequestsPreviewImpl.Get(ctx, GetPersonalizationRequestRequest{
		ListingId: listingId,
	})
}

type ConsumerProvidersPreviewInterface interface {

	// Get one batch of providers. One may specify up to 50 IDs per request.
	//
	// Batch get a provider in the Databricks Marketplace with at least one visible
	// listing.
	BatchGet(ctx context.Context, request BatchGetProvidersRequest) (*BatchGetProvidersResponse, error)

	// Get a provider.
	//
	// Get a provider in the Databricks Marketplace with at least one visible
	// listing.
	Get(ctx context.Context, request GetProviderRequest) (*GetProviderResponse, error)

	// Get a provider.
	//
	// Get a provider in the Databricks Marketplace with at least one visible
	// listing.
	GetById(ctx context.Context, id string) (*GetProviderResponse, error)

	// List providers.
	//
	// List all providers in the Databricks Marketplace with at least one visible
	// listing.
	//
	// This method is generated by Databricks SDK Code Generator.
	List(ctx context.Context, request ListProvidersRequest) listing.Iterator[ProviderInfo]

	// List providers.
	//
	// List all providers in the Databricks Marketplace with at least one visible
	// listing.
	//
	// This method is generated by Databricks SDK Code Generator.
	ListAll(ctx context.Context, request ListProvidersRequest) ([]ProviderInfo, error)

	// ProviderInfoNameToIdMap calls [ConsumerProvidersPreviewAPI.ListAll] and creates a map of results with [ProviderInfo].Name as key and [ProviderInfo].Id as value.
	//
	// Returns an error if there's more than one [ProviderInfo] with the same .Name.
	//
	// Note: All [ProviderInfo] instances are loaded into memory before creating a map.
	//
	// This method is generated by Databricks SDK Code Generator.
	ProviderInfoNameToIdMap(ctx context.Context, request ListProvidersRequest) (map[string]string, error)

	// GetByName calls [ConsumerProvidersPreviewAPI.ProviderInfoNameToIdMap] and returns a single [ProviderInfo].
	//
	// Returns an error if there's more than one [ProviderInfo] with the same .Name.
	//
	// Note: All [ProviderInfo] instances are loaded into memory before returning matching by name.
	//
	// This method is generated by Databricks SDK Code Generator.
	GetByName(ctx context.Context, name string) (*ProviderInfo, error)
}

func NewConsumerProvidersPreview(client *client.DatabricksClient) *ConsumerProvidersPreviewAPI {
	return &ConsumerProvidersPreviewAPI{
		consumerProvidersPreviewImpl: consumerProvidersPreviewImpl{
			client: client,
		},
	}
}

// Providers are the entities that publish listings to the Marketplace.
type ConsumerProvidersPreviewAPI struct {
	consumerProvidersPreviewImpl
}

// Get a provider.
//
// Get a provider in the Databricks Marketplace with at least one visible
// listing.
func (a *ConsumerProvidersPreviewAPI) GetById(ctx context.Context, id string) (*GetProviderResponse, error) {
	return a.consumerProvidersPreviewImpl.Get(ctx, GetProviderRequest{
		Id: id,
	})
}

// ProviderInfoNameToIdMap calls [ConsumerProvidersPreviewAPI.ListAll] and creates a map of results with [ProviderInfo].Name as key and [ProviderInfo].Id as value.
//
// Returns an error if there's more than one [ProviderInfo] with the same .Name.
//
// Note: All [ProviderInfo] instances are loaded into memory before creating a map.
//
// This method is generated by Databricks SDK Code Generator.
func (a *ConsumerProvidersPreviewAPI) ProviderInfoNameToIdMap(ctx context.Context, request ListProvidersRequest) (map[string]string, error) {
	ctx = useragent.InContext(ctx, "sdk-feature", "name-to-id")
	mapping := map[string]string{}
	result, err := a.ListAll(ctx, request)
	if err != nil {
		return nil, err
	}
	for _, v := range result {
		key := v.Name
		_, duplicate := mapping[key]
		if duplicate {
			return nil, fmt.Errorf("duplicate .Name: %s", key)
		}
		mapping[key] = v.Id
	}
	return mapping, nil
}

// GetByName calls [ConsumerProvidersPreviewAPI.ProviderInfoNameToIdMap] and returns a single [ProviderInfo].
//
// Returns an error if there's more than one [ProviderInfo] with the same .Name.
//
// Note: All [ProviderInfo] instances are loaded into memory before returning matching by name.
//
// This method is generated by Databricks SDK Code Generator.
func (a *ConsumerProvidersPreviewAPI) GetByName(ctx context.Context, name string) (*ProviderInfo, error) {
	ctx = useragent.InContext(ctx, "sdk-feature", "get-by-name")
	result, err := a.ListAll(ctx, ListProvidersRequest{})
	if err != nil {
		return nil, err
	}
	tmp := map[string][]ProviderInfo{}
	for _, v := range result {
		key := v.Name
		tmp[key] = append(tmp[key], v)
	}
	alternatives, ok := tmp[name]
	if !ok || len(alternatives) == 0 {
		return nil, fmt.Errorf("ProviderInfo named '%s' does not exist", name)
	}
	if len(alternatives) > 1 {
		return nil, fmt.Errorf("there are %d instances of ProviderInfo named '%s'", len(alternatives), name)
	}
	return &alternatives[0], nil
}

type ProviderExchangeFiltersPreviewInterface interface {

	// Create a new exchange filter.
	//
	// Add an exchange filter.
	Create(ctx context.Context, request CreateExchangeFilterRequest) (*CreateExchangeFilterResponse, error)

	// Delete an exchange filter.
	//
	// Delete an exchange filter
	Delete(ctx context.Context, request DeleteExchangeFilterRequest) error

	// Delete an exchange filter.
	//
	// Delete an exchange filter
	DeleteById(ctx context.Context, id string) error

	// List exchange filters.
	//
	// List exchange filter
	//
	// This method is generated by Databricks SDK Code Generator.
	List(ctx context.Context, request ListExchangeFiltersRequest) listing.Iterator[ExchangeFilter]

	// List exchange filters.
	//
	// List exchange filter
	//
	// This method is generated by Databricks SDK Code Generator.
	ListAll(ctx context.Context, request ListExchangeFiltersRequest) ([]ExchangeFilter, error)

	// ExchangeFilterNameToIdMap calls [ProviderExchangeFiltersPreviewAPI.ListAll] and creates a map of results with [ExchangeFilter].Name as key and [ExchangeFilter].Id as value.
	//
	// Returns an error if there's more than one [ExchangeFilter] with the same .Name.
	//
	// Note: All [ExchangeFilter] instances are loaded into memory before creating a map.
	//
	// This method is generated by Databricks SDK Code Generator.
	ExchangeFilterNameToIdMap(ctx context.Context, request ListExchangeFiltersRequest) (map[string]string, error)

	// GetByName calls [ProviderExchangeFiltersPreviewAPI.ExchangeFilterNameToIdMap] and returns a single [ExchangeFilter].
	//
	// Returns an error if there's more than one [ExchangeFilter] with the same .Name.
	//
	// Note: All [ExchangeFilter] instances are loaded into memory before returning matching by name.
	//
	// This method is generated by Databricks SDK Code Generator.
	GetByName(ctx context.Context, name string) (*ExchangeFilter, error)

	// Update exchange filter.
	//
	// Update an exchange filter.
	Update(ctx context.Context, request UpdateExchangeFilterRequest) (*UpdateExchangeFilterResponse, error)
}

func NewProviderExchangeFiltersPreview(client *client.DatabricksClient) *ProviderExchangeFiltersPreviewAPI {
	return &ProviderExchangeFiltersPreviewAPI{
		providerExchangeFiltersPreviewImpl: providerExchangeFiltersPreviewImpl{
			client: client,
		},
	}
}

// Marketplace exchanges filters curate which groups can access an exchange.
type ProviderExchangeFiltersPreviewAPI struct {
	providerExchangeFiltersPreviewImpl
}

// Delete an exchange filter.
//
// Delete an exchange filter
func (a *ProviderExchangeFiltersPreviewAPI) DeleteById(ctx context.Context, id string) error {
	return a.providerExchangeFiltersPreviewImpl.Delete(ctx, DeleteExchangeFilterRequest{
		Id: id,
	})
}

// ExchangeFilterNameToIdMap calls [ProviderExchangeFiltersPreviewAPI.ListAll] and creates a map of results with [ExchangeFilter].Name as key and [ExchangeFilter].Id as value.
//
// Returns an error if there's more than one [ExchangeFilter] with the same .Name.
//
// Note: All [ExchangeFilter] instances are loaded into memory before creating a map.
//
// This method is generated by Databricks SDK Code Generator.
func (a *ProviderExchangeFiltersPreviewAPI) ExchangeFilterNameToIdMap(ctx context.Context, request ListExchangeFiltersRequest) (map[string]string, error) {
	ctx = useragent.InContext(ctx, "sdk-feature", "name-to-id")
	mapping := map[string]string{}
	result, err := a.ListAll(ctx, request)
	if err != nil {
		return nil, err
	}
	for _, v := range result {
		key := v.Name
		_, duplicate := mapping[key]
		if duplicate {
			return nil, fmt.Errorf("duplicate .Name: %s", key)
		}
		mapping[key] = v.Id
	}
	return mapping, nil
}

// GetByName calls [ProviderExchangeFiltersPreviewAPI.ExchangeFilterNameToIdMap] and returns a single [ExchangeFilter].
//
// Returns an error if there's more than one [ExchangeFilter] with the same .Name.
//
// Note: All [ExchangeFilter] instances are loaded into memory before returning matching by name.
//
// This method is generated by Databricks SDK Code Generator.
func (a *ProviderExchangeFiltersPreviewAPI) GetByName(ctx context.Context, name string) (*ExchangeFilter, error) {
	ctx = useragent.InContext(ctx, "sdk-feature", "get-by-name")
	result, err := a.ListAll(ctx, ListExchangeFiltersRequest{})
	if err != nil {
		return nil, err
	}
	tmp := map[string][]ExchangeFilter{}
	for _, v := range result {
		key := v.Name
		tmp[key] = append(tmp[key], v)
	}
	alternatives, ok := tmp[name]
	if !ok || len(alternatives) == 0 {
		return nil, fmt.Errorf("ExchangeFilter named '%s' does not exist", name)
	}
	if len(alternatives) > 1 {
		return nil, fmt.Errorf("there are %d instances of ExchangeFilter named '%s'", len(alternatives), name)
	}
	return &alternatives[0], nil
}

type ProviderExchangesPreviewInterface interface {

	// Add an exchange for listing.
	//
	// Associate an exchange with a listing
	AddListingToExchange(ctx context.Context, request AddExchangeForListingRequest) (*AddExchangeForListingResponse, error)

	// Create an exchange.
	//
	// Create an exchange
	Create(ctx context.Context, request CreateExchangeRequest) (*CreateExchangeResponse, error)

	// Delete an exchange.
	//
	// This removes a listing from marketplace.
	Delete(ctx context.Context, request DeleteExchangeRequest) error

	// Delete an exchange.
	//
	// This removes a listing from marketplace.
	DeleteById(ctx context.Context, id string) error

	// Remove an exchange for listing.
	//
	// Disassociate an exchange with a listing
	DeleteListingFromExchange(ctx context.Context, request RemoveExchangeForListingRequest) error

	// Remove an exchange for listing.
	//
	// Disassociate an exchange with a listing
	DeleteListingFromExchangeById(ctx context.Context, id string) error

	// Get an exchange.
	//
	// Get an exchange.
	Get(ctx context.Context, request GetExchangeRequest) (*GetExchangeResponse, error)

	// Get an exchange.
	//
	// Get an exchange.
	GetById(ctx context.Context, id string) (*GetExchangeResponse, error)

	// List exchanges.
	//
	// List exchanges visible to provider
	//
	// This method is generated by Databricks SDK Code Generator.
	List(ctx context.Context, request ListExchangesRequest) listing.Iterator[Exchange]

	// List exchanges.
	//
	// List exchanges visible to provider
	//
	// This method is generated by Databricks SDK Code Generator.
	ListAll(ctx context.Context, request ListExchangesRequest) ([]Exchange, error)

	// ExchangeNameToIdMap calls [ProviderExchangesPreviewAPI.ListAll] and creates a map of results with [Exchange].Name as key and [Exchange].Id as value.
	//
	// Returns an error if there's more than one [Exchange] with the same .Name.
	//
	// Note: All [Exchange] instances are loaded into memory before creating a map.
	//
	// This method is generated by Databricks SDK Code Generator.
	ExchangeNameToIdMap(ctx context.Context, request ListExchangesRequest) (map[string]string, error)

	// GetByName calls [ProviderExchangesPreviewAPI.ExchangeNameToIdMap] and returns a single [Exchange].
	//
	// Returns an error if there's more than one [Exchange] with the same .Name.
	//
	// Note: All [Exchange] instances are loaded into memory before returning matching by name.
	//
	// This method is generated by Databricks SDK Code Generator.
	GetByName(ctx context.Context, name string) (*Exchange, error)

	// List exchanges for listing.
	//
	// List exchanges associated with a listing
	//
	// This method is generated by Databricks SDK Code Generator.
	ListExchangesForListing(ctx context.Context, request ListExchangesForListingRequest) listing.Iterator[ExchangeListing]

	// List exchanges for listing.
	//
	// List exchanges associated with a listing
	//
	// This method is generated by Databricks SDK Code Generator.
	ListExchangesForListingAll(ctx context.Context, request ListExchangesForListingRequest) ([]ExchangeListing, error)

	// ExchangeListingExchangeNameToExchangeIdMap calls [ProviderExchangesPreviewAPI.ListExchangesForListingAll] and creates a map of results with [ExchangeListing].ExchangeName as key and [ExchangeListing].ExchangeId as value.
	//
	// Returns an error if there's more than one [ExchangeListing] with the same .ExchangeName.
	//
	// Note: All [ExchangeListing] instances are loaded into memory before creating a map.
	//
	// This method is generated by Databricks SDK Code Generator.
	ExchangeListingExchangeNameToExchangeIdMap(ctx context.Context, request ListExchangesForListingRequest) (map[string]string, error)

	// GetByExchangeName calls [ProviderExchangesPreviewAPI.ExchangeListingExchangeNameToExchangeIdMap] and returns a single [ExchangeListing].
	//
	// Returns an error if there's more than one [ExchangeListing] with the same .ExchangeName.
	//
	// Note: All [ExchangeListing] instances are loaded into memory before returning matching by name.
	//
	// This method is generated by Databricks SDK Code Generator.
	GetByExchangeName(ctx context.Context, name string) (*ExchangeListing, error)

	// List listings for exchange.
	//
	// List listings associated with an exchange
	//
	// This method is generated by Databricks SDK Code Generator.
	ListListingsForExchange(ctx context.Context, request ListListingsForExchangeRequest) listing.Iterator[ExchangeListing]

	// List listings for exchange.
	//
	// List listings associated with an exchange
	//
	// This method is generated by Databricks SDK Code Generator.
	ListListingsForExchangeAll(ctx context.Context, request ListListingsForExchangeRequest) ([]ExchangeListing, error)

	// ExchangeListingListingNameToListingIdMap calls [ProviderExchangesPreviewAPI.ListListingsForExchangeAll] and creates a map of results with [ExchangeListing].ListingName as key and [ExchangeListing].ListingId as value.
	//
	// Returns an error if there's more than one [ExchangeListing] with the same .ListingName.
	//
	// Note: All [ExchangeListing] instances are loaded into memory before creating a map.
	//
	// This method is generated by Databricks SDK Code Generator.
	ExchangeListingListingNameToListingIdMap(ctx context.Context, request ListListingsForExchangeRequest) (map[string]string, error)

	// GetByListingName calls [ProviderExchangesPreviewAPI.ExchangeListingListingNameToListingIdMap] and returns a single [ExchangeListing].
	//
	// Returns an error if there's more than one [ExchangeListing] with the same .ListingName.
	//
	// Note: All [ExchangeListing] instances are loaded into memory before returning matching by name.
	//
	// This method is generated by Databricks SDK Code Generator.
	GetByListingName(ctx context.Context, name string) (*ExchangeListing, error)

	// Update exchange.
	//
	// Update an exchange
	Update(ctx context.Context, request UpdateExchangeRequest) (*UpdateExchangeResponse, error)
}

func NewProviderExchangesPreview(client *client.DatabricksClient) *ProviderExchangesPreviewAPI {
	return &ProviderExchangesPreviewAPI{
		providerExchangesPreviewImpl: providerExchangesPreviewImpl{
			client: client,
		},
	}
}

// Marketplace exchanges allow providers to share their listings with a curated
// set of customers.
type ProviderExchangesPreviewAPI struct {
	providerExchangesPreviewImpl
}

// Delete an exchange.
//
// This removes a listing from marketplace.
func (a *ProviderExchangesPreviewAPI) DeleteById(ctx context.Context, id string) error {
	return a.providerExchangesPreviewImpl.Delete(ctx, DeleteExchangeRequest{
		Id: id,
	})
}

// Remove an exchange for listing.
//
// Disassociate an exchange with a listing
func (a *ProviderExchangesPreviewAPI) DeleteListingFromExchangeById(ctx context.Context, id string) error {
	return a.providerExchangesPreviewImpl.DeleteListingFromExchange(ctx, RemoveExchangeForListingRequest{
		Id: id,
	})
}

// Get an exchange.
//
// Get an exchange.
func (a *ProviderExchangesPreviewAPI) GetById(ctx context.Context, id string) (*GetExchangeResponse, error) {
	return a.providerExchangesPreviewImpl.Get(ctx, GetExchangeRequest{
		Id: id,
	})
}

// ExchangeNameToIdMap calls [ProviderExchangesPreviewAPI.ListAll] and creates a map of results with [Exchange].Name as key and [Exchange].Id as value.
//
// Returns an error if there's more than one [Exchange] with the same .Name.
//
// Note: All [Exchange] instances are loaded into memory before creating a map.
//
// This method is generated by Databricks SDK Code Generator.
func (a *ProviderExchangesPreviewAPI) ExchangeNameToIdMap(ctx context.Context, request ListExchangesRequest) (map[string]string, error) {
	ctx = useragent.InContext(ctx, "sdk-feature", "name-to-id")
	mapping := map[string]string{}
	result, err := a.ListAll(ctx, request)
	if err != nil {
		return nil, err
	}
	for _, v := range result {
		key := v.Name
		_, duplicate := mapping[key]
		if duplicate {
			return nil, fmt.Errorf("duplicate .Name: %s", key)
		}
		mapping[key] = v.Id
	}
	return mapping, nil
}

// GetByName calls [ProviderExchangesPreviewAPI.ExchangeNameToIdMap] and returns a single [Exchange].
//
// Returns an error if there's more than one [Exchange] with the same .Name.
//
// Note: All [Exchange] instances are loaded into memory before returning matching by name.
//
// This method is generated by Databricks SDK Code Generator.
func (a *ProviderExchangesPreviewAPI) GetByName(ctx context.Context, name string) (*Exchange, error) {
	ctx = useragent.InContext(ctx, "sdk-feature", "get-by-name")
	result, err := a.ListAll(ctx, ListExchangesRequest{})
	if err != nil {
		return nil, err
	}
	tmp := map[string][]Exchange{}
	for _, v := range result {
		key := v.Name
		tmp[key] = append(tmp[key], v)
	}
	alternatives, ok := tmp[name]
	if !ok || len(alternatives) == 0 {
		return nil, fmt.Errorf("Exchange named '%s' does not exist", name)
	}
	if len(alternatives) > 1 {
		return nil, fmt.Errorf("there are %d instances of Exchange named '%s'", len(alternatives), name)
	}
	return &alternatives[0], nil
}

// ExchangeListingExchangeNameToExchangeIdMap calls [ProviderExchangesPreviewAPI.ListExchangesForListingAll] and creates a map of results with [ExchangeListing].ExchangeName as key and [ExchangeListing].ExchangeId as value.
//
// Returns an error if there's more than one [ExchangeListing] with the same .ExchangeName.
//
// Note: All [ExchangeListing] instances are loaded into memory before creating a map.
//
// This method is generated by Databricks SDK Code Generator.
func (a *ProviderExchangesPreviewAPI) ExchangeListingExchangeNameToExchangeIdMap(ctx context.Context, request ListExchangesForListingRequest) (map[string]string, error) {
	ctx = useragent.InContext(ctx, "sdk-feature", "name-to-id")
	mapping := map[string]string{}
	result, err := a.ListExchangesForListingAll(ctx, request)
	if err != nil {
		return nil, err
	}
	for _, v := range result {
		key := v.ExchangeName
		_, duplicate := mapping[key]
		if duplicate {
			return nil, fmt.Errorf("duplicate .ExchangeName: %s", key)
		}
		mapping[key] = v.ExchangeId
	}
	return mapping, nil
}

// GetByExchangeName calls [ProviderExchangesPreviewAPI.ExchangeListingExchangeNameToExchangeIdMap] and returns a single [ExchangeListing].
//
// Returns an error if there's more than one [ExchangeListing] with the same .ExchangeName.
//
// Note: All [ExchangeListing] instances are loaded into memory before returning matching by name.
//
// This method is generated by Databricks SDK Code Generator.
func (a *ProviderExchangesPreviewAPI) GetByExchangeName(ctx context.Context, name string) (*ExchangeListing, error) {
	ctx = useragent.InContext(ctx, "sdk-feature", "get-by-name")
	result, err := a.ListExchangesForListingAll(ctx, ListExchangesForListingRequest{})
	if err != nil {
		return nil, err
	}
	tmp := map[string][]ExchangeListing{}
	for _, v := range result {
		key := v.ExchangeName
		tmp[key] = append(tmp[key], v)
	}
	alternatives, ok := tmp[name]
	if !ok || len(alternatives) == 0 {
		return nil, fmt.Errorf("ExchangeListing named '%s' does not exist", name)
	}
	if len(alternatives) > 1 {
		return nil, fmt.Errorf("there are %d instances of ExchangeListing named '%s'", len(alternatives), name)
	}
	return &alternatives[0], nil
}

// ExchangeListingListingNameToListingIdMap calls [ProviderExchangesPreviewAPI.ListListingsForExchangeAll] and creates a map of results with [ExchangeListing].ListingName as key and [ExchangeListing].ListingId as value.
//
// Returns an error if there's more than one [ExchangeListing] with the same .ListingName.
//
// Note: All [ExchangeListing] instances are loaded into memory before creating a map.
//
// This method is generated by Databricks SDK Code Generator.
func (a *ProviderExchangesPreviewAPI) ExchangeListingListingNameToListingIdMap(ctx context.Context, request ListListingsForExchangeRequest) (map[string]string, error) {
	ctx = useragent.InContext(ctx, "sdk-feature", "name-to-id")
	mapping := map[string]string{}
	result, err := a.ListListingsForExchangeAll(ctx, request)
	if err != nil {
		return nil, err
	}
	for _, v := range result {
		key := v.ListingName
		_, duplicate := mapping[key]
		if duplicate {
			return nil, fmt.Errorf("duplicate .ListingName: %s", key)
		}
		mapping[key] = v.ListingId
	}
	return mapping, nil
}

// GetByListingName calls [ProviderExchangesPreviewAPI.ExchangeListingListingNameToListingIdMap] and returns a single [ExchangeListing].
//
// Returns an error if there's more than one [ExchangeListing] with the same .ListingName.
//
// Note: All [ExchangeListing] instances are loaded into memory before returning matching by name.
//
// This method is generated by Databricks SDK Code Generator.
func (a *ProviderExchangesPreviewAPI) GetByListingName(ctx context.Context, name string) (*ExchangeListing, error) {
	ctx = useragent.InContext(ctx, "sdk-feature", "get-by-name")
	result, err := a.ListListingsForExchangeAll(ctx, ListListingsForExchangeRequest{})
	if err != nil {
		return nil, err
	}
	tmp := map[string][]ExchangeListing{}
	for _, v := range result {
		key := v.ListingName
		tmp[key] = append(tmp[key], v)
	}
	alternatives, ok := tmp[name]
	if !ok || len(alternatives) == 0 {
		return nil, fmt.Errorf("ExchangeListing named '%s' does not exist", name)
	}
	if len(alternatives) > 1 {
		return nil, fmt.Errorf("there are %d instances of ExchangeListing named '%s'", len(alternatives), name)
	}
	return &alternatives[0], nil
}

type ProviderFilesPreviewInterface interface {

	// Create a file.
	//
	// Create a file. Currently, only provider icons and attached notebooks are
	// supported.
	Create(ctx context.Context, request CreateFileRequest) (*CreateFileResponse, error)

	// Delete a file.
	//
	// Delete a file
	Delete(ctx context.Context, request DeleteFileRequest) error

	// Delete a file.
	//
	// Delete a file
	DeleteByFileId(ctx context.Context, fileId string) error

	// Get a file.
	//
	// Get a file
	Get(ctx context.Context, request GetFileRequest) (*GetFileResponse, error)

	// Get a file.
	//
	// Get a file
	GetByFileId(ctx context.Context, fileId string) (*GetFileResponse, error)

	// List files.
	//
	// List files attached to a parent entity.
	//
	// This method is generated by Databricks SDK Code Generator.
	List(ctx context.Context, request ListFilesRequest) listing.Iterator[FileInfo]

	// List files.
	//
	// List files attached to a parent entity.
	//
	// This method is generated by Databricks SDK Code Generator.
	ListAll(ctx context.Context, request ListFilesRequest) ([]FileInfo, error)

	// FileInfoDisplayNameToIdMap calls [ProviderFilesPreviewAPI.ListAll] and creates a map of results with [FileInfo].DisplayName as key and [FileInfo].Id as value.
	//
	// Returns an error if there's more than one [FileInfo] with the same .DisplayName.
	//
	// Note: All [FileInfo] instances are loaded into memory before creating a map.
	//
	// This method is generated by Databricks SDK Code Generator.
	FileInfoDisplayNameToIdMap(ctx context.Context, request ListFilesRequest) (map[string]string, error)

	// GetByDisplayName calls [ProviderFilesPreviewAPI.FileInfoDisplayNameToIdMap] and returns a single [FileInfo].
	//
	// Returns an error if there's more than one [FileInfo] with the same .DisplayName.
	//
	// Note: All [FileInfo] instances are loaded into memory before returning matching by name.
	//
	// This method is generated by Databricks SDK Code Generator.
	GetByDisplayName(ctx context.Context, name string) (*FileInfo, error)
}

func NewProviderFilesPreview(client *client.DatabricksClient) *ProviderFilesPreviewAPI {
	return &ProviderFilesPreviewAPI{
		providerFilesPreviewImpl: providerFilesPreviewImpl{
			client: client,
		},
	}
}

// Marketplace offers a set of file APIs for various purposes such as preview
// notebooks and provider icons.
type ProviderFilesPreviewAPI struct {
	providerFilesPreviewImpl
}

// Delete a file.
//
// Delete a file
func (a *ProviderFilesPreviewAPI) DeleteByFileId(ctx context.Context, fileId string) error {
	return a.providerFilesPreviewImpl.Delete(ctx, DeleteFileRequest{
		FileId: fileId,
	})
}

// Get a file.
//
// Get a file
func (a *ProviderFilesPreviewAPI) GetByFileId(ctx context.Context, fileId string) (*GetFileResponse, error) {
	return a.providerFilesPreviewImpl.Get(ctx, GetFileRequest{
		FileId: fileId,
	})
}

// FileInfoDisplayNameToIdMap calls [ProviderFilesPreviewAPI.ListAll] and creates a map of results with [FileInfo].DisplayName as key and [FileInfo].Id as value.
//
// Returns an error if there's more than one [FileInfo] with the same .DisplayName.
//
// Note: All [FileInfo] instances are loaded into memory before creating a map.
//
// This method is generated by Databricks SDK Code Generator.
func (a *ProviderFilesPreviewAPI) FileInfoDisplayNameToIdMap(ctx context.Context, request ListFilesRequest) (map[string]string, error) {
	ctx = useragent.InContext(ctx, "sdk-feature", "name-to-id")
	mapping := map[string]string{}
	result, err := a.ListAll(ctx, request)
	if err != nil {
		return nil, err
	}
	for _, v := range result {
		key := v.DisplayName
		_, duplicate := mapping[key]
		if duplicate {
			return nil, fmt.Errorf("duplicate .DisplayName: %s", key)
		}
		mapping[key] = v.Id
	}
	return mapping, nil
}

// GetByDisplayName calls [ProviderFilesPreviewAPI.FileInfoDisplayNameToIdMap] and returns a single [FileInfo].
//
// Returns an error if there's more than one [FileInfo] with the same .DisplayName.
//
// Note: All [FileInfo] instances are loaded into memory before returning matching by name.
//
// This method is generated by Databricks SDK Code Generator.
func (a *ProviderFilesPreviewAPI) GetByDisplayName(ctx context.Context, name string) (*FileInfo, error) {
	ctx = useragent.InContext(ctx, "sdk-feature", "get-by-name")
	result, err := a.ListAll(ctx, ListFilesRequest{})
	if err != nil {
		return nil, err
	}
	tmp := map[string][]FileInfo{}
	for _, v := range result {
		key := v.DisplayName
		tmp[key] = append(tmp[key], v)
	}
	alternatives, ok := tmp[name]
	if !ok || len(alternatives) == 0 {
		return nil, fmt.Errorf("FileInfo named '%s' does not exist", name)
	}
	if len(alternatives) > 1 {
		return nil, fmt.Errorf("there are %d instances of FileInfo named '%s'", len(alternatives), name)
	}
	return &alternatives[0], nil
}

type ProviderListingsPreviewInterface interface {

	// Create a listing.
	//
	// Create a new listing
	Create(ctx context.Context, request CreateListingRequest) (*CreateListingResponse, error)

	// Delete a listing.
	//
	// Delete a listing
	Delete(ctx context.Context, request DeleteListingRequest) error

	// Delete a listing.
	//
	// Delete a listing
	DeleteById(ctx context.Context, id string) error

	// Get a listing.
	//
	// Get a listing
	Get(ctx context.Context, request GetListingRequest) (*GetListingResponse, error)

	// Get a listing.
	//
	// Get a listing
	GetById(ctx context.Context, id string) (*GetListingResponse, error)

	// List listings.
	//
	// List listings owned by this provider
	//
	// This method is generated by Databricks SDK Code Generator.
	List(ctx context.Context, request GetListingsRequest) listing.Iterator[Listing]

	// List listings.
	//
	// List listings owned by this provider
	//
	// This method is generated by Databricks SDK Code Generator.
	ListAll(ctx context.Context, request GetListingsRequest) ([]Listing, error)

	// ListingSummaryNameToIdMap calls [ProviderListingsPreviewAPI.ListAll] and creates a map of results with [Listing].Summary.Name as key and [Listing].Id as value.
	//
	// Returns an error if there's more than one [Listing] with the same .Summary.Name.
	//
	// Note: All [Listing] instances are loaded into memory before creating a map.
	//
	// This method is generated by Databricks SDK Code Generator.
	ListingSummaryNameToIdMap(ctx context.Context, request GetListingsRequest) (map[string]string, error)

	// GetBySummaryName calls [ProviderListingsPreviewAPI.ListingSummaryNameToIdMap] and returns a single [Listing].
	//
	// Returns an error if there's more than one [Listing] with the same .Summary.Name.
	//
	// Note: All [Listing] instances are loaded into memory before returning matching by name.
	//
	// This method is generated by Databricks SDK Code Generator.
	GetBySummaryName(ctx context.Context, name string) (*Listing, error)

	// Update listing.
	//
	// Update a listing
	Update(ctx context.Context, request UpdateListingRequest) (*UpdateListingResponse, error)
}

func NewProviderListingsPreview(client *client.DatabricksClient) *ProviderListingsPreviewAPI {
	return &ProviderListingsPreviewAPI{
		providerListingsPreviewImpl: providerListingsPreviewImpl{
			client: client,
		},
	}
}

// Listings are the core entities in the Marketplace. They represent the
// products that are available for consumption.
type ProviderListingsPreviewAPI struct {
	providerListingsPreviewImpl
}

// Delete a listing.
//
// Delete a listing
func (a *ProviderListingsPreviewAPI) DeleteById(ctx context.Context, id string) error {
	return a.providerListingsPreviewImpl.Delete(ctx, DeleteListingRequest{
		Id: id,
	})
}

// Get a listing.
//
// Get a listing
func (a *ProviderListingsPreviewAPI) GetById(ctx context.Context, id string) (*GetListingResponse, error) {
	return a.providerListingsPreviewImpl.Get(ctx, GetListingRequest{
		Id: id,
	})
}

// ListingSummaryNameToIdMap calls [ProviderListingsPreviewAPI.ListAll] and creates a map of results with [Listing].Summary.Name as key and [Listing].Id as value.
//
// Returns an error if there's more than one [Listing] with the same .Summary.Name.
//
// Note: All [Listing] instances are loaded into memory before creating a map.
//
// This method is generated by Databricks SDK Code Generator.
func (a *ProviderListingsPreviewAPI) ListingSummaryNameToIdMap(ctx context.Context, request GetListingsRequest) (map[string]string, error) {
	ctx = useragent.InContext(ctx, "sdk-feature", "name-to-id")
	mapping := map[string]string{}
	result, err := a.ListAll(ctx, request)
	if err != nil {
		return nil, err
	}
	for _, v := range result {
		key := v.Summary.Name
		_, duplicate := mapping[key]
		if duplicate {
			return nil, fmt.Errorf("duplicate .Summary.Name: %s", key)
		}
		mapping[key] = v.Id
	}
	return mapping, nil
}

// GetBySummaryName calls [ProviderListingsPreviewAPI.ListingSummaryNameToIdMap] and returns a single [Listing].
//
// Returns an error if there's more than one [Listing] with the same .Summary.Name.
//
// Note: All [Listing] instances are loaded into memory before returning matching by name.
//
// This method is generated by Databricks SDK Code Generator.
func (a *ProviderListingsPreviewAPI) GetBySummaryName(ctx context.Context, name string) (*Listing, error) {
	ctx = useragent.InContext(ctx, "sdk-feature", "get-by-name")
	result, err := a.ListAll(ctx, GetListingsRequest{})
	if err != nil {
		return nil, err
	}
	tmp := map[string][]Listing{}
	for _, v := range result {
		key := v.Summary.Name
		tmp[key] = append(tmp[key], v)
	}
	alternatives, ok := tmp[name]
	if !ok || len(alternatives) == 0 {
		return nil, fmt.Errorf("Listing named '%s' does not exist", name)
	}
	if len(alternatives) > 1 {
		return nil, fmt.Errorf("there are %d instances of Listing named '%s'", len(alternatives), name)
	}
	return &alternatives[0], nil
}

type ProviderPersonalizationRequestsPreviewInterface interface {

	// All personalization requests across all listings.
	//
	// List personalization requests to this provider. This will return all
	// personalization requests, regardless of which listing they are for.
	//
	// This method is generated by Databricks SDK Code Generator.
	List(ctx context.Context, request ListAllPersonalizationRequestsRequest) listing.Iterator[PersonalizationRequest]

	// All personalization requests across all listings.
	//
	// List personalization requests to this provider. This will return all
	// personalization requests, regardless of which listing they are for.
	//
	// This method is generated by Databricks SDK Code Generator.
	ListAll(ctx context.Context, request ListAllPersonalizationRequestsRequest) ([]PersonalizationRequest, error)

	// Update personalization request status.
	//
	// Update personalization request. This method only permits updating the status
	// of the request.
	Update(ctx context.Context, request UpdatePersonalizationRequestRequest) (*UpdatePersonalizationRequestResponse, error)
}

func NewProviderPersonalizationRequestsPreview(client *client.DatabricksClient) *ProviderPersonalizationRequestsPreviewAPI {
	return &ProviderPersonalizationRequestsPreviewAPI{
		providerPersonalizationRequestsPreviewImpl: providerPersonalizationRequestsPreviewImpl{
			client: client,
		},
	}
}

// Personalization requests are an alternate to instantly available listings.
// Control the lifecycle of personalized solutions.
type ProviderPersonalizationRequestsPreviewAPI struct {
	providerPersonalizationRequestsPreviewImpl
}

type ProviderProviderAnalyticsDashboardsPreviewInterface interface {

	// Create provider analytics dashboard.
	//
	// Create provider analytics dashboard. Returns Marketplace specific `id`. Not
	// to be confused with the Lakeview dashboard id.
	Create(ctx context.Context) (*ProviderAnalyticsDashboard, error)

	// Get provider analytics dashboard.
	//
	// Get provider analytics dashboard.
	Get(ctx context.Context) (*ListProviderAnalyticsDashboardResponse, error)

	// Get latest version of provider analytics dashboard.
	//
	// Get latest version of provider analytics dashboard.
	GetLatestVersion(ctx context.Context) (*GetLatestVersionProviderAnalyticsDashboardResponse, error)

	// Update provider analytics dashboard.
	//
	// Update provider analytics dashboard.
	Update(ctx context.Context, request UpdateProviderAnalyticsDashboardRequest) (*UpdateProviderAnalyticsDashboardResponse, error)
}

func NewProviderProviderAnalyticsDashboardsPreview(client *client.DatabricksClient) *ProviderProviderAnalyticsDashboardsPreviewAPI {
	return &ProviderProviderAnalyticsDashboardsPreviewAPI{
		providerProviderAnalyticsDashboardsPreviewImpl: providerProviderAnalyticsDashboardsPreviewImpl{
			client: client,
		},
	}
}

// Manage templated analytics solution for providers.
type ProviderProviderAnalyticsDashboardsPreviewAPI struct {
	providerProviderAnalyticsDashboardsPreviewImpl
}

type ProviderProvidersPreviewInterface interface {

	// Create a provider.
	//
	// Create a provider
	Create(ctx context.Context, request CreateProviderRequest) (*CreateProviderResponse, error)

	// Delete provider.
	//
	// Delete provider
	Delete(ctx context.Context, request DeleteProviderRequest) error

	// Delete provider.
	//
	// Delete provider
	DeleteById(ctx context.Context, id string) error

	// Get provider.
	//
	// Get provider profile
	Get(ctx context.Context, request GetProviderRequest) (*GetProviderResponse, error)

	// Get provider.
	//
	// Get provider profile
	GetById(ctx context.Context, id string) (*GetProviderResponse, error)

	// List providers.
	//
	// List provider profiles for account.
	//
	// This method is generated by Databricks SDK Code Generator.
	List(ctx context.Context, request ListProvidersRequest) listing.Iterator[ProviderInfo]

	// List providers.
	//
	// List provider profiles for account.
	//
	// This method is generated by Databricks SDK Code Generator.
	ListAll(ctx context.Context, request ListProvidersRequest) ([]ProviderInfo, error)

	// ProviderInfoNameToIdMap calls [ProviderProvidersPreviewAPI.ListAll] and creates a map of results with [ProviderInfo].Name as key and [ProviderInfo].Id as value.
	//
	// Returns an error if there's more than one [ProviderInfo] with the same .Name.
	//
	// Note: All [ProviderInfo] instances are loaded into memory before creating a map.
	//
	// This method is generated by Databricks SDK Code Generator.
	ProviderInfoNameToIdMap(ctx context.Context, request ListProvidersRequest) (map[string]string, error)

	// GetByName calls [ProviderProvidersPreviewAPI.ProviderInfoNameToIdMap] and returns a single [ProviderInfo].
	//
	// Returns an error if there's more than one [ProviderInfo] with the same .Name.
	//
	// Note: All [ProviderInfo] instances are loaded into memory before returning matching by name.
	//
	// This method is generated by Databricks SDK Code Generator.
	GetByName(ctx context.Context, name string) (*ProviderInfo, error)

	// Update provider.
	//
	// Update provider profile
	Update(ctx context.Context, request UpdateProviderRequest) (*UpdateProviderResponse, error)
}

func NewProviderProvidersPreview(client *client.DatabricksClient) *ProviderProvidersPreviewAPI {
	return &ProviderProvidersPreviewAPI{
		providerProvidersPreviewImpl: providerProvidersPreviewImpl{
			client: client,
		},
	}
}

// Providers are entities that manage assets in Marketplace.
type ProviderProvidersPreviewAPI struct {
	providerProvidersPreviewImpl
}

// Delete provider.
//
// Delete provider
func (a *ProviderProvidersPreviewAPI) DeleteById(ctx context.Context, id string) error {
	return a.providerProvidersPreviewImpl.Delete(ctx, DeleteProviderRequest{
		Id: id,
	})
}

// Get provider.
//
// Get provider profile
func (a *ProviderProvidersPreviewAPI) GetById(ctx context.Context, id string) (*GetProviderResponse, error) {
	return a.providerProvidersPreviewImpl.Get(ctx, GetProviderRequest{
		Id: id,
	})
}

// ProviderInfoNameToIdMap calls [ProviderProvidersPreviewAPI.ListAll] and creates a map of results with [ProviderInfo].Name as key and [ProviderInfo].Id as value.
//
// Returns an error if there's more than one [ProviderInfo] with the same .Name.
//
// Note: All [ProviderInfo] instances are loaded into memory before creating a map.
//
// This method is generated by Databricks SDK Code Generator.
func (a *ProviderProvidersPreviewAPI) ProviderInfoNameToIdMap(ctx context.Context, request ListProvidersRequest) (map[string]string, error) {
	ctx = useragent.InContext(ctx, "sdk-feature", "name-to-id")
	mapping := map[string]string{}
	result, err := a.ListAll(ctx, request)
	if err != nil {
		return nil, err
	}
	for _, v := range result {
		key := v.Name
		_, duplicate := mapping[key]
		if duplicate {
			return nil, fmt.Errorf("duplicate .Name: %s", key)
		}
		mapping[key] = v.Id
	}
	return mapping, nil
}

// GetByName calls [ProviderProvidersPreviewAPI.ProviderInfoNameToIdMap] and returns a single [ProviderInfo].
//
// Returns an error if there's more than one [ProviderInfo] with the same .Name.
//
// Note: All [ProviderInfo] instances are loaded into memory before returning matching by name.
//
// This method is generated by Databricks SDK Code Generator.
func (a *ProviderProvidersPreviewAPI) GetByName(ctx context.Context, name string) (*ProviderInfo, error) {
	ctx = useragent.InContext(ctx, "sdk-feature", "get-by-name")
	result, err := a.ListAll(ctx, ListProvidersRequest{})
	if err != nil {
		return nil, err
	}
	tmp := map[string][]ProviderInfo{}
	for _, v := range result {
		key := v.Name
		tmp[key] = append(tmp[key], v)
	}
	alternatives, ok := tmp[name]
	if !ok || len(alternatives) == 0 {
		return nil, fmt.Errorf("ProviderInfo named '%s' does not exist", name)
	}
	if len(alternatives) > 1 {
		return nil, fmt.Errorf("there are %d instances of ProviderInfo named '%s'", len(alternatives), name)
	}
	return &alternatives[0], nil
}
